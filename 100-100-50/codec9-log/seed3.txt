2023-11-06 08:39:49 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-06 08:39:49 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-06 08:39:49 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-06 08:39:50 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-06 08:40:11 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-06 08:40:11 [main] [INFO]  KGenProgMain - GA started
2023-11-06 08:40:11 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-06 08:40:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, build-succeeded 7, build-failed 52, syntax-invalid 4, redundant 37
Fitness: max 0.98(2), min 0.49(2), ave 0.734
Test execution time: sum 3633 ms, max 805 ms, min 364 ms
----------------------------------------------------------------

2023-11-06 08:40:28 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-06 08:40:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 seconds
Variants: generated 100, build-succeeded 19, build-failed 55, syntax-invalid 12, redundant 14
Fitness: max 1(1), min 0.49(3), ave 0.743
Test execution time: sum 5738 ms, max 615 ms, min 169 ms
----------------------------------------------------------------

2023-11-06 08:40:46 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-06 08:41:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 13 seconds
Variants: generated 200, build-succeeded 63, build-failed 57, syntax-invalid 23, redundant 57
Fitness: max 1(1), min 0.235(1), ave 0.666
Test execution time: sum 15334 ms, max 548 ms, min 123 ms
----------------------------------------------------------------

2023-11-06 08:41:24 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-06 08:41:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 46 seconds
Variants: generated 200, build-succeeded 61, build-failed 61, syntax-invalid 20, redundant 58
Fitness: max 1(1), min 0.157(1), ave 0.773
Test execution time: sum 14892 ms, max 546 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 08:41:57 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-06 08:42:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 21 seconds
Variants: generated 200, build-succeeded 69, build-failed 65, syntax-invalid 11, redundant 55
Fitness: max 1(2), min 0.51(1), ave 0.881
Test execution time: sum 16885 ms, max 490 ms, min 150 ms
----------------------------------------------------------------

2023-11-06 08:42:33 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-06 08:43:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 57 seconds
Variants: generated 200, build-succeeded 70, build-failed 65, syntax-invalid 8, redundant 57
Fitness: max 1(3), min 0.275(1), ave 0.916
Test execution time: sum 17472 ms, max 504 ms, min 139 ms
----------------------------------------------------------------

2023-11-06 08:43:09 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-06 08:43:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 28 seconds
Variants: generated 200, build-succeeded 55, build-failed 64, syntax-invalid 14, redundant 67
Fitness: max 1(3), min 0.471(1), ave 0.949
Test execution time: sum 14361 ms, max 507 ms, min 171 ms
----------------------------------------------------------------

2023-11-06 08:43:39 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-06 08:44:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 57 seconds
Variants: generated 200, build-succeeded 58, build-failed 58, syntax-invalid 17, redundant 67
Fitness: max 1(1), min 0.49(1), ave 0.938
Test execution time: sum 15165 ms, max 399 ms, min 196 ms
----------------------------------------------------------------

2023-11-06 08:44:09 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-06 08:44:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 29 seconds
Variants: generated 200, build-succeeded 63, build-failed 57, syntax-invalid 19, redundant 61
Fitness: max 1(1), min 0.529(1), ave 0.949
Test execution time: sum 16529 ms, max 326 ms, min 166 ms
----------------------------------------------------------------

2023-11-06 08:44:40 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-06 08:45:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 3 seconds
Variants: generated 200, build-succeeded 65, build-failed 60, syntax-invalid 13, redundant 62
Fitness: max 0.98(47), min 0.471(1), ave 0.922
Test execution time: sum 16298 ms, max 544 ms, min 147 ms
----------------------------------------------------------------

2023-11-06 08:45:15 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-06 08:45:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 35 seconds
Variants: generated 200, build-succeeded 57, build-failed 66, syntax-invalid 20, redundant 57
Fitness: max 0.98(46), min 0.353(1), ave 0.94
Test execution time: sum 14320 ms, max 474 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 08:45:47 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-06 08:46:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 10 seconds
Variants: generated 200, build-succeeded 77, build-failed 57, syntax-invalid 19, redundant 47
Fitness: max 0.98(60), min 0.49(2), ave 0.935
Test execution time: sum 18644 ms, max 327 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 08:46:21 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-06 08:47:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 48 seconds
Variants: generated 200, build-succeeded 82, build-failed 60, syntax-invalid 17, redundant 41
Fitness: max 0.98(68), min 0.49(1), ave 0.953
Test execution time: sum 21585 ms, max 369 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 08:47:00 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-06 08:47:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 34 seconds
Variants: generated 200, build-succeeded 83, build-failed 60, syntax-invalid 20, redundant 37
Fitness: max 0.98(66), min 0.294(1), ave 0.948
Test execution time: sum 22442 ms, max 2445 ms, min 138 ms
----------------------------------------------------------------

2023-11-06 08:47:46 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-06 08:48:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 14 seconds
Variants: generated 200, build-succeeded 82, build-failed 62, syntax-invalid 17, redundant 39
Fitness: max 0.98(64), min 0.235(1), ave 0.926
Test execution time: sum 19945 ms, max 428 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 08:48:25 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-06 08:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 1 seconds
Variants: generated 200, build-succeeded 98, build-failed 57, syntax-invalid 18, redundant 27
Fitness: max 0.98(82), min 0.137(1), ave 0.942
Test execution time: sum 23659 ms, max 499 ms, min 156 ms
----------------------------------------------------------------

2023-11-06 08:49:12 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-06 08:50:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 50 seconds
Variants: generated 200, build-succeeded 99, build-failed 57, syntax-invalid 11, redundant 33
Fitness: max 0.98(77), min 0.294(1), ave 0.945
Test execution time: sum 23815 ms, max 1304 ms, min 80 ms
----------------------------------------------------------------

2023-11-06 08:50:01 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-06 08:50:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 34 seconds
Variants: generated 200, build-succeeded 85, build-failed 64, syntax-invalid 18, redundant 33
Fitness: max 1(1), min 0.49(1), ave 0.961
Test execution time: sum 20725 ms, max 1458 ms, min 172 ms
----------------------------------------------------------------

2023-11-06 08:50:45 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-06 08:51:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 24 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 14, redundant 18
Fitness: max 1(2), min 0.529(1), ave 0.949
Test execution time: sum 23329 ms, max 482 ms, min 145 ms
----------------------------------------------------------------

2023-11-06 08:51:35 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-06 08:52:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 10 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 12, redundant 25
Fitness: max 1(1), min 0.765(1), ave 0.971
Test execution time: sum 22851 ms, max 432 ms, min 135 ms
----------------------------------------------------------------

2023-11-06 08:52:22 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-06 08:53:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 59 seconds
Variants: generated 200, build-succeeded 105, build-failed 61, syntax-invalid 13, redundant 21
Fitness: max 0.98(87), min 0.49(1), ave 0.954
Test execution time: sum 23556 ms, max 465 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 08:53:10 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-06 08:54:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 16, redundant 12
Fitness: max 1(2), min 0.49(4), ave 0.95
Test execution time: sum 26760 ms, max 451 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 08:54:04 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-06 08:54:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 44 seconds
Variants: generated 200, build-succeeded 110, build-failed 53, syntax-invalid 17, redundant 20
Fitness: max 0.98(88), min 0.49(2), ave 0.944
Test execution time: sum 24972 ms, max 483 ms, min 131 ms
----------------------------------------------------------------

2023-11-06 08:54:56 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-06 08:55:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 29 seconds
Variants: generated 200, build-succeeded 92, build-failed 72, syntax-invalid 19, redundant 17
Fitness: max 0.98(82), min 0.49(1), ave 0.963
Test execution time: sum 20623 ms, max 458 ms, min 133 ms
----------------------------------------------------------------

2023-11-06 08:55:40 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-06 08:56:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 15 seconds
Variants: generated 200, build-succeeded 93, build-failed 71, syntax-invalid 17, redundant 19
Fitness: max 0.98(81), min 0.49(2), ave 0.957
Test execution time: sum 21297 ms, max 473 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 08:56:26 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-06 08:57:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 3 seconds
Variants: generated 200, build-succeeded 95, build-failed 61, syntax-invalid 19, redundant 25
Fitness: max 0.98(84), min 0.569(1), ave 0.965
Test execution time: sum 21477 ms, max 479 ms, min 133 ms
----------------------------------------------------------------

2023-11-06 08:57:15 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-06 08:58:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 50 seconds
Variants: generated 200, build-succeeded 97, build-failed 67, syntax-invalid 15, redundant 21
Fitness: max 0.98(86), min 0.294(1), ave 0.96
Test execution time: sum 22271 ms, max 591 ms, min 127 ms
----------------------------------------------------------------

2023-11-06 08:58:01 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-06 08:58:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 40 seconds
Variants: generated 200, build-succeeded 120, build-failed 56, syntax-invalid 12, redundant 12
Fitness: max 0.98(103), min 0.294(1), ave 0.951
Test execution time: sum 25124 ms, max 1175 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 08:58:52 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-06 08:59:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 57 seconds
Variants: generated 200, build-succeeded 97, build-failed 68, syntax-invalid 18, redundant 17
Fitness: max 1(1), min 0.824(1), ave 0.973
Test execution time: sum 8235 ms, max 183 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 08:59:09 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-06 08:59:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 13 seconds
Variants: generated 200, build-succeeded 100, build-failed 67, syntax-invalid 19, redundant 14
Fitness: max 0.98(88), min 0.294(2), ave 0.948
Test execution time: sum 7925 ms, max 157 ms, min 55 ms
----------------------------------------------------------------

2023-11-06 08:59:25 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-06 08:59:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 29 seconds
Variants: generated 200, build-succeeded 105, build-failed 62, syntax-invalid 22, redundant 11
Fitness: max 0.98(88), min 0.294(2), ave 0.95
Test execution time: sum 8177 ms, max 169 ms, min 51 ms
----------------------------------------------------------------

2023-11-06 08:59:41 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-06 08:59:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 46 seconds
Variants: generated 200, build-succeeded 102, build-failed 67, syntax-invalid 21, redundant 10
Fitness: max 0.98(89), min 0.353(1), ave 0.957
Test execution time: sum 8054 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-11-06 08:59:57 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-06 09:00:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 3 seconds
Variants: generated 200, build-succeeded 102, build-failed 65, syntax-invalid 23, redundant 10
Fitness: max 0.98(83), min 0.294(3), ave 0.945
Test execution time: sum 9286 ms, max 1258 ms, min 51 ms
----------------------------------------------------------------

2023-11-06 09:00:14 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-06 09:00:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 20 seconds
Variants: generated 200, build-succeeded 104, build-failed 57, syntax-invalid 26, redundant 13
Fitness: max 0.98(93), min 0.294(1), ave 0.955
Test execution time: sum 8227 ms, max 200 ms, min 52 ms
----------------------------------------------------------------

2023-11-06 09:00:31 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-06 09:00:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 39 seconds
Variants: generated 200, build-succeeded 97, build-failed 62, syntax-invalid 28, redundant 13
Fitness: max 0.98(82), min 0.294(3), ave 0.93
Test execution time: sum 10306 ms, max 2629 ms, min 52 ms
----------------------------------------------------------------

2023-11-06 09:00:50 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-06 09:01:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 56 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 22, redundant 7
Fitness: max 0.98(90), min 0.294(2), ave 0.94
Test execution time: sum 8959 ms, max 190 ms, min 50 ms
----------------------------------------------------------------

2023-11-06 09:01:07 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-06 09:01:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 11 seconds
Variants: generated 200, build-succeeded 89, build-failed 69, syntax-invalid 29, redundant 13
Fitness: max 0.98(80), min 0.765(1), ave 0.969
Test execution time: sum 7037 ms, max 149 ms, min 64 ms
----------------------------------------------------------------

2023-11-06 09:01:22 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-06 09:01:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 26 seconds
Variants: generated 200, build-succeeded 97, build-failed 57, syntax-invalid 34, redundant 12
Fitness: max 0.98(80), min 0.294(1), ave 0.949
Test execution time: sum 7670 ms, max 142 ms, min 53 ms
----------------------------------------------------------------

2023-11-06 09:01:38 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-06 09:01:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 45 seconds
Variants: generated 200, build-succeeded 113, build-failed 54, syntax-invalid 25, redundant 8
Fitness: max 0.98(88), min 0.549(2), ave 0.953
Test execution time: sum 9497 ms, max 645 ms, min 66 ms
----------------------------------------------------------------

2023-11-06 09:01:56 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-06 09:02:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 1 seconds
Variants: generated 200, build-succeeded 89, build-failed 66, syntax-invalid 29, redundant 16
Fitness: max 1(1), min 0.549(2), ave 0.964
Test execution time: sum 8409 ms, max 764 ms, min 66 ms
----------------------------------------------------------------

2023-11-06 09:02:12 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-06 09:02:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 18 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 31, redundant 13
Fitness: max 1(1), min 0.49(2), ave 0.938
Test execution time: sum 8439 ms, max 671 ms, min 57 ms
----------------------------------------------------------------

2023-11-06 09:02:29 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-06 09:02:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 34 seconds
Variants: generated 200, build-succeeded 94, build-failed 63, syntax-invalid 26, redundant 17
Fitness: max 1(1), min 0.216(1), ave 0.927
Test execution time: sum 8079 ms, max 608 ms, min 51 ms
----------------------------------------------------------------

2023-11-06 09:02:45 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-06 09:03:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 50 seconds
Variants: generated 200, build-succeeded 96, build-failed 72, syntax-invalid 27, redundant 5
Fitness: max 0.98(80), min 0.667(1), ave 0.958
Test execution time: sum 7627 ms, max 167 ms, min 58 ms
----------------------------------------------------------------

2023-11-06 09:03:01 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-06 09:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 8 seconds
Variants: generated 200, build-succeeded 105, build-failed 54, syntax-invalid 30, redundant 11
Fitness: max 1(1), min 0.294(1), ave 0.937
Test execution time: sum 8746 ms, max 158 ms, min 59 ms
----------------------------------------------------------------

2023-11-06 09:03:19 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-06 09:03:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 23 seconds
Variants: generated 200, build-succeeded 93, build-failed 69, syntax-invalid 27, redundant 11
Fitness: max 1(3), min 0.608(1), ave 0.965
Test execution time: sum 7449 ms, max 137 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:03:35 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-06 09:03:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 39 seconds
Variants: generated 200, build-succeeded 93, build-failed 71, syntax-invalid 27, redundant 9
Fitness: max 1(2), min 0.471(1), ave 0.955
Test execution time: sum 7402 ms, max 162 ms, min 52 ms
----------------------------------------------------------------

2023-11-06 09:03:50 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-06 09:04:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 53 seconds
Variants: generated 200, build-succeeded 88, build-failed 66, syntax-invalid 32, redundant 14
Fitness: max 1(2), min 0.471(1), ave 0.953
Test execution time: sum 6981 ms, max 205 ms, min 57 ms
----------------------------------------------------------------

2023-11-06 09:04:05 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-06 09:04:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 9 seconds
Variants: generated 200, build-succeeded 97, build-failed 56, syntax-invalid 30, redundant 17
Fitness: max 0.98(77), min 0.49(1), ave 0.945
Test execution time: sum 7787 ms, max 200 ms, min 62 ms
----------------------------------------------------------------

2023-11-06 09:04:20 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-06 09:04:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 25 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 32, redundant 10
Fitness: max 1(2), min 0.294(1), ave 0.949
Test execution time: sum 7911 ms, max 152 ms, min 53 ms
----------------------------------------------------------------

2023-11-06 09:04:37 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-06 09:04:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 43 seconds
Variants: generated 200, build-succeeded 109, build-failed 54, syntax-invalid 23, redundant 14
Fitness: max 1(1), min 0.451(1), ave 0.944
Test execution time: sum 9111 ms, max 173 ms, min 60 ms
----------------------------------------------------------------

2023-11-06 09:04:54 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-06 09:05:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 59 seconds
Variants: generated 200, build-succeeded 93, build-failed 62, syntax-invalid 28, redundant 17
Fitness: max 1(1), min 0.725(1), ave 0.966
Test execution time: sum 7620 ms, max 208 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 09:05:10 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-06 09:05:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 18 seconds
Variants: generated 200, build-succeeded 96, build-failed 58, syntax-invalid 28, redundant 18
Fitness: max 0.98(76), min 0.353(1), ave 0.956
Test execution time: sum 9433 ms, max 1226 ms, min 54 ms
----------------------------------------------------------------

2023-11-06 09:05:29 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-06 09:05:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 37 seconds
Variants: generated 200, build-succeeded 101, build-failed 54, syntax-invalid 26, redundant 19
Fitness: max 0.98(82), min 0.49(4), ave 0.944
Test execution time: sum 9804 ms, max 1238 ms, min 53 ms
----------------------------------------------------------------

2023-11-06 09:05:48 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-06 09:06:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 53 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 27, redundant 15
Fitness: max 0.98(81), min 0.294(1), ave 0.94
Test execution time: sum 7906 ms, max 169 ms, min 54 ms
----------------------------------------------------------------

2023-11-06 09:06:04 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-06 09:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 16 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 13, redundant 14
Fitness: max 0.98(94), min 0.549(1), ave 0.957
Test execution time: sum 12009 ms, max 323 ms, min 64 ms
----------------------------------------------------------------

2023-11-06 09:06:28 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-06 09:06:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 38 seconds
Variants: generated 200, build-succeeded 99, build-failed 59, syntax-invalid 18, redundant 24
Fitness: max 0.98(77), min 0.157(1), ave 0.942
Test execution time: sum 10271 ms, max 208 ms, min 65 ms
----------------------------------------------------------------

2023-11-06 09:06:50 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-06 09:07:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 2 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 19, redundant 17
Fitness: max 1(1), min 0.49(1), ave 0.945
Test execution time: sum 12475 ms, max 1283 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:07:13 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-06 09:07:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 24 seconds
Variants: generated 200, build-succeeded 99, build-failed 53, syntax-invalid 29, redundant 19
Fitness: max 0.98(80), min 0.549(1), ave 0.955
Test execution time: sum 10460 ms, max 190 ms, min 92 ms
----------------------------------------------------------------

2023-11-06 09:07:36 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-06 09:07:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 43 seconds
Variants: generated 200, build-succeeded 84, build-failed 67, syntax-invalid 24, redundant 25
Fitness: max 0.98(69), min 0.49(3), ave 0.946
Test execution time: sum 8327 ms, max 173 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 09:07:54 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-06 09:08:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 4 seconds
Variants: generated 200, build-succeeded 99, build-failed 63, syntax-invalid 22, redundant 16
Fitness: max 0.98(87), min 0.255(1), ave 0.952
Test execution time: sum 10140 ms, max 195 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:08:15 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-06 09:08:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 25 seconds
Variants: generated 200, build-succeeded 102, build-failed 58, syntax-invalid 13, redundant 27
Fitness: max 1(1), min 0.765(1), ave 0.967
Test execution time: sum 10362 ms, max 236 ms, min 83 ms
----------------------------------------------------------------

2023-11-06 09:08:36 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-06 09:08:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 46 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 21, redundant 23
Fitness: max 0.98(81), min 0.608(1), ave 0.953
Test execution time: sum 9688 ms, max 195 ms, min 79 ms
----------------------------------------------------------------

2023-11-06 09:08:58 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-06 09:09:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 8 seconds
Variants: generated 200, build-succeeded 104, build-failed 53, syntax-invalid 26, redundant 17
Fitness: max 0.98(83), min 0.49(2), ave 0.946
Test execution time: sum 10499 ms, max 173 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:09:19 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-06 09:09:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 33 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 21, redundant 18
Fitness: max 0.98(81), min 0.549(1), ave 0.951
Test execution time: sum 12077 ms, max 1264 ms, min 83 ms
----------------------------------------------------------------

2023-11-06 09:09:44 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-06 09:10:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 58 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 12, redundant 21
Fitness: max 0.98(100), min 0.157(1), ave 0.96
Test execution time: sum 12270 ms, max 247 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:10:09 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-06 09:10:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 23 seconds
Variants: generated 200, build-succeeded 107, build-failed 53, syntax-invalid 18, redundant 22
Fitness: max 0.98(83), min 0.353(1), ave 0.935
Test execution time: sum 12178 ms, max 1263 ms, min 73 ms
----------------------------------------------------------------

2023-11-06 09:10:34 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-06 09:10:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 46 seconds
Variants: generated 200, build-succeeded 106, build-failed 47, syntax-invalid 20, redundant 27
Fitness: max 0.98(83), min 0.549(1), ave 0.947
Test execution time: sum 10811 ms, max 206 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 09:10:57 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-06 09:11:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 7 seconds
Variants: generated 200, build-succeeded 100, build-failed 57, syntax-invalid 25, redundant 18
Fitness: max 0.98(84), min 0.667(1), ave 0.96
Test execution time: sum 10032 ms, max 173 ms, min 78 ms
----------------------------------------------------------------

2023-11-06 09:11:18 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-06 09:11:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 28 seconds
Variants: generated 200, build-succeeded 86, build-failed 70, syntax-invalid 28, redundant 16
Fitness: max 0.98(72), min 0.667(1), ave 0.961
Test execution time: sum 9302 ms, max 595 ms, min 84 ms
----------------------------------------------------------------

2023-11-06 09:11:39 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-06 09:12:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 51 seconds
Variants: generated 200, build-succeeded 108, build-failed 61, syntax-invalid 15, redundant 16
Fitness: max 1(1), min 0.588(1), ave 0.96
Test execution time: sum 11009 ms, max 203 ms, min 83 ms
----------------------------------------------------------------

2023-11-06 09:12:02 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-06 09:12:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 13 seconds
Variants: generated 200, build-succeeded 112, build-failed 52, syntax-invalid 16, redundant 20
Fitness: max 0.98(92), min 0.353(1), ave 0.948
Test execution time: sum 11207 ms, max 199 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:12:25 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-06 09:12:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 36 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 20, redundant 13
Fitness: max 0.98(90), min 0.235(1), ave 0.956
Test execution time: sum 10622 ms, max 203 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:12:48 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-06 09:13:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 1 seconds
Variants: generated 200, build-succeeded 118, build-failed 47, syntax-invalid 14, redundant 21
Fitness: max 0.98(99), min 0.216(1), ave 0.946
Test execution time: sum 12374 ms, max 200 ms, min 64 ms
----------------------------------------------------------------

2023-11-06 09:13:12 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-06 09:13:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 24 seconds
Variants: generated 200, build-succeeded 97, build-failed 62, syntax-invalid 20, redundant 21
Fitness: max 0.98(84), min 0.569(1), ave 0.963
Test execution time: sum 10416 ms, max 220 ms, min 85 ms
----------------------------------------------------------------

2023-11-06 09:13:35 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-06 09:13:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 48 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 14, redundant 25
Fitness: max 0.98(93), min 0.353(1), ave 0.952
Test execution time: sum 11521 ms, max 271 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:13:59 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-06 09:14:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 11 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 16, redundant 21
Fitness: max 0.98(91), min 0.49(2), ave 0.957
Test execution time: sum 10795 ms, max 207 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:14:22 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-06 09:14:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 33 seconds
Variants: generated 200, build-succeeded 98, build-failed 61, syntax-invalid 22, redundant 19
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 10114 ms, max 219 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:14:45 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-06 09:15:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 56 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 11, redundant 22
Fitness: max 0.98(92), min 0.588(1), ave 0.957
Test execution time: sum 11053 ms, max 174 ms, min 73 ms
----------------------------------------------------------------

2023-11-06 09:15:07 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-06 09:15:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 18 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 21, redundant 16
Fitness: max 0.98(87), min 0.353(1), ave 0.949
Test execution time: sum 10561 ms, max 212 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:15:30 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-06 09:15:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 45 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 16, redundant 19
Fitness: max 0.98(88), min 0.49(1), ave 0.953
Test execution time: sum 12597 ms, max 1350 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:15:57 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-06 09:16:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 8 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 13, redundant 22
Fitness: max 0.98(96), min 0.549(1), ave 0.961
Test execution time: sum 10920 ms, max 170 ms, min 74 ms
----------------------------------------------------------------

2023-11-06 09:16:19 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-06 09:16:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 32 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 18, redundant 17
Fitness: max 0.98(91), min 0.765(1), ave 0.963
Test execution time: sum 11201 ms, max 201 ms, min 91 ms
----------------------------------------------------------------

2023-11-06 09:16:44 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-06 09:17:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 54 seconds
Variants: generated 200, build-succeeded 96, build-failed 71, syntax-invalid 22, redundant 11
Fitness: max 1(1), min 0.549(1), ave 0.959
Test execution time: sum 9885 ms, max 206 ms, min 84 ms
----------------------------------------------------------------

2023-11-06 09:17:06 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-06 09:17:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 16 seconds
Variants: generated 200, build-succeeded 94, build-failed 67, syntax-invalid 23, redundant 16
Fitness: max 1(2), min 0.49(1), ave 0.961
Test execution time: sum 9697 ms, max 221 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 09:17:27 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-06 09:17:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 41 seconds
Variants: generated 200, build-succeeded 115, build-failed 54, syntax-invalid 14, redundant 17
Fitness: max 0.98(98), min 0.333(1), ave 0.949
Test execution time: sum 11693 ms, max 212 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:17:52 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-06 09:18:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 7 seconds
Variants: generated 200, build-succeeded 118, build-failed 48, syntax-invalid 9, redundant 25
Fitness: max 1(1), min 0.333(1), ave 0.952
Test execution time: sum 12710 ms, max 737 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:18:18 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-06 09:18:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 34 seconds
Variants: generated 200, build-succeeded 118, build-failed 43, syntax-invalid 13, redundant 26
Fitness: max 0.98(104), min 0.549(1), ave 0.964
Test execution time: sum 12878 ms, max 710 ms, min 75 ms
----------------------------------------------------------------

2023-11-06 09:18:46 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-06 09:19:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 0 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 13, redundant 22
Fitness: max 1(1), min 0.569(1), ave 0.966
Test execution time: sum 11311 ms, max 778 ms, min 73 ms
----------------------------------------------------------------

2023-11-06 09:19:11 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-06 09:19:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 22 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 14, redundant 30
Fitness: max 1(1), min 0.667(1), ave 0.966
Test execution time: sum 10231 ms, max 202 ms, min 86 ms
----------------------------------------------------------------

2023-11-06 09:19:33 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-06 09:20:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 49 seconds
Variants: generated 200, build-succeeded 107, build-failed 53, syntax-invalid 13, redundant 27
Fitness: max 0.98(87), min 0.49(1), ave 0.959
Test execution time: sum 13417 ms, max 1156 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 09:20:01 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-06 09:20:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 12 seconds
Variants: generated 200, build-succeeded 97, build-failed 68, syntax-invalid 13, redundant 22
Fitness: max 0.98(85), min 0.333(1), ave 0.957
Test execution time: sum 10140 ms, max 220 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:20:24 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-06 09:20:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 37 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 25, redundant 21
Fitness: max 0.98(80), min 0.569(1), ave 0.954
Test execution time: sum 11017 ms, max 770 ms, min 66 ms
----------------------------------------------------------------

2023-11-06 09:20:48 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-06 09:21:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 0 seconds
Variants: generated 200, build-succeeded 97, build-failed 56, syntax-invalid 20, redundant 27
Fitness: max 0.98(77), min 0.49(3), ave 0.946
Test execution time: sum 11690 ms, max 1380 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:21:11 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-06 09:21:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 24 seconds
Variants: generated 200, build-succeeded 104, build-failed 53, syntax-invalid 19, redundant 24
Fitness: max 0.98(91), min 0.549(1), ave 0.957
Test execution time: sum 11473 ms, max 875 ms, min 78 ms
----------------------------------------------------------------

2023-11-06 09:21:36 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-06 09:21:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 48 seconds
Variants: generated 200, build-succeeded 95, build-failed 64, syntax-invalid 21, redundant 20
Fitness: max 0.98(85), min 0.49(1), ave 0.962
Test execution time: sum 10026 ms, max 241 ms, min 79 ms
----------------------------------------------------------------

2023-11-06 09:22:00 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-06 09:22:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 14 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 15, redundant 13
Fitness: max 1(1), min 0.549(2), ave 0.951
Test execution time: sum 11883 ms, max 205 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:22:25 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-06 09:22:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 37 seconds
Variants: generated 200, build-succeeded 104, build-failed 53, syntax-invalid 26, redundant 17
Fitness: max 1(2), min 0.314(1), ave 0.938
Test execution time: sum 10626 ms, max 202 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:22:49 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-06 09:23:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 5 seconds
Variants: generated 200, build-succeeded 113, build-failed 56, syntax-invalid 18, redundant 13
Fitness: max 0.98(101), min 0.765(1), ave 0.968
Test execution time: sum 12980 ms, max 749 ms, min 81 ms
----------------------------------------------------------------

2023-11-06 09:23:17 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-06 09:23:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 31 seconds
Variants: generated 200, build-succeeded 114, build-failed 51, syntax-invalid 7, redundant 28
Fitness: max 1(1), min 0.569(1), ave 0.955
Test execution time: sum 11692 ms, max 227 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:23:42 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-06 09:24:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 55 seconds
Variants: generated 200, build-succeeded 96, build-failed 70, syntax-invalid 12, redundant 22
Fitness: max 0.98(87), min 0.765(3), ave 0.969
Test execution time: sum 9950 ms, max 206 ms, min 83 ms
----------------------------------------------------------------

2023-11-06 09:24:07 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-06 09:24:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 23 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 7, redundant 21
Fitness: max 0.98(100), min 0.49(3), ave 0.95
Test execution time: sum 13036 ms, max 858 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:24:34 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-06 09:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 48 seconds
Variants: generated 200, build-succeeded 106, build-failed 63, syntax-invalid 11, redundant 20
Fitness: max 1(1), min 0.569(1), ave 0.971
Test execution time: sum 11095 ms, max 169 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 09:24:59 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-06 09:25:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 14 seconds
Variants: generated 200, build-succeeded 110, build-failed 50, syntax-invalid 13, redundant 27
Fitness: max 0.98(93), min 0.49(3), ave 0.952
Test execution time: sum 11485 ms, max 202 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:25:25 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-06 09:25:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 40 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 14, redundant 20
Fitness: max 0.98(92), min 0.49(1), ave 0.959
Test execution time: sum 11545 ms, max 210 ms, min 74 ms
----------------------------------------------------------------

2023-11-06 09:25:51 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-06 09:26:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 7 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 13, redundant 22
Fitness: max 1(1), min 0.49(1), ave 0.958
Test execution time: sum 12306 ms, max 993 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:26:18 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-06 09:26:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 31 seconds
Variants: generated 200, build-succeeded 104, build-failed 51, syntax-invalid 28, redundant 17
Fitness: max 0.98(92), min 0.353(1), ave 0.96
Test execution time: sum 10842 ms, max 170 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 09:26:42 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-06 09:27:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 57 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 17, redundant 13
Fitness: max 0.98(95), min 0.471(3), ave 0.944
Test execution time: sum 11847 ms, max 207 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:27:09 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-06 09:27:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 25 seconds
Variants: generated 200, build-succeeded 115, build-failed 53, syntax-invalid 18, redundant 14
Fitness: max 0.98(98), min 0.549(1), ave 0.956
Test execution time: sum 12720 ms, max 764 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:27:36 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-06 09:28:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 50 seconds
Variants: generated 200, build-succeeded 105, build-failed 53, syntax-invalid 24, redundant 18
Fitness: max 0.98(86), min 0.471(1), ave 0.95
Test execution time: sum 10946 ms, max 216 ms, min 64 ms
----------------------------------------------------------------

2023-11-06 09:28:02 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-06 09:28:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 16 seconds
Variants: generated 200, build-succeeded 96, build-failed 58, syntax-invalid 26, redundant 20
Fitness: max 0.98(90), min 0.667(1), ave 0.974
Test execution time: sum 10688 ms, max 750 ms, min 92 ms
----------------------------------------------------------------

2023-11-06 09:28:27 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-06 09:28:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 43 seconds
Variants: generated 200, build-succeeded 102, build-failed 49, syntax-invalid 23, redundant 26
Fitness: max 0.98(91), min 0.275(1), ave 0.951
Test execution time: sum 11103 ms, max 711 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:28:54 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-06 09:29:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 6 seconds
Variants: generated 200, build-succeeded 94, build-failed 63, syntax-invalid 30, redundant 13
Fitness: max 0.98(83), min 0.49(2), ave 0.955
Test execution time: sum 9750 ms, max 209 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:29:17 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-06 09:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 35 seconds
Variants: generated 200, build-succeeded 96, build-failed 62, syntax-invalid 31, redundant 11
Fitness: max 0.98(78), min 0.529(1), ave 0.955
Test execution time: sum 12725 ms, max 2832 ms, min 80 ms
----------------------------------------------------------------

2023-11-06 09:29:46 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-06 09:30:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 1 seconds
Variants: generated 200, build-succeeded 104, build-failed 62, syntax-invalid 17, redundant 17
Fitness: max 0.98(91), min 0.314(1), ave 0.962
Test execution time: sum 11402 ms, max 723 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:30:12 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-06 09:30:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 28 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 28, redundant 8
Fitness: max 0.98(92), min 0.314(1), ave 0.954
Test execution time: sum 11674 ms, max 209 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:30:39 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-06 09:31:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 55 seconds
Variants: generated 200, build-succeeded 119, build-failed 58, syntax-invalid 19, redundant 4
Fitness: max 0.98(104), min 0.471(1), ave 0.958
Test execution time: sum 12177 ms, max 218 ms, min 66 ms
----------------------------------------------------------------

2023-11-06 09:31:07 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-06 09:31:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 23 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 18, redundant 10
Fitness: max 0.98(94), min 0.353(1), ave 0.949
Test execution time: sum 12387 ms, max 746 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:31:35 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-06 09:32:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 51 seconds
Variants: generated 200, build-succeeded 115, build-failed 46, syntax-invalid 16, redundant 23
Fitness: max 0.98(97), min 0.235(1), ave 0.953
Test execution time: sum 13042 ms, max 1214 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:32:02 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-06 09:32:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 19 seconds
Variants: generated 200, build-succeeded 100, build-failed 61, syntax-invalid 16, redundant 23
Fitness: max 0.98(91), min 0.49(1), ave 0.966
Test execution time: sum 12077 ms, max 835 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:32:30 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-06 09:32:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 46 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 16, redundant 18
Fitness: max 0.98(91), min 0.765(1), ave 0.967
Test execution time: sum 12120 ms, max 784 ms, min 84 ms
----------------------------------------------------------------

2023-11-06 09:32:57 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-06 09:33:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 10 seconds
Variants: generated 200, build-succeeded 101, build-failed 61, syntax-invalid 16, redundant 22
Fitness: max 1(1), min 0.353(1), ave 0.966
Test execution time: sum 10342 ms, max 216 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:33:22 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-06 09:33:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 35 seconds
Variants: generated 200, build-succeeded 95, build-failed 65, syntax-invalid 23, redundant 17
Fitness: max 1(1), min 0.549(1), ave 0.962
Test execution time: sum 10326 ms, max 690 ms, min 73 ms
----------------------------------------------------------------

2023-11-06 09:33:47 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-06 09:34:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 2 seconds
Variants: generated 200, build-succeeded 112, build-failed 53, syntax-invalid 11, redundant 24
Fitness: max 0.98(100), min 0.549(1), ave 0.965
Test execution time: sum 11716 ms, max 214 ms, min 88 ms
----------------------------------------------------------------

2023-11-06 09:34:13 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-06 09:34:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 26 seconds
Variants: generated 200, build-succeeded 101, build-failed 60, syntax-invalid 23, redundant 16
Fitness: max 0.98(85), min 0.549(1), ave 0.956
Test execution time: sum 10311 ms, max 169 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:34:37 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-06 09:35:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 50 seconds
Variants: generated 200, build-succeeded 88, build-failed 61, syntax-invalid 27, redundant 24
Fitness: max 0.98(74), min 0.51(1), ave 0.957
Test execution time: sum 9241 ms, max 235 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:35:01 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-06 09:35:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 16 seconds
Variants: generated 200, build-succeeded 96, build-failed 65, syntax-invalid 22, redundant 17
Fitness: max 0.98(86), min 0.275(1), ave 0.96
Test execution time: sum 10844 ms, max 831 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:35:27 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-06 09:35:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 43 seconds
Variants: generated 200, build-succeeded 104, build-failed 61, syntax-invalid 8, redundant 27
Fitness: max 0.98(91), min 0.824(1), ave 0.968
Test execution time: sum 11393 ms, max 734 ms, min 91 ms
----------------------------------------------------------------

2023-11-06 09:35:54 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-06 09:36:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 10 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 13, redundant 23
Fitness: max 1(1), min 0.569(2), ave 0.956
Test execution time: sum 11693 ms, max 204 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:36:21 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-06 09:36:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 38 seconds
Variants: generated 200, build-succeeded 100, build-failed 66, syntax-invalid 11, redundant 23
Fitness: max 0.98(86), min 0.275(1), ave 0.952
Test execution time: sum 12753 ms, max 2603 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:36:50 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-06 09:37:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 5 seconds
Variants: generated 200, build-succeeded 100, build-failed 67, syntax-invalid 13, redundant 20
Fitness: max 1(1), min 0.49(1), ave 0.967
Test execution time: sum 10642 ms, max 213 ms, min 74 ms
----------------------------------------------------------------

2023-11-06 09:37:16 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-06 09:37:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 28 seconds
Variants: generated 200, build-succeeded 82, build-failed 70, syntax-invalid 21, redundant 27
Fitness: max 0.98(71), min 0.275(1), ave 0.946
Test execution time: sum 8527 ms, max 200 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:37:39 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-06 09:38:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 52 seconds
Variants: generated 200, build-succeeded 86, build-failed 56, syntax-invalid 24, redundant 34
Fitness: max 0.98(70), min 0.49(2), ave 0.95
Test execution time: sum 8905 ms, max 179 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:38:03 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-06 09:38:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 16 seconds
Variants: generated 200, build-succeeded 96, build-failed 55, syntax-invalid 22, redundant 27
Fitness: max 0.98(78), min 0.569(1), ave 0.954
Test execution time: sum 9920 ms, max 195 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 09:38:28 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-06 09:38:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 41 seconds
Variants: generated 200, build-succeeded 91, build-failed 67, syntax-invalid 19, redundant 23
Fitness: max 0.98(82), min 0.49(2), ave 0.963
Test execution time: sum 9624 ms, max 205 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:38:53 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-06 09:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 9 seconds
Variants: generated 200, build-succeeded 103, build-failed 53, syntax-invalid 25, redundant 19
Fitness: max 0.98(92), min 0.569(1), ave 0.969
Test execution time: sum 12876 ms, max 1555 ms, min 74 ms
----------------------------------------------------------------

2023-11-06 09:39:21 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-06 09:39:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 35 seconds
Variants: generated 200, build-succeeded 91, build-failed 64, syntax-invalid 25, redundant 20
Fitness: max 0.98(78), min 0.529(1), ave 0.957
Test execution time: sum 9529 ms, max 196 ms, min 83 ms
----------------------------------------------------------------

2023-11-06 09:39:46 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-06 09:40:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 0 seconds
Variants: generated 200, build-succeeded 90, build-failed 62, syntax-invalid 23, redundant 25
Fitness: max 1(1), min 0.49(2), ave 0.939
Test execution time: sum 9519 ms, max 237 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:40:11 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-06 09:40:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 seconds
Variants: generated 200, build-succeeded 94, build-failed 70, syntax-invalid 16, redundant 20
Fitness: max 0.98(76), min 0.471(1), ave 0.949
Test execution time: sum 9931 ms, max 210 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:40:37 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-06 09:41:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 seconds
Variants: generated 200, build-succeeded 106, build-failed 50, syntax-invalid 23, redundant 21
Fitness: max 0.98(89), min 0.49(2), ave 0.951
Test execution time: sum 11556 ms, max 696 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:41:05 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-11-06 09:41:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 22 seconds
Variants: generated 200, build-succeeded 99, build-failed 63, syntax-invalid 19, redundant 19
Fitness: max 0.98(85), min 0.549(1), ave 0.962
Test execution time: sum 10924 ms, max 677 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 09:41:33 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-11-06 09:42:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 50 seconds
Variants: generated 200, build-succeeded 110, build-failed 50, syntax-invalid 24, redundant 16
Fitness: max 1(1), min 0.49(1), ave 0.954
Test execution time: sum 11481 ms, max 233 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:42:01 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-11-06 09:42:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 18 seconds
Variants: generated 200, build-succeeded 101, build-failed 56, syntax-invalid 22, redundant 21
Fitness: max 1(1), min 0.216(1), ave 0.955
Test execution time: sum 11359 ms, max 690 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 09:42:30 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-11-06 09:42:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 43 seconds
Variants: generated 200, build-succeeded 92, build-failed 67, syntax-invalid 19, redundant 22
Fitness: max 0.98(78), min 0.549(1), ave 0.958
Test execution time: sum 9490 ms, max 214 ms, min 86 ms
----------------------------------------------------------------

2023-11-06 09:42:55 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-11-06 09:43:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 11 seconds
Variants: generated 200, build-succeeded 104, build-failed 57, syntax-invalid 15, redundant 24
Fitness: max 0.98(86), min 0.49(1), ave 0.958
Test execution time: sum 10935 ms, max 217 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:43:22 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-11-06 09:43:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 39 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 14, redundant 19
Fitness: max 0.98(90), min 0.49(2), ave 0.949
Test execution time: sum 11095 ms, max 204 ms, min 82 ms
----------------------------------------------------------------

2023-11-06 09:43:50 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-11-06 09:44:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 5 seconds
Variants: generated 200, build-succeeded 97, build-failed 60, syntax-invalid 17, redundant 26
Fitness: max 0.98(83), min 0.49(1), ave 0.959
Test execution time: sum 10131 ms, max 211 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:44:16 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-11-06 09:44:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 32 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 21, redundant 23
Fitness: max 0.98(83), min 0.49(1), ave 0.952
Test execution time: sum 10507 ms, max 208 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 09:44:43 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-11-06 09:45:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 0 seconds
Variants: generated 200, build-succeeded 108, build-failed 55, syntax-invalid 19, redundant 18
Fitness: max 0.98(84), min 0.667(2), ave 0.955
Test execution time: sum 11131 ms, max 188 ms, min 86 ms
----------------------------------------------------------------

2023-11-06 09:45:11 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-11-06 09:45:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 28 seconds
Variants: generated 200, build-succeeded 104, build-failed 58, syntax-invalid 19, redundant 19
Fitness: max 1(1), min 0.255(1), ave 0.934
Test execution time: sum 11471 ms, max 763 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:45:40 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-11-06 09:46:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 58 seconds
Variants: generated 200, build-succeeded 108, build-failed 38, syntax-invalid 21, redundant 33
Fitness: max 0.98(94), min 0.784(1), ave 0.969
Test execution time: sum 12464 ms, max 696 ms, min 93 ms
----------------------------------------------------------------

2023-11-06 09:46:10 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-11-06 09:46:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 27 seconds
Variants: generated 200, build-succeeded 99, build-failed 63, syntax-invalid 21, redundant 17
Fitness: max 0.98(77), min 0.49(1), ave 0.948
Test execution time: sum 11976 ms, max 1926 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:46:38 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-11-06 09:47:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 56 seconds
Variants: generated 200, build-succeeded 92, build-failed 56, syntax-invalid 23, redundant 29
Fitness: max 0.98(69), min 0.314(1), ave 0.934
Test execution time: sum 11372 ms, max 994 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:47:07 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-11-06 09:47:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 22 seconds
Variants: generated 200, build-succeeded 89, build-failed 59, syntax-invalid 24, redundant 28
Fitness: max 0.98(75), min 0.667(1), ave 0.963
Test execution time: sum 10141 ms, max 752 ms, min 86 ms
----------------------------------------------------------------

2023-11-06 09:47:33 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-11-06 09:48:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 49 seconds
Variants: generated 200, build-succeeded 98, build-failed 60, syntax-invalid 18, redundant 24
Fitness: max 0.98(79), min 0.49(1), ave 0.95
Test execution time: sum 10188 ms, max 163 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:48:00 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-11-06 09:48:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 20 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 9, redundant 17
Fitness: max 0.98(99), min 0.49(1), ave 0.956
Test execution time: sum 13794 ms, max 1264 ms, min 70 ms
----------------------------------------------------------------

2023-11-06 09:48:31 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-11-06 09:49:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 49 seconds
Variants: generated 200, build-succeeded 105, build-failed 48, syntax-invalid 22, redundant 25
Fitness: max 0.98(90), min 0.49(2), ave 0.961
Test execution time: sum 12017 ms, max 1017 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:49:00 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-11-06 09:49:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 18 seconds
Variants: generated 200, build-succeeded 102, build-failed 61, syntax-invalid 17, redundant 20
Fitness: max 0.98(86), min 0.49(1), ave 0.961
Test execution time: sum 11362 ms, max 781 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:49:29 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-11-06 09:49:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 48 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 20, redundant 20
Fitness: max 0.98(78), min 0.49(1), ave 0.951
Test execution time: sum 13240 ms, max 2541 ms, min 75 ms
----------------------------------------------------------------

2023-11-06 09:49:59 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-11-06 09:50:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 16 seconds
Variants: generated 200, build-succeeded 97, build-failed 68, syntax-invalid 19, redundant 16
Fitness: max 0.98(79), min 0.549(2), ave 0.956
Test execution time: sum 10976 ms, max 813 ms, min 86 ms
----------------------------------------------------------------

2023-11-06 09:50:27 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-11-06 09:50:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 45 seconds
Variants: generated 200, build-succeeded 110, build-failed 50, syntax-invalid 16, redundant 24
Fitness: max 0.98(84), min 0.255(1), ave 0.934
Test execution time: sum 11356 ms, max 170 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:50:56 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-11-06 09:51:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 11 seconds
Variants: generated 200, build-succeeded 90, build-failed 63, syntax-invalid 17, redundant 30
Fitness: max 0.98(79), min 0.588(1), ave 0.965
Test execution time: sum 9516 ms, max 205 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 09:51:23 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-11-06 09:51:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 43 seconds
Variants: generated 200, build-succeeded 110, build-failed 65, syntax-invalid 12, redundant 13
Fitness: max 0.98(93), min 0.235(1), ave 0.947
Test execution time: sum 12253 ms, max 788 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:51:54 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-11-06 09:52:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 12 seconds
Variants: generated 200, build-succeeded 107, build-failed 56, syntax-invalid 8, redundant 29
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 11246 ms, max 232 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:52:23 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-11-06 09:52:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 43 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 16, redundant 20
Fitness: max 1(1), min 0.294(1), ave 0.952
Test execution time: sum 11847 ms, max 685 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 09:52:55 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-11-06 09:53:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 12 seconds
Variants: generated 200, build-succeeded 102, build-failed 56, syntax-invalid 17, redundant 25
Fitness: max 1(1), min 0.549(1), ave 0.961
Test execution time: sum 10881 ms, max 214 ms, min 84 ms
----------------------------------------------------------------

2023-11-06 09:53:23 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-11-06 09:53:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 42 seconds
Variants: generated 200, build-succeeded 103, build-failed 65, syntax-invalid 16, redundant 16
Fitness: max 0.98(81), min 0.471(1), ave 0.961
Test execution time: sum 12069 ms, max 736 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 09:53:54 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-11-06 09:54:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 10 seconds
Variants: generated 200, build-succeeded 103, build-failed 54, syntax-invalid 24, redundant 19
Fitness: max 1(1), min 0.549(1), ave 0.944
Test execution time: sum 11444 ms, max 1025 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 09:54:22 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-11-06 09:54:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 34 seconds
Variants: generated 200, build-succeeded 92, build-failed 64, syntax-invalid 19, redundant 25
Fitness: max 0.98(78), min 0.49(1), ave 0.964
Test execution time: sum 8052 ms, max 247 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:54:46 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-11-06 09:55:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 59 seconds
Variants: generated 200, build-succeeded 106, build-failed 54, syntax-invalid 20, redundant 20
Fitness: max 1(1), min 0.353(1), ave 0.957
Test execution time: sum 10101 ms, max 1107 ms, min 56 ms
----------------------------------------------------------------

2023-11-06 09:55:11 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-11-06 09:55:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 21 seconds
Variants: generated 200, build-succeeded 92, build-failed 66, syntax-invalid 23, redundant 19
Fitness: max 0.98(71), min 0.49(1), ave 0.954
Test execution time: sum 7652 ms, max 141 ms, min 57 ms
----------------------------------------------------------------

2023-11-06 09:55:32 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-11-06 09:55:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 43 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 24, redundant 20
Fitness: max 0.98(73), min 0.157(1), ave 0.951
Test execution time: sum 8073 ms, max 178 ms, min 60 ms
----------------------------------------------------------------

2023-11-06 09:55:54 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-11-06 09:56:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 5 seconds
Variants: generated 200, build-succeeded 93, build-failed 63, syntax-invalid 22, redundant 22
Fitness: max 0.98(74), min 0.49(1), ave 0.961
Test execution time: sum 7879 ms, max 203 ms, min 63 ms
----------------------------------------------------------------

2023-11-06 09:56:16 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-11-06 09:56:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 28 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 20, redundant 16
Fitness: max 1(1), min 0.333(1), ave 0.953
Test execution time: sum 8777 ms, max 170 ms, min 56 ms
----------------------------------------------------------------

2023-11-06 09:56:39 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-11-06 09:57:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 51 seconds
Variants: generated 200, build-succeeded 105, build-failed 51, syntax-invalid 18, redundant 26
Fitness: max 1(1), min 0.549(2), ave 0.948
Test execution time: sum 8764 ms, max 189 ms, min 66 ms
----------------------------------------------------------------

2023-11-06 09:57:02 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-11-06 09:57:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 12 seconds
Variants: generated 200, build-succeeded 86, build-failed 66, syntax-invalid 25, redundant 23
Fitness: max 0.98(71), min 0.275(1), ave 0.956
Test execution time: sum 7271 ms, max 148 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 09:57:23 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-11-06 09:57:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 35 seconds
Variants: generated 200, build-succeeded 99, build-failed 54, syntax-invalid 23, redundant 24
Fitness: max 0.98(81), min 0.235(1), ave 0.949
Test execution time: sum 8176 ms, max 140 ms, min 57 ms
----------------------------------------------------------------

2023-11-06 09:57:46 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-11-06 09:58:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 57 seconds
Variants: generated 200, build-succeeded 100, build-failed 54, syntax-invalid 24, redundant 22
Fitness: max 0.98(79), min 0.49(1), ave 0.942
Test execution time: sum 8428 ms, max 170 ms, min 63 ms
----------------------------------------------------------------

2023-11-06 09:58:09 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-11-06 09:58:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 19 seconds
Variants: generated 200, build-succeeded 95, build-failed 55, syntax-invalid 28, redundant 22
Fitness: max 0.98(74), min 0.275(1), ave 0.944
Test execution time: sum 7971 ms, max 191 ms, min 58 ms
----------------------------------------------------------------

2023-11-06 09:58:31 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-11-06 09:58:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 42 seconds
Variants: generated 200, build-succeeded 97, build-failed 72, syntax-invalid 22, redundant 9
Fitness: max 0.98(81), min 0.49(1), ave 0.959
Test execution time: sum 8212 ms, max 202 ms, min 56 ms
----------------------------------------------------------------

2023-11-06 09:58:54 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-11-06 09:59:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 5 seconds
Variants: generated 200, build-succeeded 101, build-failed 58, syntax-invalid 28, redundant 13
Fitness: max 0.98(84), min 0.49(1), ave 0.951
Test execution time: sum 8500 ms, max 177 ms, min 59 ms
----------------------------------------------------------------

2023-11-06 09:59:17 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-11-06 09:59:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 25 seconds
Variants: generated 200, build-succeeded 94, build-failed 67, syntax-invalid 32, redundant 7
Fitness: max 0.98(81), min 0.667(1), ave 0.965
Test execution time: sum 7713 ms, max 176 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 09:59:37 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-11-06 10:00:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 49 seconds
Variants: generated 200, build-succeeded 115, build-failed 54, syntax-invalid 21, redundant 10
Fitness: max 0.98(89), min 0.333(1), ave 0.938
Test execution time: sum 9604 ms, max 176 ms, min 57 ms
----------------------------------------------------------------

2023-11-06 10:00:00 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-11-06 10:00:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 11 seconds
Variants: generated 200, build-succeeded 93, build-failed 59, syntax-invalid 27, redundant 21
Fitness: max 0.98(78), min 0.49(1), ave 0.958
Test execution time: sum 8227 ms, max 194 ms, min 59 ms
----------------------------------------------------------------

2023-11-06 10:00:23 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-11-06 10:00:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 36 seconds
Variants: generated 200, build-succeeded 108, build-failed 49, syntax-invalid 23, redundant 20
Fitness: max 1(1), min 0.49(3), ave 0.938
Test execution time: sum 10203 ms, max 278 ms, min 60 ms
----------------------------------------------------------------

2023-11-06 10:00:47 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-11-06 10:01:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 2 seconds
Variants: generated 200, build-succeeded 101, build-failed 60, syntax-invalid 21, redundant 18
Fitness: max 1(1), min 0.863(3), ave 0.972
Test execution time: sum 9578 ms, max 174 ms, min 81 ms
----------------------------------------------------------------

2023-11-06 10:01:13 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-11-06 10:01:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 26 seconds
Variants: generated 200, build-succeeded 99, build-failed 58, syntax-invalid 19, redundant 24
Fitness: max 0.98(86), min 0.49(3), ave 0.956
Test execution time: sum 8951 ms, max 255 ms, min 58 ms
----------------------------------------------------------------

2023-11-06 10:01:37 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-11-06 10:02:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 51 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 16, redundant 11
Fitness: max 0.98(96), min 0.333(1), ave 0.95
Test execution time: sum 10327 ms, max 187 ms, min 58 ms
----------------------------------------------------------------

2023-11-06 10:02:02 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-11-06 10:02:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 16 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 17, redundant 13
Fitness: max 0.98(88), min 0.49(1), ave 0.963
Test execution time: sum 9416 ms, max 151 ms, min 74 ms
----------------------------------------------------------------

2023-11-06 10:02:27 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-11-06 10:02:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 41 seconds
Variants: generated 200, build-succeeded 108, build-failed 53, syntax-invalid 19, redundant 20
Fitness: max 0.98(85), min 0.49(2), ave 0.952
Test execution time: sum 9498 ms, max 136 ms, min 63 ms
----------------------------------------------------------------

2023-11-06 10:02:52 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-11-06 10:03:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 5 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 13, redundant 13
Fitness: max 0.98(90), min 0.216(1), ave 0.947
Test execution time: sum 9849 ms, max 134 ms, min 60 ms
----------------------------------------------------------------

2023-11-06 10:03:17 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-11-06 10:03:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 34 seconds
Variants: generated 200, build-succeeded 110, build-failed 56, syntax-invalid 14, redundant 20
Fitness: max 1(2), min 0.49(4), ave 0.951
Test execution time: sum 11912 ms, max 2133 ms, min 61 ms
----------------------------------------------------------------

2023-11-06 10:03:46 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-11-06 10:04:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 2 seconds
Variants: generated 200, build-succeeded 109, build-failed 64, syntax-invalid 12, redundant 15
Fitness: max 1(1), min 0.843(1), ave 0.971
Test execution time: sum 10796 ms, max 1099 ms, min 80 ms
----------------------------------------------------------------

2023-11-06 10:04:13 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-11-06 10:04:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 30 seconds
Variants: generated 200, build-succeeded 97, build-failed 65, syntax-invalid 14, redundant 24
Fitness: max 0.98(85), min 0.49(2), ave 0.958
Test execution time: sum 10849 ms, max 1138 ms, min 60 ms
----------------------------------------------------------------

2023-11-06 10:04:41 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-11-06 10:05:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 0 seconds
Variants: generated 200, build-succeeded 102, build-failed 62, syntax-invalid 18, redundant 18
Fitness: max 1(1), min 0.49(1), ave 0.956
Test execution time: sum 12424 ms, max 3091 ms, min 62 ms
----------------------------------------------------------------

2023-11-06 10:05:12 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-11-06 10:05:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 26 seconds
Variants: generated 200, build-succeeded 101, build-failed 59, syntax-invalid 18, redundant 22
Fitness: max 0.98(76), min 0.49(2), ave 0.941
Test execution time: sum 8981 ms, max 151 ms, min 60 ms
----------------------------------------------------------------

2023-11-06 10:05:38 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-11-06 10:06:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 52 seconds
Variants: generated 200, build-succeeded 101, build-failed 57, syntax-invalid 19, redundant 23
Fitness: max 0.98(92), min 0.49(1), ave 0.968
Test execution time: sum 9278 ms, max 236 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 10:06:04 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-11-06 10:06:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 19 seconds
Variants: generated 200, build-succeeded 105, build-failed 57, syntax-invalid 16, redundant 22
Fitness: max 0.98(90), min 0.49(1), ave 0.963
Test execution time: sum 9426 ms, max 147 ms, min 69 ms
----------------------------------------------------------------

2023-11-06 10:06:30 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-11-06 10:06:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 44 seconds
Variants: generated 200, build-succeeded 95, build-failed 52, syntax-invalid 20, redundant 33
Fitness: max 0.98(87), min 0.49(1), ave 0.97
Test execution time: sum 8598 ms, max 210 ms, min 79 ms
----------------------------------------------------------------

2023-11-06 10:06:55 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-11-06 10:07:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 14 seconds
Variants: generated 200, build-succeeded 101, build-failed 59, syntax-invalid 19, redundant 21
Fitness: max 0.98(88), min 0.765(1), ave 0.968
Test execution time: sum 11526 ms, max 1290 ms, min 74 ms
----------------------------------------------------------------

2023-11-06 10:07:25 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-11-06 10:07:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 40 seconds
Variants: generated 200, build-succeeded 100, build-failed 57, syntax-invalid 21, redundant 22
Fitness: max 0.98(90), min 0.549(1), ave 0.97
Test execution time: sum 9119 ms, max 175 ms, min 80 ms
----------------------------------------------------------------

2023-11-06 10:07:51 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-11-06 10:08:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 9 seconds
Variants: generated 200, build-succeeded 101, build-failed 67, syntax-invalid 18, redundant 14
Fitness: max 1(1), min 0.49(2), ave 0.96
Test execution time: sum 10497 ms, max 1118 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 10:08:20 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-11-06 10:08:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 36 seconds
Variants: generated 200, build-succeeded 107, build-failed 66, syntax-invalid 17, redundant 10
Fitness: max 0.98(92), min 0.216(1), ave 0.952
Test execution time: sum 9707 ms, max 184 ms, min 61 ms
----------------------------------------------------------------

2023-11-06 10:08:47 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-11-06 10:09:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 9 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 11, redundant 17
Fitness: max 0.98(102), min 0.49(1), ave 0.957
Test execution time: sum 13491 ms, max 1610 ms, min 66 ms
----------------------------------------------------------------

2023-11-06 10:09:20 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-11-06 10:09:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 38 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 14, redundant 17
Fitness: max 0.98(102), min 0.294(1), ave 0.959
Test execution time: sum 10950 ms, max 189 ms, min 58 ms
----------------------------------------------------------------

2023-11-06 10:09:50 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-11-06 10:10:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 7 seconds
Variants: generated 200, build-succeeded 104, build-failed 59, syntax-invalid 15, redundant 22
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 10287 ms, max 219 ms, min 66 ms
----------------------------------------------------------------

2023-11-06 10:10:18 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-11-06 10:10:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 39 seconds
Variants: generated 200, build-succeeded 106, build-failed 50, syntax-invalid 20, redundant 24
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 12693 ms, max 1961 ms, min 79 ms
----------------------------------------------------------------

2023-11-06 10:10:50 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-11-06 10:11:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 7 seconds
Variants: generated 200, build-succeeded 105, build-failed 60, syntax-invalid 20, redundant 15
Fitness: max 1(1), min 0.49(1), ave 0.97
Test execution time: sum 10206 ms, max 208 ms, min 73 ms
----------------------------------------------------------------

2023-11-06 10:11:19 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-11-06 10:11:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 37 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 29, redundant 15
Fitness: max 0.98(83), min 0.549(1), ave 0.965
Test execution time: sum 11775 ms, max 1812 ms, min 75 ms
----------------------------------------------------------------

2023-11-06 10:11:49 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-11-06 10:12:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 12 seconds
Variants: generated 200, build-succeeded 102, build-failed 53, syntax-invalid 32, redundant 13
Fitness: max 0.98(88), min 0.549(1), ave 0.964
Test execution time: sum 13293 ms, max 1608 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 10:12:23 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-11-06 10:12:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 40 seconds
Variants: generated 200, build-succeeded 100, build-failed 54, syntax-invalid 30, redundant 16
Fitness: max 1(1), min 0.49(1), ave 0.968
Test execution time: sum 10992 ms, max 1872 ms, min 81 ms
----------------------------------------------------------------

2023-11-06 10:12:51 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-11-06 10:13:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 6 seconds
Variants: generated 200, build-succeeded 90, build-failed 60, syntax-invalid 34, redundant 16
Fitness: max 0.98(78), min 0.686(1), ave 0.965
Test execution time: sum 8501 ms, max 206 ms, min 75 ms
----------------------------------------------------------------

2023-11-06 10:13:17 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-11-06 10:13:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 34 seconds
Variants: generated 200, build-succeeded 109, build-failed 48, syntax-invalid 23, redundant 20
Fitness: max 0.98(96), min 0.569(2), ave 0.961
Test execution time: sum 10094 ms, max 191 ms, min 75 ms
----------------------------------------------------------------

2023-11-06 10:13:46 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-11-06 10:14:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 0 seconds
Variants: generated 200, build-succeeded 92, build-failed 62, syntax-invalid 29, redundant 17
Fitness: max 0.98(79), min 0.549(1), ave 0.962
Test execution time: sum 8542 ms, max 182 ms, min 76 ms
----------------------------------------------------------------

2023-11-06 10:14:11 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-11-06 10:14:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 29 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 20, redundant 12
Fitness: max 0.98(98), min 0.549(2), ave 0.961
Test execution time: sum 10193 ms, max 189 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 10:14:40 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-11-06 10:15:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 57 seconds
Variants: generated 200, build-succeeded 95, build-failed 56, syntax-invalid 28, redundant 21
Fitness: max 0.98(77), min 0.353(1), ave 0.957
Test execution time: sum 10102 ms, max 1210 ms, min 78 ms
----------------------------------------------------------------

2023-11-06 10:15:09 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-11-06 10:15:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 24 seconds
Variants: generated 200, build-succeeded 96, build-failed 57, syntax-invalid 28, redundant 19
Fitness: max 0.98(81), min 0.549(2), ave 0.958
Test execution time: sum 8961 ms, max 189 ms, min 64 ms
----------------------------------------------------------------

2023-11-06 10:15:35 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-11-06 10:16:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 52 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 23, redundant 16
Fitness: max 0.98(85), min 0.49(2), ave 0.949
Test execution time: sum 9468 ms, max 170 ms, min 61 ms
----------------------------------------------------------------

2023-11-06 10:16:04 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-11-06 10:16:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 22 seconds
Variants: generated 200, build-succeeded 100, build-failed 60, syntax-invalid 17, redundant 23
Fitness: max 1(1), min 0.843(1), ave 0.972
Test execution time: sum 10857 ms, max 1327 ms, min 80 ms
----------------------------------------------------------------

2023-11-06 10:16:34 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-11-06 10:17:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 49 seconds
Variants: generated 200, build-succeeded 101, build-failed 57, syntax-invalid 23, redundant 19
Fitness: max 0.98(83), min 0.549(1), ave 0.96
Test execution time: sum 9147 ms, max 181 ms, min 68 ms
----------------------------------------------------------------

2023-11-06 10:17:00 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-11-06 10:17:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 19 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 17, redundant 11
Fitness: max 0.98(97), min 0.529(1), ave 0.96
Test execution time: sum 11839 ms, max 1186 ms, min 61 ms
----------------------------------------------------------------

2023-11-06 10:17:31 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-11-06 10:18:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 49 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 13, redundant 13
Fitness: max 0.98(101), min 0.49(1), ave 0.964
Test execution time: sum 10862 ms, max 692 ms, min 72 ms
----------------------------------------------------------------

2023-11-06 10:18:00 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-11-06 10:18:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 17 seconds
Variants: generated 200, build-succeeded 100, build-failed 69, syntax-invalid 17, redundant 14
Fitness: max 0.98(89), min 0.431(1), ave 0.967
Test execution time: sum 9040 ms, max 169 ms, min 71 ms
----------------------------------------------------------------

2023-11-06 10:18:28 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-11-06 10:18:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 44 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 18, redundant 17
Fitness: max 0.98(97), min 0.549(1), ave 0.962
Test execution time: sum 9589 ms, max 191 ms, min 64 ms
----------------------------------------------------------------

2023-11-06 10:18:56 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-11-06 10:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 10 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 28, redundant 10
Fitness: max 0.98(89), min 0.549(1), ave 0.958
Test execution time: sum 9082 ms, max 175 ms, min 63 ms
----------------------------------------------------------------

2023-11-06 10:19:22 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-11-06 10:19:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 39 seconds
Variants: generated 200, build-succeeded 108, build-failed 55, syntax-invalid 26, redundant 11
Fitness: max 0.98(93), min 0.353(1), ave 0.95
Test execution time: sum 9624 ms, max 181 ms, min 65 ms
----------------------------------------------------------------

2023-11-06 10:19:50 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-11-06 10:20:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 4 seconds
Variants: generated 200, build-succeeded 95, build-failed 55, syntax-invalid 29, redundant 21
Fitness: max 0.98(88), min 0.49(1), ave 0.965
Test execution time: sum 8562 ms, max 186 ms, min 58 ms
----------------------------------------------------------------

2023-11-06 10:20:15 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-11-06 10:20:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 31 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 25, redundant 11
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 9482 ms, max 179 ms, min 58 ms
----------------------------------------------------------------

2023-11-06 10:20:42 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-11-06 10:21:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 58 seconds
Variants: generated 200, build-succeeded 105, build-failed 62, syntax-invalid 23, redundant 10
Fitness: max 0.98(90), min 0.49(3), ave 0.952
Test execution time: sum 9294 ms, max 218 ms, min 59 ms
----------------------------------------------------------------

2023-11-06 10:21:09 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-11-06 10:21:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 29 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 25, redundant 10
Fitness: max 0.98(93), min 0.49(1), ave 0.959
Test execution time: sum 10721 ms, max 1027 ms, min 59 ms
----------------------------------------------------------------

2023-11-06 10:21:40 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-11-06 10:22:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 59 seconds
Variants: generated 200, build-succeeded 105, build-failed 66, syntax-invalid 19, redundant 10
Fitness: max 1(1), min 0.49(1), ave 0.96
Test execution time: sum 10817 ms, max 1659 ms, min 73 ms
----------------------------------------------------------------

2023-11-06 10:22:10 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-11-06 10:22:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 28 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 17, redundant 17
Fitness: max 0.98(98), min 0.667(1), ave 0.968
Test execution time: sum 10026 ms, max 202 ms, min 77 ms
----------------------------------------------------------------

2023-11-06 10:22:39 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-11-06 10:23:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 0 seconds
Variants: generated 200, build-succeeded 117, build-failed 50, syntax-invalid 15, redundant 18
Fitness: max 0.98(103), min 0.765(1), ave 0.968
Test execution time: sum 12351 ms, max 1131 ms, min 79 ms
----------------------------------------------------------------

2023-11-06 10:23:12 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-11-06 10:23:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 29 seconds
Variants: generated 200, build-succeeded 109, build-failed 49, syntax-invalid 15, redundant 27
Fitness: max 0.98(97), min 0.667(1), ave 0.968
Test execution time: sum 10067 ms, max 188 ms, min 81 ms
----------------------------------------------------------------

2023-11-06 10:23:40 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-11-06 10:24:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 57 seconds
Variants: generated 200, build-succeeded 100, build-failed 61, syntax-invalid 29, redundant 10
Fitness: max 0.98(86), min 0.843(1), ave 0.968
Test execution time: sum 9413 ms, max 210 ms, min 78 ms
----------------------------------------------------------------

2023-11-06 10:24:08 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-11-06 10:24:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 27 seconds
Variants: generated 200, build-succeeded 108, build-failed 50, syntax-invalid 25, redundant 17
Fitness: max 1(1), min 0.667(1), ave 0.968
Test execution time: sum 12445 ms, max 1704 ms, min 77 ms
----------------------------------------------------------------

2023-11-06 10:24:38 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-11-06 10:25:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 56 seconds
Variants: generated 200, build-succeeded 106, build-failed 52, syntax-invalid 24, redundant 18
Fitness: max 0.98(93), min 0.49(1), ave 0.967
Test execution time: sum 9833 ms, max 184 ms, min 59 ms
----------------------------------------------------------------

2023-11-06 10:25:07 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-11-06 10:25:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 25 seconds
Variants: generated 200, build-succeeded 102, build-failed 55, syntax-invalid 27, redundant 16
Fitness: max 0.98(89), min 0.49(1), ave 0.963
Test execution time: sum 10357 ms, max 1056 ms, min 73 ms
----------------------------------------------------------------

2023-11-06 10:25:36 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-11-06 10:26:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 52 seconds
Variants: generated 200, build-succeeded 95, build-failed 60, syntax-invalid 29, redundant 16
Fitness: max 0.98(83), min 0.686(1), ave 0.966
Test execution time: sum 8757 ms, max 258 ms, min 79 ms
----------------------------------------------------------------

2023-11-06 10:26:03 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-11-06 10:26:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 20 seconds
Variants: generated 200, build-succeeded 104, build-failed 54, syntax-invalid 30, redundant 12
Fitness: max 0.98(86), min 0.549(1), ave 0.961
Test execution time: sum 9664 ms, max 205 ms, min 78 ms
----------------------------------------------------------------

2023-11-06 10:26:31 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-11-06 10:27:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 17 seconds
Variants: generated 200, build-succeeded 96, build-failed 54, syntax-invalid 26, redundant 24
Fitness: max 1(1), min 0.275(1), ave 0.951
Test execution time: sum 23100 ms, max 469 ms, min 74 ms
----------------------------------------------------------------

2023-11-06 10:27:29 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-11-06 10:28:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 40 seconds
Variants: generated 200, build-succeeded 97, build-failed 58, syntax-invalid 30, redundant 15
Fitness: max 0.98(90), min 0.49(1), ave 0.969
Test execution time: sum 28948 ms, max 1781 ms, min 152 ms
----------------------------------------------------------------

2023-11-06 10:28:51 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-11-06 10:30:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 5 seconds
Variants: generated 200, build-succeeded 105, build-failed 55, syntax-invalid 19, redundant 21
Fitness: max 0.98(96), min 0.49(1), ave 0.966
Test execution time: sum 28908 ms, max 489 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 10:30:16 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-11-06 10:31:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 26 seconds
Variants: generated 200, build-succeeded 100, build-failed 57, syntax-invalid 29, redundant 14
Fitness: max 0.98(89), min 0.471(1), ave 0.965
Test execution time: sum 28214 ms, max 506 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 10:31:37 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-11-06 10:33:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 58 seconds
Variants: generated 200, build-succeeded 99, build-failed 56, syntax-invalid 28, redundant 17
Fitness: max 0.98(87), min 0.49(2), ave 0.962
Test execution time: sum 32162 ms, max 1970 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 10:33:09 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-11-06 10:34:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 18 seconds
Variants: generated 200, build-succeeded 93, build-failed 60, syntax-invalid 33, redundant 14
Fitness: max 0.98(85), min 0.765(2), ave 0.97
Test execution time: sum 26175 ms, max 472 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 10:34:29 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-11-06 10:35:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 37 seconds
Variants: generated 200, build-succeeded 95, build-failed 51, syntax-invalid 41, redundant 13
Fitness: max 0.98(81), min 0.549(1), ave 0.959
Test execution time: sum 27196 ms, max 446 ms, min 132 ms
----------------------------------------------------------------

2023-11-06 10:35:48 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-11-06 10:37:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 5 seconds
Variants: generated 200, build-succeeded 104, build-failed 51, syntax-invalid 32, redundant 13
Fitness: max 0.98(88), min 0.569(1), ave 0.96
Test execution time: sum 30388 ms, max 1576 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 10:37:17 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-11-06 10:38:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 29 seconds
Variants: generated 200, build-succeeded 101, build-failed 56, syntax-invalid 30, redundant 13
Fitness: max 1(1), min 0.824(2), ave 0.97
Test execution time: sum 28081 ms, max 511 ms, min 161 ms
----------------------------------------------------------------

2023-11-06 10:38:41 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-11-06 10:40:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 52 seconds
Variants: generated 200, build-succeeded 103, build-failed 48, syntax-invalid 34, redundant 15
Fitness: max 0.98(91), min 0.49(1), ave 0.962
Test execution time: sum 28998 ms, max 493 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 10:40:03 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-11-06 10:41:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 26 seconds
Variants: generated 200, build-succeeded 109, build-failed 51, syntax-invalid 27, redundant 13
Fitness: max 0.98(97), min 0.353(1), ave 0.963
Test execution time: sum 32371 ms, max 1462 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 10:41:37 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-11-06 10:43:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 49 seconds
Variants: generated 200, build-succeeded 98, build-failed 57, syntax-invalid 35, redundant 10
Fitness: max 0.98(83), min 0.216(1), ave 0.944
Test execution time: sum 28311 ms, max 528 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 10:43:01 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-11-06 10:44:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 23 seconds
Variants: generated 200, build-succeeded 107, build-failed 59, syntax-invalid 25, redundant 9
Fitness: max 0.98(94), min 0.549(1), ave 0.96
Test execution time: sum 31892 ms, max 1476 ms, min 135 ms
----------------------------------------------------------------

2023-11-06 10:44:35 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-11-06 10:46:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 49, syntax-invalid 27, redundant 10
Fitness: max 1(1), min 0.471(1), ave 0.963
Test execution time: sum 34082 ms, max 1540 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 10:46:10 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-11-06 10:47:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 25 seconds
Variants: generated 200, build-succeeded 102, build-failed 57, syntax-invalid 28, redundant 13
Fitness: max 0.98(92), min 0.765(1), ave 0.97
Test execution time: sum 28772 ms, max 530 ms, min 146 ms
----------------------------------------------------------------

2023-11-06 10:47:36 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-11-06 10:49:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 52 seconds
Variants: generated 200, build-succeeded 106, build-failed 46, syntax-invalid 30, redundant 18
Fitness: max 0.98(95), min 0.333(1), ave 0.967
Test execution time: sum 30511 ms, max 556 ms, min 160 ms
----------------------------------------------------------------

2023-11-06 10:49:03 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-11-06 10:50:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 20 seconds
Variants: generated 200, build-succeeded 113, build-failed 49, syntax-invalid 26, redundant 12
Fitness: max 0.98(101), min 0.725(1), ave 0.97
Test execution time: sum 32907 ms, max 1814 ms, min 161 ms
----------------------------------------------------------------

2023-11-06 10:50:32 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-11-06 10:52:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 53 seconds
Variants: generated 200, build-succeeded 103, build-failed 55, syntax-invalid 25, redundant 17
Fitness: max 0.98(91), min 0.353(1), ave 0.958
Test execution time: sum 30543 ms, max 515 ms, min 211 ms
----------------------------------------------------------------

2023-11-06 10:52:04 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-11-06 10:53:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 30 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 15, redundant 4
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 34700 ms, max 538 ms, min 202 ms
----------------------------------------------------------------

2023-11-06 10:53:41 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-11-06 10:55:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 7 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 23, redundant 5
Fitness: max 0.98(104), min 0.765(1), ave 0.97
Test execution time: sum 34558 ms, max 519 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 10:55:18 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-11-06 10:56:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 33 seconds
Variants: generated 200, build-succeeded 102, build-failed 56, syntax-invalid 33, redundant 9
Fitness: max 0.98(89), min 0.49(1), ave 0.963
Test execution time: sum 29134 ms, max 518 ms, min 113 ms
----------------------------------------------------------------

2023-11-06 10:56:45 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-11-06 10:58:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 4 seconds
Variants: generated 200, build-succeeded 104, build-failed 68, syntax-invalid 22, redundant 6
Fitness: max 0.98(92), min 0.471(1), ave 0.957
Test execution time: sum 29713 ms, max 529 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 10:58:15 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-11-06 10:59:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 43 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 21, redundant 6
Fitness: max 0.98(100), min 0.275(1), ave 0.95
Test execution time: sum 34589 ms, max 1911 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 10:59:54 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-11-06 11:01:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 16 seconds
Variants: generated 200, build-succeeded 108, build-failed 55, syntax-invalid 29, redundant 8
Fitness: max 1(2), min 0.49(2), ave 0.962
Test execution time: sum 31173 ms, max 500 ms, min 170 ms
----------------------------------------------------------------

2023-11-06 11:01:27 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-11-06 11:03:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 48 seconds
Variants: generated 200, build-succeeded 112, build-failed 51, syntax-invalid 25, redundant 12
Fitness: max 0.98(99), min 0.235(1), ave 0.96
Test execution time: sum 31809 ms, max 491 ms, min 168 ms
----------------------------------------------------------------

2023-11-06 11:03:00 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-11-06 11:04:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 24 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 14, redundant 9
Fitness: max 0.98(102), min 0.353(1), ave 0.961
Test execution time: sum 32092 ms, max 473 ms, min 109 ms
----------------------------------------------------------------

2023-11-06 11:04:36 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-11-06 11:06:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 0 seconds
Variants: generated 200, build-succeeded 109, build-failed 55, syntax-invalid 22, redundant 14
Fitness: max 1(1), min 0.49(1), ave 0.956
Test execution time: sum 32291 ms, max 1692 ms, min 153 ms
----------------------------------------------------------------

2023-11-06 11:06:11 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-11-06 11:07:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 36 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 21, redundant 5
Fitness: max 1(1), min 0.725(1), ave 0.966
Test execution time: sum 34781 ms, max 3253 ms, min 114 ms
----------------------------------------------------------------

2023-11-06 11:07:47 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-11-06 11:09:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 17 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 27, redundant 10
Fitness: max 0.98(88), min 0.471(1), ave 0.958
Test execution time: sum 33944 ms, max 2409 ms, min 146 ms
----------------------------------------------------------------

2023-11-06 11:09:28 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-11-06 11:10:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 45 seconds
Variants: generated 200, build-succeeded 107, build-failed 50, syntax-invalid 32, redundant 11
Fitness: max 0.98(97), min 0.333(1), ave 0.964
Test execution time: sum 31628 ms, max 443 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 11:10:56 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-11-06 11:12:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 12 seconds
Variants: generated 200, build-succeeded 101, build-failed 53, syntax-invalid 31, redundant 15
Fitness: max 0.98(95), min 0.549(1), ave 0.97
Test execution time: sum 29069 ms, max 494 ms, min 119 ms
----------------------------------------------------------------

2023-11-06 11:12:23 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-11-06 11:14:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 51 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 26, redundant 9
Fitness: max 0.98(95), min 0.549(1), ave 0.966
Test execution time: sum 33649 ms, max 1724 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 11:14:03 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-11-06 11:15:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 20 seconds
Variants: generated 200, build-succeeded 104, build-failed 48, syntax-invalid 35, redundant 13
Fitness: max 0.98(87), min 0.49(2), ave 0.948
Test execution time: sum 29318 ms, max 474 ms, min 104 ms
----------------------------------------------------------------

2023-11-06 11:15:32 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-11-06 11:17:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 1 seconds
Variants: generated 200, build-succeeded 111, build-failed 49, syntax-invalid 29, redundant 11
Fitness: max 0.98(94), min 0.49(1), ave 0.952
Test execution time: sum 35115 ms, max 3107 ms, min 110 ms
----------------------------------------------------------------

2023-11-06 11:17:13 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-11-06 11:18:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 36 seconds
Variants: generated 200, build-succeeded 107, build-failed 54, syntax-invalid 27, redundant 12
Fitness: max 0.98(89), min 0.49(1), ave 0.959
Test execution time: sum 30888 ms, max 500 ms, min 133 ms
----------------------------------------------------------------

2023-11-06 11:18:48 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-11-06 11:20:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 14 seconds
Variants: generated 200, build-succeeded 108, build-failed 49, syntax-invalid 29, redundant 14
Fitness: max 1(1), min 0.49(1), ave 0.955
Test execution time: sum 32996 ms, max 1629 ms, min 193 ms
----------------------------------------------------------------

2023-11-06 11:20:26 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-11-06 11:22:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 54 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 21, redundant 12
Fitness: max 0.98(105), min 0.49(1), ave 0.964
Test execution time: sum 32861 ms, max 534 ms, min 176 ms
----------------------------------------------------------------

2023-11-06 11:22:05 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-11-06 11:23:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 33 seconds
Variants: generated 200, build-succeeded 110, build-failed 50, syntax-invalid 23, redundant 17
Fitness: max 0.98(100), min 0.549(1), ave 0.965
Test execution time: sum 34043 ms, max 1766 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 11:23:44 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-11-06 11:25:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 4 seconds
Variants: generated 200, build-succeeded 99, build-failed 55, syntax-invalid 35, redundant 11
Fitness: max 1(1), min 0.49(1), ave 0.967
Test execution time: sum 28364 ms, max 545 ms, min 116 ms
----------------------------------------------------------------

2023-11-06 11:25:15 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-11-06 11:26:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 43 seconds
Variants: generated 200, build-succeeded 113, build-failed 49, syntax-invalid 24, redundant 14
Fitness: max 1(1), min 0.49(1), ave 0.958
Test execution time: sum 33333 ms, max 477 ms, min 177 ms
----------------------------------------------------------------

2023-11-06 11:26:55 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-11-06 11:28:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 22 seconds
Variants: generated 200, build-succeeded 109, build-failed 52, syntax-invalid 25, redundant 14
Fitness: max 0.98(92), min 0.49(2), ave 0.956
Test execution time: sum 32749 ms, max 1778 ms, min 147 ms
----------------------------------------------------------------

2023-11-06 11:28:34 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-11-06 11:30:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 4 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 21, redundant 13
Fitness: max 0.98(95), min 0.353(1), ave 0.958
Test execution time: sum 34370 ms, max 3868 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 11:30:15 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-11-06 11:31:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 36 seconds
Variants: generated 200, build-succeeded 106, build-failed 55, syntax-invalid 27, redundant 12
Fitness: max 0.98(92), min 0.569(1), ave 0.963
Test execution time: sum 30030 ms, max 525 ms, min 114 ms
----------------------------------------------------------------

2023-11-06 11:31:48 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-11-06 11:33:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 8 seconds
Variants: generated 200, build-succeeded 105, build-failed 50, syntax-invalid 29, redundant 16
Fitness: max 0.98(96), min 0.49(1), ave 0.964
Test execution time: sum 29248 ms, max 525 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 11:33:20 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-11-06 11:34:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 minutes 47 seconds
Variants: generated 200, build-succeeded 103, build-failed 50, syntax-invalid 25, redundant 22
Fitness: max 0.98(94), min 0.569(1), ave 0.968
Test execution time: sum 30905 ms, max 538 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 11:34:58 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-11-06 11:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 25 seconds
Variants: generated 200, build-succeeded 102, build-failed 56, syntax-invalid 27, redundant 15
Fitness: max 0.98(94), min 0.765(1), ave 0.972
Test execution time: sum 31688 ms, max 1863 ms, min 134 ms
----------------------------------------------------------------

2023-11-06 11:36:36 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-11-06 11:38:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 1 seconds
Variants: generated 200, build-succeeded 109, build-failed 49, syntax-invalid 27, redundant 15
Fitness: max 0.98(99), min 0.373(1), ave 0.962
Test execution time: sum 33081 ms, max 1522 ms, min 221 ms
----------------------------------------------------------------

2023-11-06 11:38:13 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-11-06 11:39:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 36 seconds
Variants: generated 200, build-succeeded 98, build-failed 57, syntax-invalid 29, redundant 16
Fitness: max 0.98(92), min 0.902(6), ave 0.976
Test execution time: sum 28320 ms, max 506 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 11:39:47 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-11-06 11:41:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 1 seconds
Variants: generated 200, build-succeeded 90, build-failed 55, syntax-invalid 42, redundant 13
Fitness: max 0.98(78), min 0.49(2), ave 0.952
Test execution time: sum 26143 ms, max 533 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 11:41:13 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-11-06 11:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 36 seconds
Variants: generated 200, build-succeeded 96, build-failed 52, syntax-invalid 37, redundant 15
Fitness: max 0.98(88), min 0.765(1), ave 0.973
Test execution time: sum 28588 ms, max 579 ms, min 118 ms
----------------------------------------------------------------

2023-11-06 11:42:47 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-11-06 11:44:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 15 seconds
Variants: generated 200, build-succeeded 105, build-failed 49, syntax-invalid 31, redundant 15
Fitness: max 0.98(91), min 0.549(1), ave 0.964
Test execution time: sum 31767 ms, max 1787 ms, min 142 ms
----------------------------------------------------------------

2023-11-06 11:44:26 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-11-06 11:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 51 seconds
Variants: generated 200, build-succeeded 97, build-failed 53, syntax-invalid 42, redundant 8
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 29050 ms, max 523 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 11:46:02 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-11-06 11:47:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 28 seconds
Variants: generated 200, build-succeeded 96, build-failed 51, syntax-invalid 40, redundant 13
Fitness: max 0.98(83), min 0.431(1), ave 0.959
Test execution time: sum 28464 ms, max 519 ms, min 108 ms
----------------------------------------------------------------

2023-11-06 11:47:39 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-11-06 11:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 1 seconds
Variants: generated 200, build-succeeded 99, build-failed 52, syntax-invalid 36, redundant 13
Fitness: max 0.98(85), min 0.49(1), ave 0.957
Test execution time: sum 28495 ms, max 531 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 11:49:12 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-11-06 11:50:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 40 seconds
Variants: generated 200, build-succeeded 105, build-failed 54, syntax-invalid 28, redundant 13
Fitness: max 0.98(91), min 0.49(1), ave 0.963
Test execution time: sum 31024 ms, max 553 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 11:50:52 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-11-06 11:52:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 16 seconds
Variants: generated 200, build-succeeded 93, build-failed 57, syntax-invalid 41, redundant 9
Fitness: max 1(1), min 0.549(1), ave 0.958
Test execution time: sum 30496 ms, max 1911 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 11:52:27 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-11-06 11:53:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 46 seconds
Variants: generated 200, build-succeeded 88, build-failed 56, syntax-invalid 41, redundant 15
Fitness: max 0.98(76), min 0.667(1), ave 0.965
Test execution time: sum 28452 ms, max 3410 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 11:53:57 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-11-06 11:55:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 13 seconds
Variants: generated 200, build-succeeded 76, build-failed 66, syntax-invalid 48, redundant 10
Fitness: max 0.98(68), min 0.549(1), ave 0.967
Test execution time: sum 22293 ms, max 506 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 11:55:24 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-11-06 11:56:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 42 seconds
Variants: generated 200, build-succeeded 84, build-failed 63, syntax-invalid 37, redundant 16
Fitness: max 0.98(77), min 0.765(1), ave 0.97
Test execution time: sum 24813 ms, max 577 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 11:56:53 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-11-06 11:58:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 30 seconds
Variants: generated 200, build-succeeded 112, build-failed 52, syntax-invalid 26, redundant 10
Fitness: max 0.98(98), min 0.49(1), ave 0.961
Test execution time: sum 35468 ms, max 2518 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 11:58:42 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-11-06 12:00:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 19 seconds
Variants: generated 200, build-succeeded 105, build-failed 57, syntax-invalid 29, redundant 9
Fitness: max 0.98(94), min 0.275(1), ave 0.953
Test execution time: sum 35036 ms, max 3064 ms, min 114 ms
----------------------------------------------------------------

2023-11-06 12:00:30 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-11-06 12:02:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 22 minutes 9 seconds
Variants: generated 200, build-succeeded 111, build-failed 47, syntax-invalid 30, redundant 12
Fitness: max 0.98(94), min 0.275(1), ave 0.96
Test execution time: sum 36445 ms, max 3553 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 12:02:21 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-11-06 12:04:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 23 minutes 59 seconds
Variants: generated 200, build-succeeded 103, build-failed 51, syntax-invalid 30, redundant 16
Fitness: max 0.98(90), min 0.667(1), ave 0.967
Test execution time: sum 34342 ms, max 3325 ms, min 150 ms
----------------------------------------------------------------

2023-11-06 12:04:10 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-11-06 12:05:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 32 seconds
Variants: generated 200, build-succeeded 99, build-failed 54, syntax-invalid 31, redundant 16
Fitness: max 0.98(88), min 0.667(1), ave 0.968
Test execution time: sum 28469 ms, max 547 ms, min 130 ms
----------------------------------------------------------------

2023-11-06 12:05:43 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-11-06 12:07:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 10 seconds
Variants: generated 200, build-succeeded 100, build-failed 54, syntax-invalid 30, redundant 16
Fitness: max 0.98(89), min 0.549(1), ave 0.967
Test execution time: sum 30137 ms, max 557 ms, min 113 ms
----------------------------------------------------------------

2023-11-06 12:07:22 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-11-06 12:09:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 52 seconds
Variants: generated 200, build-succeeded 114, build-failed 44, syntax-invalid 30, redundant 12
Fitness: max 0.98(104), min 0.49(1), ave 0.968
Test execution time: sum 34347 ms, max 640 ms, min 170 ms
----------------------------------------------------------------

2023-11-06 12:09:03 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-11-06 12:10:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 36 seconds
Variants: generated 200, build-succeeded 95, build-failed 55, syntax-invalid 30, redundant 20
Fitness: max 0.98(88), min 0.49(2), ave 0.965
Test execution time: sum 35096 ms, max 3671 ms, min 128 ms
----------------------------------------------------------------

2023-11-06 12:10:47 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-11-06 12:12:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 15 seconds
Variants: generated 200, build-succeeded 100, build-failed 47, syntax-invalid 33, redundant 20
Fitness: max 0.98(92), min 0.549(1), ave 0.968
Test execution time: sum 33375 ms, max 3525 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 12:12:27 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-11-06 12:14:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 4 seconds
Variants: generated 200, build-succeeded 99, build-failed 57, syntax-invalid 28, redundant 16
Fitness: max 0.98(90), min 0.51(1), ave 0.968
Test execution time: sum 33412 ms, max 3346 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 12:14:15 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-11-06 12:15:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 45 seconds
Variants: generated 200, build-succeeded 92, build-failed 53, syntax-invalid 33, redundant 22
Fitness: max 0.98(85), min 0.784(1), ave 0.971
Test execution time: sum 28065 ms, max 477 ms, min 147 ms
----------------------------------------------------------------

2023-11-06 12:15:56 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-11-06 12:17:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 44 seconds
Variants: generated 200, build-succeeded 111, build-failed 52, syntax-invalid 27, redundant 10
Fitness: max 0.98(89), min 0.49(2), ave 0.954
Test execution time: sum 39362 ms, max 2825 ms, min 218 ms
----------------------------------------------------------------

2023-11-06 12:17:55 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-11-06 12:19:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 31 seconds
Variants: generated 200, build-succeeded 103, build-failed 64, syntax-invalid 23, redundant 10
Fitness: max 0.98(95), min 0.49(2), ave 0.965
Test execution time: sum 31424 ms, max 599 ms, min 198 ms
----------------------------------------------------------------

2023-11-06 12:19:43 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-11-06 12:21:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 25 seconds
Variants: generated 200, build-succeeded 100, build-failed 60, syntax-invalid 27, redundant 13
Fitness: max 1(1), min 0.824(1), ave 0.978
Test execution time: sum 34151 ms, max 3712 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 12:21:37 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-11-06 12:23:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 15 seconds
Variants: generated 200, build-succeeded 107, build-failed 43, syntax-invalid 33, redundant 17
Fitness: max 1(1), min 0.686(1), ave 0.965
Test execution time: sum 35677 ms, max 3090 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 12:23:26 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-11-06 12:25:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 59 seconds
Variants: generated 200, build-succeeded 104, build-failed 59, syntax-invalid 21, redundant 16
Fitness: max 0.98(98), min 0.824(1), ave 0.975
Test execution time: sum 31973 ms, max 543 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 12:25:10 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-11-06 12:27:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 47 minutes 1 seconds
Variants: generated 200, build-succeeded 112, build-failed 53, syntax-invalid 28, redundant 7
Fitness: max 0.98(97), min 0.49(1), ave 0.961
Test execution time: sum 40080 ms, max 2684 ms, min 220 ms
----------------------------------------------------------------

2023-11-06 12:27:12 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-11-06 12:28:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 48 minutes 48 seconds
Variants: generated 200, build-succeeded 101, build-failed 62, syntax-invalid 21, redundant 16
Fitness: max 0.98(86), min 0.353(1), ave 0.958
Test execution time: sum 30622 ms, max 522 ms, min 150 ms
----------------------------------------------------------------

2023-11-06 12:28:59 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-11-06 12:30:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 41 seconds
Variants: generated 200, build-succeeded 106, build-failed 49, syntax-invalid 27, redundant 18
Fitness: max 1(1), min 0.765(1), ave 0.966
Test execution time: sum 36096 ms, max 3600 ms, min 215 ms
----------------------------------------------------------------

2023-11-06 12:30:52 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-11-06 12:32:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 52 minutes 25 seconds
Variants: generated 200, build-succeeded 102, build-failed 68, syntax-invalid 17, redundant 13
Fitness: max 1(1), min 0.549(1), ave 0.972
Test execution time: sum 30542 ms, max 470 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 12:32:37 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-11-06 12:34:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 minutes 23 seconds
Variants: generated 200, build-succeeded 119, build-failed 46, syntax-invalid 16, redundant 19
Fitness: max 1(1), min 0.49(1), ave 0.95
Test execution time: sum 36882 ms, max 595 ms, min 176 ms
----------------------------------------------------------------

2023-11-06 12:34:34 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-11-06 12:34:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 minutes 45 seconds
Variants: generated 41, build-succeeded 11, build-failed 23, syntax-invalid 1, redundant 6
Fitness: max 1(1), min 0.549(2), ave 0.865
Test execution time: sum 4949 ms, max 1984 ms, min 226 ms
----------------------------------------------------------------

2023-11-06 12:34:56 [main] [INFO]  KGenProgMain - GA stopped
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v158)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v158)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v158)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v158)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v158)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v158)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v158)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v534)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v534)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v534)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,6 +407,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
+			buffer[pos++] = PAD;
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v534)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v534)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v534)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v534)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v734)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v734)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v734)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,13 +973,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v734)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v734)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v734)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v734)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v746)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v746)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v746)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -950,7 +950,8 @@
         }
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
-        byte[] buf = new byte[pos - readPos];
+        resizeBuffer();
+		byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v746)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v746)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v746)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v746)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v888)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v888)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v888)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -405,9 +404,9 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v888)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v888)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v888)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v888)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1107)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1107)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1107)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1107)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1107)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1107)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1107)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1158)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1158)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1158)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1158)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1158)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1158)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1158)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1162)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1162)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1162)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -405,7 +404,8 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1162)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1162)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1162)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1162)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1345)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1345)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1345)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -973,7 +971,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1345)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1345)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1345)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1345)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1401)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1401)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1401)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,7 +408,7 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
+            if (eof) {
                 buffer = null;
             }
             return len;
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1052,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1401)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1401)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1401)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v1401)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3264)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3264)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3264)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +973,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3264)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3264)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3264)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3264)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3493)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3493)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3493)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -407,6 +406,8 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
@@ -452,6 +453,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3493)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3493)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3493)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3493)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3496)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3496)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3496)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,7 +408,7 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
+            if (eof) {
                 buffer = null;
             }
             return len;
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +968,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -977,9 +975,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3496)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3496)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3496)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3496)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3631)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3631)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3631)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             pos = 0;
             readPos = 0;
         } else {
@@ -405,7 +406,8 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -967,13 +969,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1048,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3631)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3631)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3631)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v3631)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,10 +408,10 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+            if (eof) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4076)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4076)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4076)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,8 +405,10 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
+			buffer[pos++] = PAD;
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
@@ -493,7 +495,24 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 1;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +998,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4076)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4076)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4076)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v4076)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v5465)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v5465)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v5465)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -492,8 +490,43 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+							pos += lineSeparator.length;
+						}
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1006,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v5465)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v5465)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v5465)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v5465)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
+			buffer[pos++] = PAD;
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 1;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -451,8 +450,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -952,6 +952,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8189)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8189)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8189)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,11 +448,13 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -952,6 +954,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1054,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8189)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8189)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8189)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8189)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,7 +495,24 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8674)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8674)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8674)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -405,13 +404,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8674)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8674)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8674)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8674)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8729)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8729)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8729)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,10 +408,9 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
+            if (eof) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +973,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8729)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8729)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8729)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8729)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8795)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8795)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8795)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +494,23 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +990,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8795)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8795)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8795)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8795)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8922)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8922)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8922)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,9 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1055,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8922)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8922)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8922)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8922)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8980)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8980)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8980)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -493,6 +492,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8980)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8980)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8980)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v8980)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,8 +1053,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9136)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9136)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9136)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,7 +408,7 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
+            if (eof) {
                 buffer = null;
             }
             return len;
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +970,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1052,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9136)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9136)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9136)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9136)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9508)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9508)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9508)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             pos = 0;
             readPos = 0;
         } else {
@@ -405,7 +406,10 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +497,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9508)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9508)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9508)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9508)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9511)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9511)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9511)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +442,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9511)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9511)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9511)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9511)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,9 +405,11 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +496,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1057,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9956)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9956)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9956)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9956)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9956)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9956)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v9956)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11157)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11157)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11157)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +953,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -975,13 +977,8 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
-            boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
-            }
-        }
+        if (chunkSize > 0)
+			len += (len / chunkSize) * chunkSeparator.length;
         return len;
     }
 
@@ -1052,7 +1049,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11157)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11157)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11157)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11157)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11818)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11818)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11818)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,15 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +495,24 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +998,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1070,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11818)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11818)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11818)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v11818)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,9 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -441,7 +444,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +495,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +955,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +984,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1056,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v15055)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v15055)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v15055)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -405,7 +404,8 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +459,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+			case '\n':
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +955,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1056,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v15055)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v15055)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v15055)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v15055)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -408,10 +407,10 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +491,25 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +968,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +990,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16514)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16514)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16514)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,9 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -441,7 +443,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +494,40 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +986,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16514)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16514)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16514)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16514)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16597)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16597)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16597)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,9 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +495,57 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1004,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1026,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16597)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16597)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16597)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16597)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16899)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16899)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16899)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -405,9 +404,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,7 +496,24 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +972,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1001,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16899)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16899)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16899)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v16899)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,9 +405,11 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -441,7 +443,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +494,23 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +969,10 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +994,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1072,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17450)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17450)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17450)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -408,6 +407,8 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,7 +494,56 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1002,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1024,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17450)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17450)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17450)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v17450)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,9 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -452,6 +456,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						readPos = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -493,7 +498,39 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +989,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1018,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19009)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19009)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19009)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,15 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -459,6 +461,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+			case '\n':
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +496,24 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +972,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +995,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19009)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19009)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19009)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19009)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19085)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19085)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19085)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -405,9 +404,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -452,13 +454,14 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
+						buffer[pos++] = PAD;
                     }
                     break;
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+			case '\n':
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +496,23 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +971,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,11 +993,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19085)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19085)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19085)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19085)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19429)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19429)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19429)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,11 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +463,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+			case '\n':
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +498,40 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +990,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1013,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19429)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19429)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19429)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v19429)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20022)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20022)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20022)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,9 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -452,6 +456,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						readPos = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -493,7 +498,40 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +990,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1020,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20022)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20022)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20022)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20022)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20648)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20648)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20648)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +493,88 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1033,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1062,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20648)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20648)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20648)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v20648)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v23801)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v23801)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v23801)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -405,7 +404,10 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +495,42 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +989,10 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1014,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v23801)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v23801)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v23801)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v23801)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v24068)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v24068)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v24068)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,9 +406,15 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,7 +500,25 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +977,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,11 +999,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v24068)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v24068)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v24068)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v24068)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25293)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25293)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25293)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,6 +408,7 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -458,7 +459,8 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				eof = true;
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +495,42 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +989,12 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,11 +1016,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25293)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25293)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25293)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25293)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25658)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25658)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25658)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -383,7 +384,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -405,7 +405,11 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +497,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +958,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +988,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25658)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25658)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25658)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v25658)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27129)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27129)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27129)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,7 +406,10 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -458,7 +462,8 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				eof = true;
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +498,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +960,11 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +986,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27129)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27129)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27129)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27129)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27885)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27885)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27885)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +499,12 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +964,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +993,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27885)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27885)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27885)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v27885)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v28065)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v28065)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v28065)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,7 +406,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -458,7 +465,8 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				eof = true;
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +501,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +965,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +994,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v28065)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v28065)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v28065)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v28065)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v29483)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v29483)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v29483)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -441,7 +446,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +497,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +960,10 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v29483)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v29483)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v29483)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v29483)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32264)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32264)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32264)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,13 +406,16 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +445,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -458,7 +461,8 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				eof = true;
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +497,31 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +980,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1002,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32264)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32264)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32264)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32264)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32473)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32473)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32473)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,17 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +497,30 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +979,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1009,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32473)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32473)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32473)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32473)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32615)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32615)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32615)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,13 +406,20 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +501,27 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +980,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1003,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32615)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32615)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32615)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v32615)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33022)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33022)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33022)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,7 +406,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -458,7 +465,8 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				eof = true;
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +501,27 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +980,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1010,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33022)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33022)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33022)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33022)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33450)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33450)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33450)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,13 +406,20 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +501,27 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +980,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1010,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33450)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33450)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33450)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v33450)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34292)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34292)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34292)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +500,32 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +984,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1012,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34292)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34292)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34292)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34292)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34440)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34440)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34440)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -441,7 +447,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +498,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +961,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34440)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34440)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34440)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v34440)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36410)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36410)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36410)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,13 +406,21 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +502,13 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +968,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +990,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36410)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36410)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36410)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36410)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36655)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36655)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36655)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +500,15 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +968,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +990,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36655)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36655)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36655)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v36655)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37816)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37816)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37816)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,7 +406,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +499,64 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1036,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1112,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
+        currentLinePos = 0;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37816)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37816)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37816)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37816)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37887)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37887)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37887)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,16 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -441,13 +450,13 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +502,14 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +969,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +991,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1067,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
+        currentLinePos = 0;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37887)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37887)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37887)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v37887)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38061)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38061)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38061)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +498,65 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1015,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1043,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38061)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38061)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38061)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38061)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38443)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38443)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38443)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +499,64 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1036,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1112,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
+        currentLinePos = 0;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38443)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38443)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38443)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v38443)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v39844)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v39844)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v39844)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,7 +406,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -447,7 +454,8 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +501,15 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +969,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -979,7 +997,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,7 +1067,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
+        currentLinePos = 0;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v39844)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v39844)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v39844)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v39844)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40661)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40661)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40661)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,11 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +497,35 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1005,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40661)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40661)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40661)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40661)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40879)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40879)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40879)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +498,29 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +980,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1008,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40879)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40879)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40879)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v40879)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41014)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41014)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41014)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,18 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +504,31 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +987,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1010,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41014)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41014)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41014)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41014)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41664)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41664)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41664)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,15 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +501,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +971,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1001,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41664)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41664)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41664)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v41664)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v43224)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v43224)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v43224)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +499,38 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1016,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,7 +1086,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
+        currentLinePos = 0;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v43224)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v43224)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v43224)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v43224)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45068)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45068)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45068)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			byte[] buf = new byte[pos - readPos];
         } else {
             this.encodeSize = 4;
         }
@@ -405,7 +406,15 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +502,16 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45068)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45068)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45068)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45068)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45669)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45669)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45669)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -405,7 +404,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +497,68 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -951,7 +1016,9 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		eof = false;
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1046,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45669)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45669)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45669)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v45669)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v46641)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v46641)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v46641)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +500,69 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1021,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1043,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v46641)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v46641)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v46641)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v46641)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v47664)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v47664)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v47664)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,9 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +495,71 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1018,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1040,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v47664)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v47664)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v47664)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v47664)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v49268)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v49268)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v49268)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +498,35 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						x = (x << 8) + b;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +985,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,11 +1009,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v49268)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v49268)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v49268)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v49268)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v50281)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v50281)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v50281)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,15 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -441,7 +449,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +500,35 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +988,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v50281)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v50281)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v50281)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v50281)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +498,69 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1019,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1049,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52256)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52256)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52256)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +499,54 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1005,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1029,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52256)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52256)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52256)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52256)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52271)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52271)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52271)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -441,7 +446,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +497,51 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						eof = false;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1000,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1024,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52271)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52271)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52271)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52271)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52810)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52810)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52810)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,16 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +502,37 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						x = (x << 8) + b;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +991,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1015,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52810)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52810)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52810)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v52810)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v53094)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v53094)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v53094)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,9 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -441,7 +443,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +494,22 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos = 0;
+						eof = false;
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +969,12 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1002,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v53094)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v53094)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v53094)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v53094)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v54606)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v54606)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v54606)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,15 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +501,54 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1007,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1030,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v54606)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v54606)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v54606)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v54606)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v55295)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v55295)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v55295)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,16 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +502,39 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +993,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1023,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v55295)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v55295)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v55295)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:58 [main] [INFO]  PatchLogExporter - patch (v55295)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,10 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +496,41 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						eof = false;
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -826,10 +864,7 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
-                len +
-                ") than the specified maxium size of " +
-                maxResultSize);
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
         }
                 
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
@@ -952,6 +987,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -1052,6 +1089,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
+		currentLinePos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				String sep = StringUtils.newStringUtf8(lineSeparator);
+				throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
+			}
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v55486)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v57893)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v57893)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v57893)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,12 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +498,55 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+						currentLinePos += 4;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1005,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1029,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v57893)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v57893)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v57893)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v57893)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v58618)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v58618)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v58618)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,19 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +499,86 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1037,12 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1064,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v58618)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v58618)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v58618)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v58618)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62055)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62055)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62055)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,16 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +496,57 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1005,10 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,7 +1030,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62055)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62055)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62055)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62055)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62290)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62290)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62290)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,20 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +500,83 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos += 4;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1035,11 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1067,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62290)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62290)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62290)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v62290)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63077)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63077)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63077)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,21 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +501,72 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +1025,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1054,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63077)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63077)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63077)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63077)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63268)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63268)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63268)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +499,40 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +991,11 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1023,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63268)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63268)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63268)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63268)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63419)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63419)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63419)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,14 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +500,87 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						eof = false;
                         currentLinePos = 0;
                     }
                 }
@@ -952,6 +1040,10 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -974,6 +1066,7 @@
         long mod = len % 4;
         if (mod != 0) {
             len += 4 - mod;
+			return len;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63419)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63419)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63419)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63419)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63641)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63641)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63641)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,17 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +503,42 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +997,10 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -979,7 +1028,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63641)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63641)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63641)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  PatchLogExporter - patch (v63641)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 12:34:59 [main] [INFO]  KGenProgMain - Summary
Reached generation = 320
Generated variants = 63641
Syntax valid variants = 56585
Build succeeded variants = 32179
Time elapsed = 3 hours 54 minutes 47 seconds
Exit status = SUCCESS
