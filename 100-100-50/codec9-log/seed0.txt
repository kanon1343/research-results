2023-11-05 12:22:14 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-05 12:22:14 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-05 12:22:14 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-05 12:22:14 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 0 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-05 12:22:23 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-05 12:22:23 [main] [INFO]  KGenProgMain - GA started
2023-11-05 12:22:23 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-05 12:22:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 100, build-succeeded 11, build-failed 56, syntax-invalid 7, redundant 26
Fitness: max 1(1), min 0.49(1), ave 0.818
Test execution time: sum 2078 ms, max 341 ms, min 127 ms
----------------------------------------------------------------

2023-11-05 12:22:31 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-05 12:22:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, build-succeeded 17, build-failed 54, syntax-invalid 6, redundant 23
Fitness: max 0.98(1), min 0.216(1), ave 0.734
Test execution time: sum 2269 ms, max 232 ms, min 91 ms
----------------------------------------------------------------

2023-11-05 12:22:40 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-05 12:23:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 seconds
Variants: generated 200, build-succeeded 63, build-failed 49, syntax-invalid 13, redundant 75
Fitness: max 0.98(4), min 0.353(1), ave 0.726
Test execution time: sum 10450 ms, max 3690 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 12:23:00 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-05 12:23:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 4 seconds
Variants: generated 200, build-succeeded 58, build-failed 49, syntax-invalid 23, redundant 70
Fitness: max 0.98(6), min 0.314(1), ave 0.836
Test execution time: sum 17624 ms, max 3350 ms, min 75 ms
----------------------------------------------------------------

2023-11-05 12:23:28 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-05 12:23:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 33 seconds
Variants: generated 200, build-succeeded 55, build-failed 66, syntax-invalid 17, redundant 62
Fitness: max 0.98(12), min 0.49(2), ave 0.894
Test execution time: sum 17941 ms, max 3584 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 12:23:56 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-05 12:24:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 6 seconds
Variants: generated 200, build-succeeded 71, build-failed 65, syntax-invalid 12, redundant 52
Fitness: max 0.98(23), min 0.49(1), ave 0.91
Test execution time: sum 21290 ms, max 3119 ms, min 81 ms
----------------------------------------------------------------

2023-11-05 12:24:29 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-05 12:24:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 21 seconds
Variants: generated 200, build-succeeded 59, build-failed 59, syntax-invalid 21, redundant 61
Fitness: max 0.98(42), min 0.471(1), ave 0.936
Test execution time: sum 7087 ms, max 229 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 12:24:44 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-05 12:24:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 34 seconds
Variants: generated 200, build-succeeded 53, build-failed 59, syntax-invalid 14, redundant 74
Fitness: max 0.98(31), min 0.49(1), ave 0.92
Test execution time: sum 6413 ms, max 300 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 12:24:58 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-05 12:25:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 50 seconds
Variants: generated 200, build-succeeded 55, build-failed 63, syntax-invalid 9, redundant 73
Fitness: max 0.98(42), min 0.49(1), ave 0.938
Test execution time: sum 7055 ms, max 338 ms, min 94 ms
----------------------------------------------------------------

2023-11-05 12:25:13 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-05 12:25:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 6 seconds
Variants: generated 200, build-succeeded 70, build-failed 58, syntax-invalid 10, redundant 62
Fitness: max 0.98(47), min 0.235(1), ave 0.925
Test execution time: sum 8705 ms, max 294 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 12:25:30 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-05 12:25:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 24 seconds
Variants: generated 200, build-succeeded 74, build-failed 53, syntax-invalid 17, redundant 56
Fitness: max 0.98(48), min 0.314(1), ave 0.925
Test execution time: sum 9305 ms, max 296 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 12:25:48 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-05 12:26:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 45 seconds
Variants: generated 200, build-succeeded 66, build-failed 58, syntax-invalid 13, redundant 63
Fitness: max 0.98(46), min 0.353(1), ave 0.914
Test execution time: sum 12881 ms, max 5743 ms, min 74 ms
----------------------------------------------------------------

2023-11-05 12:26:08 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-05 12:26:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 4 seconds
Variants: generated 200, build-succeeded 78, build-failed 67, syntax-invalid 12, redundant 43
Fitness: max 0.98(62), min 0.471(1), ave 0.943
Test execution time: sum 9688 ms, max 425 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 12:26:27 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-05 12:26:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 21 seconds
Variants: generated 200, build-succeeded 74, build-failed 58, syntax-invalid 13, redundant 55
Fitness: max 0.98(64), min 0.294(1), ave 0.94
Test execution time: sum 8488 ms, max 212 ms, min 81 ms
----------------------------------------------------------------

2023-11-05 12:26:45 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-05 12:27:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 37 seconds
Variants: generated 200, build-succeeded 66, build-failed 72, syntax-invalid 17, redundant 45
Fitness: max 0.98(58), min 0.667(1), ave 0.966
Test execution time: sum 7745 ms, max 317 ms, min 92 ms
----------------------------------------------------------------

2023-11-05 12:27:00 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-05 12:27:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 57 seconds
Variants: generated 200, build-succeeded 87, build-failed 60, syntax-invalid 10, redundant 43
Fitness: max 0.98(73), min 0.235(1), ave 0.956
Test execution time: sum 10659 ms, max 220 ms, min 89 ms
----------------------------------------------------------------

2023-11-05 12:27:21 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-05 12:27:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 22 seconds
Variants: generated 200, build-succeeded 94, build-failed 55, syntax-invalid 12, redundant 39
Fitness: max 0.98(71), min 0.216(1), ave 0.94
Test execution time: sum 13920 ms, max 3301 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 12:27:45 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-05 12:28:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 50 seconds
Variants: generated 200, build-succeeded 86, build-failed 58, syntax-invalid 17, redundant 39
Fitness: max 0.98(62), min 0.176(1), ave 0.93
Test execution time: sum 19442 ms, max 9530 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 12:28:13 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-05 12:28:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 14 seconds
Variants: generated 200, build-succeeded 84, build-failed 60, syntax-invalid 20, redundant 36
Fitness: max 0.98(65), min 0.216(1), ave 0.939
Test execution time: sum 13225 ms, max 3605 ms, min 72 ms
----------------------------------------------------------------

2023-11-05 12:28:37 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-05 12:28:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 35 seconds
Variants: generated 200, build-succeeded 91, build-failed 61, syntax-invalid 21, redundant 27
Fitness: max 0.98(76), min 0.667(1), ave 0.959
Test execution time: sum 11321 ms, max 324 ms, min 93 ms
----------------------------------------------------------------

2023-11-05 12:28:59 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-05 12:29:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 57 seconds
Variants: generated 200, build-succeeded 90, build-failed 62, syntax-invalid 22, redundant 26
Fitness: max 0.98(74), min 0.353(1), ave 0.947
Test execution time: sum 11133 ms, max 274 ms, min 75 ms
----------------------------------------------------------------

2023-11-05 12:29:20 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-05 12:29:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 23 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 15, redundant 22
Fitness: max 1(1), min 0.49(1), ave 0.95
Test execution time: sum 16263 ms, max 4922 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 12:29:47 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-05 12:30:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 45 seconds
Variants: generated 200, build-succeeded 100, build-failed 52, syntax-invalid 22, redundant 26
Fitness: max 0.98(80), min 0.49(2), ave 0.946
Test execution time: sum 11851 ms, max 285 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 12:30:09 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-05 12:30:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 10 seconds
Variants: generated 200, build-succeeded 98, build-failed 61, syntax-invalid 25, redundant 16
Fitness: max 0.98(80), min 0.353(1), ave 0.951
Test execution time: sum 13083 ms, max 1186 ms, min 97 ms
----------------------------------------------------------------

2023-11-05 12:30:33 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-05 12:30:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 33 seconds
Variants: generated 200, build-succeeded 102, build-failed 56, syntax-invalid 22, redundant 20
Fitness: max 0.98(86), min 0.471(1), ave 0.963
Test execution time: sum 12901 ms, max 423 ms, min 81 ms
----------------------------------------------------------------

2023-11-05 12:30:57 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-05 12:31:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 5 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 19, redundant 18
Fitness: max 1(1), min 0.353(1), ave 0.944
Test execution time: sum 19164 ms, max 3725 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 12:31:28 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-05 12:31:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 32 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 14, redundant 13
Fitness: max 1(2), min 0.471(2), ave 0.952
Test execution time: sum 13969 ms, max 253 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 12:31:55 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-05 12:32:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 56 seconds
Variants: generated 200, build-succeeded 104, build-failed 60, syntax-invalid 22, redundant 14
Fitness: max 1(1), min 0.765(1), ave 0.963
Test execution time: sum 13509 ms, max 358 ms, min 97 ms
----------------------------------------------------------------

2023-11-05 12:32:19 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-05 12:32:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 23 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 21, redundant 14
Fitness: max 0.98(88), min 0.49(1), ave 0.959
Test execution time: sum 15850 ms, max 3256 ms, min 92 ms
----------------------------------------------------------------

2023-11-05 12:32:47 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-05 12:33:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 50 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 12, redundant 14
Fitness: max 1(2), min 0.49(1), ave 0.953
Test execution time: sum 15189 ms, max 2324 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 12:33:14 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-05 12:33:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 17 seconds
Variants: generated 200, build-succeeded 126, build-failed 54, syntax-invalid 8, redundant 12
Fitness: max 0.98(108), min 0.549(3), ave 0.958
Test execution time: sum 14532 ms, max 393 ms, min 74 ms
----------------------------------------------------------------

2023-11-05 12:33:40 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-05 12:34:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 50, syntax-invalid 17, redundant 26
Fitness: max 0.98(85), min 0.471(1), ave 0.941
Test execution time: sum 12367 ms, max 302 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 12:34:04 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-05 12:34:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 9 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 8, redundant 20
Fitness: max 0.98(99), min 0.275(1), ave 0.961
Test execution time: sum 16454 ms, max 3480 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 12:34:33 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-05 12:35:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 38 seconds
Variants: generated 200, build-succeeded 114, build-failed 65, syntax-invalid 11, redundant 10
Fitness: max 0.98(102), min 0.549(3), ave 0.959
Test execution time: sum 15819 ms, max 349 ms, min 96 ms
----------------------------------------------------------------

2023-11-05 12:35:02 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-05 12:35:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 8 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 9, redundant 18
Fitness: max 0.98(101), min 0.49(1), ave 0.957
Test execution time: sum 16278 ms, max 1352 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 12:35:31 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-05 12:35:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 35 seconds
Variants: generated 200, build-succeeded 103, build-failed 69, syntax-invalid 11, redundant 17
Fitness: max 0.98(98), min 0.765(1), ave 0.975
Test execution time: sum 13592 ms, max 372 ms, min 100 ms
----------------------------------------------------------------

2023-11-05 12:35:58 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-05 12:36:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 4 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 12, redundant 15
Fitness: max 0.98(103), min 0.549(1), ave 0.962
Test execution time: sum 15591 ms, max 2727 ms, min 89 ms
----------------------------------------------------------------

2023-11-05 12:36:27 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-05 12:36:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 26 seconds
Variants: generated 200, build-succeeded 99, build-failed 64, syntax-invalid 15, redundant 22
Fitness: max 0.98(91), min 0.235(1), ave 0.963
Test execution time: sum 11383 ms, max 202 ms, min 88 ms
----------------------------------------------------------------

2023-11-05 12:36:49 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-05 12:37:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 54 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 15, redundant 11
Fitness: max 1(1), min 0.549(2), ave 0.958
Test execution time: sum 15646 ms, max 557 ms, min 92 ms
----------------------------------------------------------------

2023-11-05 12:37:18 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-05 12:37:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 18 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 17, redundant 12
Fitness: max 0.98(99), min 0.49(1), ave 0.966
Test execution time: sum 13578 ms, max 287 ms, min 95 ms
----------------------------------------------------------------

2023-11-05 12:37:41 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-05 12:38:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 47 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 12, redundant 12
Fitness: max 0.98(96), min 0.49(3), ave 0.949
Test execution time: sum 15955 ms, max 500 ms, min 83 ms
----------------------------------------------------------------

2023-11-05 12:38:10 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-05 12:38:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 10 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 22, redundant 11
Fitness: max 1(1), min 0.49(2), ave 0.954
Test execution time: sum 12807 ms, max 263 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 12:38:33 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-05 12:38:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 30 seconds
Variants: generated 200, build-succeeded 109, build-failed 65, syntax-invalid 13, redundant 13
Fitness: max 0.98(97), min 0.333(1), ave 0.96
Test execution time: sum 10971 ms, max 372 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 12:38:53 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-05 12:39:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 47 seconds
Variants: generated 200, build-succeeded 97, build-failed 60, syntax-invalid 26, redundant 17
Fitness: max 0.98(85), min 0.353(1), ave 0.952
Test execution time: sum 8591 ms, max 200 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 12:39:10 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-05 12:39:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 5 seconds
Variants: generated 200, build-succeeded 114, build-failed 47, syntax-invalid 23, redundant 16
Fitness: max 0.98(91), min 0.49(4), ave 0.944
Test execution time: sum 10184 ms, max 256 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 12:39:28 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-05 12:39:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 23 seconds
Variants: generated 200, build-succeeded 102, build-failed 58, syntax-invalid 12, redundant 28
Fitness: max 1(1), min 0.765(2), ave 0.971
Test execution time: sum 9862 ms, max 205 ms, min 72 ms
----------------------------------------------------------------

2023-11-05 12:39:46 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-05 12:40:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 42 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 20, redundant 24
Fitness: max 0.98(88), min 0.588(1), ave 0.967
Test execution time: sum 10478 ms, max 470 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 12:40:05 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-05 12:40:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 2 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 10, redundant 18
Fitness: max 0.98(96), min 0.275(1), ave 0.945
Test execution time: sum 11008 ms, max 305 ms, min 62 ms
----------------------------------------------------------------

2023-11-05 12:40:26 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-05 12:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 22 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 16, redundant 12
Fitness: max 0.98(99), min 0.49(1), ave 0.966
Test execution time: sum 10946 ms, max 356 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 12:40:45 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-05 12:41:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 48 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 14, redundant 16
Fitness: max 0.98(98), min 0.157(1), ave 0.949
Test execution time: sum 15502 ms, max 3582 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 12:41:12 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-05 12:41:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 9 seconds
Variants: generated 200, build-succeeded 105, build-failed 60, syntax-invalid 26, redundant 9
Fitness: max 0.98(88), min 0.49(3), ave 0.952
Test execution time: sum 11087 ms, max 272 ms, min 75 ms
----------------------------------------------------------------

2023-11-05 12:41:33 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-05 12:41:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 30 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 20, redundant 8
Fitness: max 0.98(95), min 0.549(2), ave 0.956
Test execution time: sum 11387 ms, max 325 ms, min 79 ms
----------------------------------------------------------------

2023-11-05 12:41:53 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-05 12:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 51 seconds
Variants: generated 200, build-succeeded 115, build-failed 65, syntax-invalid 12, redundant 8
Fitness: max 0.98(105), min 0.765(2), ave 0.971
Test execution time: sum 11770 ms, max 990 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 12:42:14 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-05 12:42:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 10 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 24, redundant 11
Fitness: max 1(1), min 0.431(1), ave 0.954
Test execution time: sum 8981 ms, max 192 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 12:42:33 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-05 12:42:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 31 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 18, redundant 13
Fitness: max 0.98(94), min 0.353(1), ave 0.95
Test execution time: sum 11206 ms, max 1260 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 12:42:55 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-05 12:43:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 52 seconds
Variants: generated 200, build-succeeded 116, build-failed 53, syntax-invalid 25, redundant 6
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 10138 ms, max 191 ms, min 59 ms
----------------------------------------------------------------

2023-11-05 12:43:15 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-05 12:43:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 11 seconds
Variants: generated 200, build-succeeded 114, build-failed 65, syntax-invalid 15, redundant 6
Fitness: max 0.98(101), min 0.667(1), ave 0.966
Test execution time: sum 9888 ms, max 186 ms, min 68 ms
----------------------------------------------------------------

2023-11-05 12:43:35 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-05 12:43:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 32 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 23, redundant 14
Fitness: max 0.98(92), min 0.49(1), ave 0.963
Test execution time: sum 9770 ms, max 227 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 12:43:55 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-05 12:44:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 52 seconds
Variants: generated 200, build-succeeded 113, build-failed 52, syntax-invalid 24, redundant 11
Fitness: max 0.98(98), min 0.471(2), ave 0.956
Test execution time: sum 9806 ms, max 178 ms, min 55 ms
----------------------------------------------------------------

2023-11-05 12:44:15 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-05 12:44:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 12 seconds
Variants: generated 200, build-succeeded 119, build-failed 54, syntax-invalid 15, redundant 12
Fitness: max 0.98(104), min 0.549(1), ave 0.962
Test execution time: sum 9952 ms, max 144 ms, min 68 ms
----------------------------------------------------------------

2023-11-05 12:44:35 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-05 12:44:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 32 seconds
Variants: generated 200, build-succeeded 112, build-failed 61, syntax-invalid 21, redundant 6
Fitness: max 0.98(99), min 0.49(1), ave 0.959
Test execution time: sum 9615 ms, max 210 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 12:44:55 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-05 12:45:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 52 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 15, redundant 9
Fitness: max 1(1), min 0.784(1), ave 0.972
Test execution time: sum 9919 ms, max 227 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 12:45:15 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-05 12:45:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 11 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 19, redundant 8
Fitness: max 1(1), min 0.353(1), ave 0.967
Test execution time: sum 9537 ms, max 181 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 12:45:35 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-05 12:45:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 32 seconds
Variants: generated 200, build-succeeded 114, build-failed 63, syntax-invalid 15, redundant 8
Fitness: max 0.98(104), min 0.157(1), ave 0.962
Test execution time: sum 9854 ms, max 190 ms, min 54 ms
----------------------------------------------------------------

2023-11-05 12:45:55 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-05 12:46:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 55 seconds
Variants: generated 200, build-succeeded 120, build-failed 61, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0.275(1), ave 0.957
Test execution time: sum 11793 ms, max 1284 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 12:46:18 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-05 12:46:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 16 seconds
Variants: generated 200, build-succeeded 121, build-failed 56, syntax-invalid 18, redundant 5
Fitness: max 0.98(99), min 0.49(2), ave 0.953
Test execution time: sum 10611 ms, max 150 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 12:46:39 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-05 12:47:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 39 seconds
Variants: generated 200, build-succeeded 126, build-failed 58, syntax-invalid 8, redundant 8
Fitness: max 0.98(112), min 0.49(2), ave 0.96
Test execution time: sum 11720 ms, max 241 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 12:47:02 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-05 12:47:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 2 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 20, redundant 7
Fitness: max 0.98(92), min 0.49(1), ave 0.96
Test execution time: sum 11537 ms, max 1384 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 12:47:25 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-05 12:47:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 25 seconds
Variants: generated 200, build-succeeded 125, build-failed 53, syntax-invalid 15, redundant 7
Fitness: max 0.98(106), min 0.49(1), ave 0.958
Test execution time: sum 11557 ms, max 205 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 12:47:48 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-05 12:48:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 51 seconds
Variants: generated 200, build-succeeded 121, build-failed 62, syntax-invalid 13, redundant 4
Fitness: max 0.98(105), min 0.471(1), ave 0.958
Test execution time: sum 13446 ms, max 355 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 12:48:14 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-05 12:48:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 14 seconds
Variants: generated 200, build-succeeded 116, build-failed 59, syntax-invalid 12, redundant 13
Fitness: max 0.98(105), min 0.353(1), ave 0.965
Test execution time: sum 11478 ms, max 315 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 12:48:38 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-05 12:49:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 37 seconds
Variants: generated 200, build-succeeded 126, build-failed 44, syntax-invalid 13, redundant 17
Fitness: max 1(1), min 0.49(2), ave 0.96
Test execution time: sum 11349 ms, max 232 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 12:49:00 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-05 12:49:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 1 seconds
Variants: generated 200, build-succeeded 122, build-failed 59, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0.49(2), ave 0.962
Test execution time: sum 13128 ms, max 2534 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 12:49:24 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-05 12:49:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 25 seconds
Variants: generated 200, build-succeeded 126, build-failed 62, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0.765(2), ave 0.966
Test execution time: sum 12423 ms, max 1138 ms, min 72 ms
----------------------------------------------------------------

2023-11-05 12:49:48 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-05 12:50:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 45 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 18, redundant 8
Fitness: max 1(1), min 0.549(1), ave 0.964
Test execution time: sum 9718 ms, max 187 ms, min 54 ms
----------------------------------------------------------------

2023-11-05 12:50:08 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-05 12:50:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 7 seconds
Variants: generated 200, build-succeeded 117, build-failed 65, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.373(1), ave 0.954
Test execution time: sum 10168 ms, max 168 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 12:50:30 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-05 12:50:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 28 seconds
Variants: generated 200, build-succeeded 113, build-failed 68, syntax-invalid 17, redundant 2
Fitness: max 0.98(97), min 0.49(1), ave 0.956
Test execution time: sum 10011 ms, max 190 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 12:50:51 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-05 12:51:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 50 seconds
Variants: generated 200, build-succeeded 115, build-failed 68, syntax-invalid 10, redundant 7
Fitness: max 0.98(107), min 0.49(1), ave 0.97
Test execution time: sum 10319 ms, max 181 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 12:51:13 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-05 12:51:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 11 seconds
Variants: generated 200, build-succeeded 114, build-failed 52, syntax-invalid 25, redundant 9
Fitness: max 0.98(100), min 0.49(1), ave 0.958
Test execution time: sum 10247 ms, max 189 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 12:51:34 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-05 12:51:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 35 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 23, redundant 3
Fitness: max 0.98(96), min 0.333(1), ave 0.958
Test execution time: sum 11700 ms, max 210 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 12:51:58 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-05 12:52:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 0 seconds
Variants: generated 200, build-succeeded 123, build-failed 50, syntax-invalid 17, redundant 10
Fitness: max 0.98(104), min 0.529(1), ave 0.958
Test execution time: sum 12149 ms, max 214 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 12:52:23 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-05 12:52:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 23 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 14, redundant 8
Fitness: max 1(1), min 0.549(2), ave 0.96
Test execution time: sum 11612 ms, max 204 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 12:52:47 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-05 12:53:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 44 seconds
Variants: generated 200, build-succeeded 105, build-failed 68, syntax-invalid 23, redundant 4
Fitness: max 1(1), min 0.49(1), ave 0.968
Test execution time: sum 9580 ms, max 200 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 12:53:08 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-05 12:53:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 4 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 19, redundant 14
Fitness: max 1(1), min 0.569(1), ave 0.965
Test execution time: sum 9510 ms, max 200 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 12:53:28 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-05 12:53:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 25 seconds
Variants: generated 200, build-succeeded 117, build-failed 59, syntax-invalid 15, redundant 9
Fitness: max 0.98(104), min 0.314(1), ave 0.959
Test execution time: sum 10224 ms, max 178 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 12:53:48 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-05 12:54:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 47 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 18, redundant 10
Fitness: max 1(1), min 0.157(1), ave 0.953
Test execution time: sum 10169 ms, max 206 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 12:54:10 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-05 12:54:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 10 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 17, redundant 5
Fitness: max 1(1), min 0.51(1), ave 0.958
Test execution time: sum 11207 ms, max 200 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 12:54:33 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-05 12:54:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 33 seconds
Variants: generated 200, build-succeeded 124, build-failed 51, syntax-invalid 12, redundant 13
Fitness: max 1(2), min 0.49(1), ave 0.966
Test execution time: sum 11185 ms, max 219 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 12:54:56 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-05 12:55:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 62, syntax-invalid 16, redundant 8
Fitness: max 1(1), min 0.49(1), ave 0.961
Test execution time: sum 9983 ms, max 149 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 12:55:17 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-05 12:55:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 20 seconds
Variants: generated 200, build-succeeded 123, build-failed 57, syntax-invalid 14, redundant 6
Fitness: max 0.98(109), min 0.157(1), ave 0.947
Test execution time: sum 12980 ms, max 1223 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 12:55:43 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-05 12:56:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 45 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 12, redundant 18
Fitness: max 0.98(93), min 0.49(1), ave 0.948
Test execution time: sum 10762 ms, max 202 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 12:56:08 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-05 12:56:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 8 seconds
Variants: generated 200, build-succeeded 108, build-failed 75, syntax-invalid 10, redundant 7
Fitness: max 0.98(98), min 0.49(1), ave 0.961
Test execution time: sum 10114 ms, max 202 ms, min 62 ms
----------------------------------------------------------------

2023-11-05 12:56:31 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-05 12:56:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 31 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 21, redundant 12
Fitness: max 0.98(99), min 0.49(1), ave 0.964
Test execution time: sum 10331 ms, max 155 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 12:56:55 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-05 12:57:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 59 seconds
Variants: generated 200, build-succeeded 119, build-failed 58, syntax-invalid 8, redundant 15
Fitness: max 0.98(106), min 0.49(1), ave 0.961
Test execution time: sum 14476 ms, max 2850 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 12:57:22 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-05 12:57:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 28 seconds
Variants: generated 200, build-succeeded 129, build-failed 51, syntax-invalid 13, redundant 7
Fitness: max 0.98(113), min 0.549(1), ave 0.96
Test execution time: sum 13379 ms, max 391 ms, min 72 ms
----------------------------------------------------------------

2023-11-05 12:57:51 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-05 12:58:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 52 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 18, redundant 14
Fitness: max 0.98(103), min 0.824(1), ave 0.973
Test execution time: sum 10848 ms, max 362 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 12:58:16 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-05 12:58:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 16 seconds
Variants: generated 200, build-succeeded 119, build-failed 54, syntax-invalid 22, redundant 5
Fitness: max 0.98(101), min 0.49(1), ave 0.96
Test execution time: sum 10824 ms, max 170 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 12:58:39 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-05 12:59:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 41 seconds
Variants: generated 200, build-succeeded 120, build-failed 51, syntax-invalid 21, redundant 8
Fitness: max 0.98(100), min 0.176(1), ave 0.952
Test execution time: sum 11112 ms, max 183 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 12:59:05 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-05 12:59:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 9 seconds
Variants: generated 200, build-succeeded 133, build-failed 49, syntax-invalid 14, redundant 4
Fitness: max 0.98(106), min 0.471(1), ave 0.948
Test execution time: sum 13409 ms, max 1032 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 12:59:32 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-05 12:59:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 35 seconds
Variants: generated 200, build-succeeded 121, build-failed 61, syntax-invalid 15, redundant 3
Fitness: max 0.98(108), min 0.549(1), ave 0.963
Test execution time: sum 11527 ms, max 197 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 12:59:59 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-05 13:00:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 58 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 25, redundant 11
Fitness: max 1(3), min 0.49(4), ave 0.943
Test execution time: sum 10157 ms, max 194 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 13:00:21 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-05 13:00:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 25 seconds
Variants: generated 200, build-succeeded 127, build-failed 48, syntax-invalid 14, redundant 11
Fitness: max 1(1), min 0.49(2), ave 0.951
Test execution time: sum 12040 ms, max 205 ms, min 55 ms
----------------------------------------------------------------

2023-11-05 13:00:48 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-05 13:01:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 51 seconds
Variants: generated 200, build-succeeded 118, build-failed 53, syntax-invalid 20, redundant 9
Fitness: max 0.98(98), min 0.373(1), ave 0.949
Test execution time: sum 11332 ms, max 330 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 13:01:15 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-05 13:01:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 20 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 26, redundant 6
Fitness: max 0.98(97), min 0.667(1), ave 0.971
Test execution time: sum 12616 ms, max 1360 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 13:01:43 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-05 13:02:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 46 seconds
Variants: generated 200, build-succeeded 103, build-failed 63, syntax-invalid 27, redundant 7
Fitness: max 0.98(91), min 0.725(2), ave 0.966
Test execution time: sum 10908 ms, max 334 ms, min 70 ms
----------------------------------------------------------------

2023-11-05 13:02:09 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-05 13:02:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 12 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 23, redundant 6
Fitness: max 0.98(97), min 0.49(2), ave 0.953
Test execution time: sum 11346 ms, max 233 ms, min 59 ms
----------------------------------------------------------------

2023-11-05 13:02:36 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-05 13:03:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 38 seconds
Variants: generated 200, build-succeeded 106, build-failed 68, syntax-invalid 22, redundant 4
Fitness: max 0.98(96), min 0.49(2), ave 0.957
Test execution time: sum 11802 ms, max 390 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 13:03:02 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-05 13:03:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 3 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 16, redundant 9
Fitness: max 0.98(103), min 0.49(1), ave 0.953
Test execution time: sum 11565 ms, max 295 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 13:03:27 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-05 13:03:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 25 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 24, redundant 6
Fitness: max 1(1), min 0.569(1), ave 0.962
Test execution time: sum 10377 ms, max 268 ms, min 70 ms
----------------------------------------------------------------

2023-11-05 13:03:49 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-05 13:04:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 46 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 23, redundant 7
Fitness: max 1(1), min 0.333(1), ave 0.944
Test execution time: sum 10134 ms, max 289 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 13:04:10 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-05 13:04:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 10 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 21, redundant 7
Fitness: max 0.98(104), min 0.51(1), ave 0.97
Test execution time: sum 10810 ms, max 200 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:04:34 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-05 13:04:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 33 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 20, redundant 8
Fitness: max 1(1), min 0.667(1), ave 0.969
Test execution time: sum 10538 ms, max 178 ms, min 74 ms
----------------------------------------------------------------

2023-11-05 13:04:56 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-05 13:05:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 55 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 26, redundant 8
Fitness: max 0.98(100), min 0.49(1), ave 0.964
Test execution time: sum 9902 ms, max 195 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 13:05:18 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-05 13:05:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 17 seconds
Variants: generated 200, build-succeeded 111, build-failed 71, syntax-invalid 13, redundant 5
Fitness: max 0.98(103), min 0.49(1), ave 0.969
Test execution time: sum 9929 ms, max 165 ms, min 57 ms
----------------------------------------------------------------

2023-11-05 13:05:40 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-05 13:06:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 41 seconds
Variants: generated 200, build-succeeded 119, build-failed 60, syntax-invalid 17, redundant 4
Fitness: max 1(1), min 0.49(2), ave 0.958
Test execution time: sum 11288 ms, max 239 ms, min 54 ms
----------------------------------------------------------------

2023-11-05 13:06:04 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-05 13:06:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 3 seconds
Variants: generated 200, build-succeeded 113, build-failed 65, syntax-invalid 12, redundant 10
Fitness: max 1(1), min 0.549(1), ave 0.968
Test execution time: sum 10219 ms, max 213 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 13:06:26 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-05 13:06:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 25 seconds
Variants: generated 200, build-succeeded 118, build-failed 65, syntax-invalid 14, redundant 3
Fitness: max 0.98(106), min 0.549(1), ave 0.964
Test execution time: sum 10648 ms, max 235 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 13:06:48 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-05 13:07:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 53 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 16, redundant 9
Fitness: max 0.98(110), min 0.549(1), ave 0.968
Test execution time: sum 13967 ms, max 2721 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 13:07:17 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-05 13:07:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 18, redundant 6
Fitness: max 0.98(99), min 0.353(1), ave 0.956
Test execution time: sum 10435 ms, max 370 ms, min 55 ms
----------------------------------------------------------------

2023-11-05 13:07:41 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-05 13:08:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 44 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 19, redundant 6
Fitness: max 1(1), min 0.49(1), ave 0.954
Test execution time: sum 11394 ms, max 205 ms, min 54 ms
----------------------------------------------------------------

2023-11-05 13:08:07 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-05 13:08:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 9 seconds
Variants: generated 200, build-succeeded 120, build-failed 52, syntax-invalid 18, redundant 10
Fitness: max 1(1), min 0.667(1), ave 0.968
Test execution time: sum 11134 ms, max 185 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 13:08:32 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-05 13:08:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 33 seconds
Variants: generated 200, build-succeeded 115, build-failed 53, syntax-invalid 23, redundant 9
Fitness: max 0.98(102), min 0.49(2), ave 0.959
Test execution time: sum 10626 ms, max 182 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 13:08:56 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-05 13:09:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 1 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 12, redundant 10
Fitness: max 0.98(100), min 0.49(1), ave 0.954
Test execution time: sum 12115 ms, max 276 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 13:09:24 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-05 13:09:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 26 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 23, redundant 10
Fitness: max 0.98(97), min 0.353(1), ave 0.956
Test execution time: sum 10674 ms, max 199 ms, min 62 ms
----------------------------------------------------------------

2023-11-05 13:09:49 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-05 13:10:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 56 seconds
Variants: generated 200, build-succeeded 120, build-failed 53, syntax-invalid 17, redundant 10
Fitness: max 0.98(104), min 0.667(1), ave 0.964
Test execution time: sum 13643 ms, max 1241 ms, min 75 ms
----------------------------------------------------------------

2023-11-05 13:10:19 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-05 13:10:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 23 seconds
Variants: generated 200, build-succeeded 119, build-failed 52, syntax-invalid 18, redundant 11
Fitness: max 1(1), min 0.314(1), ave 0.95
Test execution time: sum 11452 ms, max 262 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 13:10:46 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-05 13:11:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 51 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 22, redundant 4
Fitness: max 0.98(99), min 0.667(1), ave 0.965
Test execution time: sum 11872 ms, max 406 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 13:11:15 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-05 13:11:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 17 seconds
Variants: generated 200, build-succeeded 106, build-failed 67, syntax-invalid 23, redundant 4
Fitness: max 0.98(93), min 0.49(2), ave 0.955
Test execution time: sum 10641 ms, max 383 ms, min 59 ms
----------------------------------------------------------------

2023-11-05 13:11:40 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-05 13:12:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 46 seconds
Variants: generated 200, build-succeeded 123, build-failed 53, syntax-invalid 20, redundant 4
Fitness: max 1(2), min 0.667(1), ave 0.965
Test execution time: sum 13923 ms, max 1768 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 13:12:10 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-05 13:12:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 15 seconds
Variants: generated 200, build-succeeded 119, build-failed 52, syntax-invalid 20, redundant 9
Fitness: max 1(3), min 0.49(1), ave 0.963
Test execution time: sum 12357 ms, max 455 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 13:12:38 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-05 13:13:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 44 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 20, redundant 9
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 12781 ms, max 422 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 13:13:08 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-05 13:13:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 15 seconds
Variants: generated 200, build-succeeded 121, build-failed 61, syntax-invalid 16, redundant 2
Fitness: max 0.98(107), min 0.49(1), ave 0.955
Test execution time: sum 13570 ms, max 535 ms, min 66 ms
----------------------------------------------------------------

2023-11-05 13:13:38 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-05 13:14:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 43 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 18, redundant 9
Fitness: max 0.98(102), min 0.49(1), ave 0.96
Test execution time: sum 12230 ms, max 336 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:14:06 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-05 13:14:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 13 seconds
Variants: generated 200, build-succeeded 123, build-failed 55, syntax-invalid 17, redundant 5
Fitness: max 0.98(104), min 0.49(2), ave 0.951
Test execution time: sum 13742 ms, max 400 ms, min 55 ms
----------------------------------------------------------------

2023-11-05 13:14:37 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-05 13:15:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 39 seconds
Variants: generated 200, build-succeeded 125, build-failed 51, syntax-invalid 16, redundant 8
Fitness: max 0.98(108), min 0.549(1), ave 0.962
Test execution time: sum 11914 ms, max 281 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 13:15:02 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-05 13:15:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 14 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 14, redundant 9
Fitness: max 1(1), min 0.549(1), ave 0.957
Test execution time: sum 15293 ms, max 1932 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 13:15:37 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-05 13:16:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 48 seconds
Variants: generated 200, build-succeeded 129, build-failed 52, syntax-invalid 8, redundant 11
Fitness: max 0.98(113), min 0.49(1), ave 0.958
Test execution time: sum 14380 ms, max 401 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 13:16:12 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-05 13:16:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 22 seconds
Variants: generated 200, build-succeeded 119, build-failed 65, syntax-invalid 10, redundant 6
Fitness: max 0.98(105), min 0.157(1), ave 0.957
Test execution time: sum 14242 ms, max 1220 ms, min 55 ms
----------------------------------------------------------------

2023-11-05 13:16:45 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-05 13:17:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 52 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 21, redundant 7
Fitness: max 0.98(99), min 0.49(2), ave 0.955
Test execution time: sum 12818 ms, max 396 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 13:17:16 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-11-05 13:17:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 26 seconds
Variants: generated 200, build-succeeded 121, build-failed 63, syntax-invalid 8, redundant 8
Fitness: max 1(1), min 0.196(1), ave 0.961
Test execution time: sum 14197 ms, max 579 ms, min 70 ms
----------------------------------------------------------------

2023-11-05 13:17:49 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-11-05 13:18:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 57 seconds
Variants: generated 200, build-succeeded 122, build-failed 63, syntax-invalid 7, redundant 8
Fitness: max 0.98(111), min 0.157(1), ave 0.962
Test execution time: sum 13343 ms, max 420 ms, min 55 ms
----------------------------------------------------------------

2023-11-05 13:18:20 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-11-05 13:18:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 28 seconds
Variants: generated 200, build-succeeded 117, build-failed 63, syntax-invalid 11, redundant 9
Fitness: max 1(1), min 0.549(2), ave 0.967
Test execution time: sum 13219 ms, max 579 ms, min 58 ms
----------------------------------------------------------------

2023-11-05 13:18:51 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-11-05 13:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 18, redundant 13
Fitness: max 0.98(100), min 0.49(1), ave 0.962
Test execution time: sum 12975 ms, max 640 ms, min 56 ms
----------------------------------------------------------------

2023-11-05 13:19:22 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-11-05 13:19:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 28 seconds
Variants: generated 200, build-succeeded 115, build-failed 63, syntax-invalid 13, redundant 9
Fitness: max 0.98(104), min 0.49(1), ave 0.961
Test execution time: sum 11826 ms, max 363 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 13:19:51 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-11-05 13:20:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 58 seconds
Variants: generated 200, build-succeeded 124, build-failed 50, syntax-invalid 15, redundant 11
Fitness: max 1(1), min 0.176(1), ave 0.959
Test execution time: sum 12356 ms, max 194 ms, min 66 ms
----------------------------------------------------------------

2023-11-05 13:20:21 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-11-05 13:20:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 26 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 18, redundant 8
Fitness: max 0.98(99), min 0.49(1), ave 0.96
Test execution time: sum 11306 ms, max 263 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 13:20:50 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-11-05 13:21:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 56 seconds
Variants: generated 200, build-succeeded 119, build-failed 58, syntax-invalid 9, redundant 14
Fitness: max 0.98(111), min 0.843(1), ave 0.974
Test execution time: sum 13435 ms, max 1701 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 13:21:20 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-11-05 13:21:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 31 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 18, redundant 12
Fitness: max 1(1), min 0.49(1), ave 0.969
Test execution time: sum 13806 ms, max 1488 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 13:21:54 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-11-05 13:22:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 seconds
Variants: generated 200, build-succeeded 121, build-failed 61, syntax-invalid 9, redundant 9
Fitness: max 0.98(108), min 0.49(1), ave 0.962
Test execution time: sum 13264 ms, max 338 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 13:22:27 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-11-05 13:22:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 seconds
Variants: generated 200, build-succeeded 119, build-failed 68, syntax-invalid 8, redundant 5
Fitness: max 0.98(110), min 0.49(1), ave 0.965
Test execution time: sum 11887 ms, max 356 ms, min 62 ms
----------------------------------------------------------------

2023-11-05 13:22:56 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-11-05 13:23:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 2 seconds
Variants: generated 200, build-succeeded 114, build-failed 69, syntax-invalid 10, redundant 7
Fitness: max 0.98(104), min 0.49(1), ave 0.963
Test execution time: sum 11738 ms, max 283 ms, min 60 ms
----------------------------------------------------------------

2023-11-05 13:23:26 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-11-05 13:23:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 31 seconds
Variants: generated 200, build-succeeded 112, build-failed 66, syntax-invalid 18, redundant 4
Fitness: max 0.98(100), min 0.49(1), ave 0.966
Test execution time: sum 11813 ms, max 310 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 13:23:55 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-11-05 13:24:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 0 seconds
Variants: generated 200, build-succeeded 120, build-failed 63, syntax-invalid 9, redundant 8
Fitness: max 0.98(112), min 0.529(1), ave 0.972
Test execution time: sum 12437 ms, max 266 ms, min 74 ms
----------------------------------------------------------------

2023-11-05 13:24:23 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-11-05 13:24:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 30 seconds
Variants: generated 200, build-succeeded 124, build-failed 49, syntax-invalid 14, redundant 13
Fitness: max 0.98(105), min 0.333(1), ave 0.956
Test execution time: sum 15043 ms, max 2047 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:24:54 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-11-05 13:25:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 1 seconds
Variants: generated 200, build-succeeded 116, build-failed 64, syntax-invalid 12, redundant 8
Fitness: max 0.98(108), min 0.784(1), ave 0.974
Test execution time: sum 12934 ms, max 1361 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 13:25:25 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-11-05 13:25:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 33 seconds
Variants: generated 200, build-succeeded 127, build-failed 59, syntax-invalid 9, redundant 5
Fitness: max 0.98(113), min 0.294(1), ave 0.961
Test execution time: sum 13927 ms, max 1632 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 13:25:57 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-11-05 13:26:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 1 seconds
Variants: generated 200, build-succeeded 110, build-failed 64, syntax-invalid 19, redundant 7
Fitness: max 1(1), min 0.49(1), ave 0.967
Test execution time: sum 12234 ms, max 1821 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:26:25 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-11-05 13:26:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 30 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 17, redundant 5
Fitness: max 0.98(98), min 0.843(2), ave 0.969
Test execution time: sum 11255 ms, max 178 ms, min 79 ms
----------------------------------------------------------------

2023-11-05 13:26:54 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-11-05 13:27:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 0 seconds
Variants: generated 200, build-succeeded 122, build-failed 56, syntax-invalid 14, redundant 8
Fitness: max 1(1), min 0.549(2), ave 0.956
Test execution time: sum 12054 ms, max 289 ms, min 74 ms
----------------------------------------------------------------

2023-11-05 13:27:23 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-11-05 13:27:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 29 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 19, redundant 6
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 11828 ms, max 190 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 13:27:53 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-11-05 13:28:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 57 seconds
Variants: generated 200, build-succeeded 115, build-failed 65, syntax-invalid 16, redundant 4
Fitness: max 1(1), min 0.549(1), ave 0.964
Test execution time: sum 10889 ms, max 182 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 13:28:20 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-11-05 13:28:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 25 seconds
Variants: generated 200, build-succeeded 115, build-failed 56, syntax-invalid 18, redundant 11
Fitness: max 0.98(102), min 0.353(1), ave 0.957
Test execution time: sum 12087 ms, max 1247 ms, min 68 ms
----------------------------------------------------------------

2023-11-05 13:28:49 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-11-05 13:29:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 54 seconds
Variants: generated 200, build-succeeded 120, build-failed 60, syntax-invalid 11, redundant 9
Fitness: max 0.98(109), min 0.333(1), ave 0.967
Test execution time: sum 11926 ms, max 360 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 13:29:18 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-11-05 13:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 23 seconds
Variants: generated 200, build-succeeded 122, build-failed 62, syntax-invalid 7, redundant 9
Fitness: max 0.98(109), min 0.451(1), ave 0.955
Test execution time: sum 11638 ms, max 255 ms, min 62 ms
----------------------------------------------------------------

2023-11-05 13:29:46 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-11-05 13:30:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 51 seconds
Variants: generated 200, build-succeeded 116, build-failed 67, syntax-invalid 14, redundant 3
Fitness: max 0.98(107), min 0.667(2), ave 0.969
Test execution time: sum 11254 ms, max 212 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 13:30:15 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-11-05 13:30:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 19 seconds
Variants: generated 200, build-succeeded 125, build-failed 54, syntax-invalid 10, redundant 11
Fitness: max 1(1), min 0.431(1), ave 0.958
Test execution time: sum 11730 ms, max 182 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:30:43 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-11-05 13:31:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 46 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 15, redundant 11
Fitness: max 0.98(107), min 0.49(2), ave 0.964
Test execution time: sum 10935 ms, max 218 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:31:09 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-11-05 13:31:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 12 seconds
Variants: generated 200, build-succeeded 117, build-failed 60, syntax-invalid 15, redundant 8
Fitness: max 1(1), min 0.49(1), ave 0.969
Test execution time: sum 11442 ms, max 250 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 13:31:35 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-11-05 13:32:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 38 seconds
Variants: generated 200, build-succeeded 112, build-failed 69, syntax-invalid 12, redundant 7
Fitness: max 0.98(102), min 0.588(1), ave 0.969
Test execution time: sum 10746 ms, max 202 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 13:32:01 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-11-05 13:32:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 6 seconds
Variants: generated 200, build-succeeded 123, build-failed 57, syntax-invalid 13, redundant 7
Fitness: max 0.98(110), min 0.549(1), ave 0.965
Test execution time: sum 12060 ms, max 239 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 13:32:29 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-11-05 13:32:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 33 seconds
Variants: generated 200, build-succeeded 116, build-failed 65, syntax-invalid 15, redundant 4
Fitness: max 1(1), min 0.176(1), ave 0.955
Test execution time: sum 11534 ms, max 283 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 13:32:57 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-11-05 13:33:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 4 seconds
Variants: generated 200, build-succeeded 124, build-failed 53, syntax-invalid 15, redundant 8
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 13794 ms, max 276 ms, min 68 ms
----------------------------------------------------------------

2023-11-05 13:33:28 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-11-05 13:33:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 34 seconds
Variants: generated 200, build-succeeded 121, build-failed 54, syntax-invalid 17, redundant 8
Fitness: max 0.98(106), min 0.49(1), ave 0.958
Test execution time: sum 13400 ms, max 245 ms, min 66 ms
----------------------------------------------------------------

2023-11-05 13:33:57 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-11-05 13:34:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 7 seconds
Variants: generated 200, build-succeeded 121, build-failed 58, syntax-invalid 12, redundant 9
Fitness: max 0.98(110), min 0.353(1), ave 0.96
Test execution time: sum 15560 ms, max 3211 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 13:34:30 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-11-05 13:34:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 36 seconds
Variants: generated 200, build-succeeded 118, build-failed 66, syntax-invalid 9, redundant 7
Fitness: max 0.98(110), min 0.49(1), ave 0.967
Test execution time: sum 12158 ms, max 287 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:34:59 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-11-05 13:35:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 6 seconds
Variants: generated 200, build-succeeded 118, build-failed 64, syntax-invalid 12, redundant 6
Fitness: max 1(2), min 0.059(1), ave 0.955
Test execution time: sum 12031 ms, max 210 ms, min 36 ms
----------------------------------------------------------------

2023-11-05 13:35:29 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-11-05 13:36:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 36 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 14, redundant 8
Fitness: max 1(2), min 0.569(1), ave 0.968
Test execution time: sum 12386 ms, max 253 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 13:36:00 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-11-05 13:36:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 10 seconds
Variants: generated 200, build-succeeded 125, build-failed 54, syntax-invalid 14, redundant 7
Fitness: max 0.98(103), min 0.49(2), ave 0.955
Test execution time: sum 13571 ms, max 206 ms, min 70 ms
----------------------------------------------------------------

2023-11-05 13:36:33 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-11-05 13:37:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 43 seconds
Variants: generated 200, build-succeeded 132, build-failed 50, syntax-invalid 9, redundant 9
Fitness: max 0.98(120), min 0.667(2), ave 0.966
Test execution time: sum 13487 ms, max 227 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 13:37:06 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-11-05 13:37:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 13 seconds
Variants: generated 200, build-succeeded 126, build-failed 56, syntax-invalid 9, redundant 9
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 12411 ms, max 233 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 13:37:36 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-11-05 13:38:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 46 seconds
Variants: generated 200, build-succeeded 125, build-failed 57, syntax-invalid 6, redundant 12
Fitness: max 0.98(117), min 0.627(1), ave 0.969
Test execution time: sum 14354 ms, max 1636 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:38:10 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-11-05 13:38:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 19 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 16, redundant 9
Fitness: max 0.98(103), min 0.51(1), ave 0.956
Test execution time: sum 13149 ms, max 327 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 13:38:42 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-11-05 13:39:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 53 seconds
Variants: generated 200, build-succeeded 121, build-failed 50, syntax-invalid 12, redundant 17
Fitness: max 0.98(104), min 0.49(4), ave 0.947
Test execution time: sum 13327 ms, max 469 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:39:16 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-11-05 13:39:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 27 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 16, redundant 6
Fitness: max 0.98(103), min 0.431(1), ave 0.953
Test execution time: sum 14490 ms, max 2351 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 13:39:51 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-11-05 13:40:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 59 seconds
Variants: generated 200, build-succeeded 120, build-failed 65, syntax-invalid 6, redundant 9
Fitness: max 0.98(115), min 0.353(1), ave 0.967
Test execution time: sum 12209 ms, max 214 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 13:40:22 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-11-05 13:40:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 29 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 16, redundant 6
Fitness: max 0.98(101), min 0.549(1), ave 0.955
Test execution time: sum 11559 ms, max 196 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 13:40:52 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-11-05 13:41:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 0 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 20, redundant 8
Fitness: max 0.98(106), min 0.49(2), ave 0.964
Test execution time: sum 12031 ms, max 235 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 13:41:24 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-11-05 13:41:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 29 seconds
Variants: generated 200, build-succeeded 121, build-failed 50, syntax-invalid 15, redundant 14
Fitness: max 1(1), min 0.353(1), ave 0.959
Test execution time: sum 12171 ms, max 270 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 13:41:53 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-11-05 13:42:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 16, redundant 11
Fitness: max 0.98(103), min 0.49(1), ave 0.966
Test execution time: sum 12086 ms, max 352 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 13:42:22 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-11-05 13:42:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 28 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 20, redundant 7
Fitness: max 0.98(107), min 0.49(1), ave 0.962
Test execution time: sum 12158 ms, max 272 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 13:42:51 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-11-05 13:43:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 57 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 18, redundant 6
Fitness: max 0.98(101), min 0.49(1), ave 0.965
Test execution time: sum 12223 ms, max 415 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:43:20 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-11-05 13:43:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 27 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 18, redundant 11
Fitness: max 0.98(102), min 0.667(1), ave 0.966
Test execution time: sum 12073 ms, max 299 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 13:43:50 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-11-05 13:44:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 52 seconds
Variants: generated 200, build-succeeded 105, build-failed 53, syntax-invalid 35, redundant 7
Fitness: max 0.98(90), min 0.49(1), ave 0.956
Test execution time: sum 10620 ms, max 207 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:44:16 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-11-05 13:44:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 19 seconds
Variants: generated 200, build-succeeded 108, build-failed 64, syntax-invalid 18, redundant 10
Fitness: max 1(1), min 0.549(1), ave 0.965
Test execution time: sum 10433 ms, max 252 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 13:44:43 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-11-05 13:45:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 51 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 15, redundant 9
Fitness: max 0.98(106), min 0.471(1), ave 0.958
Test execution time: sum 13963 ms, max 2123 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:45:15 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-11-05 13:45:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 20 seconds
Variants: generated 200, build-succeeded 108, build-failed 55, syntax-invalid 23, redundant 14
Fitness: max 0.98(98), min 0.431(1), ave 0.964
Test execution time: sum 11100 ms, max 215 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 13:45:43 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-11-05 13:46:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 50 seconds
Variants: generated 200, build-succeeded 129, build-failed 47, syntax-invalid 16, redundant 8
Fitness: max 0.98(118), min 0.373(1), ave 0.962
Test execution time: sum 13313 ms, max 330 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 13:46:14 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-11-05 13:46:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 19 seconds
Variants: generated 200, build-succeeded 109, build-failed 70, syntax-invalid 16, redundant 5
Fitness: max 1(1), min 0.353(1), ave 0.962
Test execution time: sum 11595 ms, max 275 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 13:46:42 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-11-05 13:47:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 50 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 15, redundant 7
Fitness: max 0.98(108), min 0.471(1), ave 0.967
Test execution time: sum 12068 ms, max 226 ms, min 74 ms
----------------------------------------------------------------

2023-11-05 13:47:13 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-11-05 13:47:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 22 seconds
Variants: generated 200, build-succeeded 125, build-failed 61, syntax-invalid 11, redundant 3
Fitness: max 0.98(116), min 0.353(1), ave 0.968
Test execution time: sum 13577 ms, max 294 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 13:47:45 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-11-05 13:48:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 54 seconds
Variants: generated 200, build-succeeded 113, build-failed 54, syntax-invalid 24, redundant 9
Fitness: max 0.98(104), min 0.49(1), ave 0.97
Test execution time: sum 14410 ms, max 2608 ms, min 66 ms
----------------------------------------------------------------

2023-11-05 13:48:17 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-11-05 13:48:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 28 seconds
Variants: generated 200, build-succeeded 128, build-failed 53, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0.49(1), ave 0.969
Test execution time: sum 14267 ms, max 222 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 13:48:51 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-11-05 13:49:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 0 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 20, redundant 10
Fitness: max 1(1), min 0.196(1), ave 0.962
Test execution time: sum 12772 ms, max 438 ms, min 62 ms
----------------------------------------------------------------

2023-11-05 13:49:23 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-11-05 13:49:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 34 seconds
Variants: generated 200, build-succeeded 131, build-failed 53, syntax-invalid 11, redundant 5
Fitness: max 0.98(114), min 0.49(1), ave 0.96
Test execution time: sum 14696 ms, max 479 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 13:49:58 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-11-05 13:50:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 10 seconds
Variants: generated 200, build-succeeded 127, build-failed 57, syntax-invalid 11, redundant 5
Fitness: max 0.98(112), min 0.196(1), ave 0.954
Test execution time: sum 15135 ms, max 484 ms, min 75 ms
----------------------------------------------------------------

2023-11-05 13:50:33 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-11-05 13:51:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 45 seconds
Variants: generated 200, build-succeeded 116, build-failed 57, syntax-invalid 16, redundant 11
Fitness: max 0.98(105), min 0.667(1), ave 0.968
Test execution time: sum 14241 ms, max 502 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 13:51:08 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-11-05 13:51:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 22 seconds
Variants: generated 200, build-succeeded 125, build-failed 54, syntax-invalid 13, redundant 8
Fitness: max 0.98(111), min 0.49(1), ave 0.963
Test execution time: sum 16413 ms, max 3382 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 13:51:45 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-11-05 13:52:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 58 seconds
Variants: generated 200, build-succeeded 125, build-failed 52, syntax-invalid 17, redundant 6
Fitness: max 0.98(109), min 0.255(1), ave 0.956
Test execution time: sum 14129 ms, max 310 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:52:21 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-11-05 13:52:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 32 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 19, redundant 11
Fitness: max 0.98(99), min 0.588(1), ave 0.967
Test execution time: sum 13095 ms, max 439 ms, min 70 ms
----------------------------------------------------------------

2023-11-05 13:52:56 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-11-05 13:53:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 8 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 24, redundant 6
Fitness: max 0.98(97), min 0.157(1), ave 0.965
Test execution time: sum 13747 ms, max 1775 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 13:53:31 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-11-05 13:54:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 43 seconds
Variants: generated 200, build-succeeded 125, build-failed 52, syntax-invalid 17, redundant 6
Fitness: max 0.98(111), min 0.49(1), ave 0.966
Test execution time: sum 13788 ms, max 587 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 13:54:06 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-11-05 13:54:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 13 seconds
Variants: generated 200, build-succeeded 110, build-failed 48, syntax-invalid 29, redundant 13
Fitness: max 0.98(96), min 0.49(3), ave 0.953
Test execution time: sum 11554 ms, max 355 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:54:37 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-11-05 13:55:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 47 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 22, redundant 10
Fitness: max 0.98(95), min 0.569(1), ave 0.96
Test execution time: sum 12055 ms, max 211 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:55:10 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-11-05 13:55:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 23 seconds
Variants: generated 200, build-succeeded 110, build-failed 53, syntax-invalid 27, redundant 10
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 14128 ms, max 2170 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 13:55:46 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-11-05 13:56:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 56 seconds
Variants: generated 200, build-succeeded 119, build-failed 51, syntax-invalid 20, redundant 10
Fitness: max 0.98(100), min 0.137(1), ave 0.953
Test execution time: sum 12468 ms, max 201 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 13:56:19 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-11-05 13:56:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 28 seconds
Variants: generated 200, build-succeeded 112, build-failed 52, syntax-invalid 25, redundant 11
Fitness: max 0.98(100), min 0.49(1), ave 0.96
Test execution time: sum 11990 ms, max 384 ms, min 63 ms
----------------------------------------------------------------

2023-11-05 13:56:51 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-11-05 13:57:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 4 seconds
Variants: generated 200, build-succeeded 117, build-failed 50, syntax-invalid 26, redundant 7
Fitness: max 0.98(99), min 0.549(2), ave 0.958
Test execution time: sum 14251 ms, max 1816 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 13:57:27 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-11-05 13:58:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 42 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 26, redundant 6
Fitness: max 0.98(97), min 0.843(1), ave 0.972
Test execution time: sum 14121 ms, max 402 ms, min 85 ms
----------------------------------------------------------------

2023-11-05 13:58:06 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-11-05 13:58:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 21 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 19, redundant 7
Fitness: max 0.98(105), min 0.49(1), ave 0.962
Test execution time: sum 15037 ms, max 563 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 13:58:44 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-11-05 13:59:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 59 seconds
Variants: generated 200, build-succeeded 120, build-failed 58, syntax-invalid 18, redundant 4
Fitness: max 0.98(100), min 0.49(2), ave 0.954
Test execution time: sum 16050 ms, max 2353 ms, min 84 ms
----------------------------------------------------------------

2023-11-05 13:59:23 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-11-05 14:00:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 41 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 19, redundant 7
Fitness: max 0.98(100), min 0.471(1), ave 0.956
Test execution time: sum 17311 ms, max 2056 ms, min 61 ms
----------------------------------------------------------------

2023-11-05 14:00:04 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-11-05 14:00:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 17 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 23, redundant 10
Fitness: max 0.98(101), min 0.196(1), ave 0.959
Test execution time: sum 14148 ms, max 279 ms, min 66 ms
----------------------------------------------------------------

2023-11-05 14:00:41 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-11-05 14:01:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 54 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 19, redundant 14
Fitness: max 1(1), min 0.49(1), ave 0.968
Test execution time: sum 13736 ms, max 297 ms, min 87 ms
----------------------------------------------------------------

2023-11-05 14:01:17 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-11-05 14:01:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 30 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 16, redundant 9
Fitness: max 0.98(110), min 0.275(1), ave 0.964
Test execution time: sum 13173 ms, max 232 ms, min 68 ms
----------------------------------------------------------------

2023-11-05 14:01:53 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-11-05 14:02:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 8 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 20, redundant 13
Fitness: max 0.98(106), min 0.49(1), ave 0.969
Test execution time: sum 15709 ms, max 1860 ms, min 86 ms
----------------------------------------------------------------

2023-11-05 14:02:31 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-11-05 14:03:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 48 seconds
Variants: generated 200, build-succeeded 123, build-failed 60, syntax-invalid 10, redundant 7
Fitness: max 0.98(113), min 0.353(1), ave 0.967
Test execution time: sum 15736 ms, max 436 ms, min 86 ms
----------------------------------------------------------------

2023-11-05 14:03:11 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-11-05 14:03:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 25 seconds
Variants: generated 200, build-succeeded 120, build-failed 54, syntax-invalid 21, redundant 5
Fitness: max 0.98(107), min 0.49(1), ave 0.965
Test execution time: sum 13650 ms, max 256 ms, min 68 ms
----------------------------------------------------------------

2023-11-05 14:03:48 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-11-05 14:04:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 1 seconds
Variants: generated 200, build-succeeded 116, build-failed 60, syntax-invalid 20, redundant 4
Fitness: max 0.98(102), min 0.49(1), ave 0.966
Test execution time: sum 13807 ms, max 221 ms, min 86 ms
----------------------------------------------------------------

2023-11-05 14:04:24 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-11-05 14:05:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 37 seconds
Variants: generated 200, build-succeeded 118, build-failed 55, syntax-invalid 21, redundant 6
Fitness: max 0.98(105), min 0.255(1), ave 0.954
Test execution time: sum 13852 ms, max 383 ms, min 66 ms
----------------------------------------------------------------

2023-11-05 14:05:01 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-11-05 14:05:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 16 seconds
Variants: generated 200, build-succeeded 123, build-failed 56, syntax-invalid 15, redundant 6
Fitness: max 0.98(110), min 0.549(2), ave 0.956
Test execution time: sum 17586 ms, max 3074 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 14:05:39 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-11-05 14:06:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 56 seconds
Variants: generated 200, build-succeeded 116, build-failed 54, syntax-invalid 20, redundant 10
Fitness: max 0.98(107), min 0.49(1), ave 0.967
Test execution time: sum 15118 ms, max 818 ms, min 67 ms
----------------------------------------------------------------

2023-11-05 14:06:19 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-11-05 14:07:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 36 seconds
Variants: generated 200, build-succeeded 123, build-failed 57, syntax-invalid 16, redundant 4
Fitness: max 0.98(110), min 0.196(1), ave 0.96
Test execution time: sum 16216 ms, max 463 ms, min 70 ms
----------------------------------------------------------------

2023-11-05 14:07:00 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-11-05 14:07:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 17 seconds
Variants: generated 200, build-succeeded 124, build-failed 45, syntax-invalid 17, redundant 14
Fitness: max 0.98(111), min 0.333(1), ave 0.964
Test execution time: sum 15693 ms, max 517 ms, min 86 ms
----------------------------------------------------------------

2023-11-05 14:07:41 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-11-05 14:08:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 59 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 13, redundant 6
Fitness: max 0.98(107), min 0.157(1), ave 0.958
Test execution time: sum 17803 ms, max 3688 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 14:08:22 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-11-05 14:09:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 42 seconds
Variants: generated 200, build-succeeded 123, build-failed 57, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0.667(2), ave 0.959
Test execution time: sum 17438 ms, max 709 ms, min 88 ms
----------------------------------------------------------------

2023-11-05 14:09:05 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-11-05 14:09:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 27 seconds
Variants: generated 200, build-succeeded 124, build-failed 48, syntax-invalid 15, redundant 13
Fitness: max 1(1), min 0.49(1), ave 0.958
Test execution time: sum 18134 ms, max 2286 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 14:09:50 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-11-05 14:10:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 8 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 19, redundant 11
Fitness: max 0.98(103), min 0.588(1), ave 0.965
Test execution time: sum 14058 ms, max 631 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 14:10:32 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-11-05 14:11:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 51 seconds
Variants: generated 200, build-succeeded 114, build-failed 68, syntax-invalid 13, redundant 5
Fitness: max 0.98(109), min 0.549(1), ave 0.971
Test execution time: sum 16516 ms, max 503 ms, min 84 ms
----------------------------------------------------------------

2023-11-05 14:11:14 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-11-05 14:11:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 30 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 10, redundant 12
Fitness: max 0.98(113), min 0.765(1), ave 0.975
Test execution time: sum 14731 ms, max 413 ms, min 89 ms
----------------------------------------------------------------

2023-11-05 14:11:53 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-11-05 14:12:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 9 seconds
Variants: generated 200, build-succeeded 117, build-failed 60, syntax-invalid 11, redundant 12
Fitness: max 1(1), min 0.49(2), ave 0.961
Test execution time: sum 16170 ms, max 463 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 14:12:33 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-11-05 14:13:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 49 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 9, redundant 16
Fitness: max 1(2), min 0.275(1), ave 0.959
Test execution time: sum 17322 ms, max 3114 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 14:13:13 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-11-05 14:13:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 31 seconds
Variants: generated 200, build-succeeded 121, build-failed 67, syntax-invalid 8, redundant 4
Fitness: max 0.98(108), min 0.569(1), ave 0.967
Test execution time: sum 15415 ms, max 308 ms, min 77 ms
----------------------------------------------------------------

2023-11-05 14:13:54 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-11-05 14:14:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 15 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 15, redundant 11
Fitness: max 0.98(105), min 0.353(1), ave 0.961
Test execution time: sum 15630 ms, max 605 ms, min 65 ms
----------------------------------------------------------------

2023-11-05 14:14:38 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-11-05 14:15:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 52 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 17, redundant 11
Fitness: max 1(1), min 0.765(1), ave 0.976
Test execution time: sum 14359 ms, max 413 ms, min 87 ms
----------------------------------------------------------------

2023-11-05 14:15:15 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-11-05 14:15:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 29 seconds
Variants: generated 200, build-succeeded 125, build-failed 55, syntax-invalid 7, redundant 13
Fitness: max 1(2), min 0.275(1), ave 0.969
Test execution time: sum 14474 ms, max 245 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 14:15:53 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-11-05 14:16:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 4 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 16, redundant 11
Fitness: max 0.98(104), min 0.529(1), ave 0.963
Test execution time: sum 13293 ms, max 311 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 14:16:28 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-11-05 14:17:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 40 seconds
Variants: generated 200, build-succeeded 119, build-failed 60, syntax-invalid 10, redundant 11
Fitness: max 0.98(108), min 0.49(1), ave 0.966
Test execution time: sum 13811 ms, max 313 ms, min 72 ms
----------------------------------------------------------------

2023-11-05 14:17:03 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-11-05 14:17:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 14 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 18, redundant 7
Fitness: max 0.98(108), min 0.725(1), ave 0.967
Test execution time: sum 13519 ms, max 301 ms, min 85 ms
----------------------------------------------------------------

2023-11-05 14:17:38 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-11-05 14:18:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 52 seconds
Variants: generated 200, build-succeeded 119, build-failed 61, syntax-invalid 12, redundant 8
Fitness: max 0.98(106), min 0.49(3), ave 0.957
Test execution time: sum 14106 ms, max 283 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 14:18:15 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-11-05 14:18:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 29 seconds
Variants: generated 200, build-succeeded 117, build-failed 54, syntax-invalid 20, redundant 9
Fitness: max 0.98(101), min 0.353(1), ave 0.961
Test execution time: sum 14979 ms, max 1877 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 14:18:52 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-11-05 14:19:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 5 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 21, redundant 8
Fitness: max 0.98(102), min 0.431(1), ave 0.97
Test execution time: sum 12979 ms, max 282 ms, min 88 ms
----------------------------------------------------------------

2023-11-05 14:19:29 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-11-05 14:20:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 46 seconds
Variants: generated 200, build-succeeded 120, build-failed 57, syntax-invalid 15, redundant 8
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 14630 ms, max 323 ms, min 64 ms
----------------------------------------------------------------

2023-11-05 14:20:09 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-11-05 14:20:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 25 seconds
Variants: generated 200, build-succeeded 123, build-failed 56, syntax-invalid 13, redundant 8
Fitness: max 1(1), min 0.765(1), ave 0.967
Test execution time: sum 14915 ms, max 242 ms, min 90 ms
----------------------------------------------------------------

2023-11-05 14:20:48 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-11-05 14:21:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 0 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 13, redundant 13
Fitness: max 0.98(106), min 0.49(1), ave 0.963
Test execution time: sum 13248 ms, max 206 ms, min 75 ms
----------------------------------------------------------------

2023-11-05 14:21:23 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-11-05 14:21:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 33 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 17, redundant 11
Fitness: max 0.98(103), min 0.765(1), ave 0.972
Test execution time: sum 12542 ms, max 242 ms, min 86 ms
----------------------------------------------------------------

2023-11-05 14:21:57 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-11-05 14:22:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 seconds
Variants: generated 200, build-succeeded 117, build-failed 60, syntax-invalid 13, redundant 10
Fitness: max 0.98(105), min 0.49(2), ave 0.963
Test execution time: sum 13624 ms, max 302 ms, min 85 ms
----------------------------------------------------------------

2023-11-05 14:22:31 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-11-05 14:23:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 seconds
Variants: generated 200, build-succeeded 122, build-failed 56, syntax-invalid 11, redundant 11
Fitness: max 0.98(109), min 0.49(1), ave 0.964
Test execution time: sum 15056 ms, max 300 ms, min 72 ms
----------------------------------------------------------------

2023-11-05 14:23:11 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-11-05 14:23:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 24 seconds
Variants: generated 200, build-succeeded 127, build-failed 54, syntax-invalid 13, redundant 6
Fitness: max 0.98(118), min 0.549(1), ave 0.968
Test execution time: sum 14875 ms, max 286 ms, min 83 ms
----------------------------------------------------------------

2023-11-05 14:23:48 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-11-05 14:24:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 7 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 13, redundant 14
Fitness: max 0.98(109), min 0.843(2), ave 0.975
Test execution time: sum 16048 ms, max 2441 ms, min 87 ms
----------------------------------------------------------------

2023-11-05 14:24:30 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-11-05 14:25:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 47 seconds
Variants: generated 200, build-succeeded 118, build-failed 66, syntax-invalid 10, redundant 6
Fitness: max 0.98(107), min 0.49(1), ave 0.966
Test execution time: sum 15168 ms, max 263 ms, min 84 ms
----------------------------------------------------------------

2023-11-05 14:25:11 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-11-05 14:25:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 27 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 20, redundant 9
Fitness: max 1(1), min 0.765(1), ave 0.973
Test execution time: sum 15211 ms, max 490 ms, min 92 ms
----------------------------------------------------------------

2023-11-05 14:25:50 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-11-05 14:26:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 6 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 11, redundant 11
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 15262 ms, max 428 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 14:26:30 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-11-05 14:27:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 52 seconds
Variants: generated 200, build-succeeded 126, build-failed 56, syntax-invalid 6, redundant 12
Fitness: max 1(1), min 0.549(1), ave 0.968
Test execution time: sum 20362 ms, max 4774 ms, min 90 ms
----------------------------------------------------------------

2023-11-05 14:27:16 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-11-05 14:28:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 38 seconds
Variants: generated 200, build-succeeded 106, build-failed 71, syntax-invalid 18, redundant 5
Fitness: max 1(1), min 0.843(1), ave 0.975
Test execution time: sum 16193 ms, max 658 ms, min 91 ms
----------------------------------------------------------------

2023-11-05 14:28:01 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-11-05 14:28:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 26 seconds
Variants: generated 200, build-succeeded 119, build-failed 56, syntax-invalid 15, redundant 10
Fitness: max 0.98(109), min 0.49(1), ave 0.967
Test execution time: sum 22306 ms, max 3333 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 14:28:49 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-11-05 14:29:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 15 seconds
Variants: generated 200, build-succeeded 125, build-failed 55, syntax-invalid 15, redundant 5
Fitness: max 0.98(113), min 0.49(1), ave 0.959
Test execution time: sum 19507 ms, max 940 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 14:29:38 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-11-05 14:30:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 4 seconds
Variants: generated 200, build-succeeded 119, build-failed 63, syntax-invalid 16, redundant 2
Fitness: max 0.98(105), min 0.49(1), ave 0.963
Test execution time: sum 19239 ms, max 590 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 14:30:27 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-11-05 14:31:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 52 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 23, redundant 3
Fitness: max 1(1), min 0.569(1), ave 0.965
Test execution time: sum 19272 ms, max 523 ms, min 88 ms
----------------------------------------------------------------

2023-11-05 14:31:16 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-11-05 14:32:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 38 seconds
Variants: generated 200, build-succeeded 120, build-failed 56, syntax-invalid 15, redundant 9
Fitness: max 0.98(111), min 0.549(1), ave 0.971
Test execution time: sum 18391 ms, max 358 ms, min 92 ms
----------------------------------------------------------------

2023-11-05 14:32:01 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-11-05 14:32:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 22 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 25, redundant 5
Fitness: max 0.98(103), min 0.471(1), ave 0.961
Test execution time: sum 18167 ms, max 431 ms, min 93 ms
----------------------------------------------------------------

2023-11-05 14:32:46 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-11-05 14:33:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 12 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 22, redundant 6
Fitness: max 0.98(94), min 0.49(2), ave 0.955
Test execution time: sum 19756 ms, max 450 ms, min 104 ms
----------------------------------------------------------------

2023-11-05 14:33:36 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-11-05 14:34:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 58 seconds
Variants: generated 200, build-succeeded 119, build-failed 60, syntax-invalid 12, redundant 9
Fitness: max 0.98(112), min 0.49(1), ave 0.971
Test execution time: sum 18430 ms, max 518 ms, min 95 ms
----------------------------------------------------------------

2023-11-05 14:34:21 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-11-05 14:35:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 41 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 20, redundant 7
Fitness: max 0.98(110), min 0.49(1), ave 0.971
Test execution time: sum 16436 ms, max 344 ms, min 79 ms
----------------------------------------------------------------

2023-11-05 14:35:04 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-11-05 14:35:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 24 seconds
Variants: generated 200, build-succeeded 108, build-failed 62, syntax-invalid 24, redundant 6
Fitness: max 0.98(98), min 0.667(1), ave 0.969
Test execution time: sum 16202 ms, max 333 ms, min 104 ms
----------------------------------------------------------------

2023-11-05 14:35:47 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-11-05 14:36:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 4 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 21, redundant 11
Fitness: max 0.98(102), min 0.667(1), ave 0.973
Test execution time: sum 15364 ms, max 395 ms, min 93 ms
----------------------------------------------------------------

2023-11-05 14:36:28 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-11-05 14:37:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 55 seconds
Variants: generated 200, build-succeeded 131, build-failed 43, syntax-invalid 15, redundant 11
Fitness: max 0.98(115), min 0.49(1), ave 0.961
Test execution time: sum 22751 ms, max 3965 ms, min 87 ms
----------------------------------------------------------------

2023-11-05 14:37:18 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-11-05 14:38:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 43 seconds
Variants: generated 200, build-succeeded 119, build-failed 52, syntax-invalid 15, redundant 14
Fitness: max 1(1), min 0.176(1), ave 0.959
Test execution time: sum 18490 ms, max 3767 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 14:38:06 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-11-05 14:38:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 28 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 25, redundant 9
Fitness: max 0.98(97), min 0.49(2), ave 0.961
Test execution time: sum 16525 ms, max 307 ms, min 84 ms
----------------------------------------------------------------

2023-11-05 14:38:51 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-11-05 14:39:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 18 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 19, redundant 10
Fitness: max 0.98(98), min 0.471(1), ave 0.952
Test execution time: sum 18752 ms, max 335 ms, min 102 ms
----------------------------------------------------------------

2023-11-05 14:39:41 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-11-05 14:40:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 9 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 20, redundant 9
Fitness: max 0.98(106), min 0.314(1), ave 0.953
Test execution time: sum 19522 ms, max 423 ms, min 100 ms
----------------------------------------------------------------

2023-11-05 14:40:33 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-11-05 14:41:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 2 seconds
Variants: generated 200, build-succeeded 126, build-failed 58, syntax-invalid 11, redundant 5
Fitness: max 0.98(112), min 0.49(1), ave 0.962
Test execution time: sum 20412 ms, max 325 ms, min 100 ms
----------------------------------------------------------------

2023-11-05 14:41:25 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-11-05 14:42:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 52 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 17, redundant 4
Fitness: max 0.98(104), min 0.549(1), ave 0.966
Test execution time: sum 20939 ms, max 4222 ms, min 90 ms
----------------------------------------------------------------

2023-11-05 14:42:16 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-11-05 14:43:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 40 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0.353(1), ave 0.961
Test execution time: sum 16778 ms, max 339 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 14:43:03 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-11-05 14:43:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 24 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 22, redundant 6
Fitness: max 1(1), min 0.353(1), ave 0.961
Test execution time: sum 16684 ms, max 348 ms, min 91 ms
----------------------------------------------------------------

2023-11-05 14:43:47 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-11-05 14:44:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 11 seconds
Variants: generated 200, build-succeeded 115, build-failed 55, syntax-invalid 20, redundant 10
Fitness: max 0.98(107), min 0.863(3), ave 0.974
Test execution time: sum 18406 ms, max 616 ms, min 93 ms
----------------------------------------------------------------

2023-11-05 14:44:35 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-11-05 14:45:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 2 seconds
Variants: generated 200, build-succeeded 118, build-failed 55, syntax-invalid 23, redundant 4
Fitness: max 0.98(101), min 0.549(1), ave 0.953
Test execution time: sum 19376 ms, max 402 ms, min 96 ms
----------------------------------------------------------------

2023-11-05 14:45:25 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-11-05 14:46:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 49 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 23, redundant 5
Fitness: max 0.98(105), min 0.843(1), ave 0.975
Test execution time: sum 18087 ms, max 356 ms, min 96 ms
----------------------------------------------------------------

2023-11-05 14:46:12 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-11-05 14:46:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 33 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 30, redundant 5
Fitness: max 0.98(94), min 0.49(1), ave 0.964
Test execution time: sum 15567 ms, max 332 ms, min 100 ms
----------------------------------------------------------------

2023-11-05 14:46:56 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-11-05 14:47:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 23 seconds
Variants: generated 200, build-succeeded 118, build-failed 54, syntax-invalid 22, redundant 6
Fitness: max 1(2), min 0.49(1), ave 0.956
Test execution time: sum 20940 ms, max 4249 ms, min 93 ms
----------------------------------------------------------------

2023-11-05 14:47:46 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-11-05 14:48:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 21 seconds
Variants: generated 200, build-succeeded 121, build-failed 47, syntax-invalid 22, redundant 10
Fitness: max 0.98(105), min 0.549(1), ave 0.962
Test execution time: sum 31026 ms, max 16257 ms, min 89 ms
----------------------------------------------------------------

2023-11-05 14:48:44 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-11-05 14:49:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 14 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 18, redundant 7
Fitness: max 0.98(107), min 0.49(1), ave 0.962
Test execution time: sum 21294 ms, max 392 ms, min 116 ms
----------------------------------------------------------------

2023-11-05 14:49:38 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-11-05 14:50:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 1 seconds
Variants: generated 200, build-succeeded 107, build-failed 50, syntax-invalid 29, redundant 14
Fitness: max 0.98(96), min 0.196(1), ave 0.964
Test execution time: sum 16224 ms, max 395 ms, min 95 ms
----------------------------------------------------------------

2023-11-05 14:50:24 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-11-05 14:51:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 48 seconds
Variants: generated 200, build-succeeded 115, build-failed 54, syntax-invalid 24, redundant 7
Fitness: max 0.98(101), min 0.451(1), ave 0.955
Test execution time: sum 17322 ms, max 327 ms, min 91 ms
----------------------------------------------------------------

2023-11-05 14:51:11 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-11-05 14:52:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 39 seconds
Variants: generated 200, build-succeeded 115, build-failed 53, syntax-invalid 28, redundant 4
Fitness: max 0.98(97), min 0.49(1), ave 0.958
Test execution time: sum 22820 ms, max 4406 ms, min 79 ms
----------------------------------------------------------------

2023-11-05 14:52:03 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-11-05 14:52:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 25 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 29, redundant 3
Fitness: max 0.98(99), min 0.431(1), ave 0.958
Test execution time: sum 15923 ms, max 328 ms, min 94 ms
----------------------------------------------------------------

2023-11-05 14:52:48 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-11-05 14:53:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 13 seconds
Variants: generated 200, build-succeeded 111, build-failed 52, syntax-invalid 26, redundant 11
Fitness: max 0.98(100), min 0.49(1), ave 0.966
Test execution time: sum 17172 ms, max 394 ms, min 80 ms
----------------------------------------------------------------

2023-11-05 14:53:36 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-11-05 14:54:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 2 seconds
Variants: generated 200, build-succeeded 115, build-failed 54, syntax-invalid 24, redundant 7
Fitness: max 1(2), min 0.765(1), ave 0.973
Test execution time: sum 17540 ms, max 359 ms, min 106 ms
----------------------------------------------------------------

2023-11-05 14:54:25 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-11-05 14:55:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 45 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 25, redundant 10
Fitness: max 0.98(93), min 0.49(1), ave 0.967
Test execution time: sum 15161 ms, max 384 ms, min 94 ms
----------------------------------------------------------------

2023-11-05 14:55:09 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-11-05 14:55:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 29 seconds
Variants: generated 200, build-succeeded 118, build-failed 53, syntax-invalid 25, redundant 4
Fitness: max 0.98(102), min 0.157(1), ave 0.954
Test execution time: sum 15953 ms, max 385 ms, min 79 ms
----------------------------------------------------------------

2023-11-05 14:55:52 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-11-05 14:56:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 13 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 22, redundant 10
Fitness: max 1(1), min 0.471(2), ave 0.945
Test execution time: sum 16582 ms, max 2644 ms, min 71 ms
----------------------------------------------------------------

2023-11-05 14:56:36 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-11-05 14:57:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 58 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 17, redundant 8
Fitness: max 0.98(107), min 0.843(1), ave 0.975
Test execution time: sum 15196 ms, max 350 ms, min 93 ms
----------------------------------------------------------------

2023-11-05 14:57:21 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-11-05 14:58:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 40 seconds
Variants: generated 200, build-succeeded 118, build-failed 63, syntax-invalid 17, redundant 2
Fitness: max 0.98(109), min 0.49(1), ave 0.964
Test execution time: sum 14913 ms, max 261 ms, min 69 ms
----------------------------------------------------------------

2023-11-05 14:58:04 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-11-05 14:58:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 34 seconds
Variants: generated 200, build-succeeded 121, build-failed 45, syntax-invalid 24, redundant 10
Fitness: max 1(1), min 0.49(1), ave 0.968
Test execution time: sum 27524 ms, max 13613 ms, min 89 ms
----------------------------------------------------------------

2023-11-05 14:58:57 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-11-05 14:59:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 18 seconds
Variants: generated 200, build-succeeded 112, build-failed 67, syntax-invalid 19, redundant 2
Fitness: max 0.98(98), min 0.49(1), ave 0.958
Test execution time: sum 14457 ms, max 225 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 14:59:42 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-11-05 15:00:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 6 seconds
Variants: generated 200, build-succeeded 114, build-failed 66, syntax-invalid 13, redundant 7
Fitness: max 0.98(107), min 0.49(1), ave 0.972
Test execution time: sum 15934 ms, max 2035 ms, min 86 ms
----------------------------------------------------------------

2023-11-05 15:00:29 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-11-05 15:01:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 51 seconds
Variants: generated 200, build-succeeded 111, build-failed 68, syntax-invalid 20, redundant 1
Fitness: max 0.98(97), min 0.667(1), ave 0.964
Test execution time: sum 14850 ms, max 277 ms, min 97 ms
----------------------------------------------------------------

2023-11-05 15:01:14 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-11-05 15:01:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 35 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 23, redundant 9
Fitness: max 0.98(102), min 0.353(1), ave 0.963
Test execution time: sum 15284 ms, max 352 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 15:01:59 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-11-05 15:02:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 27 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 20, redundant 7
Fitness: max 0.98(101), min 0.49(1), ave 0.962
Test execution time: sum 18751 ms, max 3770 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 15:02:50 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-11-05 15:03:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 18 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 20, redundant 5
Fitness: max 0.98(101), min 0.49(1), ave 0.956
Test execution time: sum 16883 ms, max 350 ms, min 98 ms
----------------------------------------------------------------

2023-11-05 15:03:42 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-11-05 15:04:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 6 seconds
Variants: generated 200, build-succeeded 121, build-failed 56, syntax-invalid 11, redundant 12
Fitness: max 0.98(113), min 0.667(1), ave 0.972
Test execution time: sum 16791 ms, max 380 ms, min 88 ms
----------------------------------------------------------------

2023-11-05 15:04:30 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-11-05 15:05:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 8 seconds
Variants: generated 200, build-succeeded 120, build-failed 59, syntax-invalid 14, redundant 7
Fitness: max 0.98(106), min 0.353(1), ave 0.951
Test execution time: sum 24675 ms, max 3301 ms, min 76 ms
----------------------------------------------------------------

2023-11-05 15:05:32 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-11-05 15:06:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 13 seconds
Variants: generated 200, build-succeeded 124, build-failed 62, syntax-invalid 8, redundant 6
Fitness: max 0.98(115), min 0.49(1), ave 0.968
Test execution time: sum 26492 ms, max 4305 ms, min 98 ms
----------------------------------------------------------------

2023-11-05 15:06:36 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-11-05 15:07:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 14 seconds
Variants: generated 200, build-succeeded 118, build-failed 58, syntax-invalid 21, redundant 3
Fitness: max 0.98(109), min 0.549(1), ave 0.971
Test execution time: sum 27001 ms, max 7677 ms, min 98 ms
----------------------------------------------------------------

2023-11-05 15:07:37 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-11-05 15:08:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 21 seconds
Variants: generated 200, build-succeeded 124, build-failed 59, syntax-invalid 13, redundant 4
Fitness: max 0.98(113), min 0.569(1), ave 0.969
Test execution time: sum 28903 ms, max 4086 ms, min 79 ms
----------------------------------------------------------------

2023-11-05 15:08:45 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-11-05 15:09:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 28 seconds
Variants: generated 200, build-succeeded 121, build-failed 50, syntax-invalid 22, redundant 7
Fitness: max 1(1), min 0.49(1), ave 0.961
Test execution time: sum 30721 ms, max 5716 ms, min 100 ms
----------------------------------------------------------------

2023-11-05 15:09:51 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-11-05 15:10:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 30 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 16, redundant 9
Fitness: max 0.98(112), min 0.49(1), ave 0.968
Test execution time: sum 23992 ms, max 522 ms, min 103 ms
----------------------------------------------------------------

2023-11-05 15:10:53 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-11-05 15:11:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 49 minutes 27 seconds
Variants: generated 200, build-succeeded 119, build-failed 48, syntax-invalid 20, redundant 13
Fitness: max 0.98(110), min 0.549(1), ave 0.971
Test execution time: sum 21127 ms, max 489 ms, min 100 ms
----------------------------------------------------------------

2023-11-05 15:11:50 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-11-05 15:12:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 27 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 24, redundant 10
Fitness: max 0.98(97), min 0.431(1), ave 0.957
Test execution time: sum 25399 ms, max 1586 ms, min 96 ms
----------------------------------------------------------------

2023-11-05 15:12:50 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-11-05 15:13:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 31 seconds
Variants: generated 200, build-succeeded 112, build-failed 64, syntax-invalid 19, redundant 5
Fitness: max 0.98(100), min 0.765(2), ave 0.968
Test execution time: sum 24848 ms, max 1440 ms, min 97 ms
----------------------------------------------------------------

2023-11-05 15:13:55 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-11-05 15:15:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 40 seconds
Variants: generated 200, build-succeeded 110, build-failed 65, syntax-invalid 18, redundant 7
Fitness: max 1(1), min 0.549(1), ave 0.971
Test execution time: sum 26343 ms, max 1565 ms, min 96 ms
----------------------------------------------------------------

2023-11-05 15:15:03 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-11-05 15:16:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 52 seconds
Variants: generated 200, build-succeeded 105, build-failed 71, syntax-invalid 19, redundant 5
Fitness: max 0.98(96), min 0.137(1), ave 0.958
Test execution time: sum 26901 ms, max 4058 ms, min 86 ms
----------------------------------------------------------------

2023-11-05 15:16:16 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-11-05 15:17:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 27 seconds
Variants: generated 200, build-succeeded 130, build-failed 48, syntax-invalid 17, redundant 5
Fitness: max 0.98(117), min 0.49(2), ave 0.964
Test execution time: sum 38130 ms, max 2665 ms, min 100 ms
----------------------------------------------------------------

2023-11-05 15:17:50 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-11-05 15:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 44 seconds
Variants: generated 200, build-succeeded 120, build-failed 59, syntax-invalid 18, redundant 3
Fitness: max 0.98(102), min 0.49(1), ave 0.965
Test execution time: sum 35368 ms, max 5681 ms, min 104 ms
----------------------------------------------------------------

2023-11-05 15:19:07 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-11-05 15:20:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 57 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 21, redundant 9
Fitness: max 0.98(103), min 0.569(2), ave 0.969
Test execution time: sum 32553 ms, max 5419 ms, min 103 ms
----------------------------------------------------------------

2023-11-05 15:20:21 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-11-05 15:21:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 12 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 22, redundant 9
Fitness: max 0.98(100), min 0.569(1), ave 0.964
Test execution time: sum 31368 ms, max 2114 ms, min 112 ms
----------------------------------------------------------------

2023-11-05 15:21:36 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-11-05 15:22:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 18, redundant 8
Fitness: max 0.98(104), min 0.49(2), ave 0.963
Test execution time: sum 28287 ms, max 3231 ms, min 103 ms
----------------------------------------------------------------

2023-11-05 15:22:48 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-11-05 15:24:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 39 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 15, redundant 10
Fitness: max 0.98(102), min 0.49(1), ave 0.968
Test execution time: sum 28073 ms, max 740 ms, min 95 ms
----------------------------------------------------------------

2023-11-05 15:24:02 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-11-05 15:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 30 seconds
Variants: generated 200, build-succeeded 113, build-failed 65, syntax-invalid 14, redundant 8
Fitness: max 0.98(100), min 0.49(3), ave 0.955
Test execution time: sum 48452 ms, max 8642 ms, min 82 ms
----------------------------------------------------------------

2023-11-05 15:25:54 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-11-05 15:27:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 12 seconds
Variants: generated 200, build-succeeded 120, build-failed 56, syntax-invalid 18, redundant 6
Fitness: max 0.98(106), min 0.196(1), ave 0.959
Test execution time: sum 46169 ms, max 5195 ms, min 103 ms
----------------------------------------------------------------

2023-11-05 15:27:35 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-11-05 15:29:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 40 seconds
Variants: generated 200, build-succeeded 119, build-failed 52, syntax-invalid 22, redundant 7
Fitness: max 0.98(104), min 0.49(3), ave 0.957
Test execution time: sum 39799 ms, max 2106 ms, min 73 ms
----------------------------------------------------------------

2023-11-05 15:29:03 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-11-05 15:30:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 9 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 21, redundant 2
Fitness: max 0.98(103), min 0.549(1), ave 0.96
Test execution time: sum 41879 ms, max 3064 ms, min 105 ms
----------------------------------------------------------------

2023-11-05 15:30:32 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-11-05 15:31:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 30 seconds
Variants: generated 200, build-succeeded 111, build-failed 58, syntax-invalid 23, redundant 8
Fitness: max 0.98(101), min 0.784(1), ave 0.973
Test execution time: sum 34743 ms, max 1849 ms, min 108 ms
----------------------------------------------------------------

2023-11-05 15:31:53 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-11-05 15:34:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 56 seconds
Variants: generated 200, build-succeeded 124, build-failed 52, syntax-invalid 18, redundant 6
Fitness: max 1(1), min 0.49(2), ave 0.963
Test execution time: sum 68992 ms, max 9227 ms, min 78 ms
----------------------------------------------------------------

2023-11-05 15:34:19 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-11-05 15:35:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 17 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 22, redundant 9
Fitness: max 0.98(108), min 0.549(1), ave 0.973
Test execution time: sum 31561 ms, max 1292 ms, min 113 ms
----------------------------------------------------------------

2023-11-05 15:35:40 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-11-05 15:36:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 24 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 26, redundant 9
Fitness: max 0.98(102), min 0.49(2), ave 0.963
Test execution time: sum 27321 ms, max 1774 ms, min 70 ms
----------------------------------------------------------------

2023-11-05 15:36:47 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-11-05 15:37:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 28 seconds
Variants: generated 200, build-succeeded 105, build-failed 68, syntax-invalid 22, redundant 5
Fitness: max 0.98(99), min 0.49(1), ave 0.967
Test execution time: sum 23754 ms, max 1048 ms, min 74 ms
----------------------------------------------------------------

2023-11-05 15:37:51 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-11-05 15:39:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 4 seconds
Variants: generated 200, build-succeeded 117, build-failed 51, syntax-invalid 20, redundant 12
Fitness: max 0.98(108), min 0.49(1), ave 0.969
Test execution time: sum 43511 ms, max 16834 ms, min 104 ms
----------------------------------------------------------------

2023-11-05 15:39:27 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-11-05 15:39:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 13 seconds
Variants: generated 18, build-succeeded 7, build-failed 9, syntax-invalid 1, redundant 1
Fitness: max 1(1), min 0.902(1), ave 0.972
Test execution time: sum 1505 ms, max 352 ms, min 108 ms
----------------------------------------------------------------

2023-11-05 15:39:36 [main] [INFO]  KGenProgMain - GA stopped
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -978,7 +978,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4101)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4101)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4101)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -383,7 +384,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -973,11 +972,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4101)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4101)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4101)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4101)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4810)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4810)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4810)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,17 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -451,8 +461,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        String sep = StringUtils.newStringUtf8(lineSeparator);
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -973,11 +984,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4810)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4810)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4810)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v4810)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5123)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5123)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5123)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -471,7 +476,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                resizeBuffer();
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +499,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +980,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5123)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5123)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5123)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5123)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5140)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5140)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5140)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
+			eof = true;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +409,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5140)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5140)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5140)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5140)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5289)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5289)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5289)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -451,8 +450,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        String sep = StringUtils.newStringUtf8(lineSeparator);
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,7 +493,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+                        x = x >> 2;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,12 +985,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5289)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5289)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5289)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5289)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5672)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5672)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5672)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -471,7 +472,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                resizeBuffer();
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +495,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+                        x = x >> 2;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -951,6 +965,7 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		eof = true;
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -979,7 +994,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5672)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5672)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5672)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5672)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -493,6 +494,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -967,17 +979,12 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v7517)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v7517)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v7517)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -458,6 +457,7 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				eof = false;
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 2;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +953,43 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         return buf;
     }
 
@@ -973,12 +1011,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v7517)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v7517)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v7517)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v7517)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8072)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8072)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8072)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +383,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -493,7 +493,30 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+                        x = x >> 1;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1002,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8072)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8072)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8072)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8072)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8806)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8806)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8806)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -493,7 +500,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+                        x = x >> 1;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8806)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8806)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8806)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v8806)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10430)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10430)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10430)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +387,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -407,7 +411,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -471,7 +474,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                resizeBuffer();
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +497,18 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +983,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10430)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10430)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10430)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10430)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10803)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10803)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10803)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +409,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,7 +494,30 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+                        x = x >> 1;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1003,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10803)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10803)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10803)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:37 [main] [INFO]  PatchLogExporter - patch (v10803)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12047)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12047)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12047)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,11 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			x = x >> 3;
+			x = x >> 3;
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -493,6 +497,28 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -978,8 +1004,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (mod != 0) {
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12047)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12047)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12047)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12047)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12212)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12212)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12212)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -444,6 +446,7 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
             }
             switch (modulus) {
                 case 1 :
@@ -458,7 +461,9 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				eof = false;
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -471,7 +476,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                resizeBuffer();
+				resizeBuffer();
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12212)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12212)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12212)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12212)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12636)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12636)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12636)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,11 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			x = x >> 3;
+			x = x >> 3;
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +463,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +499,28 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1001,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12636)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12636)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12636)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v12636)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14094)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14094)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14094)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,19 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +419,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,6 +504,28 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +1006,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14094)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14094)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14094)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14094)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14213)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14213)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14213)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +466,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +502,18 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +994,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14213)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14213)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14213)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14213)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14440)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14440)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14440)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,20 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +420,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +471,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -978,8 +991,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (mod != 0) {
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14440)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14440)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14440)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14440)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14610)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14610)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14610)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +407,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +463,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +499,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +984,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +993,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14610)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14610)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14610)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14610)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14851)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14851)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14851)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +470,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +505,40 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +1019,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14851)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14851)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14851)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v14851)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16009)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16009)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16009)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +408,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +462,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +500,18 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +998,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16009)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16009)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16009)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16009)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16328)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16328)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16328)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +408,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +462,11 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,12 +981,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16328)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16328)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16328)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16328)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16468)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16468)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16468)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +407,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +461,11 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +500,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +985,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16468)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16468)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16468)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16468)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16804)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16804)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16804)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,11 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			x = x >> 3;
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +411,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +462,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +497,29 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16804)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16804)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16804)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v16804)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17062)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17062)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17062)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +466,11 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +505,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -951,7 +974,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        pos += lineSeparator.length;
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -978,8 +1002,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (mod != 0) {
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17062)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17062)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17062)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17062)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17205)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17205)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17205)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +396,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -406,8 +419,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            buffer[pos++] = PAD;
+			readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +474,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,12 +989,10 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
-            boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17205)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17205)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17205)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17205)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,20 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,10 +419,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -459,6 +472,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +507,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -978,8 +1003,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (mod != 0) {
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17259)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17406)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17406)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17406)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,20 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +395,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -407,7 +419,8 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            buffer[pos++] = PAD;
+			readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +472,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +507,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +988,10 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
-            boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17406)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17406)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17406)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v17406)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19864)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19864)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19864)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,15 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			x = x >> 3;
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +415,8 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            buffer[pos++] = PAD;
+			readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +468,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +504,29 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1007,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19864)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19864)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19864)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19864)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19926)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19926)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19926)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,8 +407,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +460,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +497,30 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1001,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19926)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19926)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19926)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19926)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +389,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -407,7 +413,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +464,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +501,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +982,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v20131)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v20131)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v20131)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +389,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -406,6 +412,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +466,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +504,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +985,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v20131)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v20131)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v20131)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v20131)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21408)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21408)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21408)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,16 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +468,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +504,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21408)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21408)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21408)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21408)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21636)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21636)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21636)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,15 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +415,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +466,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +504,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +985,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21636)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21636)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21636)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v21636)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22036)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22036)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22036)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,15 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +414,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +468,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +505,20 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1005,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22036)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22036)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22036)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22036)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22630)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22630)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22630)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			x = x >> 3;
+			x = x >> 3;
+			reset();
+			x = x >> 3;
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +465,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +502,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22630)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22630)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22630)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22630)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22868)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22868)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22868)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,23 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,8 +422,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +475,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +511,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1006,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22868)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22868)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22868)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v22868)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23658)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23658)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23658)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +388,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -459,6 +464,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +500,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23658)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23658)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23658)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23658)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23885)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23885)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23885)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +396,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -406,8 +419,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +473,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +509,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23885)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23885)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23885)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v23885)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v24847)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v24847)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v24847)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -383,7 +388,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -406,6 +410,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +464,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +499,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v24847)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v24847)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v24847)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v24847)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25505)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25505)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25505)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			reset();
+			reset();
+			reset();
+			reset();
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +393,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -406,6 +416,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +470,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +507,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +993,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25505)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25505)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25505)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25505)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25516)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25516)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25516)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +396,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -406,6 +419,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +473,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +509,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +996,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25516)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25516)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25516)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25516)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25668)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25668)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25668)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			x = x >> 3;
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +411,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +465,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +502,31 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1013,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25668)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25668)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25668)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25668)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25750)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25750)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25750)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,25 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			x = x >> 3;
+			reset();
+			x = x >> 3;
+			reset();
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -493,6 +511,18 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +1008,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25750)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25750)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25750)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25750)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25791)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25791)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25791)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			x = x >> 3;
+			x = x >> 3;
+			x = x >> 3;
+			reset();
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +413,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,6 +464,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +500,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +989,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25791)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25791)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25791)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25791)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25812)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25812)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25812)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,7 +393,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -459,6 +469,12 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25812)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25812)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25812)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v25812)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v26819)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v26819)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v26819)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			reset();
+			reset();
+			x = x >> 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +417,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +471,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +509,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +998,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v26819)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v26819)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v26819)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v26819)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v27631)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v27631)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v27631)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 3;
+			reset();
+			reset();
+			x = x >> 3;
+			x = x >> 3;
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +412,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +468,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -471,6 +482,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				currentLinePos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -493,6 +505,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1004,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v27631)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v27631)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v27631)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v27631)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28089)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28089)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28089)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,17 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			eof = true;
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +416,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +470,13 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +511,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1002,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28089)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28089)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28089)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28089)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28677)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28677)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28677)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +417,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +473,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +508,20 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1008,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28677)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28677)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28677)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v28677)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v29251)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v29251)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v29251)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,23 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			x = x >> 3;
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +422,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +479,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +514,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1001,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v29251)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v29251)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v29251)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v29251)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31099)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31099)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31099)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x >> 3;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +417,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +472,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +509,33 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1022,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31099)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31099)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31099)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31099)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31454)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31454)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31454)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +417,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +472,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +510,23 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1007,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31454)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31454)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31454)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31454)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31640)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31640)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31640)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +420,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +477,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +513,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1008,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31640)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31640)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31640)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31640)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31880)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31880)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31880)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +413,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +468,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +503,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31880)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31880)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31880)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v31880)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v32828)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v32828)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v32828)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,25 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +424,11 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +482,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +517,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v32828)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v32828)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v32828)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v32828)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33349)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33349)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33349)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,17 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +416,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +505,42 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1021,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33349)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33349)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33349)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33349)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33846)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33846)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33846)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +464,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +499,16 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +995,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33846)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33846)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33846)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v33846)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34087)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34087)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34087)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,17 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +416,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +470,11 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +509,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34087)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34087)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34087)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34087)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +409,12 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +468,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +506,51 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1031,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34872)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34872)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34872)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,15 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +414,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +470,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +507,53 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1040,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34872)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34872)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34872)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v34872)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35069)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35069)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35069)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +420,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +477,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +512,30 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1022,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35069)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35069)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35069)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35069)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35094)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35094)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35094)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,16 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +415,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +471,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +507,43 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1024,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1102,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35094)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35094)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35094)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35094)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35620)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35620)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35620)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,18 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +417,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +505,36 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1021,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35620)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35620)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35620)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v35620)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v37225)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v37225)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v37225)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +409,12 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +468,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +503,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						x = x >> 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1028,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v37225)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v37225)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v37225)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v37225)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v38449)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v38449)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v38449)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,16 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +415,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +470,11 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +509,54 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1037,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v38449)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v38449)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v38449)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v38449)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v39291)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v39291)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v39291)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,28 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +427,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +483,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +518,14 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1012,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v39291)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v39291)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v39291)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v39291)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40038)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40038)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40038)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,24 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +423,11 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +515,12 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1001,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40038)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40038)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40038)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40038)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40248)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40248)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40248)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,25 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +424,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +479,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +516,20 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1010,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40248)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40248)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40248)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v40248)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v42435)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v42435)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v42435)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,24 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +423,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +479,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +516,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v42435)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v42435)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v42435)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v42435)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v44279)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v44279)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v44279)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,22 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +421,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +477,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +513,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +998,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v44279)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v44279)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v44279)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v44279)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46646)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46646)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46646)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +420,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +477,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +514,13 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1007,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46646)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46646)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46646)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46646)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46881)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46881)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46881)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,19 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +418,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +474,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +512,15 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +1006,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if ((len & 0x01) != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46881)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46881)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46881)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v46881)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47668)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47668)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47668)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,22 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +421,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +512,14 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1006,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47668)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47668)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47668)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47668)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47846)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47846)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47846)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +412,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +466,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +503,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +998,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47846)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47846)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47846)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47846)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47880)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47880)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47880)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,27 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +426,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +480,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +516,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47880)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47880)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47880)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v47880)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48425)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48425)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48425)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,26 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +425,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +480,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +516,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1015,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48425)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48425)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48425)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48425)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48675)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48675)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48675)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,26 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +425,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +479,9 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +516,26 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1016,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48675)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48675)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48675)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48675)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48690)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48690)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48690)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,16 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +415,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +470,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +508,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1005,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48690)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48690)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48690)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v48690)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50069)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50069)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50069)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,37 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +436,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +490,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +525,16 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1021,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50069)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50069)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50069)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50069)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50291)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50291)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50291)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,29 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +428,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +482,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +517,20 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1017,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50291)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50291)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50291)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v50291)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v51833)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v51833)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v51833)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,26 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +478,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +514,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1013,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v51833)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v51833)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v51833)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v51833)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,40 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +439,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +493,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +528,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1019,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52255)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52255)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52255)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,35 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +434,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +488,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +523,18 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1015,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52255)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52255)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52255)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52255)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52414)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52414)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52414)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,30 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +429,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +483,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +519,15 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1008,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52414)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52414)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52414)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v52414)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v53261)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v53261)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v53261)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,24 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +476,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +512,16 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1008,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v53261)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v53261)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v53261)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v53261)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v55010)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v55010)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v55010)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,24 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +423,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +514,19 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1007,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v55010)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v55010)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v55010)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v55010)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56276)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56276)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56276)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,30 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +429,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +483,11 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +522,16 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56276)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56276)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56276)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56276)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56431)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56431)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56431)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,19 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +418,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +509,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +998,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +1007,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56431)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56431)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56431)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v56431)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57430)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57430)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57430)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,25 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +424,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +513,23 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1016,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57430)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57430)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57430)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57430)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57474)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57474)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57474)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,45 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +497,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +532,20 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+                        byte[] buf = new byte[pos - readPos];
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1025,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57474)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57474)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57474)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v57474)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59029)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59029)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59029)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,26 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +425,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +479,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +514,24 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1018,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59029)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59029)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59029)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59029)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59100)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59100)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59100)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,26 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +425,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +479,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +514,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +1003,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +1012,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59100)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59100)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59100)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59100)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59632)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59632)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59632)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,41 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +440,7 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +494,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +530,22 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1026,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59632)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59632)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59632)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v59632)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v60286)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v60286)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v60286)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,36 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -375,7 +404,8 @@
      * @return The amount of buffered data available for reading.
      */
     int avail() {
-        return buffer != null ? pos - readPos : 0;
+        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+		return buffer != null ? pos - readPos : 0;
     }
 
     /** Doubles our buffer. */
@@ -406,6 +436,9 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +526,16 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1016,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v60286)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v60286)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v60286)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v60286)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v62605)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v62605)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v62605)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,46 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +445,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +500,10 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +538,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1039,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v62605)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v62605)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v62605)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v62605)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v63614)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v63614)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v63614)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,48 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +447,8 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +502,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +538,15 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1033,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v63614)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v63614)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v63614)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v63614)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v66273)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v66273)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v66273)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,44 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +443,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +500,12 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +540,18 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						b += 256;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1032,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v66273)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v66273)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v66273)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v66273)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v67218)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v67218)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v67218)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,42 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +441,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -459,6 +498,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,7 +533,23 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] buf = new byte[pos - readPos];
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1036,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v67218)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v67218)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v67218)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  PatchLogExporter - patch (v67218)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-05 15:39:38 [main] [INFO]  KGenProgMain - Summary
Reached generation = 338
Generated variants = 67218
Syntax valid variants = 61522
Build succeeded variants = 38055
Time elapsed = 3 hours 17 minutes 15 seconds
Exit status = SUCCESS
