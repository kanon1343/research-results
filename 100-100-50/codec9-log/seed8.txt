2023-11-06 14:25:32 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-06 14:25:32 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-06 14:25:32 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-06 14:25:33 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 8 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-06 14:25:54 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-06 14:25:54 [main] [INFO]  KGenProgMain - GA started
2023-11-06 14:25:54 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-06 14:26:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 100, build-succeeded 12, build-failed 52, syntax-invalid 5, redundant 31
Fitness: max 1(1), min 0.353(1), ave 0.778
Test execution time: sum 4960 ms, max 874 ms, min 241 ms
----------------------------------------------------------------

2023-11-06 14:26:13 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-06 14:26:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 seconds
Variants: generated 100, build-succeeded 19, build-failed 68, syntax-invalid 5, redundant 8
Fitness: max 0.98(1), min 0.157(1), ave 0.697
Test execution time: sum 5007 ms, max 417 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 14:26:32 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-06 14:27:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 14 seconds
Variants: generated 200, build-succeeded 66, build-failed 51, syntax-invalid 22, redundant 61
Fitness: max 0.941(2), min 0.157(3), ave 0.679
Test execution time: sum 15567 ms, max 512 ms, min 149 ms
----------------------------------------------------------------

2023-11-06 14:27:09 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-06 14:27:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 47 seconds
Variants: generated 200, build-succeeded 67, build-failed 56, syntax-invalid 13, redundant 64
Fitness: max 0.98(2), min 0.353(2), ave 0.777
Test execution time: sum 15644 ms, max 509 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 14:27:42 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-06 14:28:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 21 seconds
Variants: generated 200, build-succeeded 70, build-failed 55, syntax-invalid 7, redundant 68
Fitness: max 1(1), min 0.333(1), ave 0.846
Test execution time: sum 17120 ms, max 430 ms, min 173 ms
----------------------------------------------------------------

2023-11-06 14:28:16 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-06 14:28:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 59 seconds
Variants: generated 200, build-succeeded 78, build-failed 50, syntax-invalid 13, redundant 59
Fitness: max 1(1), min 0.157(1), ave 0.855
Test execution time: sum 20518 ms, max 2716 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 14:28:54 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-06 14:29:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 28 seconds
Variants: generated 200, build-succeeded 67, build-failed 68, syntax-invalid 12, redundant 53
Fitness: max 0.98(8), min 0.49(3), ave 0.883
Test execution time: sum 15145 ms, max 442 ms, min 132 ms
----------------------------------------------------------------

2023-11-06 14:29:23 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-06 14:29:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 55 seconds
Variants: generated 200, build-succeeded 53, build-failed 63, syntax-invalid 8, redundant 76
Fitness: max 1(1), min 0.51(1), ave 0.908
Test execution time: sum 12733 ms, max 439 ms, min 168 ms
----------------------------------------------------------------

2023-11-06 14:29:50 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-06 14:30:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 22 seconds
Variants: generated 200, build-succeeded 59, build-failed 60, syntax-invalid 13, redundant 68
Fitness: max 1(4), min 0.549(1), ave 0.948
Test execution time: sum 14050 ms, max 399 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 14:30:17 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-06 14:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 54 seconds
Variants: generated 200, build-succeeded 66, build-failed 59, syntax-invalid 12, redundant 63
Fitness: max 1(4), min 0.235(1), ave 0.915
Test execution time: sum 15755 ms, max 702 ms, min 145 ms
----------------------------------------------------------------

2023-11-06 14:30:49 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-06 14:31:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 24 seconds
Variants: generated 200, build-succeeded 58, build-failed 59, syntax-invalid 17, redundant 66
Fitness: max 1(1), min 0.373(1), ave 0.936
Test execution time: sum 14122 ms, max 491 ms, min 122 ms
----------------------------------------------------------------

2023-11-06 14:31:18 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-06 14:31:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 52 seconds
Variants: generated 200, build-succeeded 57, build-failed 64, syntax-invalid 16, redundant 63
Fitness: max 1(4), min 0.314(1), ave 0.929
Test execution time: sum 13565 ms, max 469 ms, min 103 ms
----------------------------------------------------------------

2023-11-06 14:31:47 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-06 14:32:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 23 seconds
Variants: generated 200, build-succeeded 65, build-failed 59, syntax-invalid 16, redundant 60
Fitness: max 1(3), min 0.549(2), ave 0.945
Test execution time: sum 15163 ms, max 484 ms, min 136 ms
----------------------------------------------------------------

2023-11-06 14:32:18 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-06 14:32:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 54 seconds
Variants: generated 200, build-succeeded 70, build-failed 70, syntax-invalid 15, redundant 45
Fitness: max 1(5), min 0.49(1), ave 0.951
Test execution time: sum 15951 ms, max 302 ms, min 110 ms
----------------------------------------------------------------

2023-11-06 14:32:49 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-06 14:33:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 32 seconds
Variants: generated 200, build-succeeded 81, build-failed 61, syntax-invalid 11, redundant 47
Fitness: max 1(5), min 0.235(1), ave 0.936
Test execution time: sum 19245 ms, max 473 ms, min 116 ms
----------------------------------------------------------------

2023-11-06 14:33:27 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-06 14:34:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 10 seconds
Variants: generated 200, build-succeeded 89, build-failed 54, syntax-invalid 18, redundant 39
Fitness: max 1(2), min 0.49(1), ave 0.941
Test execution time: sum 20410 ms, max 519 ms, min 97 ms
----------------------------------------------------------------

2023-11-06 14:34:05 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-06 14:34:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 46 seconds
Variants: generated 200, build-succeeded 82, build-failed 73, syntax-invalid 15, redundant 30
Fitness: max 1(4), min 0.549(1), ave 0.962
Test execution time: sum 19267 ms, max 412 ms, min 118 ms
----------------------------------------------------------------

2023-11-06 14:34:41 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-06 14:35:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 25 seconds
Variants: generated 200, build-succeeded 86, build-failed 67, syntax-invalid 17, redundant 30
Fitness: max 1(6), min 0.49(1), ave 0.967
Test execution time: sum 19919 ms, max 537 ms, min 146 ms
----------------------------------------------------------------

2023-11-06 14:35:20 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-06 14:36:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 5 seconds
Variants: generated 200, build-succeeded 93, build-failed 63, syntax-invalid 11, redundant 33
Fitness: max 1(8), min 0.333(1), ave 0.941
Test execution time: sum 21323 ms, max 336 ms, min 137 ms
----------------------------------------------------------------

2023-11-06 14:36:00 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-06 14:37:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 6 seconds
Variants: generated 200, build-succeeded 105, build-failed 55, syntax-invalid 22, redundant 18
Fitness: max 1(2), min 0.686(1), ave 0.965
Test execution time: sum 31831 ms, max 2272 ms, min 145 ms
----------------------------------------------------------------

2023-11-06 14:37:01 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-06 14:37:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 51 seconds
Variants: generated 200, build-succeeded 92, build-failed 64, syntax-invalid 22, redundant 22
Fitness: max 1(1), min 0.549(1), ave 0.961
Test execution time: sum 22032 ms, max 503 ms, min 103 ms
----------------------------------------------------------------

2023-11-06 14:37:46 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-06 14:38:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 40 seconds
Variants: generated 200, build-succeeded 104, build-failed 57, syntax-invalid 18, redundant 21
Fitness: max 0.98(93), min 0.431(1), ave 0.965
Test execution time: sum 25043 ms, max 531 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 14:38:35 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-06 14:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 26 seconds
Variants: generated 200, build-succeeded 91, build-failed 66, syntax-invalid 21, redundant 22
Fitness: max 1(1), min 0.333(1), ave 0.96
Test execution time: sum 21657 ms, max 504 ms, min 143 ms
----------------------------------------------------------------

2023-11-06 14:39:21 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-06 14:40:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 17 seconds
Variants: generated 200, build-succeeded 101, build-failed 62, syntax-invalid 19, redundant 18
Fitness: max 1(2), min 0.333(1), ave 0.945
Test execution time: sum 23670 ms, max 473 ms, min 112 ms
----------------------------------------------------------------

2023-11-06 14:40:12 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-06 14:40:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 3 seconds
Variants: generated 200, build-succeeded 101, build-failed 61, syntax-invalid 14, redundant 24
Fitness: max 1(3), min 0.549(1), ave 0.96
Test execution time: sum 23795 ms, max 502 ms, min 141 ms
----------------------------------------------------------------

2023-11-06 14:40:57 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-06 14:41:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 3 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 8, redundant 22
Fitness: max 0.98(99), min 0.49(1), ave 0.958
Test execution time: sum 31623 ms, max 2484 ms, min 108 ms
----------------------------------------------------------------

2023-11-06 14:41:57 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-06 14:42:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 55 seconds
Variants: generated 200, build-succeeded 112, build-failed 57, syntax-invalid 11, redundant 20
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 26842 ms, max 470 ms, min 94 ms
----------------------------------------------------------------

2023-11-06 14:42:50 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-06 14:43:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 47 seconds
Variants: generated 200, build-succeeded 102, build-failed 62, syntax-invalid 15, redundant 21
Fitness: max 1(1), min 0.549(1), ave 0.962
Test execution time: sum 24932 ms, max 480 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 14:43:42 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-06 14:44:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 44 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 12, redundant 16
Fitness: max 0.98(92), min 0.49(1), ave 0.955
Test execution time: sum 28855 ms, max 2564 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 14:44:39 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-06 14:45:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 33 seconds
Variants: generated 200, build-succeeded 106, build-failed 53, syntax-invalid 18, redundant 23
Fitness: max 0.98(91), min 0.49(2), ave 0.951
Test execution time: sum 25673 ms, max 539 ms, min 97 ms
----------------------------------------------------------------

2023-11-06 14:45:28 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-06 14:46:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 22 seconds
Variants: generated 200, build-succeeded 110, build-failed 61, syntax-invalid 18, redundant 11
Fitness: max 0.98(98), min 0.333(1), ave 0.959
Test execution time: sum 25946 ms, max 439 ms, min 124 ms
----------------------------------------------------------------

2023-11-06 14:46:17 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-06 14:47:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 15 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 10, redundant 18
Fitness: max 1(1), min 0.314(2), ave 0.949
Test execution time: sum 26623 ms, max 441 ms, min 87 ms
----------------------------------------------------------------

2023-11-06 14:47:10 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-06 14:47:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 4 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 14, redundant 22
Fitness: max 1(2), min 0.49(2), ave 0.96
Test execution time: sum 26024 ms, max 486 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 14:47:59 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-06 14:48:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 51 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 20, redundant 15
Fitness: max 0.98(88), min 0.49(1), ave 0.947
Test execution time: sum 23611 ms, max 421 ms, min 124 ms
----------------------------------------------------------------

2023-11-06 14:48:45 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-06 14:49:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 38 seconds
Variants: generated 200, build-succeeded 101, build-failed 71, syntax-invalid 10, redundant 18
Fitness: max 0.98(88), min 0.667(1), ave 0.966
Test execution time: sum 24074 ms, max 466 ms, min 165 ms
----------------------------------------------------------------

2023-11-06 14:49:33 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-06 14:50:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 27 seconds
Variants: generated 200, build-succeeded 105, build-failed 66, syntax-invalid 17, redundant 12
Fitness: max 0.98(92), min 0.431(1), ave 0.962
Test execution time: sum 24283 ms, max 456 ms, min 150 ms
----------------------------------------------------------------

2023-11-06 14:50:22 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-06 14:51:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 19 seconds
Variants: generated 200, build-succeeded 102, build-failed 71, syntax-invalid 9, redundant 18
Fitness: max 0.98(95), min 0.549(1), ave 0.968
Test execution time: sum 24994 ms, max 552 ms, min 160 ms
----------------------------------------------------------------

2023-11-06 14:51:14 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-06 14:52:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 9 seconds
Variants: generated 200, build-succeeded 108, build-failed 67, syntax-invalid 12, redundant 13
Fitness: max 0.98(97), min 0.49(1), ave 0.961
Test execution time: sum 25498 ms, max 465 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 14:52:04 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-06 14:52:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 56 seconds
Variants: generated 200, build-succeeded 103, build-failed 69, syntax-invalid 13, redundant 15
Fitness: max 1(1), min 0.314(2), ave 0.938
Test execution time: sum 24163 ms, max 480 ms, min 112 ms
----------------------------------------------------------------

2023-11-06 14:52:51 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-06 14:53:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 46 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 19, redundant 17
Fitness: max 0.98(90), min 0.314(1), ave 0.945
Test execution time: sum 25561 ms, max 406 ms, min 122 ms
----------------------------------------------------------------

2023-11-06 14:53:41 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-06 14:54:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 49 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 12, redundant 17
Fitness: max 0.98(94), min 0.216(1), ave 0.953
Test execution time: sum 29523 ms, max 1795 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 14:54:44 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-06 14:55:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 41 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 19, redundant 9
Fitness: max 1(1), min 0.49(3), ave 0.951
Test execution time: sum 26038 ms, max 492 ms, min 136 ms
----------------------------------------------------------------

2023-11-06 14:55:36 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-06 14:56:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 34 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 18, redundant 14
Fitness: max 1(1), min 0.49(3), ave 0.947
Test execution time: sum 26467 ms, max 466 ms, min 110 ms
----------------------------------------------------------------

2023-11-06 14:56:29 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-06 14:57:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 21 seconds
Variants: generated 200, build-succeeded 98, build-failed 62, syntax-invalid 19, redundant 21
Fitness: max 0.98(80), min 0.137(1), ave 0.95
Test execution time: sum 24671 ms, max 441 ms, min 102 ms
----------------------------------------------------------------

2023-11-06 14:57:16 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-06 14:58:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 10 seconds
Variants: generated 200, build-succeeded 102, build-failed 64, syntax-invalid 20, redundant 14
Fitness: max 0.98(91), min 0.471(1), ave 0.963
Test execution time: sum 24608 ms, max 387 ms, min 170 ms
----------------------------------------------------------------

2023-11-06 14:58:05 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-06 14:58:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 0 seconds
Variants: generated 200, build-succeeded 101, build-failed 63, syntax-invalid 24, redundant 12
Fitness: max 1(1), min 0.824(1), ave 0.973
Test execution time: sum 24536 ms, max 498 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 14:58:55 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-06 14:59:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 52 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 20, redundant 19
Fitness: max 0.98(89), min 0.137(1), ave 0.957
Test execution time: sum 24872 ms, max 486 ms, min 165 ms
----------------------------------------------------------------

2023-11-06 14:59:47 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-06 15:00:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 43 seconds
Variants: generated 200, build-succeeded 103, build-failed 64, syntax-invalid 20, redundant 13
Fitness: max 1(1), min 0.49(2), ave 0.956
Test execution time: sum 24687 ms, max 488 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 15:00:38 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-06 15:01:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 36 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 20, redundant 7
Fitness: max 0.98(92), min 0.49(2), ave 0.951
Test execution time: sum 26373 ms, max 432 ms, min 171 ms
----------------------------------------------------------------

2023-11-06 15:01:31 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-06 15:02:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 27 seconds
Variants: generated 200, build-succeeded 109, build-failed 55, syntax-invalid 23, redundant 13
Fitness: max 0.98(90), min 0.216(1), ave 0.946
Test execution time: sum 25950 ms, max 414 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 15:02:22 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-06 15:03:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 28 seconds
Variants: generated 200, build-succeeded 125, build-failed 48, syntax-invalid 13, redundant 14
Fitness: max 0.98(107), min 0.275(1), ave 0.956
Test execution time: sum 32532 ms, max 2562 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 15:03:23 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-06 15:04:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 23 seconds
Variants: generated 200, build-succeeded 108, build-failed 48, syntax-invalid 29, redundant 15
Fitness: max 0.98(85), min 0.314(2), ave 0.929
Test execution time: sum 25833 ms, max 489 ms, min 139 ms
----------------------------------------------------------------

2023-11-06 15:04:18 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-06 15:05:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 20 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 17, redundant 5
Fitness: max 1(1), min 0.314(1), ave 0.962
Test execution time: sum 27486 ms, max 494 ms, min 147 ms
----------------------------------------------------------------

2023-11-06 15:05:15 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-06 15:06:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 18 seconds
Variants: generated 200, build-succeeded 113, build-failed 67, syntax-invalid 10, redundant 10
Fitness: max 0.98(101), min 0.49(1), ave 0.967
Test execution time: sum 27093 ms, max 448 ms, min 142 ms
----------------------------------------------------------------

2023-11-06 15:06:13 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-06 15:07:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 13 seconds
Variants: generated 200, build-succeeded 108, build-failed 62, syntax-invalid 19, redundant 11
Fitness: max 0.98(90), min 0.255(1), ave 0.941
Test execution time: sum 26786 ms, max 430 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 15:07:08 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-06 15:08:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 5 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 25, redundant 10
Fitness: max 1(1), min 0.255(1), ave 0.94
Test execution time: sum 24589 ms, max 450 ms, min 160 ms
----------------------------------------------------------------

2023-11-06 15:08:00 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-06 15:08:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 2 seconds
Variants: generated 200, build-succeeded 102, build-failed 67, syntax-invalid 14, redundant 17
Fitness: max 0.98(89), min 0.49(1), ave 0.96
Test execution time: sum 24867 ms, max 495 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 15:08:57 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-06 15:09:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 57 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 16, redundant 17
Fitness: max 1(1), min 0.235(1), ave 0.963
Test execution time: sum 25945 ms, max 482 ms, min 161 ms
----------------------------------------------------------------

2023-11-06 15:09:52 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-06 15:10:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 49 seconds
Variants: generated 200, build-succeeded 96, build-failed 65, syntax-invalid 25, redundant 14
Fitness: max 0.98(88), min 0.588(2), ave 0.966
Test execution time: sum 23338 ms, max 446 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 15:10:44 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-06 15:11:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 47 seconds
Variants: generated 200, build-succeeded 107, build-failed 55, syntax-invalid 21, redundant 17
Fitness: max 0.98(90), min 0.49(1), ave 0.955
Test execution time: sum 26778 ms, max 443 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 15:11:42 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-06 15:12:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 43 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 19, redundant 11
Fitness: max 0.98(96), min 0.49(1), ave 0.957
Test execution time: sum 27562 ms, max 455 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 15:12:38 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-06 15:13:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 43 seconds
Variants: generated 200, build-succeeded 114, build-failed 50, syntax-invalid 18, redundant 18
Fitness: max 0.98(100), min 0.235(1), ave 0.952
Test execution time: sum 28200 ms, max 447 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 15:13:38 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-06 15:14:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 38 seconds
Variants: generated 200, build-succeeded 108, build-failed 52, syntax-invalid 22, redundant 18
Fitness: max 0.98(94), min 0.353(1), ave 0.949
Test execution time: sum 26257 ms, max 504 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 15:14:33 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-06 15:15:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 33 seconds
Variants: generated 200, build-succeeded 109, build-failed 64, syntax-invalid 17, redundant 10
Fitness: max 0.98(96), min 0.549(1), ave 0.961
Test execution time: sum 25845 ms, max 449 ms, min 82 ms
----------------------------------------------------------------

2023-11-06 15:15:28 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-06 15:16:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 28 seconds
Variants: generated 200, build-succeeded 106, build-failed 59, syntax-invalid 17, redundant 18
Fitness: max 0.98(93), min 0.49(1), ave 0.947
Test execution time: sum 25710 ms, max 501 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 15:16:23 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-06 15:17:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 23 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 18, redundant 7
Fitness: max 1(1), min 0.353(1), ave 0.956
Test execution time: sum 27065 ms, max 443 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 15:17:18 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-06 15:18:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 22 seconds
Variants: generated 200, build-succeeded 100, build-failed 63, syntax-invalid 24, redundant 13
Fitness: max 0.98(82), min 0.549(1), ave 0.948
Test execution time: sum 26556 ms, max 1974 ms, min 141 ms
----------------------------------------------------------------

2023-11-06 15:18:17 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-06 15:19:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 20 seconds
Variants: generated 200, build-succeeded 103, build-failed 55, syntax-invalid 25, redundant 17
Fitness: max 0.98(87), min 0.49(2), ave 0.956
Test execution time: sum 28462 ms, max 3703 ms, min 136 ms
----------------------------------------------------------------

2023-11-06 15:19:15 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-06 15:20:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 15 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 20, redundant 12
Fitness: max 0.98(97), min 0.275(1), ave 0.963
Test execution time: sum 27085 ms, max 464 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 15:20:10 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-06 15:21:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 13 seconds
Variants: generated 200, build-succeeded 101, build-failed 58, syntax-invalid 21, redundant 20
Fitness: max 0.98(82), min 0.314(1), ave 0.954
Test execution time: sum 25132 ms, max 548 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 15:21:08 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-06 15:22:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 8 seconds
Variants: generated 200, build-succeeded 98, build-failed 71, syntax-invalid 17, redundant 14
Fitness: max 0.98(88), min 0.333(1), ave 0.953
Test execution time: sum 24182 ms, max 427 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 15:22:03 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-06 15:22:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 4 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 21, redundant 13
Fitness: max 0.98(85), min 0.137(1), ave 0.939
Test execution time: sum 26276 ms, max 446 ms, min 126 ms
----------------------------------------------------------------

2023-11-06 15:22:59 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-06 15:23:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 56 seconds
Variants: generated 200, build-succeeded 93, build-failed 65, syntax-invalid 23, redundant 19
Fitness: max 0.98(82), min 0.549(4), ave 0.952
Test execution time: sum 22834 ms, max 427 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 15:23:51 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-06 15:24:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 55 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 10, redundant 20
Fitness: max 0.98(94), min 0.765(2), ave 0.968
Test execution time: sum 28869 ms, max 2721 ms, min 152 ms
----------------------------------------------------------------

2023-11-06 15:24:50 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-06 15:25:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 50 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 14, redundant 19
Fitness: max 0.98(94), min 0.353(1), ave 0.944
Test execution time: sum 26863 ms, max 419 ms, min 101 ms
----------------------------------------------------------------

2023-11-06 15:25:45 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-06 15:26:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 seconds
Variants: generated 200, build-succeeded 110, build-failed 53, syntax-invalid 15, redundant 22
Fitness: max 0.98(95), min 0.765(1), ave 0.965
Test execution time: sum 27427 ms, max 492 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 15:26:45 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-06 15:27:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 44 seconds
Variants: generated 200, build-succeeded 98, build-failed 67, syntax-invalid 20, redundant 15
Fitness: max 1(2), min 0.314(1), ave 0.961
Test execution time: sum 23912 ms, max 479 ms, min 108 ms
----------------------------------------------------------------

2023-11-06 15:27:39 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-06 15:28:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 44 seconds
Variants: generated 200, build-succeeded 102, build-failed 57, syntax-invalid 19, redundant 22
Fitness: max 0.98(85), min 0.353(1), ave 0.951
Test execution time: sum 26450 ms, max 720 ms, min 117 ms
----------------------------------------------------------------

2023-11-06 15:28:39 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-06 15:29:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 37 seconds
Variants: generated 200, build-succeeded 96, build-failed 69, syntax-invalid 17, redundant 18
Fitness: max 0.98(83), min 0.314(2), ave 0.94
Test execution time: sum 23989 ms, max 471 ms, min 139 ms
----------------------------------------------------------------

2023-11-06 15:29:32 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-06 15:30:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 42 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 15, redundant 20
Fitness: max 0.98(92), min 0.235(1), ave 0.948
Test execution time: sum 29341 ms, max 1814 ms, min 123 ms
----------------------------------------------------------------

2023-11-06 15:30:37 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-06 15:31:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 39 seconds
Variants: generated 200, build-succeeded 97, build-failed 55, syntax-invalid 23, redundant 25
Fitness: max 0.98(81), min 0.314(1), ave 0.938
Test execution time: sum 24650 ms, max 477 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 15:31:34 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-06 15:32:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 37 seconds
Variants: generated 200, build-succeeded 103, build-failed 66, syntax-invalid 18, redundant 13
Fitness: max 0.98(88), min 0.49(1), ave 0.956
Test execution time: sum 25676 ms, max 458 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 15:32:32 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-06 15:33:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 37 seconds
Variants: generated 200, build-succeeded 102, build-failed 49, syntax-invalid 25, redundant 24
Fitness: max 0.98(87), min 0.49(1), ave 0.961
Test execution time: sum 27256 ms, max 2372 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 15:33:32 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-06 15:34:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 38 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 16, redundant 19
Fitness: max 0.98(94), min 0.725(1), ave 0.965
Test execution time: sum 27204 ms, max 418 ms, min 175 ms
----------------------------------------------------------------

2023-11-06 15:34:33 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-06 15:35:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 38 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 15, redundant 17
Fitness: max 0.98(89), min 0.235(1), ave 0.953
Test execution time: sum 26542 ms, max 458 ms, min 141 ms
----------------------------------------------------------------

2023-11-06 15:35:33 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-06 15:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 52, syntax-invalid 24, redundant 17
Fitness: max 0.98(90), min 0.569(1), ave 0.961
Test execution time: sum 27195 ms, max 452 ms, min 184 ms
----------------------------------------------------------------

2023-11-06 15:36:36 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-06 15:37:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 39 seconds
Variants: generated 200, build-succeeded 102, build-failed 53, syntax-invalid 22, redundant 23
Fitness: max 1(1), min 0.314(1), ave 0.947
Test execution time: sum 25261 ms, max 440 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 15:37:34 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-06 15:38:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 41 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 19, redundant 18
Fitness: max 0.98(89), min 0.549(1), ave 0.957
Test execution time: sum 25943 ms, max 512 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 15:38:36 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-06 15:39:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 38 seconds
Variants: generated 200, build-succeeded 101, build-failed 59, syntax-invalid 23, redundant 17
Fitness: max 0.98(89), min 0.49(1), ave 0.962
Test execution time: sum 24297 ms, max 471 ms, min 67 ms
----------------------------------------------------------------

2023-11-06 15:39:33 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-06 15:40:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 37 seconds
Variants: generated 200, build-succeeded 95, build-failed 64, syntax-invalid 15, redundant 26
Fitness: max 0.98(79), min 0.549(2), ave 0.955
Test execution time: sum 23737 ms, max 473 ms, min 136 ms
----------------------------------------------------------------

2023-11-06 15:40:32 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-06 15:41:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 50 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 21, redundant 14
Fitness: max 0.98(92), min 0.353(1), ave 0.957
Test execution time: sum 33801 ms, max 2687 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 15:41:45 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-06 15:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 52 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 11, redundant 17
Fitness: max 0.98(98), min 0.725(1), ave 0.969
Test execution time: sum 27313 ms, max 482 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 15:42:47 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-06 15:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 51 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 15, redundant 20
Fitness: max 1(1), min 0.314(1), ave 0.951
Test execution time: sum 25161 ms, max 429 ms, min 109 ms
----------------------------------------------------------------

2023-11-06 15:43:46 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-06 15:44:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 55 seconds
Variants: generated 200, build-succeeded 113, build-failed 48, syntax-invalid 20, redundant 19
Fitness: max 0.98(101), min 0.49(1), ave 0.966
Test execution time: sum 28256 ms, max 574 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 15:44:50 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-06 15:45:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 21, redundant 9
Fitness: max 0.98(99), min 0.49(1), ave 0.956
Test execution time: sum 29357 ms, max 445 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 15:45:54 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-06 15:46:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 57 seconds
Variants: generated 200, build-succeeded 96, build-failed 61, syntax-invalid 27, redundant 16
Fitness: max 0.98(84), min 0.49(1), ave 0.965
Test execution time: sum 23983 ms, max 411 ms, min 122 ms
----------------------------------------------------------------

2023-11-06 15:46:52 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-06 15:47:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 2 seconds
Variants: generated 200, build-succeeded 94, build-failed 74, syntax-invalid 24, redundant 8
Fitness: max 0.98(78), min 0.49(2), ave 0.951
Test execution time: sum 28463 ms, max 4810 ms, min 99 ms
----------------------------------------------------------------

2023-11-06 15:47:57 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-06 15:49:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 12 seconds
Variants: generated 200, build-succeeded 103, build-failed 58, syntax-invalid 26, redundant 13
Fitness: max 0.98(90), min 0.549(3), ave 0.957
Test execution time: sum 29355 ms, max 3533 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 15:49:07 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-06 15:50:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 14 seconds
Variants: generated 200, build-succeeded 103, build-failed 65, syntax-invalid 19, redundant 13
Fitness: max 0.98(92), min 0.333(1), ave 0.965
Test execution time: sum 26686 ms, max 546 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 15:50:09 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-06 15:51:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 18 seconds
Variants: generated 200, build-succeeded 108, build-failed 55, syntax-invalid 28, redundant 9
Fitness: max 0.98(91), min 0.353(1), ave 0.945
Test execution time: sum 27379 ms, max 535 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 15:51:14 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-06 15:52:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 20 seconds
Variants: generated 200, build-succeeded 105, build-failed 67, syntax-invalid 17, redundant 11
Fitness: max 0.98(99), min 0.549(1), ave 0.97
Test execution time: sum 25830 ms, max 484 ms, min 100 ms
----------------------------------------------------------------

2023-11-06 15:52:15 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-06 15:53:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 12 seconds
Variants: generated 200, build-succeeded 100, build-failed 65, syntax-invalid 28, redundant 7
Fitness: max 0.98(82), min 0.314(1), ave 0.949
Test execution time: sum 23072 ms, max 410 ms, min 111 ms
----------------------------------------------------------------

2023-11-06 15:53:07 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-06 15:54:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 16 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 21, redundant 16
Fitness: max 0.98(86), min 0.314(3), ave 0.927
Test execution time: sum 27855 ms, max 767 ms, min 166 ms
----------------------------------------------------------------

2023-11-06 15:54:11 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-06 15:55:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 17 seconds
Variants: generated 200, build-succeeded 106, build-failed 60, syntax-invalid 22, redundant 12
Fitness: max 0.98(93), min 0.549(1), ave 0.962
Test execution time: sum 27072 ms, max 477 ms, min 90 ms
----------------------------------------------------------------

2023-11-06 15:55:12 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-06 15:56:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 26 seconds
Variants: generated 200, build-succeeded 120, build-failed 51, syntax-invalid 11, redundant 18
Fitness: max 0.98(102), min 0.275(1), ave 0.936
Test execution time: sum 30560 ms, max 468 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 15:56:21 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-06 15:57:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 38 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 14, redundant 14
Fitness: max 0.98(94), min 0.314(1), ave 0.948
Test execution time: sum 31953 ms, max 2856 ms, min 166 ms
----------------------------------------------------------------

2023-11-06 15:57:33 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-06 15:58:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 49 seconds
Variants: generated 200, build-succeeded 118, build-failed 59, syntax-invalid 12, redundant 11
Fitness: max 0.98(102), min 0.333(1), ave 0.946
Test execution time: sum 31452 ms, max 466 ms, min 169 ms
----------------------------------------------------------------

2023-11-06 15:58:44 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-06 15:59:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 59 seconds
Variants: generated 200, build-succeeded 120, build-failed 56, syntax-invalid 16, redundant 8
Fitness: max 0.98(105), min 0.667(1), ave 0.966
Test execution time: sum 33724 ms, max 3114 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 15:59:54 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-06 16:01:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 6 seconds
Variants: generated 200, build-succeeded 120, build-failed 54, syntax-invalid 15, redundant 11
Fitness: max 0.98(103), min 0.314(1), ave 0.938
Test execution time: sum 33207 ms, max 2675 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 16:01:01 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-06 16:02:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 15 seconds
Variants: generated 200, build-succeeded 124, build-failed 57, syntax-invalid 13, redundant 6
Fitness: max 0.98(103), min 0.333(2), ave 0.947
Test execution time: sum 32257 ms, max 557 ms, min 139 ms
----------------------------------------------------------------

2023-11-06 16:02:10 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-06 16:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 23 seconds
Variants: generated 200, build-succeeded 112, build-failed 68, syntax-invalid 7, redundant 13
Fitness: max 1(1), min 0.49(2), ave 0.961
Test execution time: sum 28892 ms, max 502 ms, min 132 ms
----------------------------------------------------------------

2023-11-06 16:03:19 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-06 16:04:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 32 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 15, redundant 12
Fitness: max 0.98(104), min 0.549(1), ave 0.966
Test execution time: sum 29392 ms, max 409 ms, min 185 ms
----------------------------------------------------------------

2023-11-06 16:04:27 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-06 16:05:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 43 seconds
Variants: generated 200, build-succeeded 118, build-failed 58, syntax-invalid 13, redundant 11
Fitness: max 0.98(105), min 0.294(1), ave 0.961
Test execution time: sum 30846 ms, max 461 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 16:05:38 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-06 16:06:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 50 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 14, redundant 19
Fitness: max 0.98(98), min 0.49(1), ave 0.966
Test execution time: sum 27642 ms, max 513 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 16:06:45 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-06 16:07:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 56 seconds
Variants: generated 200, build-succeeded 110, build-failed 67, syntax-invalid 12, redundant 11
Fitness: max 0.98(99), min 0.314(1), ave 0.958
Test execution time: sum 28466 ms, max 450 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 16:07:51 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-06 16:09:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 9 seconds
Variants: generated 200, build-succeeded 126, build-failed 56, syntax-invalid 7, redundant 11
Fitness: max 0.98(112), min 0.784(1), ave 0.969
Test execution time: sum 32739 ms, max 430 ms, min 168 ms
----------------------------------------------------------------

2023-11-06 16:09:04 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-06 16:10:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 18 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 6, redundant 26
Fitness: max 0.98(100), min 0.784(1), ave 0.967
Test execution time: sum 29245 ms, max 486 ms, min 131 ms
----------------------------------------------------------------

2023-11-06 16:10:13 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-06 16:11:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 29 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 11, redundant 11
Fitness: max 0.98(100), min 0.314(1), ave 0.954
Test execution time: sum 30279 ms, max 512 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 16:11:24 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-06 16:12:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 36 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 18, redundant 16
Fitness: max 0.98(94), min 0.49(1), ave 0.961
Test execution time: sum 27680 ms, max 475 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 16:12:31 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-06 16:13:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 42 seconds
Variants: generated 200, build-succeeded 103, build-failed 68, syntax-invalid 17, redundant 12
Fitness: max 0.98(89), min 0.431(1), ave 0.956
Test execution time: sum 26762 ms, max 490 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 16:13:37 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-06 16:14:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 47 seconds
Variants: generated 200, build-succeeded 103, build-failed 74, syntax-invalid 11, redundant 12
Fitness: max 1(1), min 0.314(2), ave 0.932
Test execution time: sum 26701 ms, max 425 ms, min 141 ms
----------------------------------------------------------------

2023-11-06 16:14:42 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-06 16:15:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 57 seconds
Variants: generated 200, build-succeeded 115, build-failed 56, syntax-invalid 10, redundant 19
Fitness: max 1(1), min 0.49(1), ave 0.966
Test execution time: sum 31004 ms, max 486 ms, min 88 ms
----------------------------------------------------------------

2023-11-06 16:15:52 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-06 16:16:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 57 seconds
Variants: generated 200, build-succeeded 99, build-failed 66, syntax-invalid 18, redundant 17
Fitness: max 0.98(90), min 0.333(1), ave 0.962
Test execution time: sum 25791 ms, max 511 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 16:16:52 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-06 16:17:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 2 seconds
Variants: generated 200, build-succeeded 105, build-failed 61, syntax-invalid 11, redundant 23
Fitness: max 0.98(98), min 0.667(1), ave 0.971
Test execution time: sum 27484 ms, max 464 ms, min 139 ms
----------------------------------------------------------------

2023-11-06 16:17:57 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-06 16:19:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 5 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 9, redundant 18
Fitness: max 1(1), min 0.49(1), ave 0.969
Test execution time: sum 28619 ms, max 486 ms, min 185 ms
----------------------------------------------------------------

2023-11-06 16:19:00 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-06 16:20:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 7 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 11, redundant 19
Fitness: max 0.98(97), min 0.49(1), ave 0.959
Test execution time: sum 27257 ms, max 425 ms, min 145 ms
----------------------------------------------------------------

2023-11-06 16:20:02 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-06 16:21:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 14 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 6, redundant 19
Fitness: max 0.98(101), min 0.333(1), ave 0.958
Test execution time: sum 28692 ms, max 625 ms, min 105 ms
----------------------------------------------------------------

2023-11-06 16:21:09 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-06 16:22:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 28 seconds
Variants: generated 200, build-succeeded 127, build-failed 53, syntax-invalid 8, redundant 12
Fitness: max 0.98(109), min 0.49(2), ave 0.946
Test execution time: sum 35488 ms, max 724 ms, min 153 ms
----------------------------------------------------------------

2023-11-06 16:22:23 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-06 16:23:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 34 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 10, redundant 11
Fitness: max 1(1), min 0.49(2), ave 0.959
Test execution time: sum 29451 ms, max 422 ms, min 132 ms
----------------------------------------------------------------

2023-11-06 16:23:29 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-06 16:24:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 41 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 8, redundant 19
Fitness: max 0.98(99), min 0.255(1), ave 0.951
Test execution time: sum 27969 ms, max 454 ms, min 141 ms
----------------------------------------------------------------

2023-11-06 16:24:36 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-06 16:25:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 44 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 12, redundant 20
Fitness: max 0.98(98), min 0.549(1), ave 0.964
Test execution time: sum 28278 ms, max 462 ms, min 120 ms
----------------------------------------------------------------

2023-11-06 16:25:39 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-06 16:26:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 12, redundant 18
Fitness: max 0.98(97), min 0.725(1), ave 0.965
Test execution time: sum 29223 ms, max 497 ms, min 104 ms
----------------------------------------------------------------

2023-11-06 16:26:46 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-06 16:27:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 54 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 15, redundant 18
Fitness: max 0.98(97), min 0.588(1), ave 0.963
Test execution time: sum 28008 ms, max 522 ms, min 185 ms
----------------------------------------------------------------

2023-11-06 16:27:49 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-06 16:28:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 2 seconds
Variants: generated 200, build-succeeded 116, build-failed 51, syntax-invalid 16, redundant 17
Fitness: max 1(1), min 0.49(1), ave 0.958
Test execution time: sum 31924 ms, max 663 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 16:28:57 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-06 16:30:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 18 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 15, redundant 13
Fitness: max 0.98(103), min 0.51(1), ave 0.963
Test execution time: sum 33785 ms, max 2694 ms, min 124 ms
----------------------------------------------------------------

2023-11-06 16:30:14 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-06 16:31:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 31 seconds
Variants: generated 200, build-succeeded 117, build-failed 50, syntax-invalid 14, redundant 19
Fitness: max 0.98(107), min 0.235(1), ave 0.951
Test execution time: sum 29900 ms, max 506 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 16:31:26 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-06 16:32:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 44 seconds
Variants: generated 200, build-succeeded 114, build-failed 63, syntax-invalid 10, redundant 13
Fitness: max 0.98(103), min 0.471(1), ave 0.966
Test execution time: sum 29410 ms, max 475 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 16:32:39 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-06 16:33:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 55 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 11, redundant 13
Fitness: max 0.98(91), min 0.314(2), ave 0.934
Test execution time: sum 28901 ms, max 505 ms, min 121 ms
----------------------------------------------------------------

2023-11-06 16:33:50 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-06 16:35:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 12 seconds
Variants: generated 200, build-succeeded 123, build-failed 55, syntax-invalid 11, redundant 11
Fitness: max 0.98(106), min 0.569(1), ave 0.957
Test execution time: sum 33156 ms, max 455 ms, min 177 ms
----------------------------------------------------------------

2023-11-06 16:35:08 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-11-06 16:36:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 24 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 17, redundant 11
Fitness: max 1(1), min 0.314(1), ave 0.946
Test execution time: sum 30060 ms, max 545 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 16:36:19 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-11-06 16:37:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 45 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 17, redundant 11
Fitness: max 0.98(101), min 0.314(1), ave 0.958
Test execution time: sum 34404 ms, max 2931 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 16:37:40 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-11-06 16:38:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 56 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 16, redundant 16
Fitness: max 0.98(104), min 0.49(3), ave 0.961
Test execution time: sum 29717 ms, max 512 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 16:38:52 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-11-06 16:40:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 15 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 12, redundant 11
Fitness: max 0.98(102), min 0.49(2), ave 0.96
Test execution time: sum 31836 ms, max 2432 ms, min 175 ms
----------------------------------------------------------------

2023-11-06 16:40:10 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-11-06 16:41:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 30 seconds
Variants: generated 200, build-succeeded 122, build-failed 56, syntax-invalid 11, redundant 11
Fitness: max 1(1), min 0.275(1), ave 0.951
Test execution time: sum 32290 ms, max 493 ms, min 147 ms
----------------------------------------------------------------

2023-11-06 16:41:26 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-11-06 16:42:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 43 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 14, redundant 8
Fitness: max 1(1), min 0.353(1), ave 0.955
Test execution time: sum 31046 ms, max 505 ms, min 107 ms
----------------------------------------------------------------

2023-11-06 16:42:38 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-11-06 16:43:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 57 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 15, redundant 12
Fitness: max 0.98(104), min 0.49(1), ave 0.958
Test execution time: sum 31069 ms, max 539 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 16:43:52 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-11-06 16:45:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 14 seconds
Variants: generated 200, build-succeeded 124, build-failed 46, syntax-invalid 17, redundant 13
Fitness: max 1(1), min 0.275(1), ave 0.953
Test execution time: sum 31931 ms, max 498 ms, min 112 ms
----------------------------------------------------------------

2023-11-06 16:45:09 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-11-06 16:46:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 31 seconds
Variants: generated 200, build-succeeded 119, build-failed 61, syntax-invalid 6, redundant 14
Fitness: max 0.98(108), min 0.49(1), ave 0.967
Test execution time: sum 32750 ms, max 564 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 16:46:26 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-11-06 16:47:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 51 seconds
Variants: generated 200, build-succeeded 128, build-failed 56, syntax-invalid 11, redundant 5
Fitness: max 0.98(116), min 0.49(1), ave 0.966
Test execution time: sum 34218 ms, max 500 ms, min 126 ms
----------------------------------------------------------------

2023-11-06 16:47:46 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-11-06 16:49:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 9 seconds
Variants: generated 200, build-succeeded 123, build-failed 56, syntax-invalid 12, redundant 9
Fitness: max 0.98(111), min 0.49(1), ave 0.964
Test execution time: sum 32652 ms, max 516 ms, min 134 ms
----------------------------------------------------------------

2023-11-06 16:49:04 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-11-06 16:50:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 31 seconds
Variants: generated 200, build-succeeded 117, build-failed 54, syntax-invalid 18, redundant 11
Fitness: max 0.98(96), min 0.627(1), ave 0.96
Test execution time: sum 34540 ms, max 2824 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 16:50:26 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-11-06 16:51:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 49 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 20, redundant 7
Fitness: max 0.98(96), min 0.49(1), ave 0.954
Test execution time: sum 35907 ms, max 3438 ms, min 128 ms
----------------------------------------------------------------

2023-11-06 16:51:44 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-11-06 16:52:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 57 seconds
Variants: generated 200, build-succeeded 101, build-failed 58, syntax-invalid 28, redundant 13
Fitness: max 0.98(89), min 0.549(1), ave 0.964
Test execution time: sum 26749 ms, max 502 ms, min 133 ms
----------------------------------------------------------------

2023-11-06 16:52:52 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-11-06 16:54:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 17 seconds
Variants: generated 200, build-succeeded 120, build-failed 49, syntax-invalid 24, redundant 7
Fitness: max 0.98(101), min 0.255(1), ave 0.957
Test execution time: sum 33568 ms, max 2902 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 16:54:12 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-11-06 16:55:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 29 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 23, redundant 10
Fitness: max 0.98(89), min 0.686(1), ave 0.96
Test execution time: sum 28595 ms, max 530 ms, min 90 ms
----------------------------------------------------------------

2023-11-06 16:55:24 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-11-06 16:56:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 47 seconds
Variants: generated 200, build-succeeded 124, build-failed 53, syntax-invalid 17, redundant 6
Fitness: max 1(1), min 0.549(2), ave 0.959
Test execution time: sum 32900 ms, max 482 ms, min 204 ms
----------------------------------------------------------------

2023-11-06 16:56:42 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-11-06 16:57:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 4 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 16, redundant 3
Fitness: max 1(1), min 0.667(2), ave 0.966
Test execution time: sum 32621 ms, max 480 ms, min 156 ms
----------------------------------------------------------------

2023-11-06 16:57:59 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-11-06 16:59:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 25 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 14, redundant 11
Fitness: max 0.98(114), min 0.49(3), ave 0.964
Test execution time: sum 33074 ms, max 536 ms, min 147 ms
----------------------------------------------------------------

2023-11-06 16:59:21 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-11-06 17:00:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 43 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 16, redundant 7
Fitness: max 0.98(104), min 0.549(2), ave 0.961
Test execution time: sum 31667 ms, max 474 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 17:00:38 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-11-06 17:01:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 58 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 18, redundant 12
Fitness: max 0.98(98), min 0.235(1), ave 0.936
Test execution time: sum 30079 ms, max 465 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 17:01:53 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-11-06 17:03:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 12 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 19, redundant 9
Fitness: max 0.98(99), min 0.49(1), ave 0.96
Test execution time: sum 31014 ms, max 2729 ms, min 145 ms
----------------------------------------------------------------

2023-11-06 17:03:07 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-11-06 17:04:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 24 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 17, redundant 13
Fitness: max 0.98(98), min 0.255(1), ave 0.938
Test execution time: sum 28187 ms, max 457 ms, min 137 ms
----------------------------------------------------------------

2023-11-06 17:04:19 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-11-06 17:05:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 40 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 14, redundant 12
Fitness: max 0.98(100), min 0.314(2), ave 0.948
Test execution time: sum 30640 ms, max 513 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 17:05:36 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-11-06 17:06:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 56 seconds
Variants: generated 200, build-succeeded 122, build-failed 55, syntax-invalid 17, redundant 6
Fitness: max 0.98(96), min 0.235(1), ave 0.925
Test execution time: sum 29419 ms, max 453 ms, min 131 ms
----------------------------------------------------------------

2023-11-06 17:06:52 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-11-06 17:07:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 53 seconds
Variants: generated 200, build-succeeded 104, build-failed 64, syntax-invalid 26, redundant 6
Fitness: max 0.98(83), min 0.314(4), ave 0.919
Test execution time: sum 20189 ms, max 427 ms, min 85 ms
----------------------------------------------------------------

2023-11-06 17:07:48 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-11-06 17:08:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 50 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 16, redundant 16
Fitness: max 0.98(103), min 0.314(3), ave 0.947
Test execution time: sum 24398 ms, max 505 ms, min 102 ms
----------------------------------------------------------------

2023-11-06 17:08:45 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-11-06 17:09:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 2 seconds
Variants: generated 200, build-succeeded 119, build-failed 51, syntax-invalid 21, redundant 9
Fitness: max 1(1), min 0.333(2), ave 0.953
Test execution time: sum 28455 ms, max 451 ms, min 153 ms
----------------------------------------------------------------

2023-11-06 17:09:57 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-11-06 17:11:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 11 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 18, redundant 4
Fitness: max 0.98(100), min 0.333(1), ave 0.951
Test execution time: sum 27061 ms, max 481 ms, min 160 ms
----------------------------------------------------------------

2023-11-06 17:11:07 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-11-06 17:12:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 20 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 15, redundant 12
Fitness: max 0.98(103), min 0.314(1), ave 0.953
Test execution time: sum 27957 ms, max 455 ms, min 176 ms
----------------------------------------------------------------

2023-11-06 17:12:15 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-11-06 17:13:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 36 seconds
Variants: generated 200, build-succeeded 131, build-failed 50, syntax-invalid 9, redundant 10
Fitness: max 0.98(114), min 0.314(1), ave 0.954
Test execution time: sum 32304 ms, max 530 ms, min 131 ms
----------------------------------------------------------------

2023-11-06 17:13:31 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-11-06 17:14:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 51 seconds
Variants: generated 200, build-succeeded 124, build-failed 64, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0.314(3), ave 0.947
Test execution time: sum 30539 ms, max 458 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 17:14:46 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-11-06 17:16:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 12 seconds
Variants: generated 200, build-succeeded 129, build-failed 53, syntax-invalid 9, redundant 9
Fitness: max 1(1), min 0.333(2), ave 0.96
Test execution time: sum 34462 ms, max 2928 ms, min 88 ms
----------------------------------------------------------------

2023-11-06 17:16:07 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-11-06 17:17:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 26 seconds
Variants: generated 200, build-succeeded 114, build-failed 63, syntax-invalid 20, redundant 3
Fitness: max 0.98(101), min 0.765(3), ave 0.966
Test execution time: sum 27586 ms, max 444 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 17:17:21 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-11-06 17:18:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 40 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 12, redundant 10
Fitness: max 1(1), min 0.333(5), ave 0.942
Test execution time: sum 27875 ms, max 426 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 17:18:35 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-11-06 17:19:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 54 seconds
Variants: generated 200, build-succeeded 132, build-failed 53, syntax-invalid 6, redundant 9
Fitness: max 0.98(116), min 0.314(1), ave 0.94
Test execution time: sum 30518 ms, max 439 ms, min 75 ms
----------------------------------------------------------------

2023-11-06 17:19:49 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-11-06 17:21:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 9 seconds
Variants: generated 200, build-succeeded 123, build-failed 59, syntax-invalid 8, redundant 10
Fitness: max 0.98(106), min 0.314(1), ave 0.932
Test execution time: sum 28607 ms, max 416 ms, min 107 ms
----------------------------------------------------------------

2023-11-06 17:21:04 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-11-06 17:22:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 24 seconds
Variants: generated 200, build-succeeded 129, build-failed 57, syntax-invalid 9, redundant 5
Fitness: max 0.98(113), min 0.333(3), ave 0.949
Test execution time: sum 30948 ms, max 549 ms, min 129 ms
----------------------------------------------------------------

2023-11-06 17:22:19 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-11-06 17:23:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 37 seconds
Variants: generated 200, build-succeeded 117, build-failed 63, syntax-invalid 12, redundant 8
Fitness: max 0.98(100), min 0.314(1), ave 0.952
Test execution time: sum 28251 ms, max 444 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 17:23:32 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-11-06 17:24:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 55 seconds
Variants: generated 200, build-succeeded 130, build-failed 52, syntax-invalid 11, redundant 7
Fitness: max 1(2), min 0.333(7), ave 0.927
Test execution time: sum 32136 ms, max 459 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 17:24:50 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-11-06 17:26:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 seconds
Variants: generated 200, build-succeeded 120, build-failed 62, syntax-invalid 11, redundant 7
Fitness: max 1(1), min 0.765(1), ave 0.972
Test execution time: sum 29771 ms, max 522 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 17:26:05 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-11-06 17:27:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 40 seconds
Variants: generated 200, build-succeeded 128, build-failed 57, syntax-invalid 9, redundant 6
Fitness: max 0.98(108), min 0.314(2), ave 0.933
Test execution time: sum 36043 ms, max 3450 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 17:27:35 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-11-06 17:28:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 58 seconds
Variants: generated 200, build-succeeded 120, build-failed 61, syntax-invalid 15, redundant 4
Fitness: max 0.98(103), min 0.333(1), ave 0.953
Test execution time: sum 31090 ms, max 518 ms, min 106 ms
----------------------------------------------------------------

2023-11-06 17:28:53 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-11-06 17:30:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 11 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 15, redundant 9
Fitness: max 0.98(104), min 0.314(1), ave 0.961
Test execution time: sum 28374 ms, max 438 ms, min 116 ms
----------------------------------------------------------------

2023-11-06 17:30:06 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-11-06 17:31:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 35 seconds
Variants: generated 200, build-succeeded 121, build-failed 58, syntax-invalid 15, redundant 6
Fitness: max 0.98(108), min 0.235(1), ave 0.961
Test execution time: sum 34575 ms, max 4894 ms, min 111 ms
----------------------------------------------------------------

2023-11-06 17:31:30 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-11-06 17:32:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 3 seconds
Variants: generated 200, build-succeeded 124, build-failed 52, syntax-invalid 17, redundant 7
Fitness: max 0.98(112), min 0.49(2), ave 0.96
Test execution time: sum 33716 ms, max 2755 ms, min 99 ms
----------------------------------------------------------------

2023-11-06 17:32:58 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-11-06 17:34:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 19 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 21, redundant 6
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 28861 ms, max 652 ms, min 129 ms
----------------------------------------------------------------

2023-11-06 17:34:14 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-11-06 17:35:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 40 seconds
Variants: generated 200, build-succeeded 125, build-failed 52, syntax-invalid 17, redundant 6
Fitness: max 1(1), min 0.353(1), ave 0.952
Test execution time: sum 31989 ms, max 426 ms, min 116 ms
----------------------------------------------------------------

2023-11-06 17:35:35 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-11-06 17:36:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 57 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 18, redundant 8
Fitness: max 0.98(104), min 0.843(1), ave 0.973
Test execution time: sum 29711 ms, max 476 ms, min 132 ms
----------------------------------------------------------------

2023-11-06 17:36:53 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-11-06 17:38:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 18 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 16, redundant 10
Fitness: max 0.98(103), min 0.49(1), ave 0.96
Test execution time: sum 29878 ms, max 472 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 17:38:13 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-11-06 17:39:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 40 seconds
Variants: generated 200, build-succeeded 125, build-failed 63, syntax-invalid 10, redundant 2
Fitness: max 0.98(112), min 0.549(1), ave 0.964
Test execution time: sum 30920 ms, max 445 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 17:39:35 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-11-06 17:39:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 49 seconds
Variants: generated 34, build-succeeded 7, build-failed 24, syntax-invalid 3, redundant 0
Fitness: max 1(2), min 0.98(5), ave 0.986
Test execution time: sum 1718 ms, max 289 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 17:39:44 [main] [INFO]  KGenProgMain - GA stopped
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v95)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v95)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v95)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v95)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v95)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v95)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v95)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v629)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v629)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v629)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v629)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v629)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v629)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v629)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v903)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v903)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v903)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v903)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v903)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v903)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v903)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1329)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1329)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1329)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1329)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1329)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1329)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1329)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1514)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1514)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1514)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -472,6 +472,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1514)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1514)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1514)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1514)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1528)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1528)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1528)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,9 +469,10 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1528)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1528)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1528)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1528)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1593)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1593)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1593)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -413,7 +413,8 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
+		return eof ? -1 : 0;
     }
 
     /**
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1593)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1593)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1593)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1593)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1705)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1705)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1705)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -469,7 +470,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1705)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1705)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1705)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1705)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1727)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1727)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1727)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1727)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1727)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1727)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1727)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1745)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1745)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1745)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1745)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1745)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1745)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1745)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1776)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1776)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1776)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1776)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1776)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1776)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1776)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1977)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1977)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1977)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,11 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -469,7 +471,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1977)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1977)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1977)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v1977)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2046)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2046)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2046)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,11 +338,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2046)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2046)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2046)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2046)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2111)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2111)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2111)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2111)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2111)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2111)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2111)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -469,7 +470,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -472,6 +472,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2314)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2314)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2314)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -472,6 +474,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2314)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2314)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2314)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2314)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -472,6 +473,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2509)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2509)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2509)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,7 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -973,11 +973,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2509)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2509)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2509)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2509)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2536)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2536)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2536)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,7 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2536)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2536)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2536)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2536)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2554)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2554)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2554)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2554)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2554)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2554)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2554)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2567)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2567)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2567)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -967,13 +969,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2567)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2567)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2567)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2567)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2568)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2568)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2568)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -459,7 +460,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2568)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2568)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2568)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2568)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2701)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2701)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2701)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2701)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2701)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2701)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2701)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2712)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2712)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2712)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,11 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2712)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2712)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2712)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2712)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2731)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2731)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2731)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,7 +460,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2731)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2731)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2731)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2731)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2773)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2773)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2773)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2773)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2773)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2773)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2773)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2787)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2787)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2787)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2787)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2787)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2787)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2787)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2947)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2947)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2947)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,11 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1053,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2947)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2947)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2947)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2947)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2959)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2959)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2959)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -472,6 +473,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -967,13 +969,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2959)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2959)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2959)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v2959)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3129)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3129)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3129)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,9 +407,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -472,6 +472,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3129)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3129)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3129)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3129)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3154)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3154)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3154)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -472,6 +473,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,6 +494,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3154)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3154)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3154)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3154)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3179)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3179)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3179)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,9 +469,10 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3179)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3179)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3179)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3179)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1051,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3292)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3292)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3292)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -459,7 +460,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -469,7 +471,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -975,7 +977,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if ((len & 0x01) != 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3292)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3292)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3292)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3292)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3310)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3310)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3310)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -967,13 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1047,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3310)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3310)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3310)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3310)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -472,6 +473,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +495,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +970,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3328)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3328)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3328)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -469,7 +471,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3328)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3328)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3328)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3328)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3351)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3351)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3351)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,9 +408,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3351)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3351)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3351)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3351)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -492,8 +493,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3514)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3514)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3514)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,9 +408,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -469,7 +470,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -492,6 +493,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] buf = new byte[pos - readPos];
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3514)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3514)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3514)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3514)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3521)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3521)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3521)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3521)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3521)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3521)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3521)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3538)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3538)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3538)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -493,7 +495,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1054,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3538)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3538)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3538)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3538)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,11 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3552)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3552)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3552)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -492,6 +493,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1053,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3552)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3552)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3552)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3552)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3560)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3560)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3560)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -492,6 +492,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3560)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3560)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3560)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3560)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3568)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3568)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3568)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -492,6 +493,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1054,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3568)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3568)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3568)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3568)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3586)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3586)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3586)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -492,6 +492,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3586)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3586)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3586)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3586)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3748)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3748)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3748)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -493,7 +495,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +970,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1051,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3748)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3748)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3748)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3748)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3756)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3756)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3756)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -459,7 +460,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -469,7 +471,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -492,8 +494,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						byte[] buf = new byte[pos - readPos];
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3756)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3756)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3756)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3756)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3996)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3996)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3996)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,11 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -493,7 +495,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +976,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
+            int bytesCopied = 0;
+			len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3996)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3996)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3996)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v3996)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4340)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4340)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4340)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -472,6 +472,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,8 +493,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						x = (x << 8) + b;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1054,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4340)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4340)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4340)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4340)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4496)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4496)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4496)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,11 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -459,7 +461,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -977,9 +980,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4496)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4496)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4496)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4496)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4593)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4593)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4593)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,7 +461,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -469,7 +472,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4593)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4593)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4593)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4593)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4677)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4677)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4677)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,7 +460,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -469,7 +471,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
-            if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
+            if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
@@ -493,7 +495,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1054,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4677)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4677)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4677)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4677)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,7 +461,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +496,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +977,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4751)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4751)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4751)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -451,8 +452,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -476,7 +478,8 @@
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
-                    resizeBuffer();
+                    x = x >> 2;
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -492,6 +495,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -826,7 +830,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int readLen = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4751)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4751)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4751)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v4751)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -492,6 +492,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,8 +1051,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5212)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5212)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5212)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -459,7 +461,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +495,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1056,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5212)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5212)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5212)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v5212)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6085)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6085)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6085)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,6 +492,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -826,7 +830,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int readLen = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6085)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6085)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6085)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6085)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6219)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6219)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6219)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -459,7 +461,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +475,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,6 +496,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6219)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6219)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6219)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6219)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6232)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6232)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6232)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,8 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -409,7 +410,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,6 +495,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -972,7 +977,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6232)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6232)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6232)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v6232)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v7438)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v7438)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v7438)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,10 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +495,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int startSrc = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1057,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v7438)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v7438)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v7438)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v7438)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8096)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8096)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8096)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +449,10 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,6 +496,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -977,9 +983,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8096)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8096)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8096)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8096)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8246)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8246)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8246)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +493,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8246)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8246)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8246)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8246)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8889)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8889)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8889)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -459,7 +458,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,6 +492,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -967,9 +969,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1050,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8889)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8889)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8889)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v8889)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v9213)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v9213)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v9213)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,18 +450,21 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +498,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +979,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v9213)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v9213)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v9213)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v9213)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10280)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10280)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10280)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -451,8 +453,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,8 +495,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1059,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10280)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10280)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10280)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10280)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10838)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10838)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10838)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +495,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,9 +1054,7 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10838)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10838)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10838)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v10838)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v11291)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v11291)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v11291)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,11 +448,13 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,8 +494,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v11291)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v11291)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v11291)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v11291)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v12900)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v12900)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v12900)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,9 +407,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -492,6 +492,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,9 +1054,11 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v12900)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v12900)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v12900)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v12900)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15009)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15009)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15009)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +450,13 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,6 +496,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -977,9 +982,9 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
+            int bytesCopied = 0;
+			len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1059,11 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15009)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15009)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15009)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15009)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15090)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15090)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15090)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,9 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +494,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +973,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1056,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15090)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15090)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15090)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v15090)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v17034)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v17034)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v17034)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,6 +495,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -967,9 +973,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,9 +1054,10 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v17034)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v17034)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v17034)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v17034)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v18218)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v18218)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v18218)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +449,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +494,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +972,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1053,12 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v18218)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v18218)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v18218)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v18218)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v21803)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v21803)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v21803)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,10 +449,43 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +504,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,8 +526,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +1015,9 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
+            int bytesCopied = 0;
+			len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1092,11 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v21803)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v21803)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v21803)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:46 [main] [INFO]  PatchLogExporter - patch (v21803)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v23862)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v23862)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v23862)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +449,14 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +475,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +499,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1064,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v23862)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v23862)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v23862)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v23862)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24012)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24012)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24012)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +449,9 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,6 +474,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +499,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1064,10 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24012)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24012)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24012)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24012)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24692)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24692)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24692)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +449,15 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +476,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +498,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1061,12 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24692)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24692)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24692)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v24692)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v25479)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v25479)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v25479)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,11 +448,15 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +475,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +499,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1061,10 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v25479)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v25479)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v25479)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v25479)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v26448)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v26448)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v26448)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,6 +474,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +497,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1060,11 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v26448)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v26448)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v26448)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v26448)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,11 +448,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +477,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +499,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -978,7 +992,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28419)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28419)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28419)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,11 +448,18 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +478,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +501,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,11 +1061,12 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28419)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28419)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28419)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28419)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28642)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28642)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28642)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,11 +448,81 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +541,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +564,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +1054,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1128,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28642)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28642)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28642)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v28642)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v29137)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v29137)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v29137)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,11 +448,14 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +474,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1061,11 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v29137)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v29137)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v29137)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v29137)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v30867)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v30867)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v30867)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +450,18 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +480,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +502,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1066,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v30867)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v30867)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v30867)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v30867)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v31067)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v31067)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v31067)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +451,51 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +514,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -493,7 +537,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 6;
+						currentLinePos = 0;
+						eof = false;
                     }
                 }
             }
@@ -979,7 +1025,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v31067)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v31067)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v31067)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v31067)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33027)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33027)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33027)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +449,80 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +541,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,8 +564,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						readPos = 0;
                     }
                 }
             }
@@ -979,7 +1054,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,11 +1124,11 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33027)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33027)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33027)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33027)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33996)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33996)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33996)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +453,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +482,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +504,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +986,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1064,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33996)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33996)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33996)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v33996)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34143)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34143)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34143)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +451,18 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +481,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,8 +503,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 6;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +966,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
         return buf;
     }
 
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1068,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34143)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34143)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34143)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34143)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34424)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34424)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34424)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +454,14 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +480,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,8 +504,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 6;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1067,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34424)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34424)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34424)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v34424)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35412)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35412)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35412)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +449,19 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +480,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +505,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1069,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35412)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35412)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35412)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35412)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35478)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35478)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35478)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +451,42 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,6 +509,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,8 +531,14 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 6;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1024,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,9 +1096,10 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35478)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35478)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35478)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35478)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35659)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35659)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35659)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +450,49 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,6 +532,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +1022,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,9 +1094,11 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35659)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35659)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35659)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v35659)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v36826)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v36826)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v36826)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +450,16 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +478,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,8 +501,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 6;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +964,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
         return buf;
     }
 
@@ -979,7 +992,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1066,10 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v36826)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v36826)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v36826)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v36826)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37071)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37071)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37071)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -337,8 +337,11 @@
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		eof = true;
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +451,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +480,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +504,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +994,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1068,10 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37071)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37071)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37071)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37071)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37832)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37832)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37832)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +451,42 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+					break;
+				case 4:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 5:
+					x = x >> 1;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 6:
+					x = x >> 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 7:
+					x = x >> 3;
+					buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,6 +509,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +534,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -972,7 +1015,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (len == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
@@ -1054,7 +1097,12 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37832)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37832)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37832)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37832)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37834)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37834)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37834)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +412,7 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                byte[] buf = new byte[pos - readPos];
             }
             return len;
         }
@@ -448,11 +451,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,6 +501,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +992,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1066,11 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37834)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37834)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37834)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  PatchLogExporter - patch (v37834)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 17:39:47 [main] [INFO]  KGenProgMain - Summary
Reached generation = 191
Generated variants = 37834
Syntax valid variants = 34816
Build succeeded variants = 20216
Time elapsed = 3 hours 13 minutes 52 seconds
Exit status = SUCCESS
