2023-11-06 17:39:50 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-06 17:39:50 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-06 17:39:50 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-06 17:39:51 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 9 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-06 17:40:12 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-06 17:40:12 [main] [INFO]  KGenProgMain - GA started
2023-11-06 17:40:12 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-06 17:40:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 seconds
Variants: generated 100, build-succeeded 13, build-failed 61, syntax-invalid 2, redundant 24
Fitness: max 0.98(4), min 0.49(1), ave 0.824
Test execution time: sum 5660 ms, max 894 ms, min 216 ms
----------------------------------------------------------------

2023-11-06 17:40:33 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-06 17:40:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 seconds
Variants: generated 100, build-succeeded 22, build-failed 58, syntax-invalid 8, redundant 12
Fitness: max 0.98(3), min 0.49(3), ave 0.758
Test execution time: sum 6280 ms, max 546 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 17:40:56 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-06 17:41:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 21 seconds
Variants: generated 200, build-succeeded 68, build-failed 56, syntax-invalid 19, redundant 57
Fitness: max 1(2), min 0.49(16), ave 0.713
Test execution time: sum 16445 ms, max 485 ms, min 138 ms
----------------------------------------------------------------

2023-11-06 17:41:34 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-06 17:42:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 53 seconds
Variants: generated 200, build-succeeded 65, build-failed 52, syntax-invalid 13, redundant 70
Fitness: max 1(2), min 0.49(1), ave 0.836
Test execution time: sum 16429 ms, max 354 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 17:42:05 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-06 17:42:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 27 seconds
Variants: generated 200, build-succeeded 70, build-failed 57, syntax-invalid 18, redundant 55
Fitness: max 1(2), min 0.137(1), ave 0.882
Test execution time: sum 18267 ms, max 319 ms, min 176 ms
----------------------------------------------------------------

2023-11-06 17:42:39 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-06 17:43:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 56 seconds
Variants: generated 200, build-succeeded 56, build-failed 63, syntax-invalid 19, redundant 62
Fitness: max 1(1), min 0.51(1), ave 0.933
Test execution time: sum 13696 ms, max 551 ms, min 137 ms
----------------------------------------------------------------

2023-11-06 17:43:09 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-06 17:43:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 18 seconds
Variants: generated 200, build-succeeded 39, build-failed 62, syntax-invalid 26, redundant 73
Fitness: max 1(3), min 0.157(1), ave 0.908
Test execution time: sum 9378 ms, max 336 ms, min 166 ms
----------------------------------------------------------------

2023-11-06 17:43:30 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-06 17:43:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 40 seconds
Variants: generated 200, build-succeeded 45, build-failed 65, syntax-invalid 17, redundant 73
Fitness: max 1(4), min 0.667(1), ave 0.96
Test execution time: sum 10984 ms, max 310 ms, min 103 ms
----------------------------------------------------------------

2023-11-06 17:43:52 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-06 17:44:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 11 seconds
Variants: generated 200, build-succeeded 51, build-failed 62, syntax-invalid 16, redundant 71
Fitness: max 0.98(40), min 0.49(1), ave 0.94
Test execution time: sum 13175 ms, max 479 ms, min 165 ms
----------------------------------------------------------------

2023-11-06 17:44:23 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-06 17:44:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 35 seconds
Variants: generated 200, build-succeeded 45, build-failed 63, syntax-invalid 34, redundant 58
Fitness: max 1(1), min 0.49(1), ave 0.923
Test execution time: sum 11174 ms, max 334 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 17:44:47 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-06 17:45:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 3 seconds
Variants: generated 200, build-succeeded 56, build-failed 68, syntax-invalid 23, redundant 53
Fitness: max 0.98(43), min 0.314(1), ave 0.937
Test execution time: sum 13576 ms, max 312 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 17:45:16 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-06 17:45:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 37 seconds
Variants: generated 200, build-succeeded 54, build-failed 72, syntax-invalid 24, redundant 50
Fitness: max 0.98(42), min 0.471(1), ave 0.942
Test execution time: sum 17015 ms, max 4148 ms, min 166 ms
----------------------------------------------------------------

2023-11-06 17:45:50 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-06 17:46:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 8 seconds
Variants: generated 200, build-succeeded 58, build-failed 71, syntax-invalid 24, redundant 47
Fitness: max 0.98(40), min 0.333(1), ave 0.914
Test execution time: sum 14781 ms, max 532 ms, min 134 ms
----------------------------------------------------------------

2023-11-06 17:46:21 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-06 17:46:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 41 seconds
Variants: generated 200, build-succeeded 71, build-failed 65, syntax-invalid 21, redundant 43
Fitness: max 0.98(58), min 0.471(1), ave 0.952
Test execution time: sum 16892 ms, max 510 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 17:46:53 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-06 17:47:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 15 seconds
Variants: generated 200, build-succeeded 70, build-failed 63, syntax-invalid 14, redundant 53
Fitness: max 0.98(59), min 0.49(1), ave 0.96
Test execution time: sum 16947 ms, max 469 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 17:47:27 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-06 17:48:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 49 seconds
Variants: generated 200, build-succeeded 65, build-failed 70, syntax-invalid 25, redundant 40
Fitness: max 1(2), min 0.49(3), ave 0.947
Test execution time: sum 15414 ms, max 498 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 17:48:01 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-06 17:48:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 26 seconds
Variants: generated 200, build-succeeded 81, build-failed 65, syntax-invalid 26, redundant 28
Fitness: max 0.98(59), min 0.333(1), ave 0.946
Test execution time: sum 19300 ms, max 515 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 17:48:39 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-06 17:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 59 seconds
Variants: generated 200, build-succeeded 68, build-failed 62, syntax-invalid 32, redundant 38
Fitness: max 0.98(58), min 0.843(1), ave 0.969
Test execution time: sum 16146 ms, max 552 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 17:49:12 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-06 17:49:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 36 seconds
Variants: generated 200, build-succeeded 75, build-failed 64, syntax-invalid 41, redundant 20
Fitness: max 0.98(49), min 0.529(2), ave 0.944
Test execution time: sum 18307 ms, max 551 ms, min 149 ms
----------------------------------------------------------------

2023-11-06 17:49:49 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-06 17:50:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 8 seconds
Variants: generated 200, build-succeeded 66, build-failed 65, syntax-invalid 32, redundant 37
Fitness: max 1(1), min 0.49(1), ave 0.952
Test execution time: sum 15298 ms, max 288 ms, min 146 ms
----------------------------------------------------------------

2023-11-06 17:50:20 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-06 17:51:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 48 seconds
Variants: generated 200, build-succeeded 89, build-failed 54, syntax-invalid 31, redundant 26
Fitness: max 0.98(63), min 0.49(1), ave 0.947
Test execution time: sum 20914 ms, max 470 ms, min 102 ms
----------------------------------------------------------------

2023-11-06 17:51:01 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-06 17:51:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 29 seconds
Variants: generated 200, build-succeeded 78, build-failed 65, syntax-invalid 31, redundant 26
Fitness: max 0.98(61), min 0.255(1), ave 0.939
Test execution time: sum 19154 ms, max 461 ms, min 110 ms
----------------------------------------------------------------

2023-11-06 17:51:41 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-06 17:52:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 9 seconds
Variants: generated 200, build-succeeded 86, build-failed 65, syntax-invalid 26, redundant 23
Fitness: max 0.98(68), min 0.549(2), ave 0.953
Test execution time: sum 20860 ms, max 512 ms, min 95 ms
----------------------------------------------------------------

2023-11-06 17:52:22 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-06 17:53:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 52 seconds
Variants: generated 200, build-succeeded 86, build-failed 65, syntax-invalid 22, redundant 27
Fitness: max 1(1), min 0.49(1), ave 0.96
Test execution time: sum 20913 ms, max 492 ms, min 128 ms
----------------------------------------------------------------

2023-11-06 17:53:04 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-06 17:53:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 29 seconds
Variants: generated 200, build-succeeded 73, build-failed 61, syntax-invalid 33, redundant 33
Fitness: max 0.98(56), min 0.51(1), ave 0.936
Test execution time: sum 19222 ms, max 483 ms, min 149 ms
----------------------------------------------------------------

2023-11-06 17:53:41 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-06 17:54:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 8 seconds
Variants: generated 200, build-succeeded 81, build-failed 58, syntax-invalid 31, redundant 30
Fitness: max 0.98(54), min 0.353(1), ave 0.926
Test execution time: sum 19815 ms, max 548 ms, min 168 ms
----------------------------------------------------------------

2023-11-06 17:54:21 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-06 17:54:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 43 seconds
Variants: generated 200, build-succeeded 78, build-failed 57, syntax-invalid 33, redundant 32
Fitness: max 0.98(57), min 0.235(1), ave 0.946
Test execution time: sum 18736 ms, max 366 ms, min 152 ms
----------------------------------------------------------------

2023-11-06 17:54:56 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-06 17:55:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 24 seconds
Variants: generated 200, build-succeeded 81, build-failed 62, syntax-invalid 24, redundant 33
Fitness: max 0.98(55), min 0.353(1), ave 0.95
Test execution time: sum 19904 ms, max 445 ms, min 172 ms
----------------------------------------------------------------

2023-11-06 17:55:36 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-06 17:56:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 9 seconds
Variants: generated 200, build-succeeded 90, build-failed 61, syntax-invalid 30, redundant 19
Fitness: max 1(1), min 0.765(2), ave 0.964
Test execution time: sum 21930 ms, max 443 ms, min 166 ms
----------------------------------------------------------------

2023-11-06 17:56:21 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-06 17:57:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 53 seconds
Variants: generated 200, build-succeeded 88, build-failed 66, syntax-invalid 24, redundant 22
Fitness: max 0.98(71), min 0.49(1), ave 0.95
Test execution time: sum 21870 ms, max 480 ms, min 154 ms
----------------------------------------------------------------

2023-11-06 17:57:05 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-06 17:57:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 38 seconds
Variants: generated 200, build-succeeded 88, build-failed 64, syntax-invalid 20, redundant 28
Fitness: max 0.98(61), min 0.667(1), ave 0.956
Test execution time: sum 22203 ms, max 496 ms, min 109 ms
----------------------------------------------------------------

2023-11-06 17:57:50 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-06 17:58:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 23 seconds
Variants: generated 200, build-succeeded 93, build-failed 68, syntax-invalid 12, redundant 27
Fitness: max 0.98(83), min 0.667(2), ave 0.966
Test execution time: sum 23746 ms, max 471 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 17:58:35 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-06 17:59:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 7 seconds
Variants: generated 200, build-succeeded 92, build-failed 51, syntax-invalid 36, redundant 21
Fitness: max 0.98(73), min 0.49(2), ave 0.948
Test execution time: sum 22662 ms, max 445 ms, min 118 ms
----------------------------------------------------------------

2023-11-06 17:59:19 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-06 18:00:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 52 seconds
Variants: generated 200, build-succeeded 97, build-failed 63, syntax-invalid 19, redundant 21
Fitness: max 0.98(81), min 0.549(1), ave 0.961
Test execution time: sum 23353 ms, max 370 ms, min 126 ms
----------------------------------------------------------------

2023-11-06 18:00:05 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-06 18:00:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 41 seconds
Variants: generated 200, build-succeeded 104, build-failed 61, syntax-invalid 15, redundant 20
Fitness: max 0.98(87), min 0.49(1), ave 0.96
Test execution time: sum 26363 ms, max 551 ms, min 84 ms
----------------------------------------------------------------

2023-11-06 18:00:53 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-06 18:01:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 30 seconds
Variants: generated 200, build-succeeded 107, build-failed 48, syntax-invalid 22, redundant 23
Fitness: max 1(1), min 0.667(2), ave 0.962
Test execution time: sum 26172 ms, max 329 ms, min 169 ms
----------------------------------------------------------------

2023-11-06 18:01:42 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-06 18:02:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 16 seconds
Variants: generated 200, build-succeeded 102, build-failed 57, syntax-invalid 19, redundant 22
Fitness: max 0.98(79), min 0.157(1), ave 0.955
Test execution time: sum 23994 ms, max 350 ms, min 100 ms
----------------------------------------------------------------

2023-11-06 18:02:29 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-06 18:03:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 9 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 21, redundant 15
Fitness: max 0.98(88), min 0.49(3), ave 0.952
Test execution time: sum 26649 ms, max 484 ms, min 138 ms
----------------------------------------------------------------

2023-11-06 18:03:21 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-06 18:04:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 53 seconds
Variants: generated 200, build-succeeded 98, build-failed 59, syntax-invalid 24, redundant 19
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 23563 ms, max 352 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 18:04:06 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-06 18:04:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 40 seconds
Variants: generated 200, build-succeeded 96, build-failed 70, syntax-invalid 16, redundant 18
Fitness: max 0.98(87), min 0.784(1), ave 0.971
Test execution time: sum 23020 ms, max 526 ms, min 114 ms
----------------------------------------------------------------

2023-11-06 18:04:52 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-06 18:05:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 26 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 21, redundant 25
Fitness: max 0.98(89), min 0.902(1), ave 0.976
Test execution time: sum 23349 ms, max 354 ms, min 114 ms
----------------------------------------------------------------

2023-11-06 18:05:38 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-06 18:06:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 11 seconds
Variants: generated 200, build-succeeded 92, build-failed 61, syntax-invalid 22, redundant 25
Fitness: max 0.98(82), min 0.608(1), ave 0.968
Test execution time: sum 22714 ms, max 391 ms, min 149 ms
----------------------------------------------------------------

2023-11-06 18:06:23 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-06 18:07:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 3 seconds
Variants: generated 200, build-succeeded 104, build-failed 59, syntax-invalid 13, redundant 24
Fitness: max 0.98(94), min 0.49(3), ave 0.958
Test execution time: sum 26180 ms, max 488 ms, min 108 ms
----------------------------------------------------------------

2023-11-06 18:07:15 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-06 18:07:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 45 seconds
Variants: generated 200, build-succeeded 82, build-failed 59, syntax-invalid 31, redundant 28
Fitness: max 0.98(75), min 0.765(1), ave 0.974
Test execution time: sum 19800 ms, max 328 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 18:07:57 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-06 18:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 33 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 26, redundant 18
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 24469 ms, max 402 ms, min 134 ms
----------------------------------------------------------------

2023-11-06 18:08:46 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-06 18:09:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 18 seconds
Variants: generated 200, build-succeeded 95, build-failed 57, syntax-invalid 27, redundant 21
Fitness: max 0.98(75), min 0.471(1), ave 0.944
Test execution time: sum 23309 ms, max 404 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 18:09:31 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-06 18:10:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 5 seconds
Variants: generated 200, build-succeeded 96, build-failed 63, syntax-invalid 21, redundant 20
Fitness: max 0.98(80), min 0.49(1), ave 0.958
Test execution time: sum 23964 ms, max 426 ms, min 132 ms
----------------------------------------------------------------

2023-11-06 18:10:17 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-06 18:11:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 51 seconds
Variants: generated 200, build-succeeded 86, build-failed 62, syntax-invalid 31, redundant 21
Fitness: max 0.98(67), min 0.216(1), ave 0.948
Test execution time: sum 21435 ms, max 753 ms, min 139 ms
----------------------------------------------------------------

2023-11-06 18:11:03 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-06 18:11:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 36 seconds
Variants: generated 200, build-succeeded 84, build-failed 68, syntax-invalid 24, redundant 24
Fitness: max 0.98(76), min 0.549(1), ave 0.971
Test execution time: sum 22806 ms, max 498 ms, min 153 ms
----------------------------------------------------------------

2023-11-06 18:11:48 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-06 18:12:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 18 seconds
Variants: generated 200, build-succeeded 85, build-failed 59, syntax-invalid 32, redundant 24
Fitness: max 0.98(75), min 0.137(1), ave 0.953
Test execution time: sum 20378 ms, max 302 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 18:12:30 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-06 18:13:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 2 seconds
Variants: generated 200, build-succeeded 79, build-failed 64, syntax-invalid 29, redundant 28
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 19792 ms, max 484 ms, min 170 ms
----------------------------------------------------------------

2023-11-06 18:13:14 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-06 18:13:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 46 seconds
Variants: generated 200, build-succeeded 85, build-failed 67, syntax-invalid 21, redundant 27
Fitness: max 0.98(68), min 0.569(2), ave 0.953
Test execution time: sum 20986 ms, max 347 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 18:13:58 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-06 18:14:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 32 seconds
Variants: generated 200, build-succeeded 95, build-failed 67, syntax-invalid 21, redundant 17
Fitness: max 0.98(78), min 0.235(1), ave 0.96
Test execution time: sum 23070 ms, max 393 ms, min 92 ms
----------------------------------------------------------------

2023-11-06 18:14:45 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-06 18:15:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 18 seconds
Variants: generated 200, build-succeeded 89, build-failed 66, syntax-invalid 23, redundant 22
Fitness: max 0.98(68), min 0.824(1), ave 0.965
Test execution time: sum 21581 ms, max 526 ms, min 90 ms
----------------------------------------------------------------

2023-11-06 18:15:31 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-06 18:16:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 9 seconds
Variants: generated 200, build-succeeded 103, build-failed 58, syntax-invalid 11, redundant 28
Fitness: max 0.98(84), min 0.765(2), ave 0.965
Test execution time: sum 25962 ms, max 366 ms, min 114 ms
----------------------------------------------------------------

2023-11-06 18:16:22 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-06 18:17:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 0 seconds
Variants: generated 200, build-succeeded 97, build-failed 74, syntax-invalid 16, redundant 13
Fitness: max 0.98(85), min 0.333(1), ave 0.96
Test execution time: sum 24811 ms, max 435 ms, min 146 ms
----------------------------------------------------------------

2023-11-06 18:17:12 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-06 18:18:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 49 seconds
Variants: generated 200, build-succeeded 91, build-failed 59, syntax-invalid 25, redundant 25
Fitness: max 0.98(72), min 0.588(1), ave 0.958
Test execution time: sum 22718 ms, max 459 ms, min 156 ms
----------------------------------------------------------------

2023-11-06 18:18:01 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-06 18:18:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 41 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 18, redundant 10
Fitness: max 1(1), min 0.667(1), ave 0.965
Test execution time: sum 28345 ms, max 509 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 18:18:54 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-06 18:19:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 33 seconds
Variants: generated 200, build-succeeded 97, build-failed 70, syntax-invalid 20, redundant 13
Fitness: max 0.98(79), min 0.235(2), ave 0.946
Test execution time: sum 24783 ms, max 387 ms, min 168 ms
----------------------------------------------------------------

2023-11-06 18:19:45 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-06 18:20:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 29 seconds
Variants: generated 200, build-succeeded 103, build-failed 63, syntax-invalid 17, redundant 17
Fitness: max 0.98(90), min 0.49(2), ave 0.958
Test execution time: sum 26409 ms, max 451 ms, min 173 ms
----------------------------------------------------------------

2023-11-06 18:20:42 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-06 18:21:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 21 seconds
Variants: generated 200, build-succeeded 99, build-failed 65, syntax-invalid 21, redundant 15
Fitness: max 1(1), min 0.843(2), ave 0.971
Test execution time: sum 25124 ms, max 376 ms, min 121 ms
----------------------------------------------------------------

2023-11-06 18:21:33 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-06 18:22:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 15 seconds
Variants: generated 200, build-succeeded 97, build-failed 66, syntax-invalid 24, redundant 13
Fitness: max 0.98(82), min 0.529(1), ave 0.965
Test execution time: sum 24671 ms, max 607 ms, min 160 ms
----------------------------------------------------------------

2023-11-06 18:22:27 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-06 18:23:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 12 seconds
Variants: generated 200, build-succeeded 115, build-failed 64, syntax-invalid 14, redundant 7
Fitness: max 0.98(102), min 0.49(2), ave 0.963
Test execution time: sum 28727 ms, max 393 ms, min 124 ms
----------------------------------------------------------------

2023-11-06 18:23:24 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-06 18:24:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 13 seconds
Variants: generated 200, build-succeeded 120, build-failed 67, syntax-invalid 9, redundant 4
Fitness: max 0.98(103), min 0.294(1), ave 0.961
Test execution time: sum 30951 ms, max 769 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 18:24:26 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-06 18:25:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 14 seconds
Variants: generated 200, build-succeeded 116, build-failed 63, syntax-invalid 10, redundant 11
Fitness: max 1(1), min 0.549(1), ave 0.965
Test execution time: sum 30149 ms, max 554 ms, min 125 ms
----------------------------------------------------------------

2023-11-06 18:25:27 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-06 18:26:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 22 seconds
Variants: generated 200, build-succeeded 120, build-failed 63, syntax-invalid 11, redundant 6
Fitness: max 1(2), min 0.451(1), ave 0.964
Test execution time: sum 31597 ms, max 670 ms, min 115 ms
----------------------------------------------------------------

2023-11-06 18:26:35 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-06 18:27:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 26 seconds
Variants: generated 200, build-succeeded 101, build-failed 69, syntax-invalid 20, redundant 10
Fitness: max 0.98(86), min 0.667(1), ave 0.965
Test execution time: sum 28436 ms, max 638 ms, min 104 ms
----------------------------------------------------------------

2023-11-06 18:27:38 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-06 18:28:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 39 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 15, redundant 8
Fitness: max 0.98(91), min 0.314(1), ave 0.955
Test execution time: sum 32432 ms, max 1802 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 18:28:52 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-06 18:29:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 43 seconds
Variants: generated 200, build-succeeded 108, build-failed 63, syntax-invalid 21, redundant 8
Fitness: max 0.98(94), min 0.745(1), ave 0.969
Test execution time: sum 28328 ms, max 497 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 18:29:55 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-06 18:30:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 46 seconds
Variants: generated 200, build-succeeded 105, build-failed 64, syntax-invalid 22, redundant 9
Fitness: max 0.98(85), min 0.49(3), ave 0.949
Test execution time: sum 27918 ms, max 496 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 18:30:58 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-06 18:32:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 53 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 13, redundant 8
Fitness: max 0.98(101), min 0.49(1), ave 0.965
Test execution time: sum 29894 ms, max 471 ms, min 122 ms
----------------------------------------------------------------

2023-11-06 18:32:05 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-06 18:33:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 59 seconds
Variants: generated 200, build-succeeded 108, build-failed 67, syntax-invalid 16, redundant 9
Fitness: max 0.98(88), min 0.549(1), ave 0.959
Test execution time: sum 31856 ms, max 3667 ms, min 187 ms
----------------------------------------------------------------

2023-11-06 18:33:11 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-06 18:34:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 8 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 19, redundant 9
Fitness: max 0.98(105), min 0.667(1), ave 0.971
Test execution time: sum 31802 ms, max 2455 ms, min 122 ms
----------------------------------------------------------------

2023-11-06 18:34:20 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-06 18:35:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 8 seconds
Variants: generated 200, build-succeeded 96, build-failed 70, syntax-invalid 21, redundant 13
Fitness: max 0.98(88), min 0.275(1), ave 0.956
Test execution time: sum 24538 ms, max 443 ms, min 171 ms
----------------------------------------------------------------

2023-11-06 18:35:21 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-06 18:36:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 16, redundant 13
Fitness: max 1(1), min 0.608(1), ave 0.967
Test execution time: sum 31000 ms, max 532 ms, min 126 ms
----------------------------------------------------------------

2023-11-06 18:36:30 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-06 18:37:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 25 seconds
Variants: generated 200, build-succeeded 116, build-failed 53, syntax-invalid 16, redundant 15
Fitness: max 0.98(95), min 0.353(1), ave 0.949
Test execution time: sum 30174 ms, max 499 ms, min 135 ms
----------------------------------------------------------------

2023-11-06 18:37:37 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-06 18:38:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 30 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 20, redundant 12
Fitness: max 0.98(90), min 0.49(1), ave 0.956
Test execution time: sum 27576 ms, max 506 ms, min 168 ms
----------------------------------------------------------------

2023-11-06 18:38:43 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-06 18:39:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 34 seconds
Variants: generated 200, build-succeeded 100, build-failed 67, syntax-invalid 24, redundant 9
Fitness: max 0.98(81), min 0.549(1), ave 0.959
Test execution time: sum 26692 ms, max 696 ms, min 146 ms
----------------------------------------------------------------

2023-11-06 18:39:46 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-06 18:40:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 26, redundant 9
Fitness: max 0.98(75), min 0.353(1), ave 0.941
Test execution time: sum 27316 ms, max 503 ms, min 153 ms
----------------------------------------------------------------

2023-11-06 18:40:50 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-06 18:42:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 51 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 20, redundant 10
Fitness: max 0.98(94), min 0.314(1), ave 0.952
Test execution time: sum 32675 ms, max 642 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 18:42:03 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-06 18:43:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 3 seconds
Variants: generated 200, build-succeeded 123, build-failed 53, syntax-invalid 16, redundant 8
Fitness: max 1(1), min 0.49(1), ave 0.958
Test execution time: sum 32731 ms, max 520 ms, min 111 ms
----------------------------------------------------------------

2023-11-06 18:43:15 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-06 18:44:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 12 seconds
Variants: generated 200, build-succeeded 117, build-failed 65, syntax-invalid 9, redundant 9
Fitness: max 0.98(104), min 0.549(1), ave 0.965
Test execution time: sum 30550 ms, max 503 ms, min 133 ms
----------------------------------------------------------------

2023-11-06 18:44:24 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-06 18:45:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 19 seconds
Variants: generated 200, build-succeeded 114, build-failed 65, syntax-invalid 11, redundant 10
Fitness: max 0.98(104), min 0.49(1), ave 0.964
Test execution time: sum 30677 ms, max 514 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 18:45:32 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-06 18:46:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 21 seconds
Variants: generated 200, build-succeeded 110, build-failed 71, syntax-invalid 8, redundant 11
Fitness: max 1(1), min 0.765(1), ave 0.975
Test execution time: sum 29068 ms, max 504 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 18:46:34 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-06 18:47:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 27 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 15, redundant 12
Fitness: max 0.98(99), min 0.49(1), ave 0.968
Test execution time: sum 29278 ms, max 501 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 18:47:39 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-06 18:48:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 32 seconds
Variants: generated 200, build-succeeded 114, build-failed 62, syntax-invalid 16, redundant 8
Fitness: max 0.98(100), min 0.235(1), ave 0.959
Test execution time: sum 30436 ms, max 584 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 18:48:45 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-06 18:49:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 42 seconds
Variants: generated 200, build-succeeded 114, build-failed 65, syntax-invalid 15, redundant 6
Fitness: max 1(2), min 0.765(2), ave 0.966
Test execution time: sum 31329 ms, max 753 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 18:49:55 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-06 18:50:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 43 seconds
Variants: generated 200, build-succeeded 102, build-failed 62, syntax-invalid 22, redundant 14
Fitness: max 0.98(87), min 0.686(1), ave 0.964
Test execution time: sum 27018 ms, max 536 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 18:50:56 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-06 18:51:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 44 seconds
Variants: generated 200, build-succeeded 106, build-failed 64, syntax-invalid 19, redundant 11
Fitness: max 0.98(97), min 0.353(1), ave 0.956
Test execution time: sum 27822 ms, max 633 ms, min 124 ms
----------------------------------------------------------------

2023-11-06 18:51:56 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-06 18:52:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 46 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 14, redundant 14
Fitness: max 0.98(95), min 0.49(2), ave 0.963
Test execution time: sum 30484 ms, max 1089 ms, min 133 ms
----------------------------------------------------------------

2023-11-06 18:52:58 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-06 18:54:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 57 seconds
Variants: generated 200, build-succeeded 123, build-failed 50, syntax-invalid 16, redundant 11
Fitness: max 0.98(110), min 0.471(1), ave 0.963
Test execution time: sum 33360 ms, max 504 ms, min 153 ms
----------------------------------------------------------------

2023-11-06 18:54:09 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-06 18:55:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 9 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 15, redundant 13
Fitness: max 0.98(98), min 0.784(1), ave 0.971
Test execution time: sum 31628 ms, max 549 ms, min 162 ms
----------------------------------------------------------------

2023-11-06 18:55:21 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-06 18:56:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 18 seconds
Variants: generated 200, build-succeeded 108, build-failed 71, syntax-invalid 11, redundant 10
Fitness: max 0.98(88), min 0.353(1), ave 0.954
Test execution time: sum 29919 ms, max 814 ms, min 171 ms
----------------------------------------------------------------

2023-11-06 18:56:30 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-06 18:57:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 21 seconds
Variants: generated 200, build-succeeded 96, build-failed 75, syntax-invalid 20, redundant 9
Fitness: max 0.98(83), min 0.765(2), ave 0.969
Test execution time: sum 26496 ms, max 501 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 18:57:33 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-06 18:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 28 seconds
Variants: generated 200, build-succeeded 112, build-failed 64, syntax-invalid 9, redundant 15
Fitness: max 0.98(100), min 0.765(2), ave 0.969
Test execution time: sum 31231 ms, max 779 ms, min 150 ms
----------------------------------------------------------------

2023-11-06 18:58:40 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-06 18:59:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 37 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 19, redundant 9
Fitness: max 0.98(97), min 0.255(1), ave 0.956
Test execution time: sum 30542 ms, max 548 ms, min 185 ms
----------------------------------------------------------------

2023-11-06 18:59:49 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-06 19:00:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 41 seconds
Variants: generated 200, build-succeeded 95, build-failed 67, syntax-invalid 25, redundant 13
Fitness: max 0.98(81), min 0.569(1), ave 0.96
Test execution time: sum 26246 ms, max 515 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 19:00:54 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-06 19:01:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 46 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 18, redundant 16
Fitness: max 0.98(104), min 0.353(1), ave 0.965
Test execution time: sum 29191 ms, max 483 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 19:01:59 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-06 19:03:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 3 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 14, redundant 13
Fitness: max 0.98(94), min 0.216(1), ave 0.946
Test execution time: sum 33010 ms, max 1103 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 19:03:16 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-06 19:04:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 39 seconds
Variants: generated 200, build-succeeded 99, build-failed 69, syntax-invalid 20, redundant 12
Fitness: max 0.98(90), min 0.824(1), ave 0.974
Test execution time: sum 34577 ms, max 3220 ms, min 161 ms
----------------------------------------------------------------

2023-11-06 19:04:52 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-06 19:06:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 59 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 25, redundant 8
Fitness: max 0.98(97), min 0.49(3), ave 0.954
Test execution time: sum 30415 ms, max 669 ms, min 175 ms
----------------------------------------------------------------

2023-11-06 19:06:11 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-06 19:07:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 22 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 23, redundant 10
Fitness: max 0.98(99), min 0.588(1), ave 0.962
Test execution time: sum 31943 ms, max 680 ms, min 139 ms
----------------------------------------------------------------

2023-11-06 19:07:34 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-06 19:08:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 25 seconds
Variants: generated 200, build-succeeded 106, build-failed 58, syntax-invalid 23, redundant 13
Fitness: max 1(1), min 0.549(2), ave 0.96
Test execution time: sum 27485 ms, max 501 ms, min 130 ms
----------------------------------------------------------------

2023-11-06 19:08:38 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-06 19:09:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 39 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 27, redundant 8
Fitness: max 0.98(81), min 0.294(1), ave 0.944
Test execution time: sum 30072 ms, max 547 ms, min 170 ms
----------------------------------------------------------------

2023-11-06 19:09:52 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-06 19:11:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 57 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 15, redundant 12
Fitness: max 0.98(103), min 0.216(1), ave 0.945
Test execution time: sum 34668 ms, max 888 ms, min 81 ms
----------------------------------------------------------------

2023-11-06 19:11:09 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-06 19:12:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 9 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 32, redundant 7
Fitness: max 0.98(84), min 0.49(1), ave 0.959
Test execution time: sum 31169 ms, max 1370 ms, min 133 ms
----------------------------------------------------------------

2023-11-06 19:12:22 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-06 19:13:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 36 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 29, redundant 5
Fitness: max 0.98(89), min 0.235(1), ave 0.95
Test execution time: sum 36226 ms, max 1737 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 19:13:48 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-06 19:15:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 6 seconds
Variants: generated 200, build-succeeded 106, build-failed 57, syntax-invalid 21, redundant 16
Fitness: max 0.98(88), min 0.49(3), ave 0.954
Test execution time: sum 35691 ms, max 2338 ms, min 136 ms
----------------------------------------------------------------

2023-11-06 19:15:18 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-06 19:16:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 38 seconds
Variants: generated 200, build-succeeded 104, build-failed 68, syntax-invalid 21, redundant 7
Fitness: max 0.98(88), min 0.569(1), ave 0.961
Test execution time: sum 34249 ms, max 1753 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 19:16:51 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-06 19:18:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 12 seconds
Variants: generated 200, build-succeeded 105, build-failed 62, syntax-invalid 24, redundant 9
Fitness: max 1(1), min 0.588(1), ave 0.962
Test execution time: sum 37114 ms, max 1234 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 19:18:25 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-06 19:20:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 6 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 16, redundant 9
Fitness: max 1(2), min 0.49(1), ave 0.963
Test execution time: sum 45704 ms, max 2334 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 19:20:19 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-06 19:22:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 53 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 18, redundant 9
Fitness: max 0.98(97), min 0.49(1), ave 0.955
Test execution time: sum 40798 ms, max 1456 ms, min 184 ms
----------------------------------------------------------------

2023-11-06 19:22:06 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-06 19:23:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 29 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 18, redundant 10
Fitness: max 0.98(98), min 0.49(2), ave 0.955
Test execution time: sum 37944 ms, max 815 ms, min 207 ms
----------------------------------------------------------------

2023-11-06 19:23:41 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-06 19:26:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 29 seconds
Variants: generated 200, build-succeeded 112, build-failed 58, syntax-invalid 23, redundant 7
Fitness: max 0.98(95), min 0.471(1), ave 0.958
Test execution time: sum 52014 ms, max 2803 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 19:26:41 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-06 19:29:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 11 seconds
Variants: generated 200, build-succeeded 118, build-failed 61, syntax-invalid 14, redundant 7
Fitness: max 0.98(104), min 0.588(1), ave 0.967
Test execution time: sum 51784 ms, max 1079 ms, min 225 ms
----------------------------------------------------------------

2023-11-06 19:29:23 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-06 19:31:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 10 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 14, redundant 12
Fitness: max 0.98(95), min 0.275(1), ave 0.952
Test execution time: sum 46752 ms, max 975 ms, min 226 ms
----------------------------------------------------------------

2023-11-06 19:31:22 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-06 19:33:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 8 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 23, redundant 8
Fitness: max 0.98(94), min 0.49(1), ave 0.959
Test execution time: sum 44061 ms, max 1472 ms, min 144 ms
----------------------------------------------------------------

2023-11-06 19:33:20 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-06 19:36:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 14 seconds
Variants: generated 200, build-succeeded 112, build-failed 66, syntax-invalid 14, redundant 8
Fitness: max 0.98(97), min 0.49(2), ave 0.955
Test execution time: sum 59028 ms, max 3442 ms, min 200 ms
----------------------------------------------------------------

2023-11-06 19:36:27 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-06 19:39:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 47 seconds
Variants: generated 200, build-succeeded 105, build-failed 70, syntax-invalid 12, redundant 13
Fitness: max 0.98(92), min 0.49(1), ave 0.962
Test execution time: sum 44499 ms, max 1744 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 19:39:00 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-06 19:40:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 seconds
Variants: generated 200, build-succeeded 117, build-failed 54, syntax-invalid 16, redundant 13
Fitness: max 0.98(99), min 0.216(1), ave 0.941
Test execution time: sum 44410 ms, max 1066 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 19:40:56 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-06 19:42:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 45 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 20, redundant 7
Fitness: max 0.98(96), min 0.784(4), ave 0.964
Test execution time: sum 42454 ms, max 1054 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 19:42:58 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-06 19:45:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 59 seconds
Variants: generated 200, build-succeeded 120, build-failed 59, syntax-invalid 12, redundant 9
Fitness: max 1(1), min 0.49(1), ave 0.956
Test execution time: sum 48854 ms, max 965 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 19:45:11 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-06 19:47:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 4 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 11, redundant 15
Fitness: max 0.98(93), min 0.49(2), ave 0.948
Test execution time: sum 48362 ms, max 1382 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 19:47:16 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-06 19:49:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 25 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 13, redundant 15
Fitness: max 1(1), min 0.471(1), ave 0.958
Test execution time: sum 54339 ms, max 2625 ms, min 232 ms
----------------------------------------------------------------

2023-11-06 19:49:37 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-06 19:51:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 46 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 12, redundant 16
Fitness: max 0.98(99), min 0.157(1), ave 0.958
Test execution time: sum 55549 ms, max 1749 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 19:51:58 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-06 19:55:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 23 seconds
Variants: generated 200, build-succeeded 116, build-failed 59, syntax-invalid 5, redundant 20
Fitness: max 0.98(103), min 0.118(1), ave 0.949
Test execution time: sum 73811 ms, max 5069 ms, min 121 ms
----------------------------------------------------------------

2023-11-06 19:55:35 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-06 19:58:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 6 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 8, redundant 12
Fitness: max 1(1), min 0.549(2), ave 0.956
Test execution time: sum 65812 ms, max 1974 ms, min 166 ms
----------------------------------------------------------------

2023-11-06 19:58:18 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-06 20:00:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 42 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 12, redundant 14
Fitness: max 0.98(100), min 0.353(1), ave 0.954
Test execution time: sum 61197 ms, max 2301 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 20:00:54 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-06 20:02:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 46 seconds
Variants: generated 200, build-succeeded 104, build-failed 68, syntax-invalid 11, redundant 17
Fitness: max 0.98(92), min 0.471(1), ave 0.962
Test execution time: sum 48295 ms, max 1914 ms, min 161 ms
----------------------------------------------------------------

2023-11-06 20:02:58 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-06 20:05:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 4 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 18, redundant 14
Fitness: max 0.98(95), min 0.235(1), ave 0.956
Test execution time: sum 58674 ms, max 2741 ms, min 165 ms
----------------------------------------------------------------

2023-11-06 20:05:17 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-06 20:09:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 58 seconds
Variants: generated 200, build-succeeded 109, build-failed 64, syntax-invalid 16, redundant 11
Fitness: max 1(1), min 0.471(1), ave 0.957
Test execution time: sum 73159 ms, max 4032 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 20:09:11 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-06 20:11:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 44 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 20, redundant 10
Fitness: max 0.98(91), min 0.471(1), ave 0.947
Test execution time: sum 67887 ms, max 3411 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 20:11:57 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-06 20:14:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 13 seconds
Variants: generated 200, build-succeeded 104, build-failed 60, syntax-invalid 26, redundant 10
Fitness: max 0.98(89), min 0.49(2), ave 0.954
Test execution time: sum 57084 ms, max 2539 ms, min 231 ms
----------------------------------------------------------------

2023-11-06 20:14:26 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-06 20:16:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 29 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 17, redundant 15
Fitness: max 0.98(96), min 0.627(1), ave 0.966
Test execution time: sum 53168 ms, max 2063 ms, min 198 ms
----------------------------------------------------------------

2023-11-06 20:16:41 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-06 20:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 54 seconds
Variants: generated 200, build-succeeded 107, build-failed 70, syntax-invalid 17, redundant 6
Fitness: max 0.98(97), min 0.49(2), ave 0.963
Test execution time: sum 56157 ms, max 2635 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 20:19:07 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-06 20:21:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 2 seconds
Variants: generated 200, build-succeeded 100, build-failed 62, syntax-invalid 27, redundant 11
Fitness: max 0.98(88), min 0.49(2), ave 0.955
Test execution time: sum 55190 ms, max 3288 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 20:21:14 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-06 20:24:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 44 seconds
Variants: generated 200, build-succeeded 104, build-failed 51, syntax-invalid 35, redundant 10
Fitness: max 0.98(85), min 0.49(4), ave 0.94
Test execution time: sum 78255 ms, max 5449 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 20:24:56 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-06 20:28:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 11 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 18, redundant 12
Fitness: max 1(2), min 0.49(2), ave 0.953
Test execution time: sum 68843 ms, max 4375 ms, min 270 ms
----------------------------------------------------------------

2023-11-06 20:28:23 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-06 20:31:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 15 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 22, redundant 7
Fitness: max 1(1), min 0.627(1), ave 0.967
Test execution time: sum 80623 ms, max 5216 ms, min 251 ms
----------------------------------------------------------------

2023-11-06 20:31:27 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-11-06 20:35:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 7 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 17, redundant 16
Fitness: max 0.98(90), min 0.471(1), ave 0.951
Test execution time: sum 74245 ms, max 3645 ms, min 242 ms
----------------------------------------------------------------

2023-11-06 20:35:20 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-11-06 20:39:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 50 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 20, redundant 16
Fitness: max 0.98(91), min 0.549(1), ave 0.96
Test execution time: sum 64709 ms, max 3069 ms, min 147 ms
----------------------------------------------------------------

2023-11-06 20:39:03 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-11-06 20:42:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 4 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 11, redundant 12
Fitness: max 0.98(100), min 0.235(1), ave 0.959
Test execution time: sum 75829 ms, max 3137 ms, min 221 ms
----------------------------------------------------------------

2023-11-06 20:42:16 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-11-06 20:45:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 21 seconds
Variants: generated 200, build-succeeded 111, build-failed 52, syntax-invalid 29, redundant 8
Fitness: max 0.98(95), min 0.471(2), ave 0.951
Test execution time: sum 59311 ms, max 3524 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 20:45:34 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-11-06 20:49:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 24 seconds
Variants: generated 200, build-succeeded 121, build-failed 49, syntax-invalid 22, redundant 8
Fitness: max 0.98(100), min 0.137(1), ave 0.955
Test execution time: sum 68509 ms, max 1690 ms, min 230 ms
----------------------------------------------------------------

2023-11-06 20:49:36 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-11-06 20:53:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 9 seconds
Variants: generated 200, build-succeeded 123, build-failed 52, syntax-invalid 20, redundant 5
Fitness: max 0.98(96), min 0.314(1), ave 0.946
Test execution time: sum 80618 ms, max 3562 ms, min 219 ms
----------------------------------------------------------------

2023-11-06 20:53:21 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-11-06 20:56:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 46 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 19, redundant 9
Fitness: max 0.98(94), min 0.49(1), ave 0.955
Test execution time: sum 69686 ms, max 2897 ms, min 187 ms
----------------------------------------------------------------

2023-11-06 20:56:59 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-11-06 20:59:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 46 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 19, redundant 10
Fitness: max 1(1), min 0.49(1), ave 0.96
Test execution time: sum 73857 ms, max 4286 ms, min 229 ms
----------------------------------------------------------------

2023-11-06 20:59:58 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-11-06 21:03:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 23 minutes 22 seconds
Variants: generated 200, build-succeeded 127, build-failed 49, syntax-invalid 16, redundant 8
Fitness: max 0.98(104), min 0.235(1), ave 0.932
Test execution time: sum 102615 ms, max 5824 ms, min 168 ms
----------------------------------------------------------------

2023-11-06 21:03:34 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-11-06 21:07:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 14 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 22, redundant 11
Fitness: max 0.98(88), min 0.49(1), ave 0.953
Test execution time: sum 96359 ms, max 7173 ms, min 243 ms
----------------------------------------------------------------

2023-11-06 21:07:27 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-11-06 21:10:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 35 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 20, redundant 7
Fitness: max 0.98(99), min 0.588(1), ave 0.967
Test execution time: sum 94148 ms, max 5338 ms, min 249 ms
----------------------------------------------------------------

2023-11-06 21:10:47 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-11-06 21:15:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 11 seconds
Variants: generated 200, build-succeeded 124, build-failed 59, syntax-invalid 8, redundant 9
Fitness: max 0.98(112), min 0.255(1), ave 0.966
Test execution time: sum 107481 ms, max 8950 ms, min 141 ms
----------------------------------------------------------------

2023-11-06 21:15:24 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-11-06 21:19:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 1 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 18, redundant 10
Fitness: max 0.98(99), min 0.216(1), ave 0.962
Test execution time: sum 84252 ms, max 4307 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 21:19:13 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-11-06 21:24:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 53 seconds
Variants: generated 200, build-succeeded 121, build-failed 53, syntax-invalid 15, redundant 11
Fitness: max 0.98(100), min 0.51(1), ave 0.96
Test execution time: sum 122817 ms, max 9175 ms, min 200 ms
----------------------------------------------------------------

2023-11-06 21:24:05 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-11-06 21:29:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 49 minutes 7 seconds
Variants: generated 200, build-succeeded 123, build-failed 55, syntax-invalid 12, redundant 10
Fitness: max 0.98(102), min 0.431(1), ave 0.96
Test execution time: sum 124313 ms, max 4170 ms, min 244 ms
----------------------------------------------------------------

2023-11-06 21:29:19 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-11-06 21:33:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 52 minutes 58 seconds
Variants: generated 200, build-succeeded 118, build-failed 47, syntax-invalid 25, redundant 10
Fitness: max 0.98(97), min 0.333(1), ave 0.942
Test execution time: sum 106362 ms, max 4099 ms, min 250 ms
----------------------------------------------------------------

2023-11-06 21:33:10 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-11-06 21:37:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 57 minutes 36 seconds
Variants: generated 200, build-succeeded 125, build-failed 57, syntax-invalid 13, redundant 5
Fitness: max 0.98(102), min 0.49(4), ave 0.936
Test execution time: sum 141805 ms, max 8967 ms, min 244 ms
----------------------------------------------------------------

2023-11-06 21:37:48 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-11-06 21:42:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 2 minutes 23 seconds
Variants: generated 200, build-succeeded 119, build-failed 57, syntax-invalid 13, redundant 11
Fitness: max 0.98(102), min 0.49(1), ave 0.955
Test execution time: sum 140597 ms, max 4235 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 21:42:35 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-11-06 21:47:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 27 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 16, redundant 8
Fitness: max 0.98(102), min 0.275(1), ave 0.948
Test execution time: sum 144613 ms, max 5916 ms, min 236 ms
----------------------------------------------------------------

2023-11-06 21:47:40 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-11-06 21:52:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 28 seconds
Variants: generated 200, build-succeeded 126, build-failed 54, syntax-invalid 10, redundant 10
Fitness: max 0.98(109), min 0.49(1), ave 0.954
Test execution time: sum 154686 ms, max 12415 ms, min 247 ms
----------------------------------------------------------------

2023-11-06 21:52:41 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-11-06 21:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 28 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 19, redundant 9
Fitness: max 0.98(94), min 0.549(2), ave 0.947
Test execution time: sum 196565 ms, max 14697 ms, min 198 ms
----------------------------------------------------------------

2023-11-06 21:58:40 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-11-06 22:04:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 23 minutes 58 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0.667(2), ave 0.963
Test execution time: sum 178868 ms, max 15416 ms, min 210 ms
----------------------------------------------------------------

2023-11-06 22:04:10 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-11-06 22:10:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 30 minutes 27 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0.353(1), ave 0.952
Test execution time: sum 244262 ms, max 29298 ms, min 240 ms
----------------------------------------------------------------

2023-11-06 22:10:39 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-11-06 22:17:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 14 seconds
Variants: generated 200, build-succeeded 128, build-failed 53, syntax-invalid 10, redundant 9
Fitness: max 1(1), min 0.333(1), ave 0.961
Test execution time: sum 232520 ms, max 14294 ms, min 265 ms
----------------------------------------------------------------

2023-11-06 22:17:27 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-11-06 22:21:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 minutes 45 seconds
Variants: generated 200, build-succeeded 115, build-failed 68, syntax-invalid 12, redundant 5
Fitness: max 0.98(97), min 0.529(1), ave 0.957
Test execution time: sum 131305 ms, max 4223 ms, min 261 ms
----------------------------------------------------------------

2023-11-06 22:21:57 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-11-06 22:28:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 48 minutes 0 seconds
Variants: generated 200, build-succeeded 116, build-failed 57, syntax-invalid 12, redundant 15
Fitness: max 0.98(101), min 0.49(1), ave 0.959
Test execution time: sum 210992 ms, max 12910 ms, min 252 ms
----------------------------------------------------------------

2023-11-06 22:28:13 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-11-06 22:33:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 53 minutes 42 seconds
Variants: generated 200, build-succeeded 121, build-failed 58, syntax-invalid 13, redundant 8
Fitness: max 0.98(107), min 0.314(1), ave 0.959
Test execution time: sum 185067 ms, max 12136 ms, min 176 ms
----------------------------------------------------------------

2023-11-06 22:33:55 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-11-06 22:39:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 59 minutes 35 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 22, redundant 8
Fitness: max 0.98(100), min 0.235(1), ave 0.963
Test execution time: sum 187067 ms, max 6860 ms, min 185 ms
----------------------------------------------------------------

2023-11-06 22:39:47 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-11-06 22:46:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 54 seconds
Variants: generated 200, build-succeeded 115, build-failed 54, syntax-invalid 20, redundant 11
Fitness: max 0.98(95), min 0.49(1), ave 0.951
Test execution time: sum 224791 ms, max 50988 ms, min 295 ms
----------------------------------------------------------------

2023-11-06 22:46:07 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-11-06 22:54:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 13 minutes 57 seconds
Variants: generated 200, build-succeeded 124, build-failed 56, syntax-invalid 10, redundant 10
Fitness: max 0.98(110), min 0.275(1), ave 0.96
Test execution time: sum 313685 ms, max 58488 ms, min 269 ms
----------------------------------------------------------------

2023-11-06 22:54:10 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-11-06 22:59:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 19 minutes 15 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 22, redundant 6
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 181268 ms, max 13368 ms, min 175 ms
----------------------------------------------------------------

2023-11-06 22:59:28 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-11-06 23:05:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 24 minutes 53 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 19, redundant 6
Fitness: max 0.98(100), min 0.51(1), ave 0.959
Test execution time: sum 182239 ms, max 25078 ms, min 238 ms
----------------------------------------------------------------

2023-11-06 23:05:05 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-11-06 23:09:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 29 minutes 36 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 19, redundant 10
Fitness: max 0.98(100), min 0.608(1), ave 0.97
Test execution time: sum 147714 ms, max 6555 ms, min 317 ms
----------------------------------------------------------------

2023-11-06 23:09:49 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-11-06 23:14:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 34 minutes 20 seconds
Variants: generated 200, build-succeeded 104, build-failed 66, syntax-invalid 22, redundant 8
Fitness: max 0.98(95), min 0.667(1), ave 0.968
Test execution time: sum 155761 ms, max 8134 ms, min 334 ms
----------------------------------------------------------------

2023-11-06 23:14:32 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-11-06 23:19:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 39 minutes 37 seconds
Variants: generated 200, build-succeeded 119, build-failed 57, syntax-invalid 20, redundant 4
Fitness: max 0.98(101), min 0.353(1), ave 0.949
Test execution time: sum 159400 ms, max 6617 ms, min 207 ms
----------------------------------------------------------------

2023-11-06 23:19:50 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-11-06 23:25:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 45 minutes 39 seconds
Variants: generated 200, build-succeeded 118, build-failed 49, syntax-invalid 20, redundant 13
Fitness: max 0.98(96), min 0.235(1), ave 0.951
Test execution time: sum 207200 ms, max 14182 ms, min 309 ms
----------------------------------------------------------------

2023-11-06 23:25:52 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-11-06 23:31:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 51 minutes 44 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 20, redundant 7
Fitness: max 0.98(89), min 0.275(1), ave 0.94
Test execution time: sum 226754 ms, max 25423 ms, min 185 ms
----------------------------------------------------------------

2023-11-06 23:31:57 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-11-06 23:39:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 59 minutes 18 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 20, redundant 8
Fitness: max 0.98(102), min 0.353(1), ave 0.962
Test execution time: sum 295890 ms, max 25823 ms, min 260 ms
----------------------------------------------------------------

2023-11-06 23:39:31 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-11-06 23:45:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 5 minutes 36 seconds
Variants: generated 200, build-succeeded 112, build-failed 58, syntax-invalid 24, redundant 6
Fitness: max 1(1), min 0.549(1), ave 0.964
Test execution time: sum 212063 ms, max 13191 ms, min 291 ms
----------------------------------------------------------------

2023-11-06 23:45:48 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-11-06 23:51:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 11 minutes 41 seconds
Variants: generated 200, build-succeeded 119, build-failed 61, syntax-invalid 9, redundant 11
Fitness: max 0.98(107), min 0.49(1), ave 0.96
Test execution time: sum 188008 ms, max 15591 ms, min 300 ms
----------------------------------------------------------------

2023-11-06 23:51:54 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-11-06 23:55:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 15 minutes 38 seconds
Variants: generated 200, build-succeeded 113, build-failed 73, syntax-invalid 10, redundant 4
Fitness: max 0.98(101), min 0.49(1), ave 0.957
Test execution time: sum 110288 ms, max 7282 ms, min 212 ms
----------------------------------------------------------------

2023-11-06 23:55:51 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-11-06 23:59:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 19 minutes 19 seconds
Variants: generated 200, build-succeeded 112, build-failed 72, syntax-invalid 10, redundant 6
Fitness: max 0.98(101), min 0.49(2), ave 0.958
Test execution time: sum 101956 ms, max 4832 ms, min 258 ms
----------------------------------------------------------------

2023-11-06 23:59:31 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-11-07 00:03:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 23 minutes 8 seconds
Variants: generated 200, build-succeeded 124, build-failed 63, syntax-invalid 7, redundant 6
Fitness: max 0.98(104), min 0.314(1), ave 0.951
Test execution time: sum 109852 ms, max 4443 ms, min 149 ms
----------------------------------------------------------------

2023-11-07 00:03:21 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-11-07 00:07:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 26 minutes 48 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 20, redundant 11
Fitness: max 0.98(97), min 0.353(1), ave 0.953
Test execution time: sum 99301 ms, max 3049 ms, min 194 ms
----------------------------------------------------------------

2023-11-07 00:07:00 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-11-07 00:12:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 32 minutes 3 seconds
Variants: generated 200, build-succeeded 113, build-failed 68, syntax-invalid 16, redundant 3
Fitness: max 1(1), min 0.49(3), ave 0.956
Test execution time: sum 119120 ms, max 5913 ms, min 248 ms
----------------------------------------------------------------

2023-11-07 00:12:16 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-11-07 00:17:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 36 minutes 57 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 15, redundant 15
Fitness: max 0.98(101), min 0.49(2), ave 0.958
Test execution time: sum 132534 ms, max 6422 ms, min 269 ms
----------------------------------------------------------------

2023-11-07 00:17:09 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-11-07 00:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 41 minutes 8 seconds
Variants: generated 200, build-succeeded 118, build-failed 64, syntax-invalid 13, redundant 5
Fitness: max 0.98(104), min 0.667(1), ave 0.966
Test execution time: sum 107509 ms, max 3980 ms, min 155 ms
----------------------------------------------------------------

2023-11-07 00:21:21 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-11-07 00:25:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 45 minutes 15 seconds
Variants: generated 200, build-succeeded 121, build-failed 63, syntax-invalid 13, redundant 3
Fitness: max 0.98(111), min 0.294(1), ave 0.964
Test execution time: sum 104472 ms, max 4218 ms, min 217 ms
----------------------------------------------------------------

2023-11-07 00:25:28 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-11-07 00:29:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 49 minutes 45 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 13, redundant 9
Fitness: max 0.98(111), min 0.667(1), ave 0.972
Test execution time: sum 122946 ms, max 13496 ms, min 254 ms
----------------------------------------------------------------

2023-11-07 00:29:57 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-11-07 00:34:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 54 minutes 32 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 20, redundant 9
Fitness: max 1(1), min 0.549(2), ave 0.957
Test execution time: sum 111528 ms, max 4363 ms, min 312 ms
----------------------------------------------------------------

2023-11-07 00:34:44 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-11-07 00:39:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 59 minutes 13 seconds
Variants: generated 200, build-succeeded 122, build-failed 56, syntax-invalid 16, redundant 6
Fitness: max 1(1), min 0.49(1), ave 0.954
Test execution time: sum 122821 ms, max 4791 ms, min 240 ms
----------------------------------------------------------------

2023-11-07 00:39:26 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-11-07 00:44:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 4 minutes 37 seconds
Variants: generated 200, build-succeeded 122, build-failed 59, syntax-invalid 13, redundant 6
Fitness: max 1(2), min 0.471(1), ave 0.956
Test execution time: sum 128660 ms, max 5121 ms, min 313 ms
----------------------------------------------------------------

2023-11-07 00:44:49 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-11-07 00:49:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 9 minutes 2 seconds
Variants: generated 200, build-succeeded 131, build-failed 50, syntax-invalid 14, redundant 5
Fitness: max 0.98(104), min 0.49(1), ave 0.944
Test execution time: sum 113680 ms, max 4437 ms, min 155 ms
----------------------------------------------------------------

2023-11-07 00:49:14 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-11-07 00:53:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 12 minutes 50 seconds
Variants: generated 200, build-succeeded 105, build-failed 62, syntax-invalid 21, redundant 12
Fitness: max 0.98(93), min 0.157(1), ave 0.961
Test execution time: sum 107556 ms, max 5753 ms, min 240 ms
----------------------------------------------------------------

2023-11-07 00:53:03 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-11-07 00:58:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 17 minutes 56 seconds
Variants: generated 200, build-succeeded 123, build-failed 52, syntax-invalid 15, redundant 10
Fitness: max 1(1), min 0.216(1), ave 0.946
Test execution time: sum 122611 ms, max 9142 ms, min 230 ms
----------------------------------------------------------------

2023-11-07 00:58:09 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-11-07 01:03:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 23 minutes 1 seconds
Variants: generated 200, build-succeeded 126, build-failed 55, syntax-invalid 12, redundant 7
Fitness: max 0.98(115), min 0.216(1), ave 0.96
Test execution time: sum 115363 ms, max 7758 ms, min 241 ms
----------------------------------------------------------------

2023-11-07 01:03:13 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-11-07 01:06:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 26 minutes 38 seconds
Variants: generated 200, build-succeeded 126, build-failed 53, syntax-invalid 13, redundant 8
Fitness: max 0.98(104), min 0.549(1), ave 0.953
Test execution time: sum 95471 ms, max 3584 ms, min 205 ms
----------------------------------------------------------------

2023-11-07 01:06:50 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-11-07 01:10:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 30 minutes 6 seconds
Variants: generated 200, build-succeeded 124, build-failed 53, syntax-invalid 14, redundant 9
Fitness: max 0.98(107), min 0.471(1), ave 0.955
Test execution time: sum 99642 ms, max 4136 ms, min 143 ms
----------------------------------------------------------------

2023-11-07 01:10:18 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-11-07 01:14:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 33 minutes 51 seconds
Variants: generated 200, build-succeeded 120, build-failed 50, syntax-invalid 20, redundant 10
Fitness: max 0.98(104), min 0.667(1), ave 0.963
Test execution time: sum 107060 ms, max 4493 ms, min 253 ms
----------------------------------------------------------------

2023-11-07 01:14:04 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-11-07 01:18:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 38 minutes 3 seconds
Variants: generated 200, build-succeeded 122, build-failed 60, syntax-invalid 13, redundant 5
Fitness: max 0.98(111), min 0.588(1), ave 0.969
Test execution time: sum 118988 ms, max 4736 ms, min 220 ms
----------------------------------------------------------------

2023-11-07 01:18:16 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-11-07 01:22:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 42 minutes 27 seconds
Variants: generated 200, build-succeeded 122, build-failed 60, syntax-invalid 12, redundant 6
Fitness: max 0.98(112), min 0.549(1), ave 0.969
Test execution time: sum 132012 ms, max 9799 ms, min 259 ms
----------------------------------------------------------------

2023-11-07 01:22:39 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-11-07 01:26:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 46 minutes 46 seconds
Variants: generated 200, build-succeeded 122, build-failed 57, syntax-invalid 11, redundant 10
Fitness: max 0.98(110), min 0.549(1), ave 0.964
Test execution time: sum 125727 ms, max 4284 ms, min 218 ms
----------------------------------------------------------------

2023-11-07 01:26:59 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-11-07 01:31:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 51 minutes 29 seconds
Variants: generated 200, build-succeeded 122, build-failed 55, syntax-invalid 13, redundant 10
Fitness: max 0.98(110), min 0.549(1), ave 0.967
Test execution time: sum 142172 ms, max 6939 ms, min 179 ms
----------------------------------------------------------------

2023-11-07 01:31:42 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-11-07 01:36:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 55 minutes 55 seconds
Variants: generated 200, build-succeeded 127, build-failed 52, syntax-invalid 12, redundant 9
Fitness: max 0.98(108), min 0.49(2), ave 0.952
Test execution time: sum 138926 ms, max 6750 ms, min 198 ms
----------------------------------------------------------------

2023-11-07 01:36:07 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-11-07 01:41:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 1 minutes 40 seconds
Variants: generated 200, build-succeeded 116, build-failed 67, syntax-invalid 12, redundant 5
Fitness: max 0.98(104), min 0.49(1), ave 0.964
Test execution time: sum 151548 ms, max 6538 ms, min 298 ms
----------------------------------------------------------------

2023-11-07 01:41:52 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-11-07 01:46:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 6 minutes 42 seconds
Variants: generated 200, build-succeeded 130, build-failed 56, syntax-invalid 9, redundant 5
Fitness: max 1(2), min 0.549(1), ave 0.965
Test execution time: sum 145722 ms, max 4241 ms, min 244 ms
----------------------------------------------------------------

2023-11-07 01:46:55 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-11-07 01:51:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 11 minutes 39 seconds
Variants: generated 200, build-succeeded 130, build-failed 58, syntax-invalid 5, redundant 7
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 149506 ms, max 6440 ms, min 231 ms
----------------------------------------------------------------

2023-11-07 01:51:51 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-11-07 01:56:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 15 minutes 53 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 22, redundant 7
Fitness: max 0.98(97), min 0.549(1), ave 0.968
Test execution time: sum 127541 ms, max 4301 ms, min 327 ms
----------------------------------------------------------------

2023-11-07 01:56:06 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-11-07 02:01:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 21 minutes 38 seconds
Variants: generated 200, build-succeeded 126, build-failed 59, syntax-invalid 13, redundant 2
Fitness: max 0.98(107), min 0.49(2), ave 0.951
Test execution time: sum 173763 ms, max 8040 ms, min 214 ms
----------------------------------------------------------------

2023-11-07 02:01:50 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-11-07 02:07:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 27 minutes 28 seconds
Variants: generated 200, build-succeeded 129, build-failed 57, syntax-invalid 7, redundant 7
Fitness: max 1(3), min 0.49(1), ave 0.963
Test execution time: sum 164486 ms, max 5228 ms, min 287 ms
----------------------------------------------------------------

2023-11-07 02:07:40 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-11-07 02:12:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 32 minutes 36 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 16, redundant 6
Fitness: max 0.98(101), min 0.471(1), ave 0.953
Test execution time: sum 163519 ms, max 6403 ms, min 164 ms
----------------------------------------------------------------

2023-11-07 02:12:48 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-11-07 02:18:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 38 minutes 6 seconds
Variants: generated 200, build-succeeded 124, build-failed 54, syntax-invalid 12, redundant 10
Fitness: max 0.98(104), min 0.353(1), ave 0.95
Test execution time: sum 175546 ms, max 6655 ms, min 295 ms
----------------------------------------------------------------

2023-11-07 02:18:18 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-11-07 02:24:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 44 minutes 4 seconds
Variants: generated 200, build-succeeded 130, build-failed 54, syntax-invalid 7, redundant 9
Fitness: max 0.98(114), min 0.549(1), ave 0.962
Test execution time: sum 202414 ms, max 9842 ms, min 244 ms
----------------------------------------------------------------

2023-11-07 02:24:17 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-11-07 02:30:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 50 minutes 18 seconds
Variants: generated 200, build-succeeded 123, build-failed 57, syntax-invalid 10, redundant 10
Fitness: max 1(1), min 0.49(2), ave 0.96
Test execution time: sum 192759 ms, max 9524 ms, min 311 ms
----------------------------------------------------------------

2023-11-07 02:30:31 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-11-07 02:36:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 55 minutes 53 seconds
Variants: generated 200, build-succeeded 126, build-failed 57, syntax-invalid 8, redundant 9
Fitness: max 1(1), min 0.314(1), ave 0.949
Test execution time: sum 187712 ms, max 8153 ms, min 260 ms
----------------------------------------------------------------

2023-11-07 02:36:06 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-11-07 02:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 2 minutes 2 seconds
Variants: generated 200, build-succeeded 122, build-failed 55, syntax-invalid 16, redundant 7
Fitness: max 0.98(110), min 0.49(1), ave 0.957
Test execution time: sum 198168 ms, max 7877 ms, min 282 ms
----------------------------------------------------------------

2023-11-07 02:42:14 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-11-07 02:49:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 9 minutes 1 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 14, redundant 12
Fitness: max 1(1), min 0.549(1), ave 0.959
Test execution time: sum 251144 ms, max 26070 ms, min 283 ms
----------------------------------------------------------------

2023-11-07 02:49:13 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-11-07 02:56:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 16 minutes 36 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 16, redundant 11
Fitness: max 0.98(108), min 0.49(1), ave 0.967
Test execution time: sum 283428 ms, max 16243 ms, min 273 ms
----------------------------------------------------------------

2023-11-07 02:56:49 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-11-07 03:04:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 24 minutes 8 seconds
Variants: generated 200, build-succeeded 117, build-failed 54, syntax-invalid 16, redundant 13
Fitness: max 0.98(104), min 0.353(1), ave 0.959
Test execution time: sum 264148 ms, max 7635 ms, min 270 ms
----------------------------------------------------------------

2023-11-07 03:04:20 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-11-07 03:11:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 31 minutes 31 seconds
Variants: generated 200, build-succeeded 129, build-failed 54, syntax-invalid 9, redundant 8
Fitness: max 0.98(118), min 0.51(1), ave 0.968
Test execution time: sum 265399 ms, max 9313 ms, min 211 ms
----------------------------------------------------------------

2023-11-07 03:11:43 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-11-07 03:18:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 44 seconds
Variants: generated 200, build-succeeded 114, build-failed 65, syntax-invalid 12, redundant 9
Fitness: max 0.98(103), min 0.431(1), ave 0.964
Test execution time: sum 265772 ms, max 22450 ms, min 270 ms
----------------------------------------------------------------

2023-11-07 03:18:56 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-11-07 03:27:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 46 minutes 55 seconds
Variants: generated 200, build-succeeded 121, build-failed 66, syntax-invalid 5, redundant 8
Fitness: max 0.98(113), min 0.49(2), ave 0.965
Test execution time: sum 309490 ms, max 46529 ms, min 376 ms
----------------------------------------------------------------

2023-11-07 03:27:08 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-11-07 03:37:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 56 minutes 52 seconds
Variants: generated 200, build-succeeded 121, build-failed 65, syntax-invalid 9, redundant 5
Fitness: max 0.98(111), min 0.549(1), ave 0.967
Test execution time: sum 408082 ms, max 59701 ms, min 315 ms
----------------------------------------------------------------

2023-11-07 03:37:04 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-11-07 03:46:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 6 minutes 37 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 21, redundant 9
Fitness: max 0.98(96), min 0.549(1), ave 0.968
Test execution time: sum 394342 ms, max 84603 ms, min 311 ms
----------------------------------------------------------------

2023-11-07 03:46:50 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-11-07 03:57:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 17 minutes 0 seconds
Variants: generated 200, build-succeeded 124, build-failed 51, syntax-invalid 18, redundant 7
Fitness: max 1(1), min 0.549(1), ave 0.957
Test execution time: sum 453283 ms, max 58882 ms, min 285 ms
----------------------------------------------------------------

2023-11-07 03:57:13 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-11-07 04:05:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 25 minutes 16 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 22, redundant 8
Fitness: max 0.98(93), min 0.294(1), ave 0.939
Test execution time: sum 313120 ms, max 24514 ms, min 276 ms
----------------------------------------------------------------

2023-11-07 04:05:28 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-11-07 04:13:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 33 minutes 32 seconds
Variants: generated 200, build-succeeded 121, build-failed 58, syntax-invalid 18, redundant 3
Fitness: max 0.98(103), min 0.333(1), ave 0.955
Test execution time: sum 319109 ms, max 15435 ms, min 226 ms
----------------------------------------------------------------

2023-11-07 04:13:44 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-11-07 04:22:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 42 minutes 25 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 25, redundant 7
Fitness: max 1(1), min 0.549(2), ave 0.952
Test execution time: sum 352788 ms, max 27286 ms, min 346 ms
----------------------------------------------------------------

2023-11-07 04:22:37 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-11-07 04:31:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 51 minutes 30 seconds
Variants: generated 200, build-succeeded 129, build-failed 49, syntax-invalid 17, redundant 5
Fitness: max 0.98(108), min 0.725(2), ave 0.96
Test execution time: sum 344001 ms, max 19164 ms, min 292 ms
----------------------------------------------------------------

2023-11-07 04:31:42 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-11-07 04:38:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 58 minutes 45 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 28, redundant 7
Fitness: max 1(1), min 0.314(1), ave 0.943
Test execution time: sum 277193 ms, max 23911 ms, min 302 ms
----------------------------------------------------------------

2023-11-07 04:38:58 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-11-07 04:46:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 6 minutes 10 seconds
Variants: generated 200, build-succeeded 118, build-failed 52, syntax-invalid 21, redundant 9
Fitness: max 0.98(98), min 0.353(2), ave 0.945
Test execution time: sum 284751 ms, max 50735 ms, min 220 ms
----------------------------------------------------------------

2023-11-07 04:46:22 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-11-07 04:53:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 13 minutes 15 seconds
Variants: generated 200, build-succeeded 119, build-failed 52, syntax-invalid 18, redundant 11
Fitness: max 1(1), min 0.314(1), ave 0.956
Test execution time: sum 268609 ms, max 23071 ms, min 188 ms
----------------------------------------------------------------

2023-11-07 04:53:27 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-11-07 04:59:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 18 minutes 57 seconds
Variants: generated 200, build-succeeded 118, build-failed 55, syntax-invalid 22, redundant 5
Fitness: max 0.98(99), min 0.471(1), ave 0.953
Test execution time: sum 181730 ms, max 7588 ms, min 257 ms
----------------------------------------------------------------

2023-11-07 04:59:09 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-11-07 05:06:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 26 minutes 24 seconds
Variants: generated 200, build-succeeded 123, build-failed 51, syntax-invalid 18, redundant 8
Fitness: max 0.98(107), min 0.314(1), ave 0.955
Test execution time: sum 265750 ms, max 23108 ms, min 263 ms
----------------------------------------------------------------

2023-11-07 05:06:36 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-11-07 05:15:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 34 minutes 49 seconds
Variants: generated 200, build-succeeded 127, build-failed 52, syntax-invalid 16, redundant 5
Fitness: max 1(1), min 0.667(2), ave 0.965
Test execution time: sum 324888 ms, max 19267 ms, min 232 ms
----------------------------------------------------------------

2023-11-07 05:15:02 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-11-07 05:22:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 42 minutes 21 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 17, redundant 9
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 292170 ms, max 27271 ms, min 243 ms
----------------------------------------------------------------

2023-11-07 05:22:33 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-11-07 05:35:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 55 minutes 0 seconds
Variants: generated 200, build-succeeded 126, build-failed 56, syntax-invalid 7, redundant 11
Fitness: max 0.98(109), min 0.471(1), ave 0.957
Test execution time: sum 567934 ms, max 42542 ms, min 321 ms
----------------------------------------------------------------

2023-11-07 05:35:12 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-11-07 05:43:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 3 minutes 29 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 14, redundant 11
Fitness: max 0.98(106), min 0.549(1), ave 0.964
Test execution time: sum 332041 ms, max 15082 ms, min 337 ms
----------------------------------------------------------------

2023-11-07 05:43:42 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-11-07 05:51:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 11 minutes 2 seconds
Variants: generated 200, build-succeeded 116, build-failed 54, syntax-invalid 23, redundant 7
Fitness: max 0.98(98), min 0.49(2), ave 0.953
Test execution time: sum 292095 ms, max 14496 ms, min 219 ms
----------------------------------------------------------------

2023-11-07 05:51:15 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-11-07 05:59:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 19 minutes 8 seconds
Variants: generated 200, build-succeeded 129, build-failed 52, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0.549(1), ave 0.962
Test execution time: sum 302515 ms, max 35800 ms, min 304 ms
----------------------------------------------------------------

2023-11-07 05:59:20 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-11-07 06:06:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 26 minutes 31 seconds
Variants: generated 200, build-succeeded 116, build-failed 57, syntax-invalid 20, redundant 7
Fitness: max 0.98(105), min 0.686(1), ave 0.971
Test execution time: sum 275738 ms, max 47247 ms, min 311 ms
----------------------------------------------------------------

2023-11-07 06:06:44 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-11-07 06:15:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 35 minutes 13 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 18, redundant 10
Fitness: max 1(1), min 0.137(1), ave 0.959
Test execution time: sum 347380 ms, max 53590 ms, min 132 ms
----------------------------------------------------------------

2023-11-07 06:15:25 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-11-07 06:23:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 43 minutes 37 seconds
Variants: generated 200, build-succeeded 118, build-failed 61, syntax-invalid 14, redundant 7
Fitness: max 0.98(101), min 0.549(1), ave 0.96
Test execution time: sum 318979 ms, max 36581 ms, min 314 ms
----------------------------------------------------------------

2023-11-07 06:23:50 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-11-07 06:35:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 54 minutes 53 seconds
Variants: generated 200, build-succeeded 123, build-failed 55, syntax-invalid 13, redundant 9
Fitness: max 0.98(101), min 0.49(1), ave 0.944
Test execution time: sum 487544 ms, max 64972 ms, min 289 ms
----------------------------------------------------------------

2023-11-07 06:35:06 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-11-07 06:47:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 7 minutes 21 seconds
Variants: generated 200, build-succeeded 119, build-failed 50, syntax-invalid 20, redundant 11
Fitness: max 0.98(103), min 0.49(1), ave 0.96
Test execution time: sum 569791 ms, max 32026 ms, min 248 ms
----------------------------------------------------------------

2023-11-07 06:47:33 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-11-07 07:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 23 minutes 7 seconds
Variants: generated 200, build-succeeded 127, build-failed 59, syntax-invalid 9, redundant 5
Fitness: max 0.98(111), min 0.549(1), ave 0.962
Test execution time: sum 743473 ms, max 55044 ms, min 372 ms
----------------------------------------------------------------

2023-11-07 07:03:19 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-11-07 07:17:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 30 seconds
Variants: generated 200, build-succeeded 122, build-failed 51, syntax-invalid 13, redundant 14
Fitness: max 0.98(110), min 0.51(1), ave 0.961
Test execution time: sum 674448 ms, max 53213 ms, min 331 ms
----------------------------------------------------------------

2023-11-07 07:17:43 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-11-07 07:28:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 48 minutes 15 seconds
Variants: generated 200, build-succeeded 125, build-failed 57, syntax-invalid 11, redundant 7
Fitness: max 0.98(110), min 0.353(1), ave 0.954
Test execution time: sum 443719 ms, max 14070 ms, min 236 ms
----------------------------------------------------------------

2023-11-07 07:28:28 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-11-07 07:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 2 minutes 34 seconds
Variants: generated 200, build-succeeded 133, build-failed 47, syntax-invalid 11, redundant 9
Fitness: max 0.98(119), min 0.569(1), ave 0.963
Test execution time: sum 660764 ms, max 77717 ms, min 242 ms
----------------------------------------------------------------

2023-11-07 07:42:47 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-11-07 07:59:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 19 minutes 19 seconds
Variants: generated 200, build-succeeded 126, build-failed 59, syntax-invalid 4, redundant 11
Fitness: max 0.98(114), min 0.235(1), ave 0.961
Test execution time: sum 790630 ms, max 46759 ms, min 309 ms
----------------------------------------------------------------

2023-11-07 07:59:31 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-11-07 08:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 37 minutes 33 seconds
Variants: generated 200, build-succeeded 127, build-failed 48, syntax-invalid 15, redundant 10
Fitness: max 0.98(109), min 0.49(1), ave 0.955
Test execution time: sum 881703 ms, max 30284 ms, min 307 ms
----------------------------------------------------------------

2023-11-07 08:17:46 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-11-07 08:44:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 4 minutes 29 seconds
Variants: generated 200, build-succeeded 125, build-failed 52, syntax-invalid 12, redundant 11
Fitness: max 0.98(109), min 0.235(1), ave 0.96
Test execution time: sum 1390344 ms, max 81372 ms, min 329 ms
----------------------------------------------------------------

2023-11-07 08:44:42 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-11-07 09:14:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 33 minutes 55 seconds
Variants: generated 200, build-succeeded 125, build-failed 57, syntax-invalid 11, redundant 7
Fitness: max 0.98(110), min 0.471(1), ave 0.958
Test execution time: sum 1543924 ms, max 145282 ms, min 368 ms
----------------------------------------------------------------

2023-11-07 09:14:07 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-11-07 09:32:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 52 minutes 16 seconds
Variants: generated 200, build-succeeded 127, build-failed 54, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0.216(1), ave 0.958
Test execution time: sum 885064 ms, max 59761 ms, min 375 ms
----------------------------------------------------------------

2023-11-07 09:32:29 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-11-07 09:45:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 4 minutes 56 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 18, redundant 11
Fitness: max 1(1), min 0.686(1), ave 0.965
Test execution time: sum 541663 ms, max 21920 ms, min 386 ms
----------------------------------------------------------------

2023-11-07 09:45:09 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-11-07 09:58:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 18 minutes 25 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 24, redundant 8
Fitness: max 1(1), min 0.49(1), ave 0.948
Test execution time: sum 612665 ms, max 64204 ms, min 275 ms
----------------------------------------------------------------

2023-11-07 09:58:38 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-11-07 10:08:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 28 minutes 41 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 15, redundant 13
Fitness: max 0.98(104), min 0.49(1), ave 0.964
Test execution time: sum 422459 ms, max 26065 ms, min 228 ms
----------------------------------------------------------------

2023-11-07 10:08:54 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-11-07 10:19:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 39 minutes 33 seconds
Variants: generated 200, build-succeeded 118, build-failed 54, syntax-invalid 19, redundant 9
Fitness: max 0.98(109), min 0.49(2), ave 0.967
Test execution time: sum 457429 ms, max 26157 ms, min 240 ms
----------------------------------------------------------------

2023-11-07 10:19:46 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-11-07 10:29:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 48 minutes 50 seconds
Variants: generated 200, build-succeeded 109, build-failed 67, syntax-invalid 17, redundant 7
Fitness: max 0.98(96), min 0.667(1), ave 0.964
Test execution time: sum 374024 ms, max 24327 ms, min 430 ms
----------------------------------------------------------------

2023-11-07 10:29:02 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-11-07 10:39:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 59 minutes 25 seconds
Variants: generated 200, build-succeeded 124, build-failed 57, syntax-invalid 13, redundant 6
Fitness: max 0.98(109), min 0.49(1), ave 0.962
Test execution time: sum 427713 ms, max 15339 ms, min 330 ms
----------------------------------------------------------------

2023-11-07 10:39:37 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-11-07 10:50:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 9 minutes 50 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 17, redundant 12
Fitness: max 0.98(105), min 0.49(1), ave 0.97
Test execution time: sum 448265 ms, max 50533 ms, min 245 ms
----------------------------------------------------------------

2023-11-07 10:50:03 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-11-07 11:03:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 22 minutes 49 seconds
Variants: generated 200, build-succeeded 132, build-failed 46, syntax-invalid 8, redundant 14
Fitness: max 0.98(112), min 0.49(1), ave 0.958
Test execution time: sum 554869 ms, max 60459 ms, min 369 ms
----------------------------------------------------------------

2023-11-07 11:03:02 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-11-07 11:19:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 39 minutes 11 seconds
Variants: generated 200, build-succeeded 125, build-failed 55, syntax-invalid 11, redundant 9
Fitness: max 0.98(110), min 0.49(1), ave 0.961
Test execution time: sum 765234 ms, max 158859 ms, min 318 ms
----------------------------------------------------------------

2023-11-07 11:19:23 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-11-07 11:35:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 54 minutes 51 seconds
Variants: generated 200, build-succeeded 121, build-failed 56, syntax-invalid 13, redundant 10
Fitness: max 1(1), min 0.49(2), ave 0.957
Test execution time: sum 732408 ms, max 31714 ms, min 306 ms
----------------------------------------------------------------

2023-11-07 11:35:03 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-11-07 11:53:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 12 minutes 56 seconds
Variants: generated 200, build-succeeded 128, build-failed 51, syntax-invalid 14, redundant 7
Fitness: max 0.98(108), min 0.431(1), ave 0.954
Test execution time: sum 885410 ms, max 101001 ms, min 189 ms
----------------------------------------------------------------

2023-11-07 11:53:09 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-11-07 12:09:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 29 minutes 0 seconds
Variants: generated 200, build-succeeded 124, build-failed 52, syntax-invalid 14, redundant 10
Fitness: max 0.98(109), min 0.49(1), ave 0.966
Test execution time: sum 759778 ms, max 161890 ms, min 336 ms
----------------------------------------------------------------

2023-11-07 12:09:12 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-11-07 12:23:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 43 minutes 40 seconds
Variants: generated 200, build-succeeded 127, build-failed 60, syntax-invalid 9, redundant 4
Fitness: max 0.98(111), min 0.49(3), ave 0.95
Test execution time: sum 678109 ms, max 78775 ms, min 245 ms
----------------------------------------------------------------

2023-11-07 12:23:52 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-11-07 12:37:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 57 minutes 12 seconds
Variants: generated 200, build-succeeded 122, build-failed 58, syntax-invalid 13, redundant 7
Fitness: max 0.98(111), min 0.49(2), ave 0.964
Test execution time: sum 610348 ms, max 51775 ms, min 290 ms
----------------------------------------------------------------

2023-11-07 12:37:24 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-11-07 12:51:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 10 minutes 50 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 21, redundant 5
Fitness: max 0.98(100), min 0.471(1), ave 0.953
Test execution time: sum 635734 ms, max 46460 ms, min 270 ms
----------------------------------------------------------------

2023-11-07 12:51:03 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-11-07 13:04:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 24 minutes 32 seconds
Variants: generated 200, build-succeeded 122, build-failed 57, syntax-invalid 16, redundant 5
Fitness: max 0.98(102), min 0.275(1), ave 0.95
Test execution time: sum 627487 ms, max 55226 ms, min 368 ms
----------------------------------------------------------------

2023-11-07 13:04:45 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-11-07 13:18:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 37 minutes 55 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 16, redundant 10
Fitness: max 0.98(99), min 0.549(2), ave 0.956
Test execution time: sum 619636 ms, max 52193 ms, min 377 ms
----------------------------------------------------------------

2023-11-07 13:18:08 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-11-07 13:27:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 46 minutes 49 seconds
Variants: generated 200, build-succeeded 119, build-failed 60, syntax-invalid 11, redundant 10
Fitness: max 0.98(107), min 0.49(1), ave 0.967
Test execution time: sum 352067 ms, max 23924 ms, min 353 ms
----------------------------------------------------------------

2023-11-07 13:27:02 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-11-07 13:38:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 57 minutes 49 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 17, redundant 10
Fitness: max 0.98(106), min 0.667(1), ave 0.968
Test execution time: sum 458604 ms, max 64599 ms, min 409 ms
----------------------------------------------------------------

2023-11-07 13:38:02 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-11-07 13:48:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 8 minutes 46 seconds
Variants: generated 200, build-succeeded 114, build-failed 63, syntax-invalid 15, redundant 8
Fitness: max 0.98(104), min 0.49(1), ave 0.965
Test execution time: sum 472511 ms, max 48962 ms, min 338 ms
----------------------------------------------------------------

2023-11-07 13:48:59 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-11-07 14:01:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 21 minutes 17 seconds
Variants: generated 200, build-succeeded 122, build-failed 50, syntax-invalid 16, redundant 12
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 561868 ms, max 68831 ms, min 334 ms
----------------------------------------------------------------

2023-11-07 14:01:29 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-11-07 14:23:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 42 minutes 55 seconds
Variants: generated 200, build-succeeded 126, build-failed 55, syntax-invalid 10, redundant 9
Fitness: max 0.98(107), min 0.549(1), ave 0.96
Test execution time: sum 1093296 ms, max 116343 ms, min 465 ms
----------------------------------------------------------------

2023-11-07 14:23:08 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-11-07 14:39:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 59 minutes 2 seconds
Variants: generated 200, build-succeeded 132, build-failed 47, syntax-invalid 11, redundant 10
Fitness: max 0.98(117), min 0.353(1), ave 0.951
Test execution time: sum 760393 ms, max 62269 ms, min 187 ms
----------------------------------------------------------------

2023-11-07 14:39:15 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-11-07 15:00:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 19 minutes 52 seconds
Variants: generated 200, build-succeeded 123, build-failed 61, syntax-invalid 11, redundant 5
Fitness: max 0.98(111), min 0.157(1), ave 0.961
Test execution time: sum 1032159 ms, max 40208 ms, min 265 ms
----------------------------------------------------------------

2023-11-07 15:00:05 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-11-07 15:19:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 39 minutes 35 seconds
Variants: generated 200, build-succeeded 113, build-failed 64, syntax-invalid 13, redundant 10
Fitness: max 1(1), min 0.353(1), ave 0.966
Test execution time: sum 988815 ms, max 48270 ms, min 417 ms
----------------------------------------------------------------

2023-11-07 15:19:48 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-11-07 15:48:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 8 minutes 25 seconds
Variants: generated 200, build-succeeded 128, build-failed 51, syntax-invalid 13, redundant 8
Fitness: max 0.98(109), min 0.49(1), ave 0.95
Test execution time: sum 1472616 ms, max 131264 ms, min 299 ms
----------------------------------------------------------------

2023-11-07 15:48:38 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-11-07 16:09:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 29 minutes 36 seconds
Variants: generated 200, build-succeeded 118, build-failed 58, syntax-invalid 19, redundant 5
Fitness: max 1(1), min 0.667(4), ave 0.961
Test execution time: sum 1032637 ms, max 57230 ms, min 460 ms
----------------------------------------------------------------

2023-11-07 16:09:48 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-11-07 16:30:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 50 minutes 25 seconds
Variants: generated 200, build-succeeded 119, build-failed 56, syntax-invalid 18, redundant 7
Fitness: max 0.98(108), min 0.529(1), ave 0.964
Test execution time: sum 1008979 ms, max 76107 ms, min 341 ms
----------------------------------------------------------------

2023-11-07 16:30:38 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-11-07 16:49:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 9 minutes 8 seconds
Variants: generated 200, build-succeeded 117, build-failed 59, syntax-invalid 17, redundant 7
Fitness: max 0.98(97), min 0.549(1), ave 0.954
Test execution time: sum 890188 ms, max 72606 ms, min 434 ms
----------------------------------------------------------------

2023-11-07 16:49:20 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-11-07 17:12:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 32 minutes 26 seconds
Variants: generated 200, build-succeeded 121, build-failed 59, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0.353(1), ave 0.951
Test execution time: sum 1161835 ms, max 81282 ms, min 287 ms
----------------------------------------------------------------

2023-11-07 17:12:39 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-11-07 17:36:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 56 minutes 41 seconds
Variants: generated 200, build-succeeded 122, build-failed 55, syntax-invalid 16, redundant 7
Fitness: max 0.98(107), min 0.569(1), ave 0.957
Test execution time: sum 1196243 ms, max 80895 ms, min 420 ms
----------------------------------------------------------------

2023-11-07 17:36:54 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-11-07 18:00:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 hours 20 minutes 0 seconds
Variants: generated 200, build-succeeded 118, build-failed 59, syntax-invalid 17, redundant 6
Fitness: max 0.98(98), min 0.549(1), ave 0.95
Test execution time: sum 1143952 ms, max 108845 ms, min 365 ms
----------------------------------------------------------------

2023-11-07 18:00:13 [main] [INFO]  KGenProgMain - GA stopped
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v250)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v250)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v250)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v250)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v250)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v250)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v250)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v387)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v387)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v387)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v387)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v387)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v387)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v387)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v543)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v543)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v543)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -967,9 +967,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +976,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v543)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v543)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v543)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v543)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v582)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v582)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v582)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1051,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v582)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v582)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v582)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v582)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v765)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v765)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v765)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -967,9 +967,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +976,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1048,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = true;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v765)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v765)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v765)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v765)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v796)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v796)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v796)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -404,7 +404,7 @@
      * @return The number of bytes successfully extracted into the provided byte[] array.
      */
     int readResults(byte[] b, int bPos, int bAvail) {
-        if (buffer != null) {
+        if (eof) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v796)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v796)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v796)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v796)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v963)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v963)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v963)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1052,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v963)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v963)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v963)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v963)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1110)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1110)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1110)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1110)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1110)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1110)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1110)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1154)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1154)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1154)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -826,7 +825,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1154)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1154)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1154)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1154)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1164)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1164)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1164)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -452,6 +451,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -977,9 +977,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1164)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1164)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1164)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1164)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1307)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1307)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1307)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1052,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = true;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1307)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1307)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1307)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1307)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1319)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1319)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1319)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1051,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = true;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1319)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1319)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1319)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:14 [main] [INFO]  PatchLogExporter - patch (v1319)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1395)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1395)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1395)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -826,7 +827,9 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1395)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1395)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1395)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1395)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1398)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1398)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1398)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -826,7 +827,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1398)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1398)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1398)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1398)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1734)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1734)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1734)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -826,7 +825,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1734)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1734)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1734)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v1734)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2916)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2916)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2916)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -826,7 +825,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2916)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2916)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2916)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2916)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2943)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2943)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2943)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -826,7 +827,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -967,13 +969,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2943)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2943)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2943)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v2943)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v3629)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v3629)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v3629)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -451,8 +450,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,6 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v3629)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v3629)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v3629)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v3629)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v4404)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v4404)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v4404)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,7 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
         }
         return eof ? -1 : 0;
     }
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -493,6 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +829,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -977,9 +981,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v4404)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v4404)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v4404)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v4404)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v5456)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v5456)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v5456)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -452,6 +453,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -826,7 +828,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1054,8 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = true;
+		readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v5456)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v5456)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v5456)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v5456)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v6895)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v6895)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v6895)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -460,6 +461,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +495,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +831,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v6895)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v6895)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v6895)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v6895)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v7490)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v7490)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v7490)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,9 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
-            return len;
+            buffer = null;
         }
         return eof ? -1 : 0;
     }
@@ -452,6 +453,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -493,6 +495,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +829,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -967,13 +971,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,6 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
+		readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v7490)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v7490)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v7490)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v7490)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v8619)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v8619)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v8619)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,10 +408,11 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
-                buffer = null;
+            if (eof) {
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
-            return len;
+            buffer = null;
         }
         return eof ? -1 : 0;
     }
@@ -452,6 +453,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -460,6 +462,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +971,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v8619)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v8619)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v8619)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v8619)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v9834)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v9834)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v9834)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,9 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
-            return len;
+            buffer = null;
         }
         return eof ? -1 : 0;
     }
@@ -460,6 +462,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +496,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +973,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v9834)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v9834)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v9834)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v9834)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11228)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11228)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11228)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,8 +408,12 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
-                buffer = null;
+            if (eof) {
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -826,7 +832,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11228)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11228)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11228)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11228)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11853)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11853)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11853)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,9 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
-            return len;
+            buffer = null;
         }
         return eof ? -1 : 0;
     }
@@ -451,8 +453,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +463,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +497,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11853)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11853)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11853)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v11853)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12673)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12673)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12673)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +466,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +500,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +982,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            return len;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,8 +1060,7 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
+        eof = true;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12673)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12673)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12673)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12673)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12808)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12808)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12808)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,9 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
-            return len;
+            buffer = null;
         }
         return eof ? -1 : 0;
     }
@@ -452,6 +454,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -460,6 +463,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +484,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +499,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +834,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -972,7 +981,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12808)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12808)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12808)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12808)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12887)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12887)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12887)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +466,9 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +502,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12887)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12887)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12887)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v12887)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v14667)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v14667)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v14667)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +452,11 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +464,10 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +501,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v14667)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v14667)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v14667)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v14667)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v15830)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v15830)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v15830)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,6 +452,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -460,6 +465,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +486,10 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +503,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +837,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +985,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v15830)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v15830)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v15830)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v15830)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v16492)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v16492)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v16492)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +450,13 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -480,6 +484,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +499,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +834,10 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			len--;
+			int bytesCopied = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -950,7 +961,8 @@
         }
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
-        byte[] buf = new byte[pos - readPos];
+        currentLinePos = 0;
+		byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -973,7 +985,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v16492)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v16492)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v16492)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v16492)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17018)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17018)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17018)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +449,15 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +465,9 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +501,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +835,9 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17018)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17018)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17018)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17018)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17043)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17043)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17043)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -460,6 +462,10 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +486,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +502,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +991,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return len;
             }
         }
         return len;
@@ -1050,7 +1062,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17043)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17043)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17043)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v17043)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v20250)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v20250)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v20250)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +408,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +452,14 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +467,8 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +502,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +837,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v20250)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v20250)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v20250)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v20250)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21629)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21629)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21629)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +451,15 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +467,9 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +490,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -979,7 +992,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return -1;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21629)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21629)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21629)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21629)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21905)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21905)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21905)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +456,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +467,9 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +490,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +505,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21905)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21905)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21905)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21905)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21929)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21929)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21929)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +451,14 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +466,11 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +491,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +505,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21929)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21929)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21929)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v21929)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,11 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +467,10 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +504,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +987,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x >> 2;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24045)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24416)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24416)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24416)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -386,7 +386,8 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
-            System.arraycopy(buffer, 0, b, 0, buffer.length);
+            byte[] buf = new byte[pos - readPos];
+			System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
     }
@@ -409,7 +410,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -460,6 +463,14 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +504,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +993,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24416)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24416)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24416)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v24416)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25072)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25072)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25072)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -459,7 +460,17 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				currentLinePos = 0;
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +491,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -826,7 +840,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +994,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1067,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25072)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25072)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25072)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25072)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25864)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25864)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25864)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +451,14 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +466,15 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +508,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1065,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25864)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25864)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25864)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v25864)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +453,16 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,11 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +508,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +995,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27339)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27339)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27339)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +451,15 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +467,13 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +507,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +993,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27339)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27339)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27339)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27339)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27543)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27543)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27543)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +456,11 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +468,11 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +506,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +996,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27543)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27543)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27543)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v27543)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v29066)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v29066)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v29066)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +453,12 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +466,12 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +492,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +507,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1064,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v29066)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v29066)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v29066)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v29066)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +451,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +469,12 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +495,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +509,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +990,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x >> 2;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v31912)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32159)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32159)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32159)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,11 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +465,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +487,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				String sep = StringUtils.newStringUtf8(lineSeparator);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -480,6 +496,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +511,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +993,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32159)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32159)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32159)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32159)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +452,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +466,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +509,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +991,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x >> 2;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v32361)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v33650)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v33650)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v33650)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +464,18 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +496,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +511,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v33650)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v33650)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v33650)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v33650)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v35245)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v35245)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v35245)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +469,11 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +507,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1055,7 +1069,8 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        int readLen = 0;
+		eof = false;
     }
 
 }
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v35245)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v35245)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v35245)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v35245)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v36493)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v36493)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v36493)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
     }
 
     /**
@@ -409,7 +410,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +456,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +500,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -979,7 +1000,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v36493)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v36493)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v36493)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v36493)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37565)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37565)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37565)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +464,15 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +485,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				String sep = StringUtils.newStringUtf8(lineSeparator);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -480,6 +494,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +510,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +988,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37565)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37565)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37565)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37565)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37742)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37742)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37742)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,15 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +459,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +473,11 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +498,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +513,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +994,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1055,7 +1075,8 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        int readLen = 0;
+		eof = false;
     }
 
 }
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37742)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37742)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37742)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37742)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37811)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37811)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37811)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,12 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +468,15 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +497,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +512,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +995,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37811)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37811)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37811)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37811)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37932)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37932)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37932)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +454,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +468,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +511,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +994,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37932)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37932)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37932)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v37932)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v38440)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v38440)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v38440)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +451,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +469,14 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +497,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +511,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1000,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v38440)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v38440)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v38440)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v38440)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40614)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40614)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40614)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +408,15 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +455,16 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +472,11 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +497,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +511,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +993,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40614)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40614)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40614)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40614)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40667)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40667)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40667)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +455,14 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +500,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +516,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1004,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40667)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40667)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40667)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40667)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +454,15 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,13 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +497,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +511,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +998,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41442)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41442)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41442)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,13 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +454,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +472,13 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +499,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +515,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1002,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41442)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41442)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41442)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41442)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41474)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41474)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41474)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +456,15 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +472,13 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +512,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +995,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41474)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41474)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41474)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41474)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41494)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41494)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41494)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,14 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +500,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +514,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +989,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41494)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41494)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41494)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v41494)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42268)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42268)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42268)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -448,11 +453,20 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +474,12 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +500,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +515,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1003,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42268)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42268)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42268)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42268)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42479)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42479)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42479)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,15 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +469,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +499,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,7 +513,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1000,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42479)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42479)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42479)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42479)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42859)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42859)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42859)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,11 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +465,15 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +494,8 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +509,12 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +995,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42859)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42859)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42859)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v42859)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v44432)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v44432)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v44432)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +456,14 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +471,14 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +499,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +513,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1001,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v44432)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v44432)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v44432)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v44432)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45002)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45002)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45002)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +454,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,7 +468,13 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				// URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
                     }
@@ -480,6 +494,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +510,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						int readLen = 0;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1000,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45002)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45002)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45002)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45002)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45465)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45465)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45465)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +458,16 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +475,15 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +997,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45465)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45465)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45465)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45465)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45858)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45858)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45858)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +456,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,17 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +514,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +995,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45858)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45858)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45858)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v45858)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46550)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46550)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46550)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,8 +408,11 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = PAD;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +454,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +468,17 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +499,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +513,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +996,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46550)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46550)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46550)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46550)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46617)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46617)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46617)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +464,21 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +499,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +515,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1003,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46617)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46617)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46617)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v46617)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47427)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47427)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47427)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,18 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +472,16 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -479,7 +501,9 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
+				readPos = 0;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +517,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +999,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47427)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47427)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47427)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47427)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47813)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47813)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47813)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +454,15 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,14 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +498,10 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +515,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -975,13 +999,8 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
-            boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
-            }
-        }
+        if (chunkSize > 0)
+			return len;
         return len;
     }
 
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47813)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47813)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47813)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v47813)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50269)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50269)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50269)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +452,18 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +471,17 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -479,6 +501,7 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
+				readPos = 0;
                 int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
@@ -493,6 +516,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1005,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50269)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50269)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50269)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50269)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50424)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50424)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50424)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +469,18 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -479,6 +500,7 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
+				readPos = 0;
                 int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
@@ -493,6 +515,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1004,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50424)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50424)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50424)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50424)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50695)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50695)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50695)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,15 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +471,18 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +503,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -492,7 +516,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        x = x >> 1;
+						pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50695)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50695)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50695)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v50695)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v52298)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v52298)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v52298)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,13 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +467,18 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -479,7 +498,11 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
+				readPos = 0;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +516,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1006,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v52298)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v52298)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v52298)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v52298)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v54416)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v54416)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v54416)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,11 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +455,16 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +472,15 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -479,6 +500,7 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
+				readPos = 0;
                 int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
@@ -493,6 +515,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1006,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v54416)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v54416)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v54416)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v54416)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55207)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55207)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55207)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +453,16 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +470,19 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +503,9 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +519,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55207)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55207)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55207)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55207)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55622)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55622)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55622)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,13 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +457,14 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +472,15 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +501,12 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +520,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1001,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55622)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55622)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55622)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v55622)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v56202)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v56202)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v56202)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -451,8 +456,16 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						currentLinePos = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -460,6 +473,17 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -480,6 +504,7 @@
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                 if (b < 0) {
                     b += 256;
                 }
@@ -493,6 +518,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1008,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v56202)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v56202)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v56202)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  PatchLogExporter - patch (v56202)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-07 18:00:15 [main] [INFO]  KGenProgMain - Summary
Reached generation = 285
Generated variants = 56800
Syntax valid variants = 51808
Build succeeded variants = 30962
Time elapsed = 24 hours 20 minutes 2 seconds
Exit status = FAILURE (time limit)
