2023-11-05 23:06:19 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-05 23:06:19 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-05 23:06:19 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-05 23:06:20 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 2 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-05 23:06:40 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-05 23:06:40 [main] [INFO]  KGenProgMain - GA started
2023-11-05 23:06:40 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-05 23:07:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 seconds
Variants: generated 100, build-succeeded 15, build-failed 56, syntax-invalid 6, redundant 23
Fitness: max 1(1), min 0.569(1), ave 0.838
Test execution time: sum 6082 ms, max 920 ms, min 209 ms
----------------------------------------------------------------

2023-11-05 23:07:01 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-05 23:07:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 seconds
Variants: generated 100, build-succeeded 17, build-failed 64, syntax-invalid 5, redundant 14
Fitness: max 1(1), min 0.549(2), ave 0.858
Test execution time: sum 5001 ms, max 460 ms, min 226 ms
----------------------------------------------------------------

2023-11-05 23:07:18 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-05 23:07:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 8 seconds
Variants: generated 200, build-succeeded 48, build-failed 66, syntax-invalid 8, redundant 78
Fitness: max 0.98(10), min 0.49(1), ave 0.775
Test execution time: sum 12366 ms, max 512 ms, min 132 ms
----------------------------------------------------------------

2023-11-05 23:07:48 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-05 23:08:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 40 seconds
Variants: generated 200, build-succeeded 55, build-failed 58, syntax-invalid 19, redundant 68
Fitness: max 0.98(16), min 0.235(1), ave 0.858
Test execution time: sum 13820 ms, max 474 ms, min 153 ms
----------------------------------------------------------------

2023-11-05 23:08:20 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-05 23:08:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 10 seconds
Variants: generated 200, build-succeeded 62, build-failed 56, syntax-invalid 13, redundant 69
Fitness: max 0.98(28), min 0.549(1), ave 0.913
Test execution time: sum 15268 ms, max 537 ms, min 161 ms
----------------------------------------------------------------

2023-11-05 23:08:51 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-05 23:09:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 36 seconds
Variants: generated 200, build-succeeded 48, build-failed 61, syntax-invalid 14, redundant 77
Fitness: max 0.98(37), min 0.235(1), ave 0.941
Test execution time: sum 12083 ms, max 494 ms, min 183 ms
----------------------------------------------------------------

2023-11-05 23:09:17 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-05 23:09:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 5 seconds
Variants: generated 200, build-succeeded 56, build-failed 69, syntax-invalid 12, redundant 63
Fitness: max 0.98(42), min 0.49(1), ave 0.942
Test execution time: sum 13754 ms, max 480 ms, min 157 ms
----------------------------------------------------------------

2023-11-05 23:09:46 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-05 23:10:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 38 seconds
Variants: generated 200, build-succeeded 70, build-failed 62, syntax-invalid 13, redundant 55
Fitness: max 0.98(54), min 0.471(1), ave 0.927
Test execution time: sum 17455 ms, max 427 ms, min 136 ms
----------------------------------------------------------------

2023-11-05 23:10:18 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-05 23:10:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 15 seconds
Variants: generated 200, build-succeeded 79, build-failed 60, syntax-invalid 14, redundant 47
Fitness: max 0.98(66), min 0.49(1), ave 0.963
Test execution time: sum 20804 ms, max 464 ms, min 184 ms
----------------------------------------------------------------

2023-11-05 23:10:55 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-05 23:11:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 52 seconds
Variants: generated 200, build-succeeded 89, build-failed 68, syntax-invalid 15, redundant 28
Fitness: max 0.98(76), min 0.588(1), ave 0.962
Test execution time: sum 22809 ms, max 374 ms, min 164 ms
----------------------------------------------------------------

2023-11-05 23:11:33 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-05 23:12:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 38 seconds
Variants: generated 200, build-succeeded 95, build-failed 62, syntax-invalid 19, redundant 24
Fitness: max 1(2), min 0.431(1), ave 0.95
Test execution time: sum 25746 ms, max 2484 ms, min 150 ms
----------------------------------------------------------------

2023-11-05 23:12:19 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-05 23:13:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 23 seconds
Variants: generated 200, build-succeeded 87, build-failed 59, syntax-invalid 12, redundant 42
Fitness: max 0.98(58), min 0.353(2), ave 0.92
Test execution time: sum 22006 ms, max 1528 ms, min 159 ms
----------------------------------------------------------------

2023-11-05 23:13:04 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-05 23:13:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 3 seconds
Variants: generated 200, build-succeeded 82, build-failed 57, syntax-invalid 24, redundant 37
Fitness: max 0.98(62), min 0.549(1), ave 0.951
Test execution time: sum 20304 ms, max 488 ms, min 167 ms
----------------------------------------------------------------

2023-11-05 23:13:43 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-05 23:14:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 46 seconds
Variants: generated 200, build-succeeded 95, build-failed 59, syntax-invalid 13, redundant 33
Fitness: max 1(1), min 0.216(1), ave 0.941
Test execution time: sum 23556 ms, max 475 ms, min 158 ms
----------------------------------------------------------------

2023-11-05 23:14:27 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-05 23:15:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 32 seconds
Variants: generated 200, build-succeeded 96, build-failed 55, syntax-invalid 14, redundant 35
Fitness: max 0.98(86), min 0.294(1), ave 0.952
Test execution time: sum 23277 ms, max 501 ms, min 85 ms
----------------------------------------------------------------

2023-11-05 23:15:13 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-05 23:16:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 19 seconds
Variants: generated 200, build-succeeded 100, build-failed 66, syntax-invalid 14, redundant 20
Fitness: max 0.98(81), min 0.549(2), ave 0.946
Test execution time: sum 24405 ms, max 542 ms, min 151 ms
----------------------------------------------------------------

2023-11-05 23:16:00 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-05 23:16:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 2 seconds
Variants: generated 200, build-succeeded 94, build-failed 62, syntax-invalid 18, redundant 26
Fitness: max 1(1), min 0.294(1), ave 0.94
Test execution time: sum 22791 ms, max 417 ms, min 144 ms
----------------------------------------------------------------

2023-11-05 23:16:43 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-05 23:17:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 50 seconds
Variants: generated 200, build-succeeded 99, build-failed 59, syntax-invalid 16, redundant 26
Fitness: max 0.98(85), min 0.549(3), ave 0.956
Test execution time: sum 24716 ms, max 511 ms, min 150 ms
----------------------------------------------------------------

2023-11-05 23:17:31 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-05 23:18:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 39 seconds
Variants: generated 200, build-succeeded 107, build-failed 50, syntax-invalid 12, redundant 31
Fitness: max 1(1), min 0.471(1), ave 0.944
Test execution time: sum 26320 ms, max 532 ms, min 176 ms
----------------------------------------------------------------

2023-11-05 23:18:20 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-05 23:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 26 seconds
Variants: generated 200, build-succeeded 104, build-failed 62, syntax-invalid 9, redundant 25
Fitness: max 1(1), min 0.49(1), ave 0.958
Test execution time: sum 25412 ms, max 521 ms, min 163 ms
----------------------------------------------------------------

2023-11-05 23:19:07 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-05 23:19:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 15 seconds
Variants: generated 200, build-succeeded 104, build-failed 62, syntax-invalid 11, redundant 23
Fitness: max 0.98(87), min 0.49(1), ave 0.959
Test execution time: sum 25931 ms, max 547 ms, min 142 ms
----------------------------------------------------------------

2023-11-05 23:19:56 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-05 23:20:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 2 seconds
Variants: generated 200, build-succeeded 100, build-failed 61, syntax-invalid 10, redundant 29
Fitness: max 0.98(81), min 0.353(1), ave 0.943
Test execution time: sum 24739 ms, max 484 ms, min 159 ms
----------------------------------------------------------------

2023-11-05 23:20:42 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-05 23:21:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 46 seconds
Variants: generated 200, build-succeeded 96, build-failed 56, syntax-invalid 15, redundant 33
Fitness: max 0.98(80), min 0.49(2), ave 0.951
Test execution time: sum 23552 ms, max 555 ms, min 182 ms
----------------------------------------------------------------

2023-11-05 23:21:27 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-05 23:22:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 28 seconds
Variants: generated 200, build-succeeded 90, build-failed 60, syntax-invalid 10, redundant 40
Fitness: max 0.98(74), min 0.294(1), ave 0.941
Test execution time: sum 21751 ms, max 503 ms, min 153 ms
----------------------------------------------------------------

2023-11-05 23:22:09 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-05 23:22:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 19 seconds
Variants: generated 200, build-succeeded 103, build-failed 55, syntax-invalid 9, redundant 33
Fitness: max 0.98(81), min 0.569(1), ave 0.953
Test execution time: sum 25783 ms, max 485 ms, min 179 ms
----------------------------------------------------------------

2023-11-05 23:22:59 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-05 23:23:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 6 seconds
Variants: generated 200, build-succeeded 103, build-failed 59, syntax-invalid 15, redundant 23
Fitness: max 0.98(89), min 0.549(1), ave 0.961
Test execution time: sum 25486 ms, max 465 ms, min 187 ms
----------------------------------------------------------------

2023-11-05 23:23:47 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-05 23:24:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 56 seconds
Variants: generated 200, build-succeeded 103, build-failed 58, syntax-invalid 16, redundant 23
Fitness: max 0.98(85), min 0.353(1), ave 0.949
Test execution time: sum 25566 ms, max 533 ms, min 188 ms
----------------------------------------------------------------

2023-11-05 23:24:36 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-05 23:25:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 46 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 7, redundant 28
Fitness: max 0.98(99), min 0.49(1), ave 0.964
Test execution time: sum 26528 ms, max 454 ms, min 152 ms
----------------------------------------------------------------

2023-11-05 23:25:27 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-05 23:26:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 36 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 6, redundant 24
Fitness: max 0.98(93), min 0.451(1), ave 0.953
Test execution time: sum 25901 ms, max 493 ms, min 151 ms
----------------------------------------------------------------

2023-11-05 23:26:16 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-05 23:27:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 20 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 17, redundant 25
Fitness: max 0.98(81), min 0.49(1), ave 0.955
Test execution time: sum 23636 ms, max 419 ms, min 161 ms
----------------------------------------------------------------

2023-11-05 23:27:00 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-05 23:27:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 2 seconds
Variants: generated 200, build-succeeded 89, build-failed 59, syntax-invalid 12, redundant 40
Fitness: max 1(1), min 0.353(1), ave 0.954
Test execution time: sum 21820 ms, max 481 ms, min 156 ms
----------------------------------------------------------------

2023-11-05 23:27:43 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-05 23:28:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 49 seconds
Variants: generated 200, build-succeeded 106, build-failed 63, syntax-invalid 8, redundant 23
Fitness: max 0.98(93), min 0.49(1), ave 0.962
Test execution time: sum 26042 ms, max 465 ms, min 156 ms
----------------------------------------------------------------

2023-11-05 23:28:30 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-05 23:29:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 32 seconds
Variants: generated 200, build-succeeded 93, build-failed 65, syntax-invalid 13, redundant 29
Fitness: max 0.98(83), min 0.549(1), ave 0.965
Test execution time: sum 22964 ms, max 434 ms, min 181 ms
----------------------------------------------------------------

2023-11-05 23:29:13 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-05 23:30:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 22 seconds
Variants: generated 200, build-succeeded 106, build-failed 59, syntax-invalid 7, redundant 28
Fitness: max 0.98(91), min 0.235(1), ave 0.953
Test execution time: sum 26181 ms, max 548 ms, min 192 ms
----------------------------------------------------------------

2023-11-05 23:30:03 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-05 23:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 8 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 10, redundant 29
Fitness: max 0.98(81), min 0.451(1), ave 0.943
Test execution time: sum 25164 ms, max 449 ms, min 131 ms
----------------------------------------------------------------

2023-11-05 23:30:49 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-05 23:31:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 58 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 9, redundant 16
Fitness: max 1(1), min 0.353(1), ave 0.964
Test execution time: sum 27601 ms, max 463 ms, min 148 ms
----------------------------------------------------------------

2023-11-05 23:31:39 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-05 23:32:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 50 seconds
Variants: generated 200, build-succeeded 105, build-failed 66, syntax-invalid 11, redundant 18
Fitness: max 0.98(93), min 0.49(2), ave 0.954
Test execution time: sum 25773 ms, max 481 ms, min 167 ms
----------------------------------------------------------------

2023-11-05 23:32:31 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-05 23:33:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 42 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 12, redundant 13
Fitness: max 0.98(99), min 0.49(3), ave 0.954
Test execution time: sum 28041 ms, max 472 ms, min 159 ms
----------------------------------------------------------------

2023-11-05 23:33:22 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-05 23:34:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 35 seconds
Variants: generated 200, build-succeeded 109, build-failed 59, syntax-invalid 17, redundant 15
Fitness: max 0.98(93), min 0.451(1), ave 0.957
Test execution time: sum 27497 ms, max 497 ms, min 166 ms
----------------------------------------------------------------

2023-11-05 23:34:15 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-05 23:35:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 30 seconds
Variants: generated 200, build-succeeded 123, build-failed 59, syntax-invalid 7, redundant 11
Fitness: max 0.98(109), min 0.431(1), ave 0.963
Test execution time: sum 30392 ms, max 526 ms, min 157 ms
----------------------------------------------------------------

2023-11-05 23:35:10 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-05 23:36:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 20 seconds
Variants: generated 200, build-succeeded 112, build-failed 51, syntax-invalid 21, redundant 16
Fitness: max 0.98(99), min 0.353(1), ave 0.955
Test execution time: sum 27850 ms, max 506 ms, min 197 ms
----------------------------------------------------------------

2023-11-05 23:36:01 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-05 23:36:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 8 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 14, redundant 18
Fitness: max 1(1), min 0.765(2), ave 0.97
Test execution time: sum 25926 ms, max 336 ms, min 142 ms
----------------------------------------------------------------

2023-11-05 23:36:49 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-05 23:37:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 11, redundant 14
Fitness: max 0.98(99), min 0.353(1), ave 0.954
Test execution time: sum 28342 ms, max 490 ms, min 158 ms
----------------------------------------------------------------

2023-11-05 23:37:40 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-05 23:38:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 49 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 14, redundant 14
Fitness: max 1(1), min 0.549(1), ave 0.958
Test execution time: sum 28117 ms, max 350 ms, min 144 ms
----------------------------------------------------------------

2023-11-05 23:38:30 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-05 23:39:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 43 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 16, redundant 11
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 30354 ms, max 516 ms, min 155 ms
----------------------------------------------------------------

2023-11-05 23:39:24 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-05 23:40:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 29 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 19, redundant 13
Fitness: max 1(1), min 0.549(1), ave 0.957
Test execution time: sum 25364 ms, max 314 ms, min 148 ms
----------------------------------------------------------------

2023-11-05 23:40:10 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-05 23:41:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 20 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 15, redundant 12
Fitness: max 0.98(100), min 0.49(1), ave 0.957
Test execution time: sum 29725 ms, max 378 ms, min 148 ms
----------------------------------------------------------------

2023-11-05 23:41:01 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-05 23:41:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 12 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 19, redundant 19
Fitness: max 0.98(85), min 0.49(1), ave 0.952
Test execution time: sum 26608 ms, max 1734 ms, min 140 ms
----------------------------------------------------------------

2023-11-05 23:41:52 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-05 23:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 6 seconds
Variants: generated 200, build-succeeded 107, build-failed 59, syntax-invalid 15, redundant 19
Fitness: max 0.98(92), min 0.49(2), ave 0.955
Test execution time: sum 26113 ms, max 512 ms, min 178 ms
----------------------------------------------------------------

2023-11-05 23:42:47 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-05 23:43:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 2 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 13, redundant 14
Fitness: max 0.98(99), min 0.49(1), ave 0.963
Test execution time: sum 28106 ms, max 436 ms, min 161 ms
----------------------------------------------------------------

2023-11-05 23:43:43 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-05 23:44:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 0 seconds
Variants: generated 200, build-succeeded 110, build-failed 68, syntax-invalid 9, redundant 13
Fitness: max 0.98(97), min 0.49(2), ave 0.959
Test execution time: sum 27484 ms, max 448 ms, min 170 ms
----------------------------------------------------------------

2023-11-05 23:44:40 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-05 23:45:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 1 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 6, redundant 19
Fitness: max 0.98(107), min 0.275(1), ave 0.951
Test execution time: sum 31282 ms, max 1671 ms, min 183 ms
----------------------------------------------------------------

2023-11-05 23:45:41 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-05 23:46:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 53 seconds
Variants: generated 200, build-succeeded 102, build-failed 66, syntax-invalid 14, redundant 18
Fitness: max 0.98(93), min 0.667(1), ave 0.971
Test execution time: sum 25693 ms, max 473 ms, min 162 ms
----------------------------------------------------------------

2023-11-05 23:46:34 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-05 23:47:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 51 seconds
Variants: generated 200, build-succeeded 115, build-failed 64, syntax-invalid 10, redundant 11
Fitness: max 0.98(95), min 0.333(1), ave 0.951
Test execution time: sum 28529 ms, max 503 ms, min 155 ms
----------------------------------------------------------------

2023-11-05 23:47:32 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-05 23:48:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 48 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 11, redundant 17
Fitness: max 0.98(94), min 0.216(1), ave 0.956
Test execution time: sum 26787 ms, max 478 ms, min 159 ms
----------------------------------------------------------------

2023-11-05 23:48:28 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-05 23:49:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 43 seconds
Variants: generated 200, build-succeeded 107, build-failed 69, syntax-invalid 10, redundant 14
Fitness: max 0.98(100), min 0.49(1), ave 0.963
Test execution time: sum 27480 ms, max 507 ms, min 164 ms
----------------------------------------------------------------

2023-11-05 23:49:24 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-05 23:50:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 43 seconds
Variants: generated 200, build-succeeded 112, build-failed 57, syntax-invalid 9, redundant 22
Fitness: max 0.98(97), min 0.49(1), ave 0.961
Test execution time: sum 28319 ms, max 520 ms, min 173 ms
----------------------------------------------------------------

2023-11-05 23:50:23 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-05 23:51:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 42 seconds
Variants: generated 200, build-succeeded 109, build-failed 65, syntax-invalid 4, redundant 22
Fitness: max 0.98(95), min 0.667(2), ave 0.963
Test execution time: sum 27846 ms, max 495 ms, min 168 ms
----------------------------------------------------------------

2023-11-05 23:51:23 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-05 23:52:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 38 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 11, redundant 19
Fitness: max 1(2), min 0.216(2), ave 0.943
Test execution time: sum 27014 ms, max 512 ms, min 126 ms
----------------------------------------------------------------

2023-11-05 23:52:18 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-05 23:53:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 43 seconds
Variants: generated 200, build-succeeded 127, build-failed 56, syntax-invalid 6, redundant 11
Fitness: max 0.98(115), min 0.49(2), ave 0.963
Test execution time: sum 32545 ms, max 508 ms, min 207 ms
----------------------------------------------------------------

2023-11-05 23:53:23 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-05 23:54:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 40 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 16, redundant 15
Fitness: max 0.98(97), min 0.49(1), ave 0.957
Test execution time: sum 28044 ms, max 498 ms, min 194 ms
----------------------------------------------------------------

2023-11-05 23:54:21 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-05 23:55:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 42 seconds
Variants: generated 200, build-succeeded 122, build-failed 54, syntax-invalid 9, redundant 15
Fitness: max 1(1), min 0.314(1), ave 0.949
Test execution time: sum 30561 ms, max 511 ms, min 190 ms
----------------------------------------------------------------

2023-11-05 23:55:22 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-05 23:56:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 43 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 17, redundant 10
Fitness: max 0.98(101), min 0.471(1), ave 0.959
Test execution time: sum 30760 ms, max 1368 ms, min 149 ms
----------------------------------------------------------------

2023-11-05 23:56:24 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-05 23:57:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 44 seconds
Variants: generated 200, build-succeeded 123, build-failed 50, syntax-invalid 13, redundant 14
Fitness: max 1(2), min 0.49(1), ave 0.95
Test execution time: sum 30712 ms, max 473 ms, min 151 ms
----------------------------------------------------------------

2023-11-05 23:57:24 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-05 23:58:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 44 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 10, redundant 16
Fitness: max 0.98(103), min 0.294(1), ave 0.958
Test execution time: sum 29621 ms, max 510 ms, min 137 ms
----------------------------------------------------------------

2023-11-05 23:58:25 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-05 23:59:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 38 seconds
Variants: generated 200, build-succeeded 102, build-failed 61, syntax-invalid 18, redundant 19
Fitness: max 0.98(86), min 0.157(1), ave 0.944
Test execution time: sum 25005 ms, max 454 ms, min 178 ms
----------------------------------------------------------------

2023-11-05 23:59:18 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-06 00:00:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 36 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 19, redundant 11
Fitness: max 0.98(90), min 0.549(1), ave 0.954
Test execution time: sum 27151 ms, max 463 ms, min 134 ms
----------------------------------------------------------------

2023-11-06 00:00:17 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-06 00:01:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 33 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 15, redundant 17
Fitness: max 0.98(95), min 0.706(1), ave 0.963
Test execution time: sum 27726 ms, max 523 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 00:01:13 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-06 00:02:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 32 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 20, redundant 13
Fitness: max 0.98(93), min 0.49(2), ave 0.954
Test execution time: sum 28085 ms, max 456 ms, min 185 ms
----------------------------------------------------------------

2023-11-06 00:02:13 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-06 00:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 39 seconds
Variants: generated 200, build-succeeded 121, build-failed 57, syntax-invalid 9, redundant 13
Fitness: max 1(1), min 0.49(1), ave 0.956
Test execution time: sum 32795 ms, max 1440 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 00:03:19 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-06 00:04:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 41 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 11, redundant 9
Fitness: max 1(1), min 0.157(1), ave 0.949
Test execution time: sum 30902 ms, max 1429 ms, min 137 ms
----------------------------------------------------------------

2023-11-06 00:04:22 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-06 00:05:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 43 seconds
Variants: generated 200, build-succeeded 117, build-failed 64, syntax-invalid 11, redundant 8
Fitness: max 0.98(103), min 0.49(1), ave 0.954
Test execution time: sum 30344 ms, max 437 ms, min 156 ms
----------------------------------------------------------------

2023-11-06 00:05:24 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-06 00:06:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 41 seconds
Variants: generated 200, build-succeeded 108, build-failed 67, syntax-invalid 15, redundant 10
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 27399 ms, max 450 ms, min 128 ms
----------------------------------------------------------------

2023-11-06 00:06:21 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-06 00:07:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 21, redundant 12
Fitness: max 0.98(98), min 0.255(1), ave 0.966
Test execution time: sum 27870 ms, max 526 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 00:07:22 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-06 00:08:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 34 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 14, redundant 16
Fitness: max 0.98(94), min 0.49(1), ave 0.959
Test execution time: sum 26555 ms, max 467 ms, min 87 ms
----------------------------------------------------------------

2023-11-06 00:08:15 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-06 00:09:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 31 seconds
Variants: generated 200, build-succeeded 105, build-failed 66, syntax-invalid 18, redundant 11
Fitness: max 0.98(95), min 0.49(1), ave 0.965
Test execution time: sum 26872 ms, max 447 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 00:09:12 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-06 00:10:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 33 seconds
Variants: generated 200, build-succeeded 111, build-failed 66, syntax-invalid 16, redundant 7
Fitness: max 0.98(97), min 0.333(1), ave 0.951
Test execution time: sum 28898 ms, max 588 ms, min 149 ms
----------------------------------------------------------------

2023-11-06 00:10:14 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-06 00:11:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 30 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 24, redundant 11
Fitness: max 0.98(91), min 0.157(1), ave 0.954
Test execution time: sum 26777 ms, max 533 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 00:11:11 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-06 00:12:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 34 seconds
Variants: generated 200, build-succeeded 106, build-failed 63, syntax-invalid 21, redundant 10
Fitness: max 0.98(95), min 0.824(1), ave 0.97
Test execution time: sum 28929 ms, max 1380 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 00:12:14 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-06 00:13:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 33 seconds
Variants: generated 200, build-succeeded 104, build-failed 61, syntax-invalid 21, redundant 14
Fitness: max 0.98(94), min 0.49(1), ave 0.966
Test execution time: sum 28037 ms, max 1233 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 00:13:13 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-06 00:14:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 39 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 23, redundant 9
Fitness: max 0.98(91), min 0.49(1), ave 0.954
Test execution time: sum 29372 ms, max 1376 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 00:14:19 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-06 00:15:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 44 seconds
Variants: generated 200, build-succeeded 122, build-failed 56, syntax-invalid 16, redundant 6
Fitness: max 0.98(105), min 0.353(1), ave 0.959
Test execution time: sum 31788 ms, max 477 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 00:15:25 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-06 00:16:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 49 seconds
Variants: generated 200, build-succeeded 114, build-failed 62, syntax-invalid 18, redundant 6
Fitness: max 0.98(101), min 0.549(1), ave 0.96
Test execution time: sum 30728 ms, max 1314 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 00:16:30 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-06 00:17:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 56 seconds
Variants: generated 200, build-succeeded 122, build-failed 49, syntax-invalid 24, redundant 5
Fitness: max 1(1), min 0.471(1), ave 0.958
Test execution time: sum 31879 ms, max 502 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 00:17:37 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-06 00:18:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 4 seconds
Variants: generated 200, build-succeeded 119, build-failed 56, syntax-invalid 21, redundant 4
Fitness: max 1(1), min 0.216(1), ave 0.942
Test execution time: sum 30942 ms, max 506 ms, min 137 ms
----------------------------------------------------------------

2023-11-06 00:18:45 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-06 00:19:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 10 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 14, redundant 11
Fitness: max 0.98(103), min 0.333(1), ave 0.966
Test execution time: sum 29787 ms, max 490 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 00:19:51 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-06 00:20:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 15 seconds
Variants: generated 200, build-succeeded 112, build-failed 58, syntax-invalid 22, redundant 8
Fitness: max 1(1), min 0.49(3), ave 0.943
Test execution time: sum 28714 ms, max 523 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 00:20:56 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-06 00:21:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 16 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 16, redundant 10
Fitness: max 1(3), min 0.549(1), ave 0.969
Test execution time: sum 29159 ms, max 529 ms, min 91 ms
----------------------------------------------------------------

2023-11-06 00:21:57 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-06 00:22:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 18 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 26, redundant 7
Fitness: max 1(2), min 0.49(1), ave 0.96
Test execution time: sum 28098 ms, max 443 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 00:22:59 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-06 00:24:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 27 seconds
Variants: generated 200, build-succeeded 121, build-failed 48, syntax-invalid 24, redundant 7
Fitness: max 1(3), min 0.137(1), ave 0.948
Test execution time: sum 31829 ms, max 481 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 00:24:08 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-06 00:25:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 35 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 27, redundant 6
Fitness: max 0.98(95), min 0.824(1), ave 0.97
Test execution time: sum 29487 ms, max 1312 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 00:25:15 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-06 00:26:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 39 seconds
Variants: generated 200, build-succeeded 107, build-failed 59, syntax-invalid 25, redundant 9
Fitness: max 1(1), min 0.608(1), ave 0.971
Test execution time: sum 28709 ms, max 465 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 00:26:20 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-06 00:27:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 43 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 27, redundant 8
Fitness: max 1(1), min 0.471(1), ave 0.959
Test execution time: sum 28675 ms, max 484 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 00:27:24 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-06 00:28:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 53 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 29, redundant 4
Fitness: max 0.98(88), min 0.49(1), ave 0.957
Test execution time: sum 32215 ms, max 3709 ms, min 149 ms
----------------------------------------------------------------

2023-11-06 00:28:34 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-06 00:29:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 3 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 22, redundant 4
Fitness: max 0.98(104), min 0.49(2), ave 0.95
Test execution time: sum 31578 ms, max 508 ms, min 118 ms
----------------------------------------------------------------

2023-11-06 00:29:43 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-06 00:30:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 10 seconds
Variants: generated 200, build-succeeded 115, build-failed 55, syntax-invalid 23, redundant 7
Fitness: max 0.98(105), min 0.549(1), ave 0.967
Test execution time: sum 30858 ms, max 467 ms, min 145 ms
----------------------------------------------------------------

2023-11-06 00:30:50 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-06 00:31:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 16, redundant 11
Fitness: max 0.98(98), min 0.216(1), ave 0.946
Test execution time: sum 29691 ms, max 559 ms, min 138 ms
----------------------------------------------------------------

2023-11-06 00:31:58 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-06 00:33:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 25 seconds
Variants: generated 200, build-succeeded 107, build-failed 68, syntax-invalid 19, redundant 6
Fitness: max 0.98(98), min 0.824(1), ave 0.974
Test execution time: sum 28721 ms, max 537 ms, min 195 ms
----------------------------------------------------------------

2023-11-06 00:33:06 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-06 00:34:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 34 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 21, redundant 8
Fitness: max 1(1), min 0.157(1), ave 0.964
Test execution time: sum 29992 ms, max 457 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 00:34:14 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-06 00:35:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 49 seconds
Variants: generated 200, build-succeeded 125, build-failed 54, syntax-invalid 14, redundant 7
Fitness: max 0.98(110), min 0.549(3), ave 0.958
Test execution time: sum 34253 ms, max 1303 ms, min 152 ms
----------------------------------------------------------------

2023-11-06 00:35:29 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-06 00:36:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 1 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 15, redundant 12
Fitness: max 0.98(101), min 0.824(1), ave 0.972
Test execution time: sum 32533 ms, max 2884 ms, min 209 ms
----------------------------------------------------------------

2023-11-06 00:36:42 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-06 00:37:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 18 seconds
Variants: generated 200, build-succeeded 122, build-failed 58, syntax-invalid 11, redundant 9
Fitness: max 0.98(107), min 0.49(3), ave 0.955
Test execution time: sum 33063 ms, max 434 ms, min 193 ms
----------------------------------------------------------------

2023-11-06 00:37:59 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-06 00:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 32 seconds
Variants: generated 200, build-succeeded 124, build-failed 59, syntax-invalid 13, redundant 4
Fitness: max 1(1), min 0.667(2), ave 0.962
Test execution time: sum 33609 ms, max 505 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 00:39:13 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-06 00:40:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 40 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 16, redundant 7
Fitness: max 0.98(105), min 0.549(1), ave 0.966
Test execution time: sum 30060 ms, max 518 ms, min 130 ms
----------------------------------------------------------------

2023-11-06 00:40:21 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-06 00:41:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 39 seconds
Variants: generated 200, build-succeeded 119, build-failed 58, syntax-invalid 16, redundant 7
Fitness: max 0.98(100), min 0.549(2), ave 0.955
Test execution time: sum 25982 ms, max 399 ms, min 107 ms
----------------------------------------------------------------

2023-11-06 00:41:20 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-06 00:42:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 19 seconds
Variants: generated 200, build-succeeded 110, build-failed 61, syntax-invalid 22, redundant 7
Fitness: max 0.98(101), min 0.549(2), ave 0.967
Test execution time: sum 19295 ms, max 1488 ms, min 89 ms
----------------------------------------------------------------

2023-11-06 00:42:00 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-06 00:43:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 24 seconds
Variants: generated 200, build-succeeded 122, build-failed 55, syntax-invalid 17, redundant 6
Fitness: max 1(1), min 0.784(1), ave 0.971
Test execution time: sum 30307 ms, max 474 ms, min 127 ms
----------------------------------------------------------------

2023-11-06 00:43:05 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-06 00:44:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 35 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 18, redundant 8
Fitness: max 0.98(100), min 0.49(1), ave 0.956
Test execution time: sum 31064 ms, max 514 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 00:44:16 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-06 00:45:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 44 seconds
Variants: generated 200, build-succeeded 108, build-failed 64, syntax-invalid 22, redundant 6
Fitness: max 0.98(100), min 0.549(1), ave 0.968
Test execution time: sum 29369 ms, max 458 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 00:45:25 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-06 00:46:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 58 seconds
Variants: generated 200, build-succeeded 120, build-failed 53, syntax-invalid 17, redundant 10
Fitness: max 0.98(104), min 0.49(2), ave 0.958
Test execution time: sum 32339 ms, max 556 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 00:46:39 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-06 00:47:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 12 seconds
Variants: generated 200, build-succeeded 117, build-failed 66, syntax-invalid 9, redundant 8
Fitness: max 0.98(105), min 0.569(2), ave 0.964
Test execution time: sum 31845 ms, max 535 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 00:47:53 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-06 00:48:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 18 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 29, redundant 6
Fitness: max 0.98(106), min 0.529(1), ave 0.974
Test execution time: sum 29133 ms, max 513 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 00:48:58 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-06 00:50:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 30 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 16, redundant 6
Fitness: max 0.98(105), min 0.353(1), ave 0.96
Test execution time: sum 31171 ms, max 473 ms, min 187 ms
----------------------------------------------------------------

2023-11-06 00:50:11 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-06 00:51:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 46 seconds
Variants: generated 200, build-succeeded 129, build-failed 56, syntax-invalid 8, redundant 7
Fitness: max 1(1), min 0.49(2), ave 0.958
Test execution time: sum 33117 ms, max 526 ms, min 96 ms
----------------------------------------------------------------

2023-11-06 00:51:27 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-06 00:52:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 54 seconds
Variants: generated 200, build-succeeded 112, build-failed 58, syntax-invalid 21, redundant 9
Fitness: max 1(1), min 0.529(1), ave 0.967
Test execution time: sum 29879 ms, max 505 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 00:52:35 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-06 00:53:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 11 seconds
Variants: generated 200, build-succeeded 124, build-failed 61, syntax-invalid 8, redundant 7
Fitness: max 0.98(118), min 0.49(3), ave 0.967
Test execution time: sum 33917 ms, max 1310 ms, min 149 ms
----------------------------------------------------------------

2023-11-06 00:53:52 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-06 00:55:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 22 seconds
Variants: generated 200, build-succeeded 119, build-failed 58, syntax-invalid 14, redundant 9
Fitness: max 1(1), min 0.353(1), ave 0.97
Test execution time: sum 31660 ms, max 478 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 00:55:03 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-06 00:56:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 37 seconds
Variants: generated 200, build-succeeded 120, build-failed 54, syntax-invalid 14, redundant 12
Fitness: max 0.98(108), min 0.255(1), ave 0.959
Test execution time: sum 33139 ms, max 1240 ms, min 175 ms
----------------------------------------------------------------

2023-11-06 00:56:17 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-06 00:57:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 48 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 13, redundant 11
Fitness: max 1(1), min 0.686(1), ave 0.971
Test execution time: sum 29996 ms, max 485 ms, min 193 ms
----------------------------------------------------------------

2023-11-06 00:57:29 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-06 00:58:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 2 seconds
Variants: generated 200, build-succeeded 120, build-failed 60, syntax-invalid 13, redundant 7
Fitness: max 0.98(110), min 0.569(1), ave 0.968
Test execution time: sum 31811 ms, max 489 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 00:58:42 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-06 00:59:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 15 seconds
Variants: generated 200, build-succeeded 115, build-failed 64, syntax-invalid 12, redundant 9
Fitness: max 0.98(106), min 0.569(1), ave 0.967
Test execution time: sum 30713 ms, max 492 ms, min 123 ms
----------------------------------------------------------------

2023-11-06 00:59:56 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-06 01:01:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 28 seconds
Variants: generated 200, build-succeeded 123, build-failed 52, syntax-invalid 12, redundant 13
Fitness: max 0.98(111), min 0.49(2), ave 0.956
Test execution time: sum 32341 ms, max 483 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 01:01:09 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-06 01:02:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 35 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 21, redundant 16
Fitness: max 0.98(95), min 0.157(1), ave 0.966
Test execution time: sum 27127 ms, max 523 ms, min 170 ms
----------------------------------------------------------------

2023-11-06 01:02:16 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-06 01:03:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 48 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 16, redundant 14
Fitness: max 0.98(104), min 0.157(1), ave 0.959
Test execution time: sum 31069 ms, max 495 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 01:03:29 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-06 01:04:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 9 seconds
Variants: generated 200, build-succeeded 130, build-failed 45, syntax-invalid 11, redundant 14
Fitness: max 0.98(115), min 0.216(1), ave 0.96
Test execution time: sum 35085 ms, max 1408 ms, min 171 ms
----------------------------------------------------------------

2023-11-06 01:04:50 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-06 01:06:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 20 seconds
Variants: generated 200, build-succeeded 113, build-failed 50, syntax-invalid 21, redundant 16
Fitness: max 0.98(96), min 0.275(1), ave 0.948
Test execution time: sum 29579 ms, max 521 ms, min 193 ms
----------------------------------------------------------------

2023-11-06 01:06:01 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-06 01:07:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 18, redundant 9
Fitness: max 0.98(103), min 0.549(1), ave 0.966
Test execution time: sum 30403 ms, max 465 ms, min 184 ms
----------------------------------------------------------------

2023-11-06 01:07:13 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-06 01:08:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 48 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 18, redundant 9
Fitness: max 0.98(106), min 0.49(1), ave 0.955
Test execution time: sum 33769 ms, max 1225 ms, min 175 ms
----------------------------------------------------------------

2023-11-06 01:08:28 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-06 01:09:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 0 seconds
Variants: generated 200, build-succeeded 115, build-failed 55, syntax-invalid 18, redundant 12
Fitness: max 0.98(104), min 0.569(1), ave 0.963
Test execution time: sum 30578 ms, max 522 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 01:09:41 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-06 01:10:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 11 seconds
Variants: generated 200, build-succeeded 111, build-failed 50, syntax-invalid 18, redundant 21
Fitness: max 0.98(101), min 0.471(1), ave 0.966
Test execution time: sum 29794 ms, max 490 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 01:10:51 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-06 01:12:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 24 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 16, redundant 11
Fitness: max 1(1), min 0.294(1), ave 0.956
Test execution time: sum 30462 ms, max 465 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 01:12:05 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-06 01:13:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 37 seconds
Variants: generated 200, build-succeeded 114, build-failed 62, syntax-invalid 12, redundant 12
Fitness: max 0.98(106), min 0.549(1), ave 0.968
Test execution time: sum 29557 ms, max 498 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 01:13:18 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-06 01:14:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 52 seconds
Variants: generated 200, build-succeeded 107, build-failed 71, syntax-invalid 13, redundant 9
Fitness: max 0.98(95), min 0.529(2), ave 0.96
Test execution time: sum 29617 ms, max 1114 ms, min 167 ms
----------------------------------------------------------------

2023-11-06 01:14:33 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-06 01:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 7 seconds
Variants: generated 200, build-succeeded 120, build-failed 49, syntax-invalid 17, redundant 14
Fitness: max 0.98(99), min 0.294(1), ave 0.943
Test execution time: sum 32816 ms, max 2302 ms, min 86 ms
----------------------------------------------------------------

2023-11-06 01:15:48 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-06 01:17:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 28 seconds
Variants: generated 200, build-succeeded 122, build-failed 55, syntax-invalid 16, redundant 7
Fitness: max 0.98(106), min 0.549(2), ave 0.961
Test execution time: sum 33646 ms, max 532 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 01:17:08 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-06 01:18:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 46 seconds
Variants: generated 200, build-succeeded 121, build-failed 53, syntax-invalid 15, redundant 11
Fitness: max 0.98(107), min 0.569(1), ave 0.965
Test execution time: sum 32920 ms, max 569 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 01:18:27 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-06 01:19:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 5 seconds
Variants: generated 200, build-succeeded 118, build-failed 53, syntax-invalid 15, redundant 14
Fitness: max 0.98(107), min 0.49(1), ave 0.963
Test execution time: sum 31549 ms, max 561 ms, min 128 ms
----------------------------------------------------------------

2023-11-06 01:19:46 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-06 01:21:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 26 seconds
Variants: generated 200, build-succeeded 121, build-failed 53, syntax-invalid 12, redundant 14
Fitness: max 0.98(104), min 0.235(1), ave 0.953
Test execution time: sum 32623 ms, max 480 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 01:21:07 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-06 01:22:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 46 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 23, redundant 8
Fitness: max 0.98(95), min 0.49(1), ave 0.967
Test execution time: sum 30425 ms, max 1300 ms, min 153 ms
----------------------------------------------------------------

2023-11-06 01:22:27 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-11-06 01:23:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 0 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 19, redundant 20
Fitness: max 1(1), min 0.843(1), ave 0.974
Test execution time: sum 28813 ms, max 497 ms, min 202 ms
----------------------------------------------------------------

2023-11-06 01:23:41 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-11-06 01:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 18 seconds
Variants: generated 200, build-succeeded 123, build-failed 51, syntax-invalid 15, redundant 11
Fitness: max 0.98(109), min 0.49(1), ave 0.958
Test execution time: sum 32560 ms, max 591 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 01:24:59 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-11-06 01:26:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 39 seconds
Variants: generated 200, build-succeeded 123, build-failed 53, syntax-invalid 13, redundant 11
Fitness: max 0.98(111), min 0.49(2), ave 0.962
Test execution time: sum 33114 ms, max 479 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 01:26:20 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-11-06 01:27:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 58 seconds
Variants: generated 200, build-succeeded 121, build-failed 50, syntax-invalid 18, redundant 11
Fitness: max 1(1), min 0.667(1), ave 0.965
Test execution time: sum 32294 ms, max 512 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 01:27:39 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-11-06 01:29:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 22 seconds
Variants: generated 200, build-succeeded 116, build-failed 50, syntax-invalid 19, redundant 15
Fitness: max 0.98(103), min 0.49(1), ave 0.965
Test execution time: sum 32710 ms, max 1252 ms, min 173 ms
----------------------------------------------------------------

2023-11-06 01:29:02 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-11-06 01:30:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 41 seconds
Variants: generated 200, build-succeeded 124, build-failed 51, syntax-invalid 11, redundant 14
Fitness: max 0.98(112), min 0.235(1), ave 0.951
Test execution time: sum 32693 ms, max 448 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 01:30:22 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-11-06 01:31:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 59 seconds
Variants: generated 200, build-succeeded 121, build-failed 47, syntax-invalid 14, redundant 18
Fitness: max 0.98(109), min 0.588(1), ave 0.964
Test execution time: sum 31719 ms, max 497 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 01:31:40 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-11-06 01:32:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 17 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 16, redundant 8
Fitness: max 1(1), min 0.471(1), ave 0.963
Test execution time: sum 30613 ms, max 525 ms, min 193 ms
----------------------------------------------------------------

2023-11-06 01:32:58 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-11-06 01:34:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 48 seconds
Variants: generated 200, build-succeeded 128, build-failed 64, syntax-invalid 5, redundant 3
Fitness: max 1(1), min 0.353(1), ave 0.958
Test execution time: sum 37629 ms, max 3680 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 01:34:29 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-11-06 01:35:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 13 seconds
Variants: generated 200, build-succeeded 126, build-failed 54, syntax-invalid 12, redundant 8
Fitness: max 1(1), min 0.275(1), ave 0.962
Test execution time: sum 34023 ms, max 530 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 01:35:53 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-11-06 01:37:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 33 seconds
Variants: generated 200, build-succeeded 123, build-failed 54, syntax-invalid 13, redundant 10
Fitness: max 1(1), min 0.157(1), ave 0.947
Test execution time: sum 33051 ms, max 482 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 01:37:13 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-11-06 01:38:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 53 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 16, redundant 11
Fitness: max 0.98(103), min 0.49(1), ave 0.963
Test execution time: sum 30439 ms, max 437 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 01:38:33 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-11-06 01:39:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 10 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 16, redundant 19
Fitness: max 1(2), min 0.49(2), ave 0.968
Test execution time: sum 29421 ms, max 546 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 01:39:51 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-11-06 01:41:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 30 seconds
Variants: generated 200, build-succeeded 115, build-failed 66, syntax-invalid 11, redundant 8
Fitness: max 0.98(104), min 0.49(2), ave 0.961
Test execution time: sum 31131 ms, max 476 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 01:41:11 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-11-06 01:42:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 49 seconds
Variants: generated 200, build-succeeded 113, build-failed 66, syntax-invalid 19, redundant 2
Fitness: max 0.98(103), min 0.353(1), ave 0.953
Test execution time: sum 30593 ms, max 464 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 01:42:30 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-11-06 01:43:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 7 seconds
Variants: generated 200, build-succeeded 108, build-failed 62, syntax-invalid 19, redundant 11
Fitness: max 0.98(97), min 0.431(1), ave 0.962
Test execution time: sum 29572 ms, max 488 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 01:43:47 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-11-06 01:45:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 31 seconds
Variants: generated 200, build-succeeded 115, build-failed 63, syntax-invalid 13, redundant 9
Fitness: max 1(1), min 0.549(1), ave 0.964
Test execution time: sum 31949 ms, max 532 ms, min 199 ms
----------------------------------------------------------------

2023-11-06 01:45:12 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-11-06 01:46:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 54 seconds
Variants: generated 200, build-succeeded 120, build-failed 54, syntax-invalid 18, redundant 8
Fitness: max 1(1), min 0.216(1), ave 0.96
Test execution time: sum 34117 ms, max 1350 ms, min 204 ms
----------------------------------------------------------------

2023-11-06 01:46:35 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-11-06 01:47:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 18 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 19, redundant 7
Fitness: max 1(1), min 0.784(1), ave 0.972
Test execution time: sum 32262 ms, max 516 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 01:47:58 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-11-06 01:49:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 45 seconds
Variants: generated 200, build-succeeded 123, build-failed 51, syntax-invalid 9, redundant 17
Fitness: max 0.98(107), min 0.353(1), ave 0.941
Test execution time: sum 35084 ms, max 1274 ms, min 177 ms
----------------------------------------------------------------

2023-11-06 01:49:25 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-11-06 01:50:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 9 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 11, redundant 8
Fitness: max 0.98(112), min 0.49(1), ave 0.969
Test execution time: sum 33236 ms, max 487 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 01:50:50 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-11-06 01:52:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 32 seconds
Variants: generated 200, build-succeeded 122, build-failed 54, syntax-invalid 12, redundant 12
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 34194 ms, max 488 ms, min 200 ms
----------------------------------------------------------------

2023-11-06 01:52:13 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-11-06 01:53:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 49 seconds
Variants: generated 200, build-succeeded 122, build-failed 58, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0.549(1), ave 0.968
Test execution time: sum 30193 ms, max 511 ms, min 113 ms
----------------------------------------------------------------

2023-11-06 01:53:30 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-11-06 01:54:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 14 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 14, redundant 10
Fitness: max 0.98(105), min 0.725(1), ave 0.972
Test execution time: sum 34368 ms, max 2033 ms, min 138 ms
----------------------------------------------------------------

2023-11-06 01:54:55 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-11-06 01:56:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 49 minutes 45 seconds
Variants: generated 200, build-succeeded 124, build-failed 61, syntax-invalid 7, redundant 8
Fitness: max 1(1), min 0.333(1), ave 0.967
Test execution time: sum 34706 ms, max 528 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 01:56:25 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-11-06 01:57:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 12 seconds
Variants: generated 200, build-succeeded 124, build-failed 60, syntax-invalid 4, redundant 12
Fitness: max 0.98(117), min 0.725(1), ave 0.973
Test execution time: sum 34080 ms, max 535 ms, min 208 ms
----------------------------------------------------------------

2023-11-06 01:57:52 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-11-06 01:59:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 45 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 10, redundant 14
Fitness: max 0.98(106), min 0.49(2), ave 0.953
Test execution time: sum 35691 ms, max 1051 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 01:59:26 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-11-06 02:00:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 minutes 13 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 9, redundant 13
Fitness: max 0.98(109), min 0.588(1), ave 0.969
Test execution time: sum 32875 ms, max 572 ms, min 152 ms
----------------------------------------------------------------

2023-11-06 02:00:53 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-11-06 02:02:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 43 seconds
Variants: generated 200, build-succeeded 120, build-failed 58, syntax-invalid 12, redundant 10
Fitness: max 0.98(115), min 0.49(1), ave 0.97
Test execution time: sum 34324 ms, max 464 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 02:02:23 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-11-06 02:03:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 12 seconds
Variants: generated 200, build-succeeded 124, build-failed 55, syntax-invalid 7, redundant 14
Fitness: max 0.98(113), min 0.49(1), ave 0.965
Test execution time: sum 34837 ms, max 555 ms, min 207 ms
----------------------------------------------------------------

2023-11-06 02:03:53 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-11-06 02:05:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 47 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 11, redundant 10
Fitness: max 0.98(107), min 0.157(1), ave 0.954
Test execution time: sum 34355 ms, max 1441 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 02:05:27 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-11-06 02:06:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 14, redundant 11
Fitness: max 0.98(103), min 0.49(1), ave 0.965
Test execution time: sum 32505 ms, max 563 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 02:06:53 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-11-06 02:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 44 seconds
Variants: generated 200, build-succeeded 121, build-failed 51, syntax-invalid 17, redundant 11
Fitness: max 1(1), min 0.549(1), ave 0.964
Test execution time: sum 34921 ms, max 1174 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 02:08:25 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-11-06 02:09:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 8 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 23, redundant 4
Fitness: max 0.98(96), min 0.431(1), ave 0.945
Test execution time: sum 31652 ms, max 537 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 02:09:49 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-11-06 02:11:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 35 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 17, redundant 9
Fitness: max 0.98(103), min 0.49(1), ave 0.969
Test execution time: sum 33355 ms, max 2549 ms, min 161 ms
----------------------------------------------------------------

2023-11-06 02:11:16 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-11-06 02:12:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 18, redundant 10
Fitness: max 0.98(100), min 0.216(1), ave 0.953
Test execution time: sum 32024 ms, max 586 ms, min 140 ms
----------------------------------------------------------------

2023-11-06 02:12:40 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-11-06 02:14:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 26 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 17, redundant 8
Fitness: max 0.98(106), min 0.353(1), ave 0.959
Test execution time: sum 33590 ms, max 543 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 02:14:07 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-11-06 02:15:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 55 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 19, redundant 11
Fitness: max 1(1), min 0.294(1), ave 0.957
Test execution time: sum 32745 ms, max 523 ms, min 165 ms
----------------------------------------------------------------

2023-11-06 02:15:36 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-11-06 02:16:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 18 seconds
Variants: generated 200, build-succeeded 113, build-failed 48, syntax-invalid 29, redundant 10
Fitness: max 0.98(96), min 0.549(1), ave 0.957
Test execution time: sum 32022 ms, max 522 ms, min 148 ms
----------------------------------------------------------------

2023-11-06 02:16:59 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-11-06 02:18:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 49 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 21, redundant 7
Fitness: max 0.98(93), min 0.667(1), ave 0.966
Test execution time: sum 32266 ms, max 1448 ms, min 200 ms
----------------------------------------------------------------

2023-11-06 02:18:30 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-11-06 02:20:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 23 seconds
Variants: generated 200, build-succeeded 117, build-failed 59, syntax-invalid 17, redundant 7
Fitness: max 0.98(103), min 0.588(1), ave 0.963
Test execution time: sum 34859 ms, max 1327 ms, min 201 ms
----------------------------------------------------------------

2023-11-06 02:20:04 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-11-06 02:21:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 55 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 17, redundant 6
Fitness: max 1(1), min 0.765(1), ave 0.973
Test execution time: sum 33848 ms, max 548 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 02:21:35 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-11-06 02:23:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 22 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 20, redundant 15
Fitness: max 0.98(103), min 0.549(1), ave 0.969
Test execution time: sum 31479 ms, max 508 ms, min 173 ms
----------------------------------------------------------------

2023-11-06 02:23:02 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-11-06 02:24:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 54 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 13, redundant 9
Fitness: max 0.98(106), min 0.49(2), ave 0.962
Test execution time: sum 34240 ms, max 483 ms, min 193 ms
----------------------------------------------------------------

2023-11-06 02:24:35 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-11-06 02:26:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 26 seconds
Variants: generated 200, build-succeeded 125, build-failed 56, syntax-invalid 9, redundant 10
Fitness: max 0.98(117), min 0.549(1), ave 0.971
Test execution time: sum 36572 ms, max 471 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 02:26:07 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-11-06 02:27:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 57 seconds
Variants: generated 200, build-succeeded 112, build-failed 50, syntax-invalid 19, redundant 19
Fitness: max 0.98(102), min 0.569(1), ave 0.968
Test execution time: sum 32161 ms, max 575 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 02:27:37 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-11-06 02:29:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 22 minutes 27 seconds
Variants: generated 200, build-succeeded 114, build-failed 69, syntax-invalid 12, redundant 5
Fitness: max 0.98(106), min 0.157(1), ave 0.967
Test execution time: sum 32832 ms, max 572 ms, min 214 ms
----------------------------------------------------------------

2023-11-06 02:29:08 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-11-06 02:30:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 4 seconds
Variants: generated 200, build-succeeded 125, build-failed 56, syntax-invalid 12, redundant 7
Fitness: max 0.98(110), min 0.569(1), ave 0.966
Test execution time: sum 35817 ms, max 491 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 02:30:45 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-11-06 02:32:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 40 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 13, redundant 11
Fitness: max 0.98(106), min 0.235(1), ave 0.948
Test execution time: sum 35031 ms, max 508 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 02:32:21 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-11-06 02:33:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 14 seconds
Variants: generated 200, build-succeeded 119, build-failed 56, syntax-invalid 16, redundant 9
Fitness: max 0.98(103), min 0.49(2), ave 0.955
Test execution time: sum 34233 ms, max 470 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 02:33:55 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-11-06 02:35:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 50 seconds
Variants: generated 200, build-succeeded 120, build-failed 65, syntax-invalid 11, redundant 4
Fitness: max 0.98(108), min 0.471(1), ave 0.962
Test execution time: sum 34806 ms, max 463 ms, min 204 ms
----------------------------------------------------------------

2023-11-06 02:35:31 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-11-06 02:37:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 28 seconds
Variants: generated 200, build-succeeded 118, build-failed 59, syntax-invalid 16, redundant 7
Fitness: max 0.98(105), min 0.529(1), ave 0.968
Test execution time: sum 34906 ms, max 533 ms, min 208 ms
----------------------------------------------------------------

2023-11-06 02:37:09 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-11-06 02:38:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 1 seconds
Variants: generated 200, build-succeeded 124, build-failed 49, syntax-invalid 17, redundant 10
Fitness: max 0.98(110), min 0.49(1), ave 0.962
Test execution time: sum 36019 ms, max 510 ms, min 212 ms
----------------------------------------------------------------

2023-11-06 02:38:42 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-11-06 02:40:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 33 minutes 27 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 20, redundant 13
Fitness: max 0.98(99), min 0.49(1), ave 0.969
Test execution time: sum 31231 ms, max 493 ms, min 218 ms
----------------------------------------------------------------

2023-11-06 02:40:07 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-11-06 02:41:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 49 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 25, redundant 5
Fitness: max 0.98(95), min 0.549(2), ave 0.955
Test execution time: sum 30063 ms, max 464 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 02:41:30 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-11-06 02:43:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 23 seconds
Variants: generated 200, build-succeeded 118, build-failed 64, syntax-invalid 11, redundant 7
Fitness: max 0.98(108), min 0.667(1), ave 0.97
Test execution time: sum 33984 ms, max 1274 ms, min 199 ms
----------------------------------------------------------------

2023-11-06 02:43:03 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-11-06 02:44:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 53 seconds
Variants: generated 200, build-succeeded 118, build-failed 58, syntax-invalid 17, redundant 7
Fitness: max 0.98(107), min 0.667(2), ave 0.968
Test execution time: sum 33347 ms, max 532 ms, min 151 ms
----------------------------------------------------------------

2023-11-06 02:44:34 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-11-06 02:46:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 28 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 18, redundant 8
Fitness: max 0.98(105), min 0.157(1), ave 0.953
Test execution time: sum 33478 ms, max 530 ms, min 204 ms
----------------------------------------------------------------

2023-11-06 02:46:08 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-11-06 02:47:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 7 seconds
Variants: generated 200, build-succeeded 123, build-failed 53, syntax-invalid 13, redundant 11
Fitness: max 0.98(111), min 0.588(1), ave 0.968
Test execution time: sum 37159 ms, max 1118 ms, min 184 ms
----------------------------------------------------------------

2023-11-06 02:47:48 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-11-06 02:49:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 39 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 23, redundant 11
Fitness: max 0.98(99), min 0.784(1), ave 0.968
Test execution time: sum 33623 ms, max 2194 ms, min 177 ms
----------------------------------------------------------------

2023-11-06 02:49:19 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-11-06 02:50:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 16 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 29, redundant 4
Fitness: max 0.98(96), min 0.765(2), ave 0.966
Test execution time: sum 34742 ms, max 1353 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 02:50:57 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-11-06 02:52:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 45 minutes 46 seconds
Variants: generated 200, build-succeeded 102, build-failed 67, syntax-invalid 23, redundant 8
Fitness: max 0.98(91), min 0.235(1), ave 0.958
Test execution time: sum 29813 ms, max 533 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 02:52:26 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-11-06 02:54:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 47 minutes 20 seconds
Variants: generated 200, build-succeeded 110, build-failed 52, syntax-invalid 22, redundant 16
Fitness: max 0.98(102), min 0.235(1), ave 0.964
Test execution time: sum 32686 ms, max 507 ms, min 215 ms
----------------------------------------------------------------

2023-11-06 02:54:01 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-11-06 02:55:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 48 minutes 59 seconds
Variants: generated 200, build-succeeded 122, build-failed 56, syntax-invalid 12, redundant 10
Fitness: max 0.98(109), min 0.667(1), ave 0.967
Test execution time: sum 36287 ms, max 541 ms, min 209 ms
----------------------------------------------------------------

2023-11-06 02:55:40 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-11-06 02:57:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 37 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 14, redundant 12
Fitness: max 0.98(107), min 0.49(1), ave 0.968
Test execution time: sum 35253 ms, max 528 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 02:57:18 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-11-06 02:58:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 52 minutes 14 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 19, redundant 8
Fitness: max 0.98(108), min 0.569(1), ave 0.966
Test execution time: sum 35420 ms, max 517 ms, min 169 ms
----------------------------------------------------------------

2023-11-06 02:58:55 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-11-06 03:00:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 53 minutes 44 seconds
Variants: generated 200, build-succeeded 108, build-failed 64, syntax-invalid 22, redundant 6
Fitness: max 0.98(96), min 0.49(1), ave 0.963
Test execution time: sum 30453 ms, max 514 ms, min 161 ms
----------------------------------------------------------------

2023-11-06 03:00:25 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-11-06 03:01:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 22, redundant 8
Fitness: max 0.98(103), min 0.49(2), ave 0.963
Test execution time: sum 32566 ms, max 518 ms, min 218 ms
----------------------------------------------------------------

2023-11-06 03:01:59 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-11-06 03:03:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 56 minutes 56 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 23, redundant 7
Fitness: max 0.98(104), min 0.549(1), ave 0.968
Test execution time: sum 34111 ms, max 1231 ms, min 158 ms
----------------------------------------------------------------

2023-11-06 03:03:37 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-11-06 03:05:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 24 seconds
Variants: generated 200, build-succeeded 107, build-failed 54, syntax-invalid 31, redundant 8
Fitness: max 1(1), min 0.765(1), ave 0.968
Test execution time: sum 30975 ms, max 549 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 03:05:04 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-11-06 03:06:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 59 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 25, redundant 7
Fitness: max 0.98(96), min 0.588(1), ave 0.968
Test execution time: sum 31883 ms, max 598 ms, min 201 ms
----------------------------------------------------------------

2023-11-06 03:06:40 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-11-06 03:08:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 1 minutes 34 seconds
Variants: generated 200, build-succeeded 112, build-failed 57, syntax-invalid 23, redundant 8
Fitness: max 0.98(101), min 0.49(2), ave 0.962
Test execution time: sum 32410 ms, max 487 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 03:08:15 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-11-06 03:09:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 3 minutes 19 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 21, redundant 4
Fitness: max 0.98(104), min 0.235(1), ave 0.961
Test execution time: sum 36711 ms, max 1464 ms, min 210 ms
----------------------------------------------------------------

2023-11-06 03:09:59 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-11-06 03:11:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 4 minutes 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 20, redundant 11
Fitness: max 0.98(101), min 0.431(1), ave 0.965
Test execution time: sum 32644 ms, max 552 ms, min 199 ms
----------------------------------------------------------------

2023-11-06 03:11:33 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-11-06 03:13:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 26 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 23, redundant 14
Fitness: max 0.98(86), min 0.49(1), ave 0.958
Test execution time: sum 32685 ms, max 2212 ms, min 160 ms
----------------------------------------------------------------

2023-11-06 03:13:07 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-11-06 03:14:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 58 seconds
Variants: generated 200, build-succeeded 107, build-failed 50, syntax-invalid 36, redundant 7
Fitness: max 0.98(96), min 0.353(1), ave 0.962
Test execution time: sum 31423 ms, max 540 ms, min 207 ms
----------------------------------------------------------------

2023-11-06 03:14:39 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-11-06 03:16:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 32 seconds
Variants: generated 200, build-succeeded 108, build-failed 62, syntax-invalid 22, redundant 8
Fitness: max 0.98(97), min 0.725(1), ave 0.968
Test execution time: sum 30955 ms, max 584 ms, min 130 ms
----------------------------------------------------------------

2023-11-06 03:16:12 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-11-06 03:17:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 11 minutes 15 seconds
Variants: generated 200, build-succeeded 122, build-failed 54, syntax-invalid 10, redundant 14
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 35676 ms, max 501 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 03:17:56 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-11-06 03:19:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 3 seconds
Variants: generated 200, build-succeeded 131, build-failed 48, syntax-invalid 11, redundant 10
Fitness: max 0.98(110), min 0.49(2), ave 0.96
Test execution time: sum 39822 ms, max 1273 ms, min 207 ms
----------------------------------------------------------------

2023-11-06 03:19:44 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-11-06 03:21:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 minutes 44 seconds
Variants: generated 200, build-succeeded 116, build-failed 63, syntax-invalid 18, redundant 3
Fitness: max 0.98(106), min 0.784(2), ave 0.97
Test execution time: sum 34748 ms, max 547 ms, min 208 ms
----------------------------------------------------------------

2023-11-06 03:21:25 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-11-06 03:23:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 29 seconds
Variants: generated 200, build-succeeded 112, build-failed 65, syntax-invalid 14, redundant 9
Fitness: max 0.98(102), min 0.588(1), ave 0.971
Test execution time: sum 34916 ms, max 1318 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 03:23:10 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-11-06 03:24:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 14 seconds
Variants: generated 200, build-succeeded 120, build-failed 56, syntax-invalid 15, redundant 9
Fitness: max 0.98(107), min 0.49(1), ave 0.955
Test execution time: sum 35930 ms, max 515 ms, min 209 ms
----------------------------------------------------------------

2023-11-06 03:24:54 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-11-06 03:26:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 54 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 21, redundant 13
Fitness: max 0.98(101), min 0.569(1), ave 0.962
Test execution time: sum 33691 ms, max 562 ms, min 216 ms
----------------------------------------------------------------

2023-11-06 03:26:35 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-11-06 03:28:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 36 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 18, redundant 9
Fitness: max 0.98(106), min 0.235(1), ave 0.967
Test execution time: sum 33536 ms, max 490 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 03:28:17 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-11-06 03:29:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 23 minutes 10 seconds
Variants: generated 200, build-succeeded 103, build-failed 65, syntax-invalid 20, redundant 12
Fitness: max 1(1), min 0.549(2), ave 0.968
Test execution time: sum 30357 ms, max 507 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 03:29:51 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-11-06 03:31:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 24 minutes 49 seconds
Variants: generated 200, build-succeeded 107, build-failed 66, syntax-invalid 17, redundant 10
Fitness: max 0.98(100), min 0.49(2), ave 0.967
Test execution time: sum 31559 ms, max 541 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 03:31:30 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-11-06 03:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 26 minutes 37 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 16, redundant 7
Fitness: max 0.98(103), min 0.529(1), ave 0.968
Test execution time: sum 35556 ms, max 1548 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 03:33:18 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-11-06 03:34:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 15 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 22, redundant 13
Fitness: max 0.98(93), min 0.49(1), ave 0.962
Test execution time: sum 31380 ms, max 526 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 03:34:56 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-11-06 03:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 29 minutes 55 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 21, redundant 6
Fitness: max 0.98(105), min 0.49(1), ave 0.968
Test execution time: sum 33451 ms, max 621 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 03:36:36 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-11-06 03:38:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 31 minutes 35 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 25, redundant 5
Fitness: max 0.98(98), min 0.471(1), ave 0.954
Test execution time: sum 33847 ms, max 497 ms, min 215 ms
----------------------------------------------------------------

2023-11-06 03:38:15 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-11-06 03:40:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 33 minutes 25 seconds
Variants: generated 200, build-succeeded 119, build-failed 67, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0.667(1), ave 0.973
Test execution time: sum 37745 ms, max 2116 ms, min 209 ms
----------------------------------------------------------------

2023-11-06 03:40:06 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-11-06 03:41:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 35 minutes 11 seconds
Variants: generated 200, build-succeeded 122, build-failed 54, syntax-invalid 17, redundant 7
Fitness: max 1(1), min 0.471(1), ave 0.951
Test execution time: sum 37870 ms, max 1473 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 03:41:52 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-11-06 03:43:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 36 minutes 56 seconds
Variants: generated 200, build-succeeded 113, build-failed 56, syntax-invalid 21, redundant 10
Fitness: max 0.98(101), min 0.275(1), ave 0.96
Test execution time: sum 34664 ms, max 1316 ms, min 131 ms
----------------------------------------------------------------

2023-11-06 03:43:36 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-11-06 03:45:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 49 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 17, redundant 8
Fitness: max 0.98(107), min 0.49(1), ave 0.962
Test execution time: sum 38676 ms, max 2082 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 03:45:30 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-11-06 03:47:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 40 minutes 34 seconds
Variants: generated 200, build-succeeded 113, build-failed 53, syntax-invalid 22, redundant 12
Fitness: max 0.98(100), min 0.314(1), ave 0.961
Test execution time: sum 35092 ms, max 1921 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 03:47:15 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-11-06 03:48:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 17 seconds
Variants: generated 200, build-succeeded 113, build-failed 52, syntax-invalid 22, redundant 13
Fitness: max 0.98(103), min 0.471(1), ave 0.962
Test execution time: sum 32675 ms, max 519 ms, min 157 ms
----------------------------------------------------------------

2023-11-06 03:48:57 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-11-06 03:50:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 43 minutes 58 seconds
Variants: generated 200, build-succeeded 109, build-failed 53, syntax-invalid 22, redundant 16
Fitness: max 0.98(99), min 0.765(1), ave 0.971
Test execution time: sum 31628 ms, max 522 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 03:50:38 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-11-06 03:52:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 45 minutes 39 seconds
Variants: generated 200, build-succeeded 111, build-failed 54, syntax-invalid 26, redundant 9
Fitness: max 0.98(93), min 0.49(1), ave 0.957
Test execution time: sum 33960 ms, max 2172 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 03:52:20 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-11-06 03:54:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 21 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 15, redundant 10
Fitness: max 0.98(106), min 0.549(2), ave 0.968
Test execution time: sum 33492 ms, max 552 ms, min 204 ms
----------------------------------------------------------------

2023-11-06 03:54:01 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-11-06 03:55:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 49 minutes 9 seconds
Variants: generated 200, build-succeeded 119, build-failed 51, syntax-invalid 20, redundant 10
Fitness: max 1(1), min 0.353(1), ave 0.963
Test execution time: sum 36338 ms, max 1200 ms, min 196 ms
----------------------------------------------------------------

2023-11-06 03:55:50 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-11-06 03:57:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 50 minutes 49 seconds
Variants: generated 200, build-succeeded 105, build-failed 57, syntax-invalid 28, redundant 10
Fitness: max 0.98(95), min 0.529(1), ave 0.966
Test execution time: sum 30917 ms, max 557 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 03:57:30 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-11-06 03:59:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 52 minutes 39 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 19, redundant 8
Fitness: max 1(1), min 0.686(1), ave 0.966
Test execution time: sum 37063 ms, max 3880 ms, min 172 ms
----------------------------------------------------------------

2023-11-06 03:59:19 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-11-06 04:01:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 54 minutes 20 seconds
Variants: generated 200, build-succeeded 109, build-failed 73, syntax-invalid 13, redundant 5
Fitness: max 0.98(101), min 0.235(1), ave 0.966
Test execution time: sum 31723 ms, max 519 ms, min 120 ms
----------------------------------------------------------------

2023-11-06 04:01:01 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-11-06 04:02:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 55 minutes 57 seconds
Variants: generated 200, build-succeeded 122, build-failed 49, syntax-invalid 16, redundant 13
Fitness: max 0.98(110), min 0.765(1), ave 0.968
Test execution time: sum 34295 ms, max 432 ms, min 132 ms
----------------------------------------------------------------

2023-11-06 04:02:38 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-11-06 04:04:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 57 minutes 44 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 18, redundant 8
Fitness: max 1(1), min 0.686(1), ave 0.968
Test execution time: sum 35297 ms, max 1268 ms, min 210 ms
----------------------------------------------------------------

2023-11-06 04:04:25 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-11-06 04:06:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 59 minutes 29 seconds
Variants: generated 200, build-succeeded 106, build-failed 53, syntax-invalid 24, redundant 17
Fitness: max 0.98(98), min 0.49(1), ave 0.962
Test execution time: sum 32656 ms, max 1235 ms, min 212 ms
----------------------------------------------------------------

2023-11-06 04:06:10 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-11-06 04:08:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 1 minutes 19 seconds
Variants: generated 200, build-succeeded 129, build-failed 45, syntax-invalid 16, redundant 10
Fitness: max 0.98(107), min 0.49(2), ave 0.954
Test execution time: sum 38572 ms, max 562 ms, min 221 ms
----------------------------------------------------------------

2023-11-06 04:08:00 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-11-06 04:09:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 3 minutes 6 seconds
Variants: generated 200, build-succeeded 121, build-failed 60, syntax-invalid 13, redundant 6
Fitness: max 0.98(112), min 0.49(1), ave 0.969
Test execution time: sum 35828 ms, max 497 ms, min 160 ms
----------------------------------------------------------------

2023-11-06 04:09:46 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-11-06 04:11:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 4 minutes 50 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 16, redundant 10
Fitness: max 1(1), min 0.765(1), ave 0.965
Test execution time: sum 34162 ms, max 539 ms, min 184 ms
----------------------------------------------------------------

2023-11-06 04:11:31 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-11-06 04:13:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 6 minutes 40 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 11, redundant 10
Fitness: max 1(2), min 0.549(1), ave 0.971
Test execution time: sum 34901 ms, max 480 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 04:13:20 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-11-06 04:15:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 8 minutes 23 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 19, redundant 8
Fitness: max 0.98(102), min 0.49(1), ave 0.97
Test execution time: sum 31565 ms, max 462 ms, min 96 ms
----------------------------------------------------------------

2023-11-06 04:15:03 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-11-06 04:16:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 10 minutes 10 seconds
Variants: generated 200, build-succeeded 115, build-failed 51, syntax-invalid 18, redundant 16
Fitness: max 0.98(107), min 0.549(1), ave 0.967
Test execution time: sum 34475 ms, max 518 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 04:16:51 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-11-06 04:18:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 12 minutes 3 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 16, redundant 6
Fitness: max 0.98(107), min 0.294(1), ave 0.97
Test execution time: sum 36497 ms, max 1283 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 04:18:44 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-11-06 04:20:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 13 minutes 50 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 17, redundant 7
Fitness: max 0.98(104), min 0.765(1), ave 0.971
Test execution time: sum 33006 ms, max 548 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 04:20:31 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-11-06 04:22:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 37 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 19, redundant 7
Fitness: max 1(1), min 0.549(1), ave 0.965
Test execution time: sum 33932 ms, max 484 ms, min 210 ms
----------------------------------------------------------------

2023-11-06 04:22:17 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-11-06 04:24:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 17 minutes 30 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 17, redundant 7
Fitness: max 0.98(109), min 0.549(1), ave 0.966
Test execution time: sum 36455 ms, max 663 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 04:24:11 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-11-06 04:25:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 19 minutes 19 seconds
Variants: generated 200, build-succeeded 116, build-failed 59, syntax-invalid 16, redundant 9
Fitness: max 0.98(106), min 0.549(1), ave 0.968
Test execution time: sum 34733 ms, max 496 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 04:25:59 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-11-06 04:27:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 21 minutes 7 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 18, redundant 10
Fitness: max 0.98(105), min 0.667(1), ave 0.97
Test execution time: sum 34137 ms, max 530 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 04:27:48 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-11-06 04:29:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 22 minutes 57 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 17, redundant 9
Fitness: max 1(1), min 0.49(1), ave 0.961
Test execution time: sum 35451 ms, max 535 ms, min 211 ms
----------------------------------------------------------------

2023-11-06 04:29:38 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-11-06 04:31:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 24 minutes 48 seconds
Variants: generated 200, build-succeeded 124, build-failed 57, syntax-invalid 11, redundant 8
Fitness: max 0.98(114), min 0.353(2), ave 0.964
Test execution time: sum 36763 ms, max 532 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 04:31:29 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-11-06 04:33:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 39 seconds
Variants: generated 200, build-succeeded 126, build-failed 53, syntax-invalid 8, redundant 13
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 36919 ms, max 567 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 04:33:19 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-11-06 04:35:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 28 minutes 28 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 14, redundant 7
Fitness: max 0.98(106), min 0.49(2), ave 0.962
Test execution time: sum 34518 ms, max 513 ms, min 200 ms
----------------------------------------------------------------

2023-11-06 04:35:09 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-11-06 04:36:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 30 minutes 16 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 14, redundant 11
Fitness: max 1(1), min 0.49(1), ave 0.967
Test execution time: sum 35464 ms, max 538 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 04:36:57 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-11-06 04:38:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 32 minutes 3 seconds
Variants: generated 200, build-succeeded 117, build-failed 67, syntax-invalid 8, redundant 8
Fitness: max 0.98(112), min 0.549(1), ave 0.972
Test execution time: sum 34621 ms, max 487 ms, min 211 ms
----------------------------------------------------------------

2023-11-06 04:38:44 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-11-06 04:40:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 33 minutes 49 seconds
Variants: generated 200, build-succeeded 120, build-failed 54, syntax-invalid 16, redundant 10
Fitness: max 0.98(109), min 0.49(1), ave 0.964
Test execution time: sum 33716 ms, max 475 ms, min 201 ms
----------------------------------------------------------------

2023-11-06 04:40:29 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-11-06 04:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 35 minutes 33 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 13, redundant 12
Fitness: max 1(2), min 0.549(2), ave 0.969
Test execution time: sum 35506 ms, max 512 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 04:42:14 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-11-06 04:43:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 37 minutes 14 seconds
Variants: generated 200, build-succeeded 117, build-failed 47, syntax-invalid 18, redundant 18
Fitness: max 1(1), min 0.49(2), ave 0.961
Test execution time: sum 34472 ms, max 560 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 04:43:55 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-11-06 04:45:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 39 minutes 6 seconds
Variants: generated 200, build-succeeded 120, build-failed 57, syntax-invalid 15, redundant 8
Fitness: max 0.98(110), min 0.549(1), ave 0.97
Test execution time: sum 36860 ms, max 1289 ms, min 207 ms
----------------------------------------------------------------

2023-11-06 04:45:47 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-11-06 04:47:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 40 minutes 59 seconds
Variants: generated 200, build-succeeded 116, build-failed 53, syntax-invalid 21, redundant 10
Fitness: max 0.98(104), min 0.235(1), ave 0.952
Test execution time: sum 34737 ms, max 744 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 04:47:40 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-11-06 04:49:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 42 minutes 55 seconds
Variants: generated 200, build-succeeded 115, build-failed 63, syntax-invalid 18, redundant 4
Fitness: max 1(1), min 0.353(1), ave 0.964
Test execution time: sum 36285 ms, max 1338 ms, min 209 ms
----------------------------------------------------------------

2023-11-06 04:49:36 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-11-06 04:51:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 44 minutes 51 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 18, redundant 9
Fitness: max 0.98(106), min 0.549(1), ave 0.964
Test execution time: sum 38404 ms, max 3729 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 04:51:32 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-11-06 04:53:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 46 minutes 43 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 18, redundant 9
Fitness: max 0.98(100), min 0.49(2), ave 0.961
Test execution time: sum 34834 ms, max 1235 ms, min 221 ms
----------------------------------------------------------------

2023-11-06 04:53:23 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-11-06 04:55:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 48 minutes 39 seconds
Variants: generated 200, build-succeeded 123, build-failed 48, syntax-invalid 16, redundant 13
Fitness: max 0.98(111), min 0.471(1), ave 0.96
Test execution time: sum 37255 ms, max 517 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 04:55:19 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-11-06 04:57:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 50 minutes 29 seconds
Variants: generated 200, build-succeeded 116, build-failed 54, syntax-invalid 21, redundant 9
Fitness: max 0.98(104), min 0.49(1), ave 0.967
Test execution time: sum 35055 ms, max 510 ms, min 221 ms
----------------------------------------------------------------

2023-11-06 04:57:10 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-11-06 04:59:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 52 minutes 22 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 18, redundant 12
Fitness: max 0.98(101), min 0.49(1), ave 0.961
Test execution time: sum 35280 ms, max 989 ms, min 173 ms
----------------------------------------------------------------

2023-11-06 04:59:03 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-11-06 05:00:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 54 minutes 13 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 18, redundant 14
Fitness: max 0.98(103), min 0.569(1), ave 0.968
Test execution time: sum 33629 ms, max 518 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 05:00:54 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-11-06 05:02:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 56 minutes 2 seconds
Variants: generated 200, build-succeeded 117, build-failed 51, syntax-invalid 20, redundant 12
Fitness: max 0.98(101), min 0.49(3), ave 0.951
Test execution time: sum 35184 ms, max 530 ms, min 224 ms
----------------------------------------------------------------

2023-11-06 05:02:43 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-11-06 05:04:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 57 minutes 53 seconds
Variants: generated 200, build-succeeded 113, build-failed 48, syntax-invalid 23, redundant 16
Fitness: max 0.98(100), min 0.549(1), ave 0.966
Test execution time: sum 34736 ms, max 1374 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 05:04:34 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-11-06 05:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 59 minutes 47 seconds
Variants: generated 200, build-succeeded 117, build-failed 54, syntax-invalid 20, redundant 9
Fitness: max 0.98(105), min 0.49(1), ave 0.959
Test execution time: sum 36421 ms, max 1826 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 05:06:28 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-11-06 05:08:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 1 minutes 46 seconds
Variants: generated 200, build-succeeded 114, build-failed 51, syntax-invalid 27, redundant 8
Fitness: max 0.98(98), min 0.49(2), ave 0.953
Test execution time: sum 40067 ms, max 4378 ms, min 110 ms
----------------------------------------------------------------

2023-11-06 05:08:27 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-11-06 05:10:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 3 minutes 43 seconds
Variants: generated 200, build-succeeded 121, build-failed 54, syntax-invalid 19, redundant 6
Fitness: max 0.98(110), min 0.49(1), ave 0.965
Test execution time: sum 37664 ms, max 1827 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 05:10:24 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-11-06 05:12:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 5 minutes 40 seconds
Variants: generated 200, build-succeeded 126, build-failed 46, syntax-invalid 23, redundant 5
Fitness: max 1(1), min 0.549(1), ave 0.965
Test execution time: sum 39571 ms, max 2042 ms, min 218 ms
----------------------------------------------------------------

2023-11-06 05:12:20 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-11-06 05:14:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 7 minutes 27 seconds
Variants: generated 200, build-succeeded 105, build-failed 64, syntax-invalid 23, redundant 8
Fitness: max 0.98(97), min 0.49(2), ave 0.964
Test execution time: sum 31939 ms, max 559 ms, min 219 ms
----------------------------------------------------------------

2023-11-06 05:14:07 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-11-06 05:16:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 9 minutes 22 seconds
Variants: generated 200, build-succeeded 123, build-failed 51, syntax-invalid 17, redundant 9
Fitness: max 0.98(110), min 0.765(1), ave 0.969
Test execution time: sum 37116 ms, max 1405 ms, min 100 ms
----------------------------------------------------------------

2023-11-06 05:16:03 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-11-06 05:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 11 minutes 5 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 25, redundant 8
Fitness: max 1(1), min 0.667(1), ave 0.969
Test execution time: sum 32443 ms, max 496 ms, min 172 ms
----------------------------------------------------------------

2023-11-06 05:17:46 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-11-06 05:19:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 12 minutes 58 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 14, redundant 8
Fitness: max 0.98(112), min 0.157(1), ave 0.966
Test execution time: sum 34999 ms, max 676 ms, min 183 ms
----------------------------------------------------------------

2023-11-06 05:19:39 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-11-06 05:21:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 14 minutes 46 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 18, redundant 10
Fitness: max 1(3), min 0.49(1), ave 0.965
Test execution time: sum 32725 ms, max 503 ms, min 178 ms
----------------------------------------------------------------

2023-11-06 05:21:27 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-11-06 05:23:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 16 minutes 40 seconds
Variants: generated 200, build-succeeded 116, build-failed 51, syntax-invalid 27, redundant 6
Fitness: max 0.98(103), min 0.49(2), ave 0.963
Test execution time: sum 35203 ms, max 508 ms, min 124 ms
----------------------------------------------------------------

2023-11-06 05:23:20 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-11-06 05:25:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 18 minutes 37 seconds
Variants: generated 200, build-succeeded 121, build-failed 54, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0.49(2), ave 0.953
Test execution time: sum 36477 ms, max 516 ms, min 200 ms
----------------------------------------------------------------

2023-11-06 05:25:17 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-11-06 05:27:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 20 minutes 42 seconds
Variants: generated 200, build-succeeded 120, build-failed 57, syntax-invalid 16, redundant 7
Fitness: max 0.98(106), min 0.49(1), ave 0.964
Test execution time: sum 39273 ms, max 1731 ms, min 233 ms
----------------------------------------------------------------

2023-11-06 05:27:22 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-11-06 05:29:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 34 seconds
Variants: generated 200, build-succeeded 118, build-failed 55, syntax-invalid 16, redundant 11
Fitness: max 0.98(106), min 0.353(1), ave 0.966
Test execution time: sum 35260 ms, max 490 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 05:29:15 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-11-06 05:31:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 minutes 27 seconds
Variants: generated 200, build-succeeded 116, build-failed 66, syntax-invalid 13, redundant 5
Fitness: max 0.98(107), min 0.686(1), ave 0.972
Test execution time: sum 35042 ms, max 530 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 05:31:08 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-11-06 05:33:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 26 minutes 28 seconds
Variants: generated 200, build-succeeded 123, build-failed 55, syntax-invalid 14, redundant 8
Fitness: max 0.98(110), min 0.549(1), ave 0.969
Test execution time: sum 37236 ms, max 455 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 05:33:09 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-11-06 05:34:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 28 minutes 17 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 22, redundant 10
Fitness: max 0.98(100), min 0.471(1), ave 0.965
Test execution time: sum 33299 ms, max 570 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 05:34:58 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-11-06 05:36:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 30 minutes 6 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 20, redundant 16
Fitness: max 0.98(102), min 0.471(1), ave 0.961
Test execution time: sum 33678 ms, max 566 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 05:36:47 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-11-06 05:38:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 32 minutes 3 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 15, redundant 13
Fitness: max 1(1), min 0.765(1), ave 0.974
Test execution time: sum 34944 ms, max 1244 ms, min 216 ms
----------------------------------------------------------------

2023-11-06 05:38:44 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-11-06 05:40:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 34 minutes 6 seconds
Variants: generated 200, build-succeeded 122, build-failed 58, syntax-invalid 11, redundant 9
Fitness: max 0.98(111), min 0.49(1), ave 0.968
Test execution time: sum 38527 ms, max 1301 ms, min 211 ms
----------------------------------------------------------------

2023-11-06 05:40:47 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-11-06 05:42:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 35 minutes 57 seconds
Variants: generated 200, build-succeeded 104, build-failed 63, syntax-invalid 24, redundant 9
Fitness: max 0.98(93), min 0.667(1), ave 0.967
Test execution time: sum 31631 ms, max 539 ms, min 190 ms
----------------------------------------------------------------

2023-11-06 05:42:38 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-11-06 05:44:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 37 minutes 49 seconds
Variants: generated 200, build-succeeded 110, build-failed 65, syntax-invalid 16, redundant 9
Fitness: max 0.98(99), min 0.49(1), ave 0.968
Test execution time: sum 33394 ms, max 536 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 05:44:30 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-11-06 05:46:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 39 minutes 45 seconds
Variants: generated 200, build-succeeded 116, build-failed 57, syntax-invalid 13, redundant 14
Fitness: max 0.98(110), min 0.608(1), ave 0.973
Test execution time: sum 34950 ms, max 573 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 05:46:26 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-11-06 05:48:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 41 minutes 40 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 15, redundant 11
Fitness: max 0.98(109), min 0.843(2), ave 0.975
Test execution time: sum 35085 ms, max 531 ms, min 202 ms
----------------------------------------------------------------

2023-11-06 05:48:21 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-11-06 05:50:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 43 minutes 41 seconds
Variants: generated 200, build-succeeded 113, build-failed 54, syntax-invalid 21, redundant 12
Fitness: max 0.98(99), min 0.49(1), ave 0.963
Test execution time: sum 37997 ms, max 2462 ms, min 164 ms
----------------------------------------------------------------

2023-11-06 05:50:22 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-11-06 05:52:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 45 minutes 38 seconds
Variants: generated 200, build-succeeded 117, build-failed 59, syntax-invalid 14, redundant 10
Fitness: max 0.98(106), min 0.49(1), ave 0.968
Test execution time: sum 36091 ms, max 581 ms, min 204 ms
----------------------------------------------------------------

2023-11-06 05:52:19 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-11-06 05:54:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 47 minutes 40 seconds
Variants: generated 200, build-succeeded 121, build-failed 61, syntax-invalid 10, redundant 8
Fitness: max 0.98(116), min 0.765(1), ave 0.975
Test execution time: sum 36498 ms, max 483 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 05:54:21 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-11-06 05:56:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 49 minutes 42 seconds
Variants: generated 200, build-succeeded 127, build-failed 50, syntax-invalid 8, redundant 15
Fitness: max 0.98(119), min 0.157(1), ave 0.956
Test execution time: sum 38412 ms, max 535 ms, min 194 ms
----------------------------------------------------------------

2023-11-06 05:56:23 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-11-06 05:58:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 51 minutes 35 seconds
Variants: generated 200, build-succeeded 119, build-failed 45, syntax-invalid 21, redundant 15
Fitness: max 0.98(105), min 0.353(1), ave 0.956
Test execution time: sum 35446 ms, max 555 ms, min 177 ms
----------------------------------------------------------------

2023-11-06 05:58:16 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-11-06 06:00:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 53 minutes 33 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 13, redundant 12
Fitness: max 0.98(109), min 0.333(1), ave 0.967
Test execution time: sum 36601 ms, max 534 ms, min 208 ms
----------------------------------------------------------------

2023-11-06 06:00:14 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-11-06 06:02:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 55 minutes 28 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 19, redundant 9
Fitness: max 0.98(100), min 0.588(1), ave 0.967
Test execution time: sum 33936 ms, max 486 ms, min 156 ms
----------------------------------------------------------------

2023-11-06 06:02:09 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-11-06 06:04:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 57 minutes 23 seconds
Variants: generated 200, build-succeeded 111, build-failed 54, syntax-invalid 26, redundant 9
Fitness: max 0.98(100), min 0.529(1), ave 0.966
Test execution time: sum 33528 ms, max 622 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 06:04:04 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-11-06 06:05:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 59 minutes 13 seconds
Variants: generated 200, build-succeeded 106, build-failed 62, syntax-invalid 28, redundant 4
Fitness: max 0.98(92), min 0.765(2), ave 0.966
Test execution time: sum 32574 ms, max 624 ms, min 179 ms
----------------------------------------------------------------

2023-11-06 06:05:54 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-11-06 06:07:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 1 minutes 8 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 21, redundant 9
Fitness: max 1(1), min 0.353(1), ave 0.962
Test execution time: sum 32437 ms, max 540 ms, min 198 ms
----------------------------------------------------------------

2023-11-06 06:07:49 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-11-06 06:09:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 3 minutes 16 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 16, redundant 10
Fitness: max 1(1), min 0.843(3), ave 0.969
Test execution time: sum 37610 ms, max 1310 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 06:09:57 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-11-06 06:11:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 5 minutes 13 seconds
Variants: generated 200, build-succeeded 113, build-failed 48, syntax-invalid 26, redundant 13
Fitness: max 0.98(100), min 0.216(1), ave 0.965
Test execution time: sum 34268 ms, max 671 ms, min 189 ms
----------------------------------------------------------------

2023-11-06 06:11:54 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-11-06 06:13:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 7 minutes 11 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 25, redundant 8
Fitness: max 1(1), min 0.765(1), ave 0.972
Test execution time: sum 33878 ms, max 543 ms, min 211 ms
----------------------------------------------------------------

2023-11-06 06:13:52 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-11-06 06:15:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 9 minutes 15 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 25, redundant 8
Fitness: max 0.98(96), min 0.49(2), ave 0.955
Test execution time: sum 36219 ms, max 1921 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 06:15:56 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-11-06 06:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 11 minutes 6 seconds
Variants: generated 200, build-succeeded 101, build-failed 50, syntax-invalid 36, redundant 13
Fitness: max 1(1), min 0.549(1), ave 0.967
Test execution time: sum 30711 ms, max 469 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 06:17:46 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-11-06 06:19:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 13 minutes 3 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 23, redundant 12
Fitness: max 0.98(99), min 0.667(1), ave 0.973
Test execution time: sum 32568 ms, max 530 ms, min 187 ms
----------------------------------------------------------------

2023-11-06 06:19:44 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-11-06 06:21:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 15 minutes 1 seconds
Variants: generated 200, build-succeeded 109, build-failed 54, syntax-invalid 28, redundant 9
Fitness: max 0.98(94), min 0.333(1), ave 0.959
Test execution time: sum 32647 ms, max 550 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 06:21:41 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-11-06 06:23:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 17 minutes 5 seconds
Variants: generated 200, build-succeeded 115, build-failed 49, syntax-invalid 25, redundant 11
Fitness: max 0.98(97), min 0.49(2), ave 0.957
Test execution time: sum 36549 ms, max 1162 ms, min 184 ms
----------------------------------------------------------------

2023-11-06 06:23:45 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-11-06 06:25:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 19 minutes 8 seconds
Variants: generated 200, build-succeeded 114, build-failed 47, syntax-invalid 25, redundant 14
Fitness: max 0.98(103), min 0.529(1), ave 0.966
Test execution time: sum 34732 ms, max 535 ms, min 220 ms
----------------------------------------------------------------

2023-11-06 06:25:48 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-11-06 06:27:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 21 minutes 8 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 19, redundant 15
Fitness: max 0.98(108), min 0.863(1), ave 0.977
Test execution time: sum 33778 ms, max 523 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 06:27:48 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-11-06 06:29:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 23 minutes 9 seconds
Variants: generated 200, build-succeeded 112, build-failed 50, syntax-invalid 27, redundant 11
Fitness: max 0.98(98), min 0.706(1), ave 0.967
Test execution time: sum 35898 ms, max 1130 ms, min 219 ms
----------------------------------------------------------------

2023-11-06 06:29:50 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-11-06 06:31:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 25 minutes 11 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 21, redundant 6
Fitness: max 0.98(100), min 0.549(2), ave 0.962
Test execution time: sum 34044 ms, max 529 ms, min 218 ms
----------------------------------------------------------------

2023-11-06 06:31:52 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-11-06 06:33:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 27 minutes 13 seconds
Variants: generated 200, build-succeeded 113, build-failed 53, syntax-invalid 22, redundant 12
Fitness: max 0.98(101), min 0.549(1), ave 0.964
Test execution time: sum 34242 ms, max 545 ms, min 211 ms
----------------------------------------------------------------

2023-11-06 06:33:54 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-11-06 06:35:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 29 minutes 19 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 18, redundant 14
Fitness: max 0.98(104), min 0.333(1), ave 0.962
Test execution time: sum 36397 ms, max 1908 ms, min 224 ms
----------------------------------------------------------------

2023-11-06 06:35:59 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-11-06 06:38:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 31 minutes 22 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 24, redundant 12
Fitness: max 1(1), min 0.549(1), ave 0.961
Test execution time: sum 37716 ms, max 2152 ms, min 196 ms
----------------------------------------------------------------

2023-11-06 06:38:03 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-11-06 06:40:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 33 minutes 21 seconds
Variants: generated 200, build-succeeded 112, build-failed 58, syntax-invalid 21, redundant 9
Fitness: max 0.98(105), min 0.275(1), ave 0.96
Test execution time: sum 33792 ms, max 630 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 06:40:02 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-11-06 06:42:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 35 minutes 25 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 19, redundant 9
Fitness: max 0.98(110), min 0.588(1), ave 0.971
Test execution time: sum 35750 ms, max 555 ms, min 212 ms
----------------------------------------------------------------

2023-11-06 06:42:06 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-11-06 06:44:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 37 minutes 26 seconds
Variants: generated 200, build-succeeded 100, build-failed 63, syntax-invalid 33, redundant 4
Fitness: max 0.98(89), min 0.49(1), ave 0.965
Test execution time: sum 32496 ms, max 1355 ms, min 228 ms
----------------------------------------------------------------

2023-11-06 06:44:07 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-11-06 06:46:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 39 minutes 24 seconds
Variants: generated 200, build-succeeded 108, build-failed 61, syntax-invalid 26, redundant 5
Fitness: max 0.98(96), min 0.686(1), ave 0.967
Test execution time: sum 32682 ms, max 517 ms, min 208 ms
----------------------------------------------------------------

2023-11-06 06:46:05 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-11-06 06:48:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 41 minutes 28 seconds
Variants: generated 200, build-succeeded 109, build-failed 51, syntax-invalid 24, redundant 16
Fitness: max 1(1), min 0.235(1), ave 0.949
Test execution time: sum 35787 ms, max 1994 ms, min 227 ms
----------------------------------------------------------------

2023-11-06 06:48:09 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-11-06 06:50:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 43 minutes 30 seconds
Variants: generated 200, build-succeeded 116, build-failed 53, syntax-invalid 18, redundant 13
Fitness: max 0.98(108), min 0.765(1), ave 0.972
Test execution time: sum 35270 ms, max 496 ms, min 223 ms
----------------------------------------------------------------

2023-11-06 06:50:10 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-11-06 06:52:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 45 minutes 29 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 22, redundant 5
Fitness: max 0.98(102), min 0.784(2), ave 0.97
Test execution time: sum 34036 ms, max 521 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 06:52:09 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-11-06 06:54:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 47 minutes 31 seconds
Variants: generated 200, build-succeeded 121, build-failed 47, syntax-invalid 21, redundant 11
Fitness: max 0.98(107), min 0.549(1), ave 0.965
Test execution time: sum 36321 ms, max 570 ms, min 202 ms
----------------------------------------------------------------

2023-11-06 06:54:12 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-11-06 06:56:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 49 minutes 34 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 18, redundant 8
Fitness: max 0.98(106), min 0.51(1), ave 0.971
Test execution time: sum 34698 ms, max 603 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 06:56:15 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-11-06 06:58:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 51 minutes 29 seconds
Variants: generated 200, build-succeeded 106, build-failed 59, syntax-invalid 28, redundant 7
Fitness: max 0.98(93), min 0.235(1), ave 0.958
Test execution time: sum 31389 ms, max 492 ms, min 223 ms
----------------------------------------------------------------

2023-11-06 06:58:10 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-11-06 07:00:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 53 minutes 31 seconds
Variants: generated 200, build-succeeded 111, build-failed 52, syntax-invalid 27, redundant 10
Fitness: max 0.98(95), min 0.157(1), ave 0.944
Test execution time: sum 34394 ms, max 1364 ms, min 172 ms
----------------------------------------------------------------

2023-11-06 07:00:12 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-11-06 07:02:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 55 minutes 28 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 23, redundant 8
Fitness: max 0.98(98), min 0.549(1), ave 0.969
Test execution time: sum 31775 ms, max 556 ms, min 202 ms
----------------------------------------------------------------

2023-11-06 07:02:08 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-11-06 07:04:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 57 minutes 33 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 23, redundant 11
Fitness: max 0.98(101), min 0.765(1), ave 0.97
Test execution time: sum 34855 ms, max 1368 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 07:04:13 [main] [INFO]  KGenProgMain - entered the era of 339th generation.
2023-11-06 07:06:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 59 minutes 27 seconds
Variants: generated 200, build-succeeded 102, build-failed 57, syntax-invalid 35, redundant 6
Fitness: max 0.98(91), min 0.608(1), ave 0.965
Test execution time: sum 30587 ms, max 582 ms, min 155 ms
----------------------------------------------------------------

2023-11-06 07:06:08 [main] [INFO]  KGenProgMain - entered the era of 340th generation.
2023-11-06 07:08:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 1 minutes 22 seconds
Variants: generated 200, build-succeeded 105, build-failed 52, syntax-invalid 30, redundant 13
Fitness: max 0.98(91), min 0.529(1), ave 0.961
Test execution time: sum 32303 ms, max 1765 ms, min 177 ms
----------------------------------------------------------------

2023-11-06 07:08:03 [main] [INFO]  KGenProgMain - entered the era of 341st generation.
2023-11-06 07:10:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 3 minutes 23 seconds
Variants: generated 200, build-succeeded 118, build-failed 54, syntax-invalid 18, redundant 10
Fitness: max 0.98(103), min 0.216(1), ave 0.961
Test execution time: sum 34721 ms, max 502 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 07:10:03 [main] [INFO]  KGenProgMain - entered the era of 342nd generation.
2023-11-06 07:12:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 23 seconds
Variants: generated 200, build-succeeded 106, build-failed 59, syntax-invalid 24, redundant 11
Fitness: max 0.98(93), min 0.49(3), ave 0.955
Test execution time: sum 32648 ms, max 1254 ms, min 174 ms
----------------------------------------------------------------

2023-11-06 07:12:04 [main] [INFO]  KGenProgMain - entered the era of 343rd generation.
2023-11-06 07:14:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 7 minutes 27 seconds
Variants: generated 200, build-succeeded 118, build-failed 50, syntax-invalid 21, redundant 11
Fitness: max 0.98(108), min 0.333(1), ave 0.959
Test execution time: sum 35891 ms, max 536 ms, min 165 ms
----------------------------------------------------------------

2023-11-06 07:14:08 [main] [INFO]  KGenProgMain - entered the era of 344th generation.
2023-11-06 07:16:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 9 minutes 34 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 22, redundant 11
Fitness: max 0.98(98), min 0.353(1), ave 0.962
Test execution time: sum 34763 ms, max 1103 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 07:16:15 [main] [INFO]  KGenProgMain - entered the era of 345th generation.
2023-11-06 07:18:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 11 minutes 42 seconds
Variants: generated 200, build-succeeded 116, build-failed 51, syntax-invalid 21, redundant 12
Fitness: max 1(1), min 0.353(1), ave 0.963
Test execution time: sum 37006 ms, max 1970 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 07:18:23 [main] [INFO]  KGenProgMain - entered the era of 346th generation.
2023-11-06 07:20:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 13 minutes 50 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 16, redundant 14
Fitness: max 0.98(108), min 0.49(2), ave 0.962
Test execution time: sum 35300 ms, max 618 ms, min 191 ms
----------------------------------------------------------------

2023-11-06 07:20:30 [main] [INFO]  KGenProgMain - entered the era of 347th generation.
2023-11-06 07:22:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 15 minutes 49 seconds
Variants: generated 200, build-succeeded 108, build-failed 54, syntax-invalid 22, redundant 16
Fitness: max 0.98(99), min 0.49(2), ave 0.966
Test execution time: sum 31345 ms, max 507 ms, min 159 ms
----------------------------------------------------------------

2023-11-06 07:22:30 [main] [INFO]  KGenProgMain - entered the era of 348th generation.
2023-11-06 07:24:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 17 minutes 55 seconds
Variants: generated 200, build-succeeded 123, build-failed 45, syntax-invalid 18, redundant 14
Fitness: max 0.98(109), min 0.314(1), ave 0.959
Test execution time: sum 36842 ms, max 977 ms, min 182 ms
----------------------------------------------------------------

2023-11-06 07:24:36 [main] [INFO]  KGenProgMain - entered the era of 349th generation.
2023-11-06 07:26:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 19 minutes 58 seconds
Variants: generated 200, build-succeeded 111, build-failed 51, syntax-invalid 23, redundant 15
Fitness: max 0.98(104), min 0.863(2), ave 0.975
Test execution time: sum 32866 ms, max 534 ms, min 222 ms
----------------------------------------------------------------

2023-11-06 07:26:39 [main] [INFO]  KGenProgMain - entered the era of 350th generation.
2023-11-06 07:28:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 22 minutes 7 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 20, redundant 10
Fitness: max 0.98(99), min 0.49(1), ave 0.965
Test execution time: sum 35247 ms, max 1955 ms, min 198 ms
----------------------------------------------------------------

2023-11-06 07:28:48 [main] [INFO]  KGenProgMain - entered the era of 351st generation.
2023-11-06 07:30:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 24 minutes 6 seconds
Variants: generated 200, build-succeeded 115, build-failed 46, syntax-invalid 25, redundant 14
Fitness: max 0.98(105), min 0.471(1), ave 0.959
Test execution time: sum 35092 ms, max 1901 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 07:30:46 [main] [INFO]  KGenProgMain - entered the era of 352nd generation.
2023-11-06 07:32:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 26 minutes 8 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 25, redundant 8
Fitness: max 0.98(102), min 0.549(1), ave 0.972
Test execution time: sum 32798 ms, max 536 ms, min 163 ms
----------------------------------------------------------------

2023-11-06 07:32:48 [main] [INFO]  KGenProgMain - entered the era of 353rd generation.
2023-11-06 07:34:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 28 minutes 11 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 24, redundant 10
Fitness: max 0.98(98), min 0.353(1), ave 0.954
Test execution time: sum 34319 ms, max 1275 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 07:34:52 [main] [INFO]  KGenProgMain - entered the era of 354th generation.
2023-11-06 07:36:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 30 minutes 14 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 20, redundant 10
Fitness: max 0.98(96), min 0.49(1), ave 0.964
Test execution time: sum 31897 ms, max 563 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 07:36:55 [main] [INFO]  KGenProgMain - entered the era of 355th generation.
2023-11-06 07:39:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 32 minutes 27 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 17, redundant 12
Fitness: max 0.98(103), min 0.353(1), ave 0.97
Test execution time: sum 34728 ms, max 1971 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 07:39:08 [main] [INFO]  KGenProgMain - entered the era of 356th generation.
2023-11-06 07:41:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 34 minutes 38 seconds
Variants: generated 200, build-succeeded 122, build-failed 57, syntax-invalid 11, redundant 10
Fitness: max 1(2), min 0.49(1), ave 0.971
Test execution time: sum 36017 ms, max 516 ms, min 188 ms
----------------------------------------------------------------

2023-11-06 07:41:19 [main] [INFO]  KGenProgMain - entered the era of 357th generation.
2023-11-06 07:43:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 36 minutes 47 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 20, redundant 11
Fitness: max 0.98(97), min 0.784(1), ave 0.97
Test execution time: sum 33487 ms, max 1197 ms, min 215 ms
----------------------------------------------------------------

2023-11-06 07:43:28 [main] [INFO]  KGenProgMain - entered the era of 358th generation.
2023-11-06 07:45:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 1 seconds
Variants: generated 200, build-succeeded 110, build-failed 67, syntax-invalid 16, redundant 7
Fitness: max 0.98(105), min 0.353(1), ave 0.972
Test execution time: sum 34194 ms, max 1937 ms, min 217 ms
----------------------------------------------------------------

2023-11-06 07:45:42 [main] [INFO]  KGenProgMain - entered the era of 359th generation.
2023-11-06 07:47:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 41 minutes 8 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 21, redundant 12
Fitness: max 0.98(98), min 0.765(1), ave 0.972
Test execution time: sum 34213 ms, max 1779 ms, min 204 ms
----------------------------------------------------------------

2023-11-06 07:47:49 [main] [INFO]  KGenProgMain - entered the era of 360th generation.
2023-11-06 07:49:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 43 minutes 19 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 16, redundant 9
Fitness: max 0.98(102), min 0.353(1), ave 0.963
Test execution time: sum 34638 ms, max 553 ms, min 196 ms
----------------------------------------------------------------

2023-11-06 07:49:59 [main] [INFO]  KGenProgMain - entered the era of 361st generation.
2023-11-06 07:52:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 45 minutes 30 seconds
Variants: generated 200, build-succeeded 121, build-failed 56, syntax-invalid 15, redundant 8
Fitness: max 0.98(110), min 0.49(1), ave 0.966
Test execution time: sum 36107 ms, max 526 ms, min 197 ms
----------------------------------------------------------------

2023-11-06 07:52:10 [main] [INFO]  KGenProgMain - entered the era of 362nd generation.
2023-11-06 07:54:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 47 minutes 48 seconds
Variants: generated 200, build-succeeded 123, build-failed 57, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0.686(1), ave 0.968
Test execution time: sum 39629 ms, max 2025 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 07:54:29 [main] [INFO]  KGenProgMain - entered the era of 363rd generation.
2023-11-06 07:56:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 49 minutes 50 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 22, redundant 12
Fitness: max 0.98(102), min 0.549(1), ave 0.97
Test execution time: sum 32173 ms, max 560 ms, min 187 ms
----------------------------------------------------------------

2023-11-06 07:56:31 [main] [INFO]  KGenProgMain - entered the era of 364th generation.
2023-11-06 07:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 51 minutes 59 seconds
Variants: generated 200, build-succeeded 126, build-failed 49, syntax-invalid 15, redundant 10
Fitness: max 0.98(117), min 0.549(1), ave 0.971
Test execution time: sum 36600 ms, max 603 ms, min 180 ms
----------------------------------------------------------------

2023-11-06 07:58:40 [main] [INFO]  KGenProgMain - entered the era of 365th generation.
2023-11-06 08:00:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 54 minutes 3 seconds
Variants: generated 200, build-succeeded 110, build-failed 58, syntax-invalid 21, redundant 11
Fitness: max 0.98(101), min 0.157(1), ave 0.958
Test execution time: sum 32478 ms, max 505 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 08:00:44 [main] [INFO]  KGenProgMain - entered the era of 366th generation.
2023-11-06 08:02:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 56 minutes 0 seconds
Variants: generated 200, build-succeeded 94, build-failed 62, syntax-invalid 32, redundant 12
Fitness: max 0.98(88), min 0.49(1), ave 0.961
Test execution time: sum 27969 ms, max 525 ms, min 192 ms
----------------------------------------------------------------

2023-11-06 08:02:40 [main] [INFO]  KGenProgMain - entered the era of 367th generation.
2023-11-06 08:04:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 58 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 25, redundant 11
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 31912 ms, max 491 ms, min 169 ms
----------------------------------------------------------------

2023-11-06 08:04:38 [main] [INFO]  KGenProgMain - entered the era of 368th generation.
2023-11-06 08:06:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 59 minutes 58 seconds
Variants: generated 200, build-succeeded 92, build-failed 58, syntax-invalid 40, redundant 10
Fitness: max 0.98(82), min 0.765(1), ave 0.97
Test execution time: sum 30014 ms, max 2011 ms, min 206 ms
----------------------------------------------------------------

2023-11-06 08:06:39 [main] [INFO]  KGenProgMain - entered the era of 369th generation.
2023-11-06 08:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 2 minutes 5 seconds
Variants: generated 200, build-succeeded 111, build-failed 54, syntax-invalid 24, redundant 11
Fitness: max 1(2), min 0.196(1), ave 0.958
Test execution time: sum 33599 ms, max 542 ms, min 150 ms
----------------------------------------------------------------

2023-11-06 08:08:46 [main] [INFO]  KGenProgMain - entered the era of 370th generation.
2023-11-06 08:10:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 4 minutes 15 seconds
Variants: generated 200, build-succeeded 119, build-failed 49, syntax-invalid 22, redundant 10
Fitness: max 0.98(104), min 0.353(1), ave 0.963
Test execution time: sum 36053 ms, max 632 ms, min 214 ms
----------------------------------------------------------------

2023-11-06 08:10:56 [main] [INFO]  KGenProgMain - entered the era of 371st generation.
2023-11-06 08:13:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 6 minutes 24 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 22, redundant 6
Fitness: max 0.98(102), min 0.843(2), ave 0.971
Test execution time: sum 34190 ms, max 528 ms, min 202 ms
----------------------------------------------------------------

2023-11-06 08:13:05 [main] [INFO]  KGenProgMain - entered the era of 372nd generation.
2023-11-06 08:15:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 8 minutes 34 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 23, redundant 11
Fitness: max 0.98(104), min 0.686(1), ave 0.971
Test execution time: sum 34468 ms, max 547 ms, min 223 ms
----------------------------------------------------------------

2023-11-06 08:15:15 [main] [INFO]  KGenProgMain - entered the era of 373rd generation.
2023-11-06 08:17:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 10 minutes 48 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 21, redundant 7
Fitness: max 0.98(105), min 0.588(1), ave 0.971
Test execution time: sum 35684 ms, max 1084 ms, min 209 ms
----------------------------------------------------------------

2023-11-06 08:17:29 [main] [INFO]  KGenProgMain - entered the era of 374th generation.
2023-11-06 08:19:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 12 minutes 58 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 28, redundant 2
Fitness: max 0.98(96), min 0.333(1), ave 0.957
Test execution time: sum 33421 ms, max 537 ms, min 181 ms
----------------------------------------------------------------

2023-11-06 08:19:38 [main] [INFO]  KGenProgMain - entered the era of 375th generation.
2023-11-06 08:21:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 15 minutes 11 seconds
Variants: generated 200, build-succeeded 106, build-failed 54, syntax-invalid 27, redundant 13
Fitness: max 0.98(96), min 0.765(1), ave 0.971
Test execution time: sum 35139 ms, max 1863 ms, min 224 ms
----------------------------------------------------------------

2023-11-06 08:21:52 [main] [INFO]  KGenProgMain - entered the era of 376th generation.
2023-11-06 08:24:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 17 minutes 26 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 24, redundant 10
Fitness: max 0.98(95), min 0.824(1), ave 0.967
Test execution time: sum 35916 ms, max 1573 ms, min 196 ms
----------------------------------------------------------------

2023-11-06 08:24:07 [main] [INFO]  KGenProgMain - entered the era of 377th generation.
2023-11-06 08:26:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 19 minutes 32 seconds
Variants: generated 200, build-succeeded 105, build-failed 52, syntax-invalid 29, redundant 14
Fitness: max 0.98(98), min 0.569(1), ave 0.97
Test execution time: sum 32485 ms, max 582 ms, min 222 ms
----------------------------------------------------------------

2023-11-06 08:26:13 [main] [INFO]  KGenProgMain - entered the era of 378th generation.
2023-11-06 08:28:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 48 seconds
Variants: generated 200, build-succeeded 114, build-failed 52, syntax-invalid 24, redundant 10
Fitness: max 0.98(100), min 0.843(1), ave 0.97
Test execution time: sum 35606 ms, max 1103 ms, min 203 ms
----------------------------------------------------------------

2023-11-06 08:28:28 [main] [INFO]  KGenProgMain - entered the era of 379th generation.
2023-11-06 08:30:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 23 minutes 58 seconds
Variants: generated 200, build-succeeded 112, build-failed 47, syntax-invalid 26, redundant 15
Fitness: max 0.98(99), min 0.49(1), ave 0.964
Test execution time: sum 33796 ms, max 557 ms, min 205 ms
----------------------------------------------------------------

2023-11-06 08:30:38 [main] [INFO]  KGenProgMain - entered the era of 380th generation.
2023-11-06 08:32:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 26 minutes 15 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 19, redundant 9
Fitness: max 0.98(104), min 0.353(1), ave 0.962
Test execution time: sum 35176 ms, max 537 ms, min 199 ms
----------------------------------------------------------------

2023-11-06 08:32:56 [main] [INFO]  KGenProgMain - entered the era of 381st generation.
2023-11-06 08:35:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 28 minutes 29 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 24, redundant 9
Fitness: max 0.98(97), min 0.667(1), ave 0.969
Test execution time: sum 34343 ms, max 896 ms, min 186 ms
----------------------------------------------------------------

2023-11-06 08:35:09 [main] [INFO]  KGenProgMain - entered the era of 382nd generation.
2023-11-06 08:37:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 30 minutes 38 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 23, redundant 5
Fitness: max 0.98(100), min 0.549(1), ave 0.964
Test execution time: sum 34702 ms, max 525 ms, min 196 ms
----------------------------------------------------------------

2023-11-06 08:37:19 [main] [INFO]  KGenProgMain - entered the era of 383rd generation.
2023-11-06 08:39:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 32 minutes 45 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 27, redundant 7
Fitness: max 0.98(98), min 0.49(1), ave 0.963
Test execution time: sum 33772 ms, max 556 ms, min 210 ms
----------------------------------------------------------------

2023-11-06 08:39:26 [main] [INFO]  KGenProgMain - entered the era of 384th generation.
2023-11-06 08:39:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 33 minutes 0 seconds
Variants: generated 28, build-succeeded 7, build-failed 17, syntax-invalid 0, redundant 4
Fitness: max 1(1), min 0.843(1), ave 0.952
Test execution time: sum 2014 ms, max 365 ms, min 201 ms
----------------------------------------------------------------

2023-11-06 08:39:41 [main] [INFO]  KGenProgMain - GA stopped
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v153)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v153)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v153)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v153)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v153)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v153)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v153)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1955)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1955)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1955)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1955)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1955)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1955)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1955)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            byte b = lineSeparator[lineSeparator.length - 1];
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        buffer[pos++] = encodeTable[(int) x & MASK_5BITS];
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -341,6 +341,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			eof = true;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -472,6 +473,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				readPos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -759,7 +761,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -477,6 +477,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -494,6 +495,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        buffer[pos++] = encodeTable[(int) x & MASK_5BITS];
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3194)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -759,7 +759,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1051,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            byte b = lineSeparator[lineSeparator.length - 1];
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3425)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -341,6 +341,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			eof = true;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v3615)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -471,7 +471,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 2;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +495,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,12 +238,13 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            byte b = lineSeparator[lineSeparator.length - 1];
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v5820)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -494,6 +495,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,16 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,7 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                readPos = 0;
             }
             return len;
         }
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -494,6 +495,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +761,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,8 +244,10 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            resizeBuffer();
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -471,7 +472,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 2;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +496,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,15 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8487)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -471,7 +470,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 2;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -759,7 +759,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,17 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            resizeBuffer();
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8636)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -477,6 +478,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,17 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v8801)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -341,6 +341,8 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			eof = true;
+			eof = true;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -409,7 +411,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -494,6 +495,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +762,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11462)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11495)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11495)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11495)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -477,6 +476,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -491,9 +491,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +763,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +984,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11495)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11495)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11495)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v11495)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -477,6 +478,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -494,6 +496,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,9 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -341,6 +341,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			eof = true;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -491,9 +491,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -975,7 +978,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if (pArray == null || pArray.length == 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,8 +244,10 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            resizeBuffer();
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12433)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -494,6 +493,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +761,24 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +998,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v12489)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -491,7 +492,10 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +763,11 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13678)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -341,6 +341,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			eof = true;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -494,6 +495,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +762,10 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,14 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v13814)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -477,6 +477,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -491,9 +492,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +763,9 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,12 +238,14 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            byte b = lineSeparator[lineSeparator.length - 1];
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v14250)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16484)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16484)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16484)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -469,6 +470,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -477,6 +479,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -494,6 +497,11 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +767,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16484)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16484)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16484)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16484)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -477,6 +478,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -491,9 +493,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +766,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,15 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v16690)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -477,6 +478,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -493,7 +495,15 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17105)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -469,6 +470,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -491,9 +493,16 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17278)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +765,25 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +997,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,11 +245,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            resizeBuffer();
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17332)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -493,7 +494,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +764,9 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            byte b = lineSeparator[lineSeparator.length - 1];
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17370)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -493,7 +492,12 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +763,9 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17566)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -491,9 +490,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +764,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,12 +238,13 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            byte b = lineSeparator[lineSeparator.length - 1];
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17598)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -493,7 +494,14 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +767,24 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +998,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17721)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -469,6 +468,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -491,7 +491,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -760,6 +764,38 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,15 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17755)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -493,7 +494,12 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +765,9 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -491,9 +492,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,14 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18015)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -491,7 +492,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,15 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            resizeBuffer();
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v19414)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v19414)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v19414)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,18 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +768,25 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1078,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v19414)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v19414)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v19414)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v19414)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v20289)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v20289)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v20289)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -494,6 +494,13 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -760,6 +767,38 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -977,8 +1016,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v20289)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v20289)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v20289)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v20289)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,7 +493,26 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1070,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,9 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v21094)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -491,9 +493,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -760,6 +766,22 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,11 +995,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,15 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,18 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +770,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v22620)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -469,6 +468,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			modulus = 0;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -491,9 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -760,6 +766,22 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +995,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,17 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23046)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -491,9 +491,18 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +768,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,14 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,23 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +773,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v25899)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v27691)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v27691)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v27691)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,24 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +776,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +997,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v27691)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v27691)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v27691)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v27691)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -485,15 +486,26 @@
                 }
                 x = (x << 8) + b;
                 if (0 == modulus) {
-                    buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+                    b += 256;
+					buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +771,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +992,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,15 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v28242)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,23 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +773,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +994,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29039)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -491,9 +492,20 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +771,11 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +995,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,14 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29246)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -485,15 +486,29 @@
                 }
                 x = (x << 8) + b;
                 if (0 == modulus) {
-                    buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+                    b += 256;
+					buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -760,6 +775,22 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1010,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,14 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29460)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,22 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +994,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v29646)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -491,9 +492,24 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +775,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +990,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30050)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30091)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30091)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30091)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -485,13 +484,27 @@
                 }
                 x = (x << 8) + b;
                 if (0 == modulus) {
-                    buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+                    b += 256;
+					buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +772,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +987,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30091)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30091)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30091)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30091)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +769,59 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1035,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v30898)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,19 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +771,25 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1003,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,9 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31065)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +769,58 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1034,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,14 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31250)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -491,7 +492,16 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +769,74 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1056,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,14 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v31857)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -491,7 +492,18 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +771,58 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1036,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32004)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,21 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +771,58 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1042,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v32461)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,22 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        byte[] buf = new byte[pos - readPos];
+						b += 256;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +774,42 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1023,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v34088)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35065)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35065)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35065)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,24 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +774,27 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1008,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35065)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35065)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35065)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35065)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,20 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +772,88 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -975,7 +1069,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if (pArray == null || pArray.length == 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v35872)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,21 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +771,76 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1060,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,6 +250,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v41487)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,24 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +776,44 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1033,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,8 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v43053)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,21 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +771,46 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1024,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v44443)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,24 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +774,61 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1042,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,8 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45675)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45885)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45885)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45885)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,23 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +775,33 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1015,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45885)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45885)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45885)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v45885)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47488)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47488)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47488)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,22 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						currentLinePos += 4;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +772,63 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1048,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47488)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47488)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47488)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47488)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47843)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47843)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47843)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,31 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +781,60 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1048,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47843)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47843)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47843)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v47843)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,27 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +777,61 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1051,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v48401)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,28 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +780,13 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,8 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49272)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,27 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +777,31 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1021,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49401)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer = null;
             }
             return len;
         }
@@ -491,7 +492,22 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +775,91 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -974,6 +1074,7 @@
         long mod = len % 4;
         if (mod != 0) {
             len += 4 - mod;
+			return len;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,12 +244,15 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
+		buffer[pos++] = PAD;
         if (containsBase32Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v49402)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v50490)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v50490)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v50490)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				eof = true;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -491,9 +492,28 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +779,77 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1069,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v50490)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v50490)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v50490)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v50490)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,23 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +775,95 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1077,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51288)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,28 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +778,92 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -977,9 +1081,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v51687)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,30 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +780,59 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1052,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52015)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,33 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						currentLinePos += 4;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +783,57 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1047,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52658)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,30 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						x = x >> 3;
+						currentLinePos += 4;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +780,46 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1033,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52659)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,30 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						currentLinePos += 4;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +782,9 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +998,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,8 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v52896)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,31 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +781,11 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1005,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,9 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v53481)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v55875)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v55875)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v55875)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,37 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos += 4;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +787,43 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1043,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v55875)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v55875)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v55875)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v55875)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,30 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +782,58 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1047,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -244,6 +244,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56490)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56820)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56820)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56820)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,33 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +785,58 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1056,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56820)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56820)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56820)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56820)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56864)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56864)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56864)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,35 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +787,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1002,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56864)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56864)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56864)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56864)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56866)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56866)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56866)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,33 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +785,58 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1050,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56866)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56866)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56866)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v56866)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v57237)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v57237)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v57237)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,29 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +781,109 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1097,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v57237)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v57237)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v57237)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v57237)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v58629)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v58629)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v58629)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,35 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +785,106 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1104,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v58629)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v58629)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v58629)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v58629)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61679)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61679)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61679)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,30 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +780,90 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -826,7 +930,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +1084,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61679)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61679)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61679)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61679)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61804)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61804)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61804)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,12 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				{
+					byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+					System.arraycopy(buffer, 0, b, 0, buffer.length);
+					buffer = b;
+				}
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +496,37 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						readPos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +792,57 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1062,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61804)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61804)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61804)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v61804)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62284)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62284)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62284)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,39 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +789,59 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1055,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62284)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62284)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62284)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62284)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62674)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62674)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62674)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,37 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +787,12 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1006,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62674)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62674)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62674)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v62674)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v64647)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v64647)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v64647)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,41 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +791,10 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1008,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v64647)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v64647)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v64647)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v64647)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v65623)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v65623)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v65623)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,12 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				{
+					byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+					System.arraycopy(buffer, 0, b, 0, buffer.length);
+					buffer = b;
+				}
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +496,44 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +799,57 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1063,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v65623)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v65623)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v65623)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v65623)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v68695)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v68695)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v68695)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,41 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						int readLen = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -759,7 +793,26 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1032,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v68695)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v68695)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v68695)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v68695)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70887)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70887)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70887)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,49 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						String sep = StringUtils.newStringUtf8(lineSeparator);
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1019,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70887)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70887)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70887)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70887)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70888)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70888)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70888)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,46 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        eof = false;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						String sep = StringUtils.newStringUtf8(lineSeparator);
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +796,26 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1029,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70888)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70888)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70888)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v70888)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v72044)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v72044)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v72044)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -491,9 +492,42 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +793,10 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		eof = true;
+		eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1010,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v72044)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v72044)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v72044)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v72044)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73096)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73096)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73096)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,47 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +797,24 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,7 +1028,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73096)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73096)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73096)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73096)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73468)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73468)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73468)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,46 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						eof = false;
+						int readLen = 0;
+						x = x >> 3;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -760,6 +797,38 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1048,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73468)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73468)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73468)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73468)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73499)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73499)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73499)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,41 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +791,40 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +1044,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73499)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73499)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73499)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v73499)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v76428)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v76428)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v76428)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -491,9 +492,51 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						eof = false;
+						x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 3;
+						x = x >> 3;
+						eof = false;
+						x = x >> 3;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1016,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v76428)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v76428)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v76428)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  PatchLogExporter - patch (v76428)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-06 08:39:42 [main] [INFO]  KGenProgMain - Summary
Reached generation = 384
Generated variants = 76428
Syntax valid variants = 69704
Build succeeded variants = 42828
Time elapsed = 9 hours 33 minutes 1 seconds
Exit status = SUCCESS
