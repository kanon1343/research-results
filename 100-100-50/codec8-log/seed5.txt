2023-11-07 14:41:21 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-07 14:41:21 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-07 14:41:21 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-07 14:41:21 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/kgenprog-8.toml (set by command line)
rootDir = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8 (set in config file)
productPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/java] (set in config file)
testPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64InputStreamTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 5 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /home/fse-pluto/Desktop/research
version = 1.8.2
================================================================
2023-11-07 14:41:24 [main] [INFO]  KGenProgMain - initial failed tests (1/12)
org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105: null

2023-11-07 14:41:24 [main] [INFO]  KGenProgMain - GA started
2023-11-07 14:41:24 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-07 14:53:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 3 seconds
Variants: generated 100, build-succeeded 18, build-failed 57, syntax-invalid 6, redundant 19
Fitness: max 1(2), min 0.333(1), ave 0.847
Test execution time: sum 721553 ms, max 720027 ms, min 27 ms
----------------------------------------------------------------

2023-11-07 14:53:28 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-07 15:23:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 6 seconds
Variants: generated 100, build-succeeded 12, build-failed 54, syntax-invalid 10, redundant 24
Fitness: max 0.917(3), min 0.583(2), ave 0.764
Test execution time: sum 1800465 ms, max 900025 ms, min 24 ms
----------------------------------------------------------------

2023-11-07 15:23:30 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-07 16:38:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 8 seconds
Variants: generated 200, build-succeeded 54, build-failed 64, syntax-invalid 8, redundant 74
Fitness: max 0.917(9), min 0.333(1), ave 0.77
Test execution time: sum 4498708 ms, max 1440023 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 16:38:32 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-07 17:35:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 minutes 19 seconds
Variants: generated 200, build-succeeded 62, build-failed 52, syntax-invalid 17, redundant 69
Fitness: max 0.917(8), min 0.333(1), ave 0.774
Test execution time: sum 3427834 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 17:35:44 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-07 17:50:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 26 seconds
Variants: generated 200, build-succeeded 60, build-failed 61, syntax-invalid 14, redundant 65
Fitness: max 1(3), min 0.583(3), ave 0.849
Test execution time: sum 902918 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 17:50:50 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-07 18:07:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 21 seconds
Variants: generated 200, build-succeeded 51, build-failed 52, syntax-invalid 24, redundant 73
Fitness: max 1(1), min 0.5(1), ave 0.879
Test execution time: sum 1012636 ms, max 900022 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 18:07:46 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-07 18:07:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 28 seconds
Variants: generated 200, build-succeeded 49, build-failed 61, syntax-invalid 28, redundant 62
Fitness: max 1(1), min 0.75(7), ave 0.891
Test execution time: sum 3466 ms, max 118 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 18:07:53 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-07 18:08:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 36 seconds
Variants: generated 200, build-succeeded 59, build-failed 64, syntax-invalid 23, redundant 54
Fitness: max 0.917(55), min 0(1), ave 0.894
Test execution time: sum 4874 ms, max 127 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 18:08:01 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-07 18:08:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 45 seconds
Variants: generated 200, build-succeeded 61, build-failed 61, syntax-invalid 23, redundant 55
Fitness: max 0.917(56), min 0.75(4), ave 0.904
Test execution time: sum 5404 ms, max 582 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 18:08:10 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-07 18:08:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 53 seconds
Variants: generated 200, build-succeeded 54, build-failed 68, syntax-invalid 25, redundant 53
Fitness: max 0.917(50), min 0(1), ave 0.89
Test execution time: sum 4309 ms, max 124 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 18:08:18 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-07 18:32:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 51 minutes 3 seconds
Variants: generated 200, build-succeeded 67, build-failed 58, syntax-invalid 31, redundant 44
Fitness: max 0.917(63), min 0.333(1), ave 0.9
Test execution time: sum 1445339 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 18:32:27 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-07 18:32:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 51 minutes 12 seconds
Variants: generated 200, build-succeeded 73, build-failed 61, syntax-invalid 30, redundant 36
Fitness: max 1(1), min 0.75(3), ave 0.911
Test execution time: sum 5755 ms, max 125 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 18:32:37 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-07 18:50:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 22 seconds
Variants: generated 200, build-succeeded 73, build-failed 60, syntax-invalid 30, redundant 37
Fitness: max 0.917(67), min 0.333(1), ave 0.895
Test execution time: sum 1085697 ms, max 1080021 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 18:50:47 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-07 18:50:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 33 seconds
Variants: generated 200, build-succeeded 76, build-failed 68, syntax-invalid 28, redundant 28
Fitness: max 0.917(75), min 0.833(1), ave 0.916
Test execution time: sum 6032 ms, max 119 ms, min 43 ms
----------------------------------------------------------------

2023-11-07 18:50:58 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-07 18:51:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 44 seconds
Variants: generated 200, build-succeeded 73, build-failed 64, syntax-invalid 42, redundant 21
Fitness: max 1(2), min 0.75(1), ave 0.917
Test execution time: sum 5988 ms, max 130 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 18:51:09 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-07 18:51:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 56 seconds
Variants: generated 200, build-succeeded 87, build-failed 54, syntax-invalid 35, redundant 24
Fitness: max 0.917(82), min 0.333(1), ave 0.902
Test execution time: sum 7145 ms, max 128 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 18:51:21 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-07 19:15:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 34 minutes 8 seconds
Variants: generated 200, build-succeeded 87, build-failed 59, syntax-invalid 35, redundant 19
Fitness: max 0.917(83), min 0.333(1), ave 0.904
Test execution time: sum 1447049 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 19:15:33 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-07 19:45:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 4 minutes 19 seconds
Variants: generated 200, build-succeeded 75, build-failed 54, syntax-invalid 45, redundant 26
Fitness: max 1(2), min 0.333(1), ave 0.897
Test execution time: sum 1805650 ms, max 1080020 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 19:45:43 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-07 20:09:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 28 minutes 30 seconds
Variants: generated 200, build-succeeded 79, build-failed 69, syntax-invalid 37, redundant 15
Fitness: max 1(1), min 0.333(1), ave 0.9
Test execution time: sum 1446353 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 20:09:55 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-07 20:34:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 52 minutes 42 seconds
Variants: generated 200, build-succeeded 83, build-failed 43, syntax-invalid 47, redundant 27
Fitness: max 0.917(79), min 0.333(1), ave 0.905
Test execution time: sum 1446809 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 20:34:07 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-07 20:34:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 52 minutes 54 seconds
Variants: generated 200, build-succeeded 77, build-failed 56, syntax-invalid 45, redundant 22
Fitness: max 1(1), min 0.75(3), ave 0.911
Test execution time: sum 6300 ms, max 123 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 20:34:18 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-07 20:34:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 53 minutes 5 seconds
Variants: generated 200, build-succeeded 72, build-failed 59, syntax-invalid 46, redundant 23
Fitness: max 0.917(71), min 0.75(1), ave 0.914
Test execution time: sum 6025 ms, max 126 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 20:34:29 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-07 20:34:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 53 minutes 16 seconds
Variants: generated 200, build-succeeded 75, build-failed 59, syntax-invalid 46, redundant 20
Fitness: max 1(1), min 0.75(3), ave 0.91
Test execution time: sum 6183 ms, max 128 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 20:34:41 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-07 20:34:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 53 minutes 29 seconds
Variants: generated 200, build-succeeded 82, build-failed 52, syntax-invalid 49, redundant 17
Fitness: max 0.917(77), min 0.75(4), ave 0.908
Test execution time: sum 6652 ms, max 127 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 20:34:53 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-07 20:35:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 53 minutes 41 seconds
Variants: generated 200, build-succeeded 79, build-failed 62, syntax-invalid 42, redundant 17
Fitness: max 0.917(73), min 0.667(1), ave 0.905
Test execution time: sum 6701 ms, max 127 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 20:35:06 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-07 20:35:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 53 minutes 54 seconds
Variants: generated 200, build-succeeded 85, build-failed 61, syntax-invalid 49, redundant 5
Fitness: max 0.917(78), min 0.583(1), ave 0.9
Test execution time: sum 7021 ms, max 130 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 20:35:18 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-07 20:35:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 54 minutes 8 seconds
Variants: generated 200, build-succeeded 96, build-failed 52, syntax-invalid 36, redundant 16
Fitness: max 1(1), min 0.583(1), ave 0.909
Test execution time: sum 8132 ms, max 130 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 20:35:32 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-07 20:35:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 54 minutes 22 seconds
Variants: generated 200, build-succeeded 89, build-failed 69, syntax-invalid 28, redundant 14
Fitness: max 1(2), min 0.75(2), ave 0.914
Test execution time: sum 7600 ms, max 163 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 20:35:46 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-07 21:00:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 18 minutes 36 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 37, redundant 7
Fitness: max 0.917(84), min 0.333(1), ave 0.892
Test execution time: sum 1447772 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 21:00:01 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-07 21:24:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 42 minutes 52 seconds
Variants: generated 200, build-succeeded 101, build-failed 66, syntax-invalid 24, redundant 9
Fitness: max 0.917(96), min 0.333(1), ave 0.904
Test execution time: sum 1448618 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 21:24:16 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-07 21:48:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 7 minutes 7 seconds
Variants: generated 200, build-succeeded 105, build-failed 51, syntax-invalid 31, redundant 13
Fitness: max 0.917(96), min 0.333(1), ave 0.893
Test execution time: sum 1448730 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 21:48:32 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-07 22:03:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 22 minutes 23 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 28, redundant 8
Fitness: max 0.917(97), min 0.583(1), ave 0.897
Test execution time: sum 908948 ms, max 900022 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 22:03:48 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-07 22:05:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 23 minutes 54 seconds
Variants: generated 200, build-succeeded 99, build-failed 62, syntax-invalid 24, redundant 15
Fitness: max 0.917(92), min 0.5(1), ave 0.897
Test execution time: sum 83541 ms, max 75097 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 22:05:18 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-07 22:05:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 24 minutes 9 seconds
Variants: generated 200, build-succeeded 102, build-failed 57, syntax-invalid 30, redundant 11
Fitness: max 1(2), min 0.5(1), ave 0.892
Test execution time: sum 8420 ms, max 142 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 22:05:34 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-07 22:05:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 24 minutes 26 seconds
Variants: generated 200, build-succeeded 107, build-failed 49, syntax-invalid 31, redundant 13
Fitness: max 0.917(96), min 0.667(3), ave 0.9
Test execution time: sum 9180 ms, max 148 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 22:05:50 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-07 22:06:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 24 minutes 42 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 28, redundant 7
Fitness: max 0.917(100), min 0.75(1), ave 0.915
Test execution time: sum 9174 ms, max 139 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 22:06:07 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-07 22:30:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 48 minutes 59 seconds
Variants: generated 200, build-succeeded 109, build-failed 59, syntax-invalid 21, redundant 11
Fitness: max 1(1), min 0.333(1), ave 0.898
Test execution time: sum 1449365 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 22:30:24 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-07 22:30:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 49 minutes 15 seconds
Variants: generated 200, build-succeeded 104, build-failed 54, syntax-invalid 32, redundant 10
Fitness: max 1(1), min 0.667(2), ave 0.906
Test execution time: sum 9009 ms, max 138 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 22:30:40 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-07 22:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 49 minutes 34 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 21, redundant 4
Fitness: max 1(1), min 0.75(5), ave 0.91
Test execution time: sum 10666 ms, max 147 ms, min 21 ms
----------------------------------------------------------------

2023-11-07 22:30:59 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-07 22:31:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 49 minutes 52 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 22, redundant 10
Fitness: max 0.917(105), min 0.333(1), ave 0.9
Test execution time: sum 9833 ms, max 136 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 22:31:16 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-07 22:31:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 50 minutes 8 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 35, redundant 9
Fitness: max 1(1), min 0.75(10), ave 0.9
Test execution time: sum 8527 ms, max 151 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 22:31:32 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-07 22:31:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 50 minutes 24 seconds
Variants: generated 200, build-succeeded 103, build-failed 52, syntax-invalid 37, redundant 8
Fitness: max 1(1), min 0.75(7), ave 0.906
Test execution time: sum 9028 ms, max 126 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 22:31:49 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-07 22:32:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 50 minutes 41 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 33, redundant 7
Fitness: max 0.917(98), min 0.333(1), ave 0.905
Test execution time: sum 9227 ms, max 136 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 22:32:06 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-07 22:32:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 50 minutes 59 seconds
Variants: generated 200, build-succeeded 108, build-failed 46, syntax-invalid 33, redundant 13
Fitness: max 0.917(103), min 0.667(2), ave 0.907
Test execution time: sum 9679 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 22:32:23 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-07 22:32:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 51 minutes 16 seconds
Variants: generated 200, build-succeeded 107, build-failed 50, syntax-invalid 34, redundant 9
Fitness: max 1(1), min 0.667(2), ave 0.905
Test execution time: sum 9279 ms, max 129 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 22:32:41 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-07 22:47:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 6 minutes 34 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 20, redundant 10
Fitness: max 0.917(109), min 0.583(1), ave 0.914
Test execution time: sum 910125 ms, max 900022 ms, min 70 ms
----------------------------------------------------------------

2023-11-07 22:47:59 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-07 23:00:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 18 minutes 53 seconds
Variants: generated 200, build-succeeded 115, build-failed 49, syntax-invalid 26, redundant 10
Fitness: max 1(1), min 0.583(1), ave 0.909
Test execution time: sum 730399 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:00:18 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-07 23:00:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 19 minutes 13 seconds
Variants: generated 200, build-succeeded 118, build-failed 49, syntax-invalid 24, redundant 9
Fitness: max 1(2), min 0.667(1), ave 0.91
Test execution time: sum 10913 ms, max 146 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:00:38 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-07 23:00:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 19 minutes 31 seconds
Variants: generated 200, build-succeeded 106, build-failed 52, syntax-invalid 30, redundant 12
Fitness: max 0.917(102), min 0.667(2), ave 0.909
Test execution time: sum 9905 ms, max 138 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:00:56 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-07 23:01:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 19 minutes 49 seconds
Variants: generated 200, build-succeeded 107, build-failed 55, syntax-invalid 32, redundant 6
Fitness: max 1(3), min 0.667(1), ave 0.906
Test execution time: sum 9441 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:01:13 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-07 23:16:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 35 minutes 8 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 22, redundant 11
Fitness: max 0.917(106), min 0.583(1), ave 0.905
Test execution time: sum 909924 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:16:32 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-07 23:16:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 35 minutes 26 seconds
Variants: generated 200, build-succeeded 107, build-failed 53, syntax-invalid 34, redundant 6
Fitness: max 1(1), min 0.667(2), ave 0.908
Test execution time: sum 9964 ms, max 146 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:16:51 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-07 23:29:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 47 minutes 43 seconds
Variants: generated 200, build-succeeded 93, build-failed 66, syntax-invalid 35, redundant 6
Fitness: max 0.917(85), min 0.583(1), ave 0.901
Test execution time: sum 728332 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:29:08 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-07 23:29:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 48 minutes 3 seconds
Variants: generated 200, build-succeeded 116, build-failed 50, syntax-invalid 25, redundant 9
Fitness: max 0.917(113), min 0.583(1), ave 0.911
Test execution time: sum 10747 ms, max 153 ms, min 20 ms
----------------------------------------------------------------

2023-11-07 23:29:28 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-07 23:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 48 minutes 21 seconds
Variants: generated 200, build-succeeded 95, build-failed 59, syntax-invalid 36, redundant 10
Fitness: max 0.917(93), min 0.75(2), ave 0.913
Test execution time: sum 8854 ms, max 158 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:29:46 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-07 23:30:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 48 minutes 38 seconds
Variants: generated 200, build-succeeded 95, build-failed 56, syntax-invalid 37, redundant 12
Fitness: max 1(2), min 0.75(2), ave 0.915
Test execution time: sum 8746 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:30:03 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-07 23:30:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 48 minutes 57 seconds
Variants: generated 200, build-succeeded 106, build-failed 51, syntax-invalid 32, redundant 11
Fitness: max 0.917(105), min 0.75(1), ave 0.915
Test execution time: sum 10064 ms, max 171 ms, min 22 ms
----------------------------------------------------------------

2023-11-07 23:30:22 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-08 00:00:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 19 minutes 16 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 33, redundant 6
Fitness: max 1(2), min 0.583(2), ave 0.912
Test execution time: sum 1809288 ms, max 900024 ms, min 68 ms
----------------------------------------------------------------

2023-11-08 00:00:41 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-08 00:00:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 19 minutes 35 seconds
Variants: generated 200, build-succeeded 101, build-failed 52, syntax-invalid 32, redundant 15
Fitness: max 1(1), min 0.75(3), ave 0.913
Test execution time: sum 9268 ms, max 142 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:00:59 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-08 00:01:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 19 minutes 54 seconds
Variants: generated 200, build-succeeded 104, build-failed 52, syntax-invalid 33, redundant 11
Fitness: max 1(1), min 0.75(5), ave 0.909
Test execution time: sum 9594 ms, max 154 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:01:18 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-08 00:01:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 20 minutes 14 seconds
Variants: generated 200, build-succeeded 113, build-failed 56, syntax-invalid 25, redundant 6
Fitness: max 0.917(110), min 0.75(3), ave 0.912
Test execution time: sum 10389 ms, max 139 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:01:38 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-08 00:01:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 20 minutes 34 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 24, redundant 8
Fitness: max 0.917(104), min 0.833(1), ave 0.916
Test execution time: sum 9808 ms, max 142 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:01:58 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-08 00:02:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 20 minutes 54 seconds
Variants: generated 200, build-succeeded 109, build-failed 54, syntax-invalid 25, redundant 12
Fitness: max 0.917(106), min 0.5(1), ave 0.91
Test execution time: sum 10058 ms, max 135 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 00:02:18 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-08 00:02:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 15 seconds
Variants: generated 200, build-succeeded 117, build-failed 52, syntax-invalid 25, redundant 6
Fitness: max 0.917(110), min 0.75(7), ave 0.907
Test execution time: sum 10463 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:02:39 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-08 00:03:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 35 seconds
Variants: generated 200, build-succeeded 110, build-failed 61, syntax-invalid 26, redundant 3
Fitness: max 0.917(108), min 0.75(2), ave 0.914
Test execution time: sum 10636 ms, max 186 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:03:00 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-08 00:03:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 56 seconds
Variants: generated 200, build-succeeded 118, build-failed 47, syntax-invalid 29, redundant 6
Fitness: max 0.917(112), min 0.5(1), ave 0.906
Test execution time: sum 10635 ms, max 130 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:03:21 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-08 00:03:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 22 minutes 16 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 26, redundant 8
Fitness: max 1(1), min 0.75(4), ave 0.911
Test execution time: sum 9880 ms, max 135 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:03:41 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-08 00:19:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 37 seconds
Variants: generated 200, build-succeeded 120, build-failed 49, syntax-invalid 18, redundant 13
Fitness: max 0.917(113), min 0.583(1), ave 0.906
Test execution time: sum 910338 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:19:02 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-08 00:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 57 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 27, redundant 4
Fitness: max 0.917(105), min 0.75(2), ave 0.914
Test execution time: sum 9863 ms, max 145 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:19:22 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-08 00:19:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 18 seconds
Variants: generated 200, build-succeeded 106, build-failed 57, syntax-invalid 28, redundant 9
Fitness: max 0.917(104), min 0.75(2), ave 0.914
Test execution time: sum 9830 ms, max 144 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:19:42 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-08 00:20:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 38 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 27, redundant 7
Fitness: max 1(2), min 0.75(4), ave 0.912
Test execution time: sum 9978 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:20:03 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-08 00:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 57 seconds
Variants: generated 200, build-succeeded 94, build-failed 61, syntax-invalid 35, redundant 10
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 8714 ms, max 135 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:20:22 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-08 00:38:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 57 minutes 17 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 38, redundant 6
Fitness: max 0.917(97), min 0.333(1), ave 0.907
Test execution time: sum 1089603 ms, max 1080020 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:38:41 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-08 00:39:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 57 minutes 37 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 30, redundant 6
Fitness: max 0.917(104), min 0.75(3), ave 0.912
Test execution time: sum 9853 ms, max 154 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 00:39:02 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-08 01:03:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 21 minutes 58 seconds
Variants: generated 200, build-succeeded 114, build-failed 47, syntax-invalid 27, redundant 12
Fitness: max 0.917(110), min 0.333(1), ave 0.907
Test execution time: sum 1450316 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 01:03:23 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-08 01:03:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 22 minutes 20 seconds
Variants: generated 200, build-succeeded 114, build-failed 52, syntax-invalid 24, redundant 10
Fitness: max 0.917(110), min 0.75(4), ave 0.911
Test execution time: sum 10399 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 01:03:44 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-08 01:04:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 22 minutes 40 seconds
Variants: generated 200, build-succeeded 108, build-failed 46, syntax-invalid 33, redundant 13
Fitness: max 0.917(105), min 0.75(3), ave 0.912
Test execution time: sum 9836 ms, max 135 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 01:04:05 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-08 01:52:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 11 minutes 0 seconds
Variants: generated 200, build-succeeded 95, build-failed 61, syntax-invalid 34, redundant 10
Fitness: max 0.917(92), min 0.333(2), ave 0.903
Test execution time: sum 2888535 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 01:52:24 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-08 01:52:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 11 minutes 21 seconds
Variants: generated 200, build-succeeded 108, build-failed 53, syntax-invalid 29, redundant 10
Fitness: max 0.917(105), min 0.75(2), ave 0.913
Test execution time: sum 9967 ms, max 133 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 01:52:46 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-08 01:54:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 12 minutes 57 seconds
Variants: generated 200, build-succeeded 113, build-failed 52, syntax-invalid 26, redundant 9
Fitness: max 0.917(109), min 0.5(1), ave 0.909
Test execution time: sum 84597 ms, max 74478 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 01:54:22 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-08 01:54:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 13 minutes 19 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 23, redundant 12
Fitness: max 0.917(106), min 0.75(1), ave 0.915
Test execution time: sum 9904 ms, max 133 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 01:54:43 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-08 01:55:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 13 minutes 40 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 27, redundant 5
Fitness: max 1(3), min 0.75(3), ave 0.914
Test execution time: sum 10183 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 01:55:05 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-08 01:56:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 15 minutes 17 seconds
Variants: generated 200, build-succeeded 119, build-failed 42, syntax-invalid 28, redundant 11
Fitness: max 0.917(114), min 0.5(1), ave 0.906
Test execution time: sum 84944 ms, max 74310 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 01:56:41 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-08 02:21:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 39 minutes 37 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 25, redundant 12
Fitness: max 0.917(94), min 0.333(1), ave 0.898
Test execution time: sum 1449079 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 02:21:02 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-08 02:21:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 39 minutes 59 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 24, redundant 5
Fitness: max 0.917(108), min 0.75(1), ave 0.915
Test execution time: sum 10125 ms, max 146 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 02:21:24 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-08 02:21:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 40 minutes 20 seconds
Variants: generated 200, build-succeeded 99, build-failed 57, syntax-invalid 31, redundant 13
Fitness: max 0.917(96), min 0.75(3), ave 0.912
Test execution time: sum 9039 ms, max 138 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 02:21:44 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-08 02:22:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 40 minutes 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 49, syntax-invalid 30, redundant 14
Fitness: max 1(1), min 0.5(1), ave 0.907
Test execution time: sum 9485 ms, max 136 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 02:22:06 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-08 02:22:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 41 minutes 3 seconds
Variants: generated 200, build-succeeded 109, build-failed 51, syntax-invalid 29, redundant 11
Fitness: max 0.917(104), min 0.75(5), ave 0.909
Test execution time: sum 9857 ms, max 134 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 02:22:27 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-08 02:24:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 42 minutes 39 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 20, redundant 11
Fitness: max 0.917(110), min 0.5(2), ave 0.906
Test execution time: sum 84303 ms, max 74154 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 02:24:04 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-08 02:24:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 43 minutes 3 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 21, redundant 4
Fitness: max 0.917(113), min 0.75(3), ave 0.912
Test execution time: sum 10755 ms, max 135 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 02:24:27 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-08 02:24:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 43 minutes 25 seconds
Variants: generated 200, build-succeeded 108, build-failed 47, syntax-invalid 26, redundant 19
Fitness: max 0.917(107), min 0.833(1), ave 0.916
Test execution time: sum 10218 ms, max 138 ms, min 57 ms
----------------------------------------------------------------

2023-11-08 02:24:50 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-08 02:49:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 7 minutes 49 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 25, redundant 4
Fitness: max 1(1), min 0.333(1), ave 0.905
Test execution time: sum 1450669 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 02:49:13 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-08 02:49:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 8 minutes 13 seconds
Variants: generated 200, build-succeeded 120, build-failed 50, syntax-invalid 22, redundant 8
Fitness: max 1(2), min 0.75(5), ave 0.911
Test execution time: sum 11110 ms, max 135 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 02:49:37 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-08 03:05:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 23 minutes 36 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 25, redundant 4
Fitness: max 0.917(108), min 0.583(1), ave 0.911
Test execution time: sum 909931 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 03:05:01 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-08 03:05:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 23 minutes 59 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 27, redundant 8
Fitness: max 1(2), min 0.75(1), ave 0.917
Test execution time: sum 10225 ms, max 133 ms, min 34 ms
----------------------------------------------------------------

2023-11-08 03:05:24 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-08 03:20:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 39 minutes 22 seconds
Variants: generated 200, build-succeeded 105, build-failed 50, syntax-invalid 32, redundant 13
Fitness: max 0.917(102), min 0.583(1), ave 0.91
Test execution time: sum 909713 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 03:20:47 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-08 03:36:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 54 minutes 46 seconds
Variants: generated 200, build-succeeded 113, build-failed 52, syntax-invalid 28, redundant 7
Fitness: max 0.917(107), min 0.583(1), ave 0.907
Test execution time: sum 910405 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 03:36:10 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-08 03:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 55 minutes 11 seconds
Variants: generated 200, build-succeeded 120, build-failed 49, syntax-invalid 20, redundant 11
Fitness: max 0.917(115), min 0.75(5), ave 0.91
Test execution time: sum 11478 ms, max 148 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 03:36:36 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-08 04:01:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 19 minutes 37 seconds
Variants: generated 200, build-succeeded 127, build-failed 42, syntax-invalid 21, redundant 10
Fitness: max 0.917(125), min 0.333(1), ave 0.911
Test execution time: sum 1452256 ms, max 1440022 ms, min 31 ms
----------------------------------------------------------------

2023-11-08 04:01:02 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-08 04:01:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 20 minutes 2 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 19, redundant 12
Fitness: max 0.917(108), min 0.75(2), ave 0.914
Test execution time: sum 10402 ms, max 124 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:01:26 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-08 04:16:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 35 minutes 24 seconds
Variants: generated 200, build-succeeded 91, build-failed 61, syntax-invalid 41, redundant 7
Fitness: max 0.917(89), min 0.583(1), ave 0.911
Test execution time: sum 908596 ms, max 900023 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:16:48 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-08 04:17:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 35 minutes 47 seconds
Variants: generated 200, build-succeeded 106, build-failed 48, syntax-invalid 39, redundant 7
Fitness: max 0.917(102), min 0.75(4), ave 0.91
Test execution time: sum 9767 ms, max 154 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:17:11 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-08 04:17:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 36 minutes 9 seconds
Variants: generated 200, build-succeeded 98, build-failed 54, syntax-invalid 41, redundant 7
Fitness: max 0.917(96), min 0.75(2), ave 0.913
Test execution time: sum 9385 ms, max 159 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:17:34 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-08 04:17:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 36 minutes 32 seconds
Variants: generated 200, build-succeeded 107, build-failed 49, syntax-invalid 31, redundant 13
Fitness: max 0.917(104), min 0.75(3), ave 0.912
Test execution time: sum 9443 ms, max 140 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 04:17:57 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-08 04:18:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 36 minutes 58 seconds
Variants: generated 200, build-succeeded 122, build-failed 52, syntax-invalid 19, redundant 7
Fitness: max 1(2), min 0.75(2), ave 0.915
Test execution time: sum 10720 ms, max 148 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 04:18:22 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-08 04:18:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 21 seconds
Variants: generated 200, build-succeeded 105, build-failed 53, syntax-invalid 30, redundant 12
Fitness: max 1(1), min 0.917(104), ave 0.917
Test execution time: sum 9628 ms, max 134 ms, min 69 ms
----------------------------------------------------------------

2023-11-08 04:18:46 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-08 04:19:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 46 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 26, redundant 9
Fitness: max 1(2), min 0.75(2), ave 0.915
Test execution time: sum 9945 ms, max 144 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 04:19:10 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-08 04:40:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 59 minutes 9 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 28, redundant 8
Fitness: max 1(1), min 0.333(1), ave 0.907
Test execution time: sum 1269445 ms, max 1260021 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:40:34 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-08 04:40:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 59 minutes 34 seconds
Variants: generated 200, build-succeeded 110, build-failed 53, syntax-invalid 28, redundant 9
Fitness: max 0.917(108), min 0.5(1), ave 0.911
Test execution time: sum 10259 ms, max 139 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:40:59 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-08 04:41:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 59 minutes 56 seconds
Variants: generated 200, build-succeeded 93, build-failed 59, syntax-invalid 39, redundant 9
Fitness: max 1(1), min 0.75(2), ave 0.914
Test execution time: sum 8575 ms, max 133 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:41:21 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-08 04:56:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 15 minutes 21 seconds
Variants: generated 200, build-succeeded 115, build-failed 44, syntax-invalid 26, redundant 15
Fitness: max 0.917(114), min 0.583(1), ave 0.914
Test execution time: sum 910151 ms, max 900024 ms, min 63 ms
----------------------------------------------------------------

2023-11-08 04:56:46 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-08 04:57:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 15 minutes 45 seconds
Variants: generated 200, build-succeeded 106, build-failed 56, syntax-invalid 30, redundant 8
Fitness: max 0.917(103), min 0.333(1), ave 0.908
Test execution time: sum 9555 ms, max 146 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 04:57:10 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-08 04:57:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 16 minutes 8 seconds
Variants: generated 200, build-succeeded 96, build-failed 49, syntax-invalid 40, redundant 15
Fitness: max 0.917(93), min 0.75(3), ave 0.911
Test execution time: sum 8687 ms, max 148 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:57:32 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-08 04:57:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 16 minutes 30 seconds
Variants: generated 200, build-succeeded 99, build-failed 51, syntax-invalid 44, redundant 6
Fitness: max 0.917(96), min 0.75(3), ave 0.912
Test execution time: sum 8938 ms, max 141 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:57:55 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-08 04:58:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 16 minutes 53 seconds
Variants: generated 200, build-succeeded 89, build-failed 58, syntax-invalid 40, redundant 13
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 8336 ms, max 141 ms, min 28 ms
----------------------------------------------------------------

2023-11-08 04:58:18 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-08 04:58:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 17 minutes 17 seconds
Variants: generated 200, build-succeeded 106, build-failed 49, syntax-invalid 38, redundant 7
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 9901 ms, max 141 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:58:42 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-08 04:59:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 17 minutes 41 seconds
Variants: generated 200, build-succeeded 99, build-failed 52, syntax-invalid 42, redundant 7
Fitness: max 0.917(97), min 0.75(2), ave 0.913
Test execution time: sum 9301 ms, max 147 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:59:06 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-08 04:59:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 18 minutes 5 seconds
Variants: generated 200, build-succeeded 97, build-failed 50, syntax-invalid 49, redundant 4
Fitness: max 0.917(96), min 0.75(1), ave 0.915
Test execution time: sum 9452 ms, max 148 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:59:29 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-08 04:59:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 18 minutes 28 seconds
Variants: generated 200, build-succeeded 92, build-failed 53, syntax-invalid 43, redundant 12
Fitness: max 1(1), min 0.75(3), ave 0.912
Test execution time: sum 8926 ms, max 146 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 04:59:53 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-08 05:00:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 18 minutes 50 seconds
Variants: generated 200, build-succeeded 79, build-failed 65, syntax-invalid 49, redundant 7
Fitness: max 1(1), min 0.917(78), ave 0.918
Test execution time: sum 7948 ms, max 149 ms, min 71 ms
----------------------------------------------------------------

2023-11-08 05:00:15 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-08 05:00:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 19 minutes 15 seconds
Variants: generated 200, build-succeeded 96, build-failed 57, syntax-invalid 37, redundant 10
Fitness: max 0.917(94), min 0.75(2), ave 0.913
Test execution time: sum 9061 ms, max 132 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 05:00:40 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-08 05:25:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 43 minutes 40 seconds
Variants: generated 200, build-succeeded 100, build-failed 57, syntax-invalid 34, redundant 9
Fitness: max 0.917(98), min 0.333(1), ave 0.91
Test execution time: sum 1449553 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 05:25:04 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-08 05:25:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 44 minutes 4 seconds
Variants: generated 200, build-succeeded 88, build-failed 63, syntax-invalid 41, redundant 8
Fitness: max 0.917(87), min 0.75(1), ave 0.915
Test execution time: sum 8475 ms, max 151 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 05:25:28 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-08 05:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 44 minutes 29 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 29, redundant 3
Fitness: max 1(1), min 0.75(3), ave 0.913
Test execution time: sum 10049 ms, max 143 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 05:25:54 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-08 05:26:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 44 minutes 55 seconds
Variants: generated 200, build-succeeded 98, build-failed 61, syntax-invalid 32, redundant 9
Fitness: max 0.917(96), min 0.75(1), ave 0.914
Test execution time: sum 9270 ms, max 142 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 05:26:19 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-08 05:26:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 45 minutes 21 seconds
Variants: generated 200, build-succeeded 114, build-failed 47, syntax-invalid 34, redundant 5
Fitness: max 0.917(108), min 0.75(6), ave 0.908
Test execution time: sum 10228 ms, max 138 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 05:26:46 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-08 05:27:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 45 minutes 46 seconds
Variants: generated 200, build-succeeded 97, build-failed 51, syntax-invalid 39, redundant 13
Fitness: max 0.917(96), min 0.75(1), ave 0.915
Test execution time: sum 9040 ms, max 142 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 05:27:11 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-08 05:27:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 46 minutes 13 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 24, redundant 6
Fitness: max 0.917(109), min 0.75(1), ave 0.915
Test execution time: sum 10131 ms, max 142 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 05:27:38 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-08 05:28:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 46 minutes 38 seconds
Variants: generated 200, build-succeeded 95, build-failed 56, syntax-invalid 44, redundant 5
Fitness: max 0.917(95), min 0.917(95), ave 0.917
Test execution time: sum 9160 ms, max 145 ms, min 74 ms
----------------------------------------------------------------

2023-11-08 05:28:02 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-08 06:07:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 26 minutes 3 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 39, redundant 7
Fitness: max 0.917(95), min 0.333(1), ave 0.904
Test execution time: sum 2349224 ms, max 1440022 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 06:07:28 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-08 06:07:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 26 minutes 31 seconds
Variants: generated 200, build-succeeded 114, build-failed 50, syntax-invalid 26, redundant 10
Fitness: max 0.917(113), min 0.75(1), ave 0.915
Test execution time: sum 10773 ms, max 130 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 06:07:56 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-08 06:08:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 26 minutes 59 seconds
Variants: generated 200, build-succeeded 105, build-failed 53, syntax-invalid 28, redundant 14
Fitness: max 0.917(102), min 0.75(2), ave 0.913
Test execution time: sum 9724 ms, max 140 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 06:08:23 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-08 06:32:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 51 minutes 26 seconds
Variants: generated 200, build-succeeded 106, build-failed 52, syntax-invalid 33, redundant 9
Fitness: max 0.917(103), min 0.333(1), ave 0.908
Test execution time: sum 1450020 ms, max 1440021 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 06:32:50 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-08 06:33:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 51 minutes 55 seconds
Variants: generated 200, build-succeeded 120, build-failed 49, syntax-invalid 13, redundant 18
Fitness: max 0.917(118), min 0.417(1), ave 0.911
Test execution time: sum 11299 ms, max 139 ms, min 25 ms
----------------------------------------------------------------

2023-11-08 06:33:20 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-08 06:33:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 52 minutes 24 seconds
Variants: generated 200, build-succeeded 107, build-failed 53, syntax-invalid 28, redundant 12
Fitness: max 1(1), min 0.75(2), ave 0.914
Test execution time: sum 10239 ms, max 142 ms, min 29 ms
----------------------------------------------------------------

2023-11-08 06:33:48 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-08 06:34:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 52 minutes 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 48, syntax-invalid 24, redundant 14
Fitness: max 1(3), min 0.75(3), ave 0.914
Test execution time: sum 10652 ms, max 142 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 06:34:17 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-08 06:34:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 53 minutes 22 seconds
Variants: generated 200, build-succeeded 116, build-failed 54, syntax-invalid 21, redundant 9
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 11128 ms, max 143 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 06:34:47 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-08 06:35:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 53 minutes 51 seconds
Variants: generated 200, build-succeeded 110, build-failed 53, syntax-invalid 29, redundant 8
Fitness: max 1(1), min 0.75(1), ave 0.915
Test execution time: sum 10527 ms, max 140 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 06:35:15 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-08 06:53:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 12 minutes 18 seconds
Variants: generated 200, build-succeeded 108, build-failed 53, syntax-invalid 34, redundant 5
Fitness: max 0.917(107), min 0.333(1), ave 0.911
Test execution time: sum 1089833 ms, max 1080021 ms, min 69 ms
----------------------------------------------------------------

2023-11-08 06:53:43 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-11-08 06:54:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 12 minutes 46 seconds
Variants: generated 200, build-succeeded 101, build-failed 58, syntax-invalid 32, redundant 9
Fitness: max 1(2), min 0.333(1), ave 0.909
Test execution time: sum 9627 ms, max 150 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 06:54:11 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-11-08 06:54:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 13 minutes 14 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 33, redundant 11
Fitness: max 0.917(94), min 0.333(1), ave 0.909
Test execution time: sum 9309 ms, max 149 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 06:54:39 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-11-08 06:55:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 13 minutes 42 seconds
Variants: generated 200, build-succeeded 104, build-failed 54, syntax-invalid 30, redundant 12
Fitness: max 0.917(102), min 0.75(2), ave 0.913
Test execution time: sum 9917 ms, max 142 ms, min 36 ms
----------------------------------------------------------------

2023-11-08 06:55:07 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-11-08 06:55:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 14 minutes 12 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 25, redundant 7
Fitness: max 0.917(111), min 0.583(1), ave 0.91
Test execution time: sum 10947 ms, max 150 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 06:55:37 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-11-08 06:56:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 14 minutes 42 seconds
Variants: generated 200, build-succeeded 115, build-failed 52, syntax-invalid 25, redundant 8
Fitness: max 0.917(112), min 0.5(1), ave 0.91
Test execution time: sum 10764 ms, max 152 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 06:56:07 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-11-08 06:56:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 15 minutes 12 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 25, redundant 7
Fitness: max 0.917(107), min 0.917(107), ave 0.917
Test execution time: sum 10148 ms, max 142 ms, min 71 ms
----------------------------------------------------------------

2023-11-08 06:56:37 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-11-08 07:21:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 39 minutes 42 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 28, redundant 5
Fitness: max 0.917(105), min 0.333(1), ave 0.907
Test execution time: sum 1450144 ms, max 1440022 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 07:21:06 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-11-08 07:21:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 40 minutes 9 seconds
Variants: generated 200, build-succeeded 96, build-failed 58, syntax-invalid 38, redundant 8
Fitness: max 0.917(94), min 0.75(2), ave 0.913
Test execution time: sum 8920 ms, max 142 ms, min 35 ms
----------------------------------------------------------------

2023-11-08 07:21:34 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-11-08 07:22:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 40 minutes 39 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 26, redundant 11
Fitness: max 0.917(105), min 0.917(105), ave 0.917
Test execution time: sum 10185 ms, max 143 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 07:22:04 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-11-08 07:46:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 5 minutes 10 seconds
Variants: generated 200, build-succeeded 112, build-failed 51, syntax-invalid 25, redundant 12
Fitness: max 0.917(109), min 0.333(1), ave 0.909
Test execution time: sum 1450679 ms, max 1440022 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 07:46:34 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-11-08 07:47:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 5 minutes 41 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 22, redundant 4
Fitness: max 0.917(115), min 0.917(115), ave 0.917
Test execution time: sum 11423 ms, max 150 ms, min 71 ms
----------------------------------------------------------------

2023-11-08 07:47:06 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-11-08 08:11:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 30 minutes 10 seconds
Variants: generated 200, build-succeeded 95, build-failed 53, syntax-invalid 43, redundant 9
Fitness: max 0.917(93), min 0.333(1), ave 0.91
Test execution time: sum 1449523 ms, max 1440021 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 08:11:34 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-11-08 08:12:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 30 minutes 41 seconds
Variants: generated 200, build-succeeded 112, build-failed 53, syntax-invalid 26, redundant 9
Fitness: max 1(2), min 0.833(1), ave 0.917
Test execution time: sum 10870 ms, max 143 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 08:12:05 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-11-08 08:12:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 31 minutes 11 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 24, redundant 11
Fitness: max 1(1), min 0.917(108), ave 0.917
Test execution time: sum 10379 ms, max 135 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 08:12:36 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-11-08 08:28:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 46 minutes 43 seconds
Variants: generated 200, build-succeeded 122, build-failed 47, syntax-invalid 20, redundant 11
Fitness: max 1(1), min 0.5(1), ave 0.91
Test execution time: sum 911349 ms, max 900024 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 08:28:08 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-11-08 08:28:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 47 minutes 15 seconds
Variants: generated 200, build-succeeded 115, build-failed 63, syntax-invalid 13, redundant 9
Fitness: max 1(1), min 0.667(1), ave 0.912
Test execution time: sum 10807 ms, max 150 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 08:28:40 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-11-08 08:29:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 47 minutes 45 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 28, redundant 10
Fitness: max 0.917(101), min 0.75(1), ave 0.915
Test execution time: sum 9858 ms, max 156 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 08:29:10 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-11-08 08:38:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 57 minutes 15 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 29, redundant 4
Fitness: max 0.917(103), min 0.583(1), ave 0.91
Test execution time: sum 549940 ms, max 540024 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 08:38:40 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-11-08 08:39:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 57 minutes 45 seconds
Variants: generated 200, build-succeeded 102, build-failed 61, syntax-invalid 29, redundant 8
Fitness: max 0.917(101), min 0.75(1), ave 0.915
Test execution time: sum 9576 ms, max 155 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 08:39:10 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-11-08 08:39:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 58 minutes 17 seconds
Variants: generated 200, build-succeeded 116, build-failed 52, syntax-invalid 24, redundant 8
Fitness: max 0.917(116), min 0.917(116), ave 0.917
Test execution time: sum 11000 ms, max 145 ms, min 71 ms
----------------------------------------------------------------

2023-11-08 08:39:42 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-11-08 08:40:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 58 minutes 49 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 15, redundant 7
Fitness: max 1(1), min 0.5(1), ave 0.912
Test execution time: sum 11072 ms, max 148 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 08:40:14 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-11-08 08:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 59 minutes 20 seconds
Variants: generated 200, build-succeeded 104, build-failed 66, syntax-invalid 23, redundant 7
Fitness: max 0.917(103), min 0.75(1), ave 0.915
Test execution time: sum 9989 ms, max 146 ms, min 29 ms
----------------------------------------------------------------

2023-11-08 08:40:45 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-11-08 08:41:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 59 minutes 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 62, syntax-invalid 16, redundant 8
Fitness: max 1(1), min 0.917(113), ave 0.917
Test execution time: sum 10861 ms, max 149 ms, min 72 ms
----------------------------------------------------------------

2023-11-08 08:41:17 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-11-08 08:41:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 24 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 22, redundant 12
Fitness: max 1(1), min 0.917(110), ave 0.917
Test execution time: sum 10237 ms, max 131 ms, min 69 ms
----------------------------------------------------------------

2023-11-08 08:41:49 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-11-08 08:42:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 57 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 23, redundant 8
Fitness: max 1(1), min 0.917(117), ave 0.917
Test execution time: sum 11109 ms, max 149 ms, min 69 ms
----------------------------------------------------------------

2023-11-08 08:42:22 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-11-08 08:42:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 1 minutes 31 seconds
Variants: generated 200, build-succeeded 125, build-failed 50, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 11518 ms, max 142 ms, min 29 ms
----------------------------------------------------------------

2023-11-08 08:42:56 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-11-08 08:43:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 2 minutes 4 seconds
Variants: generated 200, build-succeeded 117, build-failed 64, syntax-invalid 14, redundant 5
Fitness: max 1(1), min 0.917(116), ave 0.917
Test execution time: sum 10638 ms, max 139 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 08:43:28 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-11-08 08:44:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 2 minutes 37 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 19, redundant 5
Fitness: max 0.917(115), min 0.917(115), ave 0.917
Test execution time: sum 10727 ms, max 143 ms, min 69 ms
----------------------------------------------------------------

2023-11-08 08:44:01 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-11-08 08:44:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 3 minutes 8 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 25, redundant 9
Fitness: max 0.917(108), min 0.917(108), ave 0.917
Test execution time: sum 9867 ms, max 143 ms, min 69 ms
----------------------------------------------------------------

2023-11-08 08:44:33 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-11-08 08:45:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 3 minutes 40 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 28, redundant 8
Fitness: max 0.917(105), min 0.917(105), ave 0.917
Test execution time: sum 10029 ms, max 143 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 08:45:04 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-11-08 09:00:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 19 minutes 11 seconds
Variants: generated 200, build-succeeded 100, build-failed 63, syntax-invalid 31, redundant 6
Fitness: max 0.917(96), min 0.583(1), ave 0.908
Test execution time: sum 909392 ms, max 900024 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 09:00:35 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-11-08 09:01:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 19 minutes 43 seconds
Variants: generated 200, build-succeeded 106, build-failed 67, syntax-invalid 20, redundant 7
Fitness: max 0.917(104), min 0.75(2), ave 0.914
Test execution time: sum 10297 ms, max 154 ms, min 32 ms
----------------------------------------------------------------

2023-11-08 09:01:08 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-11-08 09:01:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 20 minutes 16 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 25, redundant 7
Fitness: max 0.917(107), min 0.833(1), ave 0.916
Test execution time: sum 10049 ms, max 144 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 09:01:40 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-11-08 09:26:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 44 minutes 47 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 31, redundant 4
Fitness: max 0.917(107), min 0.333(1), ave 0.91
Test execution time: sum 1450266 ms, max 1440022 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 09:26:12 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-11-08 09:26:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 45 minutes 20 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 26, redundant 10
Fitness: max 1(1), min 0.917(107), ave 0.917
Test execution time: sum 10194 ms, max 154 ms, min 69 ms
----------------------------------------------------------------

2023-11-08 09:26:45 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-11-08 09:27:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 45 minutes 52 seconds
Variants: generated 200, build-succeeded 103, build-failed 64, syntax-invalid 29, redundant 4
Fitness: max 1(1), min 0.917(102), ave 0.917
Test execution time: sum 9601 ms, max 140 ms, min 72 ms
----------------------------------------------------------------

2023-11-08 09:27:16 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-11-08 09:27:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 46 minutes 23 seconds
Variants: generated 200, build-succeeded 101, build-failed 61, syntax-invalid 32, redundant 6
Fitness: max 1(2), min 0.75(1), ave 0.917
Test execution time: sum 9232 ms, max 135 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 09:27:47 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-11-08 09:28:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 46 minutes 55 seconds
Variants: generated 200, build-succeeded 109, build-failed 46, syntax-invalid 34, redundant 11
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 9882 ms, max 140 ms, min 25 ms
----------------------------------------------------------------

2023-11-08 09:28:19 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-11-08 09:43:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 2 minutes 26 seconds
Variants: generated 200, build-succeeded 100, build-failed 62, syntax-invalid 32, redundant 6
Fitness: max 1(3), min 0.583(1), ave 0.914
Test execution time: sum 908868 ms, max 900025 ms, min 36 ms
----------------------------------------------------------------

2023-11-08 09:43:51 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-11-08 09:44:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 2 minutes 55 seconds
Variants: generated 200, build-succeeded 79, build-failed 75, syntax-invalid 37, redundant 9
Fitness: max 1(1), min 0.917(78), ave 0.918
Test execution time: sum 7503 ms, max 153 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 09:44:20 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-11-08 09:44:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 3 minutes 28 seconds
Variants: generated 200, build-succeeded 103, build-failed 66, syntax-invalid 21, redundant 10
Fitness: max 0.917(102), min 0.75(1), ave 0.915
Test execution time: sum 9637 ms, max 175 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 09:44:53 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-11-08 09:45:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 4 minutes 4 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 21, redundant 7
Fitness: max 0.917(113), min 0.667(1), ave 0.913
Test execution time: sum 11265 ms, max 150 ms, min 25 ms
----------------------------------------------------------------

2023-11-08 09:45:29 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-11-08 09:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 4 minutes 37 seconds
Variants: generated 200, build-succeeded 101, build-failed 63, syntax-invalid 29, redundant 7
Fitness: max 0.917(101), min 0.917(101), ave 0.917
Test execution time: sum 10080 ms, max 154 ms, min 73 ms
----------------------------------------------------------------

2023-11-08 09:46:02 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-11-08 09:46:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 5 minutes 9 seconds
Variants: generated 200, build-succeeded 91, build-failed 68, syntax-invalid 33, redundant 8
Fitness: max 1(2), min 0.917(89), ave 0.918
Test execution time: sum 8753 ms, max 139 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 09:46:33 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-11-08 09:47:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 5 minutes 42 seconds
Variants: generated 200, build-succeeded 102, build-failed 58, syntax-invalid 32, redundant 8
Fitness: max 0.917(100), min 0.667(1), ave 0.913
Test execution time: sum 9801 ms, max 150 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 09:47:06 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-11-08 09:47:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 6 minutes 16 seconds
Variants: generated 200, build-succeeded 115, build-failed 51, syntax-invalid 30, redundant 4
Fitness: max 1(1), min 0.917(114), ave 0.917
Test execution time: sum 10636 ms, max 161 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 09:47:41 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-11-08 09:48:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 6 minutes 49 seconds
Variants: generated 200, build-succeeded 104, build-failed 57, syntax-invalid 34, redundant 5
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 9412 ms, max 139 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 09:48:14 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-11-08 09:48:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 7 minutes 23 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 27, redundant 9
Fitness: max 0.917(110), min 0.917(110), ave 0.917
Test execution time: sum 9974 ms, max 142 ms, min 71 ms
----------------------------------------------------------------

2023-11-08 09:48:48 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-11-08 10:01:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 19 minutes 58 seconds
Variants: generated 200, build-succeeded 118, build-failed 53, syntax-invalid 22, redundant 7
Fitness: max 0.917(116), min 0.583(1), ave 0.912
Test execution time: sum 730250 ms, max 720025 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 10:01:23 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-11-08 10:01:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 20 minutes 29 seconds
Variants: generated 200, build-succeeded 92, build-failed 65, syntax-invalid 35, redundant 8
Fitness: max 1(1), min 0.667(1), ave 0.913
Test execution time: sum 8187 ms, max 138 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 10:01:54 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-11-08 10:02:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 21 minutes 3 seconds
Variants: generated 200, build-succeeded 104, build-failed 57, syntax-invalid 34, redundant 5
Fitness: max 0.917(102), min 0.75(1), ave 0.914
Test execution time: sum 9657 ms, max 153 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 10:02:27 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-11-08 10:27:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 45 minutes 36 seconds
Variants: generated 200, build-succeeded 106, build-failed 47, syntax-invalid 35, redundant 12
Fitness: max 0.917(102), min 0.333(1), ave 0.906
Test execution time: sum 1449711 ms, max 1440022 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 10:27:00 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-11-08 10:39:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 58 minutes 6 seconds
Variants: generated 200, build-succeeded 87, build-failed 55, syntax-invalid 49, redundant 9
Fitness: max 0.917(86), min 0.583(1), ave 0.913
Test execution time: sum 728314 ms, max 720024 ms, min 75 ms
----------------------------------------------------------------

2023-11-08 10:39:31 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-11-08 10:40:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 58 minutes 38 seconds
Variants: generated 200, build-succeeded 85, build-failed 70, syntax-invalid 37, redundant 8
Fitness: max 0.917(84), min 0.667(1), ave 0.914
Test execution time: sum 8396 ms, max 145 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 10:40:03 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-11-08 10:40:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 59 minutes 9 seconds
Variants: generated 200, build-succeeded 87, build-failed 56, syntax-invalid 46, redundant 11
Fitness: max 1(1), min 0.667(1), ave 0.913
Test execution time: sum 8119 ms, max 127 ms, min 25 ms
----------------------------------------------------------------

2023-11-08 10:40:33 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-11-08 10:41:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 59 minutes 40 seconds
Variants: generated 200, build-succeeded 94, build-failed 57, syntax-invalid 42, redundant 7
Fitness: max 0.917(90), min 0.667(3), ave 0.907
Test execution time: sum 8570 ms, max 135 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 10:41:05 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-11-08 10:41:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 15 seconds
Variants: generated 200, build-succeeded 106, build-failed 55, syntax-invalid 26, redundant 13
Fitness: max 0.917(102), min 0.667(3), ave 0.908
Test execution time: sum 9771 ms, max 144 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 10:41:40 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-11-08 10:42:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 49 seconds
Variants: generated 200, build-succeeded 102, build-failed 62, syntax-invalid 31, redundant 5
Fitness: max 0.917(99), min 0.667(1), ave 0.912
Test execution time: sum 9270 ms, max 138 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 10:42:13 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-11-08 10:42:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 1 minutes 7 seconds
Variants: generated 97, build-succeeded 43, build-failed 47, syntax-invalid 0, redundant 7
Fitness: max 1(2), min 0.75(2), ave 0.913
Test execution time: sum 3832 ms, max 108 ms, min 25 ms
----------------------------------------------------------------

2023-11-08 10:42:31 [main] [INFO]  KGenProgMain - GA stopped
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -418,7 +418,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -166,7 +166,7 @@
                 if (!base64.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
-                    if (c > 0 && b.length == len) {
+                    if (b == null) {
                         base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v775)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v775)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v775)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v775)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -418,7 +418,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v775)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v775)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v775)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v787)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v787)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v787)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v787)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			currentLinePos = 0;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v787)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v787)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v787)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v856)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v856)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v856)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v856)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -341,6 +341,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -418,7 +419,7 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            readPos = 0;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v856)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v856)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v856)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -386,6 +386,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v1047)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2194)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2194)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2194)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2194)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			byte[] result = new byte[pos];
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +388,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2194)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2194)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2194)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2729)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2729)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2729)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2729)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,13 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			buffer[pos++] = (byte) (x & MASK_8BITS);
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -341,6 +347,8 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -386,6 +394,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2729)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2729)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2729)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2766)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2766)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2766)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2766)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				buffer[pos++] = PAD;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -341,6 +346,8 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -386,6 +393,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2766)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2766)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v2766)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -341,6 +342,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -386,6 +388,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3263)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3392)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3392)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3392)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3392)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -341,6 +346,9 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3392)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3392)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3392)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -341,10 +347,12 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -386,6 +394,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3432)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +351,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -386,6 +393,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -341,10 +341,13 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +421,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v4253)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -341,6 +342,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -382,7 +384,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -418,7 +421,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5049)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,6 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +344,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +382,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1021,10 +1023,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5204)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -341,6 +342,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			pos += lineSeparator.length;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -382,10 +384,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v5288)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +349,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +387,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6418)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6485)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6485)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6485)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6485)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +393,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6485)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6485)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v6485)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+            reset();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +348,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1024,7 +1028,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7034)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,15 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+            reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +353,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +392,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1024,7 +1035,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            lineSeparator = CHUNK_SEPARATOR;
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +389,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1021,7 +1025,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7462)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7835)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7835)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7835)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7835)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +347,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +386,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7835)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7835)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v7835)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,13 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +351,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8643)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8643)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8643)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8643)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +387,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1021,12 +1028,10 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8643)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8643)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v8643)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -386,6 +392,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1024,9 +1031,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9076)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			lineSeparator = CHUNK_SEPARATOR;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -382,7 +387,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9255)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +348,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +386,14 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -418,7 +426,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9261)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +351,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +389,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -418,7 +422,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -1021,7 +1024,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9669)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9672)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9672)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9672)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9672)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,15 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			buffer = null;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1026,7 +1035,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9672)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9672)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v9672)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10125)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10125)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10125)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10125)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,18 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+            reset();
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10125)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10125)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10125)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10807)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10807)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10807)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10807)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,24 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+				readPos = 0;
+				modulus = (++modulus) % 3;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1021,7 +1039,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10807)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10807)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10807)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10893)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10893)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10893)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10893)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,17 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1021,7 +1031,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10893)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10893)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v10893)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,14 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +390,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11259)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +390,10 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1021,10 +1032,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11290)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+            reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11454)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +350,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +388,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -417,7 +424,7 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
+        if (eof) {
             buffer = out;
             pos = outPos;
             readPos = outPos;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v11645)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +349,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13174)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,14 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +353,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13823)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			currentLinePos = 0;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1021,7 +1027,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v13954)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,13 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			currentLinePos = 0;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +352,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v14023)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16120)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16120)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16120)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16120)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +348,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1026,7 +1031,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16120)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16120)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16120)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16133)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16133)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16133)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16133)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1021,8 +1031,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
+		currentLinePos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16133)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16133)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16133)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16146)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16146)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16146)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16146)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,14 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +353,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1021,7 +1030,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16146)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16146)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v16146)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v17011)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v17011)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v17011)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v17011)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,24 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v17011)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v17011)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v17011)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,19 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			currentLinePos = 0;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +358,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18131)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,19 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+            eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +357,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1021,7 +1034,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,19 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+            eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -382,7 +394,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1025,7 +1038,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18386)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18672)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18672)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18672)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18672)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,32 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			currentLinePos = 0;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+            {
+				pos = 0;
+				readPos = 0;
+			}
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +370,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18672)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18672)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18672)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,21 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20722)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20722)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20722)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20722)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,20 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+            eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +358,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +398,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20722)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20722)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20722)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20733)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20733)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20733)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20733)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,19 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			currentLinePos = 0;
+			resizeBuffer();
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +358,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +396,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20733)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20733)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20733)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20916)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20916)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20916)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20916)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,24 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = false;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+            reset();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +362,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +402,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1026,7 +1047,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20916)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20916)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v20916)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21084)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21084)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21084)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21084)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,20 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +397,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1021,7 +1041,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21084)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21084)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21084)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21180)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21180)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21180)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21180)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,18 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+			reset();
+			resizeBuffer();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +357,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +396,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1021,12 +1036,10 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21180)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21180)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21180)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21317)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21317)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21317)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21317)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +355,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1021,12 +1032,10 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21317)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21317)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21317)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21798)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21798)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21798)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21798)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,16 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -382,7 +391,10 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21798)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21798)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v21798)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22687)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22687)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22687)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22687)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +398,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22687)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22687)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22687)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22867)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22867)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22867)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22867)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,27 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			pos += lineSeparator.length;
+            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			pos += lineSeparator.length;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +365,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22867)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22867)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v22867)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,32 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			buffer = null;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,10 +408,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1026,7 +1054,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23775)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23775)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23775)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23775)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			buffer = null;
+			int readLen = 0;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			int bytesCopied = 0;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -382,10 +392,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23775)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23775)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v23775)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v24598)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v24598)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v24598)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v24598)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,16 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +355,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +394,15 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1026,7 +1043,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v24598)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v24598)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v24598)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26763)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26763)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26763)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26763)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,35 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = false;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +373,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +411,10 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26763)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26763)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26763)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26907)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26907)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26907)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26907)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,33 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +372,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +412,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26907)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26907)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26907)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26937)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26937)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26937)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26937)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,24 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +401,11 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1024,7 +1047,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26937)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26937)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:31 [main] [INFO]  PatchLogExporter - patch (v26937)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,20 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = false;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +358,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +399,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,28 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = false;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +367,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +406,10 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27359)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27359)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27359)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27359)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,19 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +358,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +396,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27359)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27359)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27359)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27720)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27720)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27720)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27720)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,27 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +366,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +406,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27720)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27720)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27720)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27795)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27795)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27795)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27795)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,25 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +401,11 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27795)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27795)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v27795)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30048)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30048)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30048)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30048)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,24 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +362,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +400,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30048)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30048)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30048)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30143)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30143)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30143)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30143)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,28 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			buffer = null;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				eof = true;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +367,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +406,10 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30143)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30143)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30143)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30294)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30294)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30294)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30294)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,23 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +361,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +399,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30294)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30294)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30294)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30457)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30457)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30457)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30457)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,29 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +367,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +406,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30457)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30457)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30457)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30652)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30652)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30652)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30652)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,35 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +373,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +412,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -417,7 +448,7 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
+        if (eof) {
             buffer = out;
             pos = outPos;
             readPos = outPos;
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30652)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30652)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v30652)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v31781)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v31781)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v31781)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v31781)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,46 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				{
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +385,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +424,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v31781)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v31781)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v31781)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32115)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32115)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32115)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32115)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,30 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +369,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +410,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32115)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32115)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32115)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32206)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32206)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32206)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32206)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,44 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			buffer = null;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +383,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +423,14 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32206)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32206)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32206)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32463)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32463)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32463)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32463)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,40 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +378,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +416,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32463)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32463)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32463)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32713)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32713)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32713)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32713)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,40 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			modulus = (++modulus) % 3;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +379,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +418,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32713)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32713)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32713)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32911)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32911)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32911)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32911)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,28 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +366,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +405,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32911)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32911)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v32911)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34563)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34563)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34563)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34563)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,47 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,10 +423,13 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34563)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34563)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34563)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34742)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34742)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34742)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34742)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,48 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			currentLinePos += 4;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +386,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +424,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34742)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34742)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34742)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34906)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34906)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34906)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34906)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,74 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +412,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +451,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1023,7 +1093,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34906)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34906)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34906)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34973)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34973)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34973)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34973)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,49 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			x = x << 6;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +388,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +427,12 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34973)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34973)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v34973)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35152)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35152)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35152)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35152)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,63 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +402,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +440,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1023,7 +1083,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35152)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35152)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35152)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35349)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35349)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35349)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35349)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,59 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +398,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +437,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1023,7 +1079,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35349)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35349)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35349)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35391)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35391)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35391)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35391)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,46 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos += 4;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +385,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +423,10 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1023,7 +1067,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35391)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35391)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35391)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35395)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35395)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35395)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35395)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,52 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				int startSrc = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +391,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +431,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35395)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35395)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35395)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35505)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35505)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35505)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35505)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,58 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				buffer = null;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			currentLinePos += 4;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +434,11 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35505)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35505)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v35505)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36349)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36349)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36349)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36349)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,57 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			x = x << 6;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			reset();
+			currentLinePos += 4;
+			eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +396,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +434,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1024,7 +1078,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        currentLinePos += 4;
         modulus = 0;
         eof = false;
     }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36349)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36349)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36349)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36359)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36359)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36359)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36359)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,67 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			currentLinePos += 4;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			x = x << 6;
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +406,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +446,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36359)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36359)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36359)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36791)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36791)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36791)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36791)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,37 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +375,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +414,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -1023,8 +1056,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36791)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36791)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36791)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36925)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36925)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36925)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36925)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,48 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +424,10 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36925)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36925)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v36925)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v37406)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v37406)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v37406)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v37406)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,26 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			reset();
+			{
+				pos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +365,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,10 +403,18 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            int readLen = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -418,7 +447,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -1021,7 +1049,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v37406)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v37406)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v37406)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v38409)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v38409)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v38409)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v38409)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,59 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			currentLinePos += 4;
+			lineSeparator = CHUNK_SEPARATOR;
+			x = x << 6;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			x = x << 6;
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				lineLength = 0;
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				resizeBuffer();
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -382,7 +435,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v38409)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v38409)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v38409)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39255)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39255)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39255)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39255)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,67 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -382,7 +442,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39255)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39255)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39255)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39297)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39297)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39297)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39297)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,47 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
+			currentLinePos += 4;
+			lineSeparator = CHUNK_SEPARATOR;
+			lineSeparator = CHUNK_SEPARATOR;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +386,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -382,7 +425,9 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39297)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39297)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  PatchLogExporter - patch (v39297)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 10:42:32 [main] [INFO]  KGenProgMain - Summary
Reached generation = 198
Generated variants = 39297
Syntax valid variants = 33468
Build succeeded variants = 19903
Time elapsed = 20 hours 1 minutes 7 seconds
Exit status = SUCCESS
