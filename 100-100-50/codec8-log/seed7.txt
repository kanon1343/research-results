2023-11-08 22:15:20 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-08 22:15:20 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-08 22:15:20 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-08 22:15:20 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/kgenprog-8.toml (set by command line)
rootDir = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8 (set in config file)
productPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/java] (set in config file)
testPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64InputStreamTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 7 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /home/fse-pluto/Desktop/research
version = 1.8.2
================================================================
2023-11-08 22:15:23 [main] [INFO]  KGenProgMain - initial failed tests (1/12)
org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105: null

2023-11-08 22:15:23 [main] [INFO]  KGenProgMain - GA started
2023-11-08 22:15:23 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-08 22:35:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 41 seconds
Variants: generated 100, build-succeeded 17, build-failed 58, syntax-invalid 7, redundant 18
Fitness: max 1(2), min 0.333(1), ave 0.779
Test execution time: sum 1179074 ms, max 1080027 ms, min 25 ms
----------------------------------------------------------------

2023-11-08 22:35:05 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-08 22:56:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 44 seconds
Variants: generated 100, build-succeeded 23, build-failed 51, syntax-invalid 15, redundant 11
Fitness: max 0.917(8), min 0.333(1), ave 0.772
Test execution time: sum 1261049 ms, max 1080023 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:56:08 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-09 00:32:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 8 seconds
Variants: generated 200, build-succeeded 75, build-failed 60, syntax-invalid 16, redundant 49
Fitness: max 1(5), min 0.333(5), ave 0.748
Test execution time: sum 5780328 ms, max 1080022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 00:32:32 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-09 01:13:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 2 seconds
Variants: generated 200, build-succeeded 66, build-failed 48, syntax-invalid 17, redundant 69
Fitness: max 1(2), min 0.333(1), ave 0.813
Test execution time: sum 2450640 ms, max 1440023 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 01:13:26 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-09 01:13:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 7 seconds
Variants: generated 200, build-succeeded 40, build-failed 70, syntax-invalid 20, redundant 70
Fitness: max 0.917(31), min 0.5(1), ave 0.881
Test execution time: sum 2638 ms, max 110 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 01:13:31 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-09 01:58:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 8 seconds
Variants: generated 200, build-succeeded 63, build-failed 74, syntax-invalid 11, redundant 52
Fitness: max 1(3), min 0(1), ave 0.87
Test execution time: sum 2697459 ms, max 899423 ms, min 20 ms
----------------------------------------------------------------

2023-11-09 01:58:32 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-09 02:13:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 16 seconds
Variants: generated 200, build-succeeded 64, build-failed 57, syntax-invalid 16, redundant 63
Fitness: max 1(4), min 0.333(2), ave 0.897
Test execution time: sum 904187 ms, max 899312 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 02:13:40 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-09 03:46:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 31 minutes 11 seconds
Variants: generated 200, build-succeeded 65, build-failed 49, syntax-invalid 17, redundant 69
Fitness: max 1(3), min 0.333(3), ave 0.864
Test execution time: sum 5571824 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 03:46:35 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-09 04:10:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 55 minutes 19 seconds
Variants: generated 200, build-succeeded 58, build-failed 66, syntax-invalid 20, redundant 56
Fitness: max 0.917(55), min 0.333(2), ave 0.894
Test execution time: sum 1444476 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 04:10:43 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-09 04:31:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 16 minutes 26 seconds
Variants: generated 200, build-succeeded 54, build-failed 66, syntax-invalid 25, redundant 55
Fitness: max 1(2), min 0.333(1), ave 0.9
Test execution time: sum 1262759 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 04:31:50 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-09 05:13:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 58 minutes 28 seconds
Variants: generated 200, build-succeeded 55, build-failed 69, syntax-invalid 23, redundant 53
Fitness: max 0.917(49), min 0.333(2), ave 0.877
Test execution time: sum 2519019 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 05:13:52 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-09 05:53:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 37 minutes 37 seconds
Variants: generated 200, build-succeeded 69, build-failed 62, syntax-invalid 22, redundant 47
Fitness: max 1(1), min 0.333(2), ave 0.883
Test execution time: sum 2344941 ms, max 900022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 05:53:01 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-09 06:02:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 46 minutes 41 seconds
Variants: generated 200, build-succeeded 80, build-failed 54, syntax-invalid 19, redundant 47
Fitness: max 1(4), min 0.583(1), ave 0.908
Test execution time: sum 540102 ms, max 534044 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 06:02:05 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-09 06:02:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 46 minutes 51 seconds
Variants: generated 200, build-succeeded 72, build-failed 70, syntax-invalid 26, redundant 32
Fitness: max 1(4), min 0.667(2), ave 0.906
Test execution time: sum 5410 ms, max 121 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 06:02:15 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-09 06:14:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 59 minutes 1 seconds
Variants: generated 200, build-succeeded 81, build-failed 61, syntax-invalid 24, redundant 34
Fitness: max 1(1), min 0.583(1), ave 0.901
Test execution time: sum 726210 ms, max 720022 ms, min 18 ms
----------------------------------------------------------------

2023-11-09 06:14:25 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-09 07:02:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 47 minutes 11 seconds
Variants: generated 200, build-succeeded 78, build-failed 59, syntax-invalid 29, redundant 34
Fitness: max 1(1), min 0.583(3), ave 0.887
Test execution time: sum 2885788 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 07:02:35 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-09 07:26:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 11 minutes 24 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 16, redundant 23
Fitness: max 1(1), min 0.333(1), ave 0.897
Test execution time: sum 1447896 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 07:26:48 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-09 07:51:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 35 minutes 36 seconds
Variants: generated 200, build-succeeded 94, build-failed 61, syntax-invalid 15, redundant 30
Fitness: max 1(1), min 0.5(1), ave 0.901
Test execution time: sum 1447365 ms, max 720022 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:51:00 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-09 07:51:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 35 minutes 49 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 16, redundant 26
Fitness: max 1(2), min 0.5(1), ave 0.907
Test execution time: sum 7784 ms, max 123 ms, min 20 ms
----------------------------------------------------------------

2023-11-09 07:51:13 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-09 07:51:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 36 minutes 2 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 14, redundant 21
Fitness: max 0.917(93), min 0.667(4), ave 0.9
Test execution time: sum 7868 ms, max 126 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 07:51:26 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-09 07:51:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 36 minutes 14 seconds
Variants: generated 200, build-succeeded 81, build-failed 56, syntax-invalid 37, redundant 26
Fitness: max 1(1), min 0.667(3), ave 0.904
Test execution time: sum 6423 ms, max 138 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:51:38 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-09 07:51:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 36 minutes 26 seconds
Variants: generated 200, build-succeeded 84, build-failed 65, syntax-invalid 28, redundant 23
Fitness: max 1(2), min 0.5(1), ave 0.911
Test execution time: sum 6734 ms, max 115 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:51:50 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-09 07:52:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 36 minutes 38 seconds
Variants: generated 200, build-succeeded 87, build-failed 61, syntax-invalid 27, redundant 25
Fitness: max 0.917(82), min 0.5(1), ave 0.904
Test execution time: sum 6867 ms, max 113 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:52:02 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-09 07:52:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 36 minutes 49 seconds
Variants: generated 200, build-succeeded 73, build-failed 68, syntax-invalid 37, redundant 22
Fitness: max 0.917(64), min 0.667(4), ave 0.892
Test execution time: sum 5506 ms, max 111 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:52:13 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-09 07:52:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 0 seconds
Variants: generated 200, build-succeeded 74, build-failed 68, syntax-invalid 37, redundant 21
Fitness: max 1(3), min 0.5(1), ave 0.911
Test execution time: sum 5915 ms, max 115 ms, min 20 ms
----------------------------------------------------------------

2023-11-09 07:52:24 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-09 07:52:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 12 seconds
Variants: generated 200, build-succeeded 82, build-failed 68, syntax-invalid 38, redundant 12
Fitness: max 0.917(79), min 0.667(1), ave 0.91
Test execution time: sum 6412 ms, max 127 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 07:52:36 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-09 07:52:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 25 seconds
Variants: generated 200, build-succeeded 86, build-failed 67, syntax-invalid 32, redundant 15
Fitness: max 0.917(83), min 0.5(1), ave 0.907
Test execution time: sum 6879 ms, max 145 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:52:49 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-09 07:53:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 38 seconds
Variants: generated 200, build-succeeded 87, build-failed 69, syntax-invalid 28, redundant 16
Fitness: max 0.917(82), min 0.5(1), ave 0.901
Test execution time: sum 6651 ms, max 119 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:53:02 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-09 07:53:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 51 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 32, redundant 14
Fitness: max 0.917(93), min 0.667(4), ave 0.905
Test execution time: sum 7715 ms, max 128 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:53:15 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-09 07:53:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 6 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 20, redundant 14
Fitness: max 1(3), min 0.667(5), ave 0.906
Test execution time: sum 8134 ms, max 131 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:53:30 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-09 07:59:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 44 minutes 19 seconds
Variants: generated 200, build-succeeded 93, build-failed 58, syntax-invalid 34, redundant 15
Fitness: max 0.917(89), min 0.667(4), ave 0.906
Test execution time: sum 367067 ms, max 360021 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 07:59:43 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-09 07:59:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 44 minutes 33 seconds
Variants: generated 200, build-succeeded 100, build-failed 55, syntax-invalid 25, redundant 20
Fitness: max 0.917(90), min 0.5(1), ave 0.894
Test execution time: sum 7464 ms, max 140 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 07:59:57 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-09 08:00:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 44 minutes 46 seconds
Variants: generated 200, build-succeeded 87, build-failed 54, syntax-invalid 38, redundant 21
Fitness: max 0.917(80), min 0.667(7), ave 0.897
Test execution time: sum 6576 ms, max 125 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:00:10 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-09 08:00:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 45 minutes 0 seconds
Variants: generated 200, build-succeeded 92, build-failed 64, syntax-invalid 31, redundant 13
Fitness: max 0.917(87), min 0.5(1), ave 0.904
Test execution time: sum 6976 ms, max 108 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 08:00:24 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-09 08:00:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 45 minutes 13 seconds
Variants: generated 200, build-succeeded 86, build-failed 63, syntax-invalid 36, redundant 15
Fitness: max 0.917(82), min 0.667(3), ave 0.906
Test execution time: sum 6505 ms, max 133 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:00:37 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-09 08:00:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 45 minutes 28 seconds
Variants: generated 200, build-succeeded 103, build-failed 51, syntax-invalid 24, redundant 22
Fitness: max 0.917(96), min 0.667(6), ave 0.901
Test execution time: sum 7773 ms, max 123 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 08:00:52 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-09 08:16:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 42 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 24, redundant 18
Fitness: max 0.917(92), min 0.583(1), ave 0.904
Test execution time: sum 907364 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:16:06 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-09 08:16:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 57 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 23, redundant 16
Fitness: max 1(1), min 0.667(1), ave 0.913
Test execution time: sum 8270 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:16:21 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-09 08:16:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 1 minutes 13 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 20, redundant 13
Fitness: max 0.917(101), min 0.333(1), ave 0.897
Test execution time: sum 8062 ms, max 122 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 08:16:37 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-09 08:16:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 1 minutes 29 seconds
Variants: generated 200, build-succeeded 106, build-failed 54, syntax-invalid 22, redundant 18
Fitness: max 0.917(98), min 0.667(5), ave 0.9
Test execution time: sum 8063 ms, max 115 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:16:53 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-09 08:17:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 1 minutes 45 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 15, redundant 12
Fitness: max 0.917(104), min 0.5(1), ave 0.902
Test execution time: sum 8435 ms, max 112 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 08:17:09 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-09 08:17:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 2 minutes 1 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 9, redundant 18
Fitness: max 0.917(107), min 0.667(4), ave 0.904
Test execution time: sum 8430 ms, max 114 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:17:25 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-09 08:32:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 17 minutes 19 seconds
Variants: generated 200, build-succeeded 120, build-failed 56, syntax-invalid 12, redundant 12
Fitness: max 0.917(116), min 0.583(1), ave 0.908
Test execution time: sum 908995 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:32:43 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-09 08:39:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 23 minutes 36 seconds
Variants: generated 200, build-succeeded 122, build-failed 47, syntax-invalid 15, redundant 16
Fitness: max 0.917(117), min 0.333(1), ave 0.904
Test execution time: sum 369452 ms, max 360073 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 08:39:00 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-09 08:39:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 23 minutes 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 10, redundant 17
Fitness: max 0.917(107), min 0.5(1), ave 0.901
Test execution time: sum 8760 ms, max 119 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 08:39:17 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-09 08:39:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 24 minutes 10 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 14, redundant 16
Fitness: max 0.917(113), min 0.667(4), ave 0.908
Test execution time: sum 9068 ms, max 138 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:39:34 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-09 08:45:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 30 minutes 27 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 16, redundant 10
Fitness: max 0.917(107), min 0.333(1), ave 0.893
Test execution time: sum 368668 ms, max 360076 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 08:45:51 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-09 08:52:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 36 minutes 44 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 11, redundant 11
Fitness: max 0.917(102), min 0.333(1), ave 0.875
Test execution time: sum 368403 ms, max 360076 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 08:52:08 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-09 09:04:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 49 minutes 0 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 20, redundant 19
Fitness: max 0.917(97), min 0.333(2), ave 0.887
Test execution time: sum 727688 ms, max 360076 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 09:04:24 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-09 09:04:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 49 minutes 18 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 14, redundant 12
Fitness: max 0.917(112), min 0.667(6), ave 0.904
Test execution time: sum 9062 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 09:04:42 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-09 09:04:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 49 minutes 35 seconds
Variants: generated 200, build-succeeded 110, build-failed 61, syntax-invalid 23, redundant 6
Fitness: max 0.917(106), min 0.667(4), ave 0.908
Test execution time: sum 8240 ms, max 117 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 09:04:59 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-09 09:05:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 49 minutes 52 seconds
Variants: generated 200, build-succeeded 120, build-failed 50, syntax-invalid 11, redundant 19
Fitness: max 0.917(113), min 0.667(7), ave 0.902
Test execution time: sum 8852 ms, max 113 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 09:05:16 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-09 09:11:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 56 minutes 9 seconds
Variants: generated 200, build-succeeded 108, build-failed 63, syntax-invalid 21, redundant 8
Fitness: max 0.917(99), min 0.333(1), ave 0.89
Test execution time: sum 367720 ms, max 360075 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 09:11:33 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-09 09:29:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 14 minutes 26 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 17, redundant 13
Fitness: max 1(2), min 0.333(3), ave 0.89
Test execution time: sum 1088379 ms, max 360117 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 09:29:50 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-09 09:48:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 32 minutes 42 seconds
Variants: generated 200, build-succeeded 105, build-failed 64, syntax-invalid 17, redundant 14
Fitness: max 0.917(93), min 0.333(3), ave 0.877
Test execution time: sum 1087499 ms, max 360111 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 09:48:06 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-09 10:18:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 3 minutes 0 seconds
Variants: generated 200, build-succeeded 120, build-failed 47, syntax-invalid 18, redundant 15
Fitness: max 0.917(107), min 0.333(5), ave 0.874
Test execution time: sum 1808971 ms, max 360112 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 10:18:24 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-09 10:24:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 9 minutes 16 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 20, redundant 12
Fitness: max 0.917(96), min 0(1), ave 0.872
Test execution time: sum 367952 ms, max 360084 ms, min 20 ms
----------------------------------------------------------------

2023-11-09 10:24:40 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-09 10:36:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 21 minutes 34 seconds
Variants: generated 200, build-succeeded 116, build-failed 66, syntax-invalid 8, redundant 10
Fitness: max 1(1), min 0.333(2), ave 0.888
Test execution time: sum 728558 ms, max 360075 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 10:36:58 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-09 10:46:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 30 minutes 52 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 18, redundant 10
Fitness: max 1(2), min 0.333(1), ave 0.899
Test execution time: sum 548472 ms, max 360076 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 10:46:16 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-09 10:46:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 31 minutes 10 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 12, redundant 13
Fitness: max 1(1), min 0.5(3), ave 0.898
Test execution time: sum 8638 ms, max 141 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 10:46:34 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-09 10:52:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 37 minutes 27 seconds
Variants: generated 200, build-succeeded 106, build-failed 64, syntax-invalid 16, redundant 14
Fitness: max 1(1), min 0.333(1), ave 0.89
Test execution time: sum 367848 ms, max 360112 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 10:52:51 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-09 11:08:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 52 minutes 45 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 16, redundant 8
Fitness: max 0.917(104), min 0.333(1), ave 0.889
Test execution time: sum 908104 ms, max 540022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 11:08:09 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-09 11:26:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 10 minutes 58 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 20, redundant 11
Fitness: max 1(1), min 0.5(2), ave 0.889
Test execution time: sum 1084241 ms, max 538516 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 11:26:22 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-09 11:26:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 11 minutes 15 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 25, redundant 14
Fitness: max 1(3), min 0.5(1), ave 0.894
Test execution time: sum 7521 ms, max 125 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 11:26:39 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-09 11:26:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 11 minutes 34 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 13, redundant 13
Fitness: max 1(1), min 0.667(8), ave 0.901
Test execution time: sum 8632 ms, max 130 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 11:26:58 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-09 11:27:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 11 minutes 53 seconds
Variants: generated 200, build-succeeded 124, build-failed 55, syntax-invalid 12, redundant 9
Fitness: max 1(1), min 0.667(5), ave 0.906
Test execution time: sum 9275 ms, max 122 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 11:27:17 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-09 11:27:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 12 minutes 13 seconds
Variants: generated 200, build-succeeded 123, build-failed 63, syntax-invalid 8, redundant 6
Fitness: max 1(1), min 0.667(7), ave 0.902
Test execution time: sum 9135 ms, max 118 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 11:27:37 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-09 11:36:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 21 minutes 26 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 15, redundant 18
Fitness: max 1(1), min 0.5(1), ave 0.895
Test execution time: sum 544128 ms, max 536016 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 11:36:50 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-09 12:16:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 40 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 16, redundant 10
Fitness: max 0.917(101), min 0.5(1), ave 0.891
Test execution time: sum 2343754 ms, max 720023 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:16:04 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-09 12:25:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 9 minutes 58 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 21, redundant 9
Fitness: max 0.917(105), min 0.583(1), ave 0.897
Test execution time: sum 548170 ms, max 540022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:25:22 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-09 12:25:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 10 minutes 17 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 20, redundant 13
Fitness: max 0.917(105), min 0.583(1), ave 0.907
Test execution time: sum 8393 ms, max 188 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:25:41 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-09 12:25:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 10 minutes 35 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 22, redundant 9
Fitness: max 1(1), min 0.333(1), ave 0.885
Test execution time: sum 7971 ms, max 182 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:25:59 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-09 12:26:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 10 minutes 53 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 21, redundant 12
Fitness: max 0.917(102), min 0.667(6), ave 0.903
Test execution time: sum 8144 ms, max 116 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:26:17 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-09 12:26:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 11 minutes 12 seconds
Variants: generated 200, build-succeeded 115, build-failed 56, syntax-invalid 20, redundant 9
Fitness: max 0.917(109), min 0.667(6), ave 0.904
Test execution time: sum 8766 ms, max 140 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:26:36 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-09 12:26:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 11 minutes 31 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 17, redundant 11
Fitness: max 0.917(111), min 0.667(6), ave 0.904
Test execution time: sum 8928 ms, max 129 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:26:55 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-09 12:27:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 11 minutes 50 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 18, redundant 11
Fitness: max 1(1), min 0.5(1), ave 0.905
Test execution time: sum 8654 ms, max 132 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:27:14 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-09 12:36:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 21 minutes 5 seconds
Variants: generated 200, build-succeeded 116, build-failed 52, syntax-invalid 23, redundant 9
Fitness: max 0.917(101), min 0.333(2), ave 0.875
Test execution time: sum 544619 ms, max 536249 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:36:29 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-09 12:36:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 21 minutes 24 seconds
Variants: generated 200, build-succeeded 112, build-failed 57, syntax-invalid 22, redundant 9
Fitness: max 0.917(105), min 0.667(7), ave 0.901
Test execution time: sum 8676 ms, max 128 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:36:48 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-09 12:37:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 21 minutes 41 seconds
Variants: generated 200, build-succeeded 92, build-failed 66, syntax-invalid 24, redundant 18
Fitness: max 0.917(83), min 0.667(9), ave 0.892
Test execution time: sum 6908 ms, max 138 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:37:05 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-09 12:37:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 21 minutes 59 seconds
Variants: generated 200, build-succeeded 107, build-failed 54, syntax-invalid 28, redundant 11
Fitness: max 0.917(93), min 0.333(1), ave 0.881
Test execution time: sum 7908 ms, max 120 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:37:23 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-09 12:37:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 22 minutes 19 seconds
Variants: generated 200, build-succeeded 122, build-failed 52, syntax-invalid 13, redundant 13
Fitness: max 0.917(115), min 0.333(1), ave 0.9
Test execution time: sum 9289 ms, max 122 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:37:43 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-09 12:38:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 22 minutes 38 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 23, redundant 9
Fitness: max 0.917(91), min 0.333(3), ave 0.875
Test execution time: sum 7478 ms, max 173 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:38:02 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-09 12:38:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 22 minutes 57 seconds
Variants: generated 200, build-succeeded 111, build-failed 58, syntax-invalid 21, redundant 10
Fitness: max 0.917(101), min 0.333(1), ave 0.892
Test execution time: sum 8254 ms, max 126 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:38:21 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-09 12:38:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 23 minutes 16 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 17, redundant 10
Fitness: max 1(1), min 0.333(1), ave 0.898
Test execution time: sum 8398 ms, max 117 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:38:40 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-09 12:39:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 23 minutes 36 seconds
Variants: generated 200, build-succeeded 113, build-failed 48, syntax-invalid 26, redundant 13
Fitness: max 0.917(109), min 0.667(4), ave 0.908
Test execution time: sum 8442 ms, max 130 ms, min 23 ms
----------------------------------------------------------------

2023-11-09 12:39:00 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-09 12:39:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 23 minutes 55 seconds
Variants: generated 200, build-succeeded 106, build-failed 52, syntax-invalid 30, redundant 12
Fitness: max 1(1), min 0.333(4), ave 0.888
Test execution time: sum 7843 ms, max 118 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 12:39:19 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-09 12:57:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 42 minutes 14 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 19, redundant 9
Fitness: max 1(2), min 0.583(2), ave 0.901
Test execution time: sum 1087640 ms, max 540023 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 12:57:38 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-09 13:24:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 9 minutes 24 seconds
Variants: generated 200, build-succeeded 121, build-failed 58, syntax-invalid 8, redundant 13
Fitness: max 0.917(109), min 0.5(1), ave 0.889
Test execution time: sum 1618609 ms, max 539715 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 13:24:48 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-09 13:25:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 9 minutes 46 seconds
Variants: generated 200, build-succeeded 127, build-failed 54, syntax-invalid 7, redundant 12
Fitness: max 0.917(114), min 0.333(1), ave 0.887
Test execution time: sum 9010 ms, max 101 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 13:25:10 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-09 13:25:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 10 minutes 6 seconds
Variants: generated 200, build-succeeded 120, build-failed 64, syntax-invalid 6, redundant 10
Fitness: max 0.917(112), min 0.333(1), ave 0.896
Test execution time: sum 8736 ms, max 133 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 13:25:30 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-09 13:25:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 10 minutes 28 seconds
Variants: generated 200, build-succeeded 124, build-failed 57, syntax-invalid 11, redundant 8
Fitness: max 1(3), min 0.333(1), ave 0.897
Test execution time: sum 9038 ms, max 133 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 13:25:52 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-09 13:44:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 28 minutes 48 seconds
Variants: generated 200, build-succeeded 130, build-failed 55, syntax-invalid 8, redundant 7
Fitness: max 1(1), min 0.333(2), ave 0.899
Test execution time: sum 1087664 ms, max 540023 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 13:44:12 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-09 13:53:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 38 minutes 3 seconds
Variants: generated 200, build-succeeded 126, build-failed 50, syntax-invalid 12, redundant 12
Fitness: max 1(1), min 0.333(3), ave 0.881
Test execution time: sum 542743 ms, max 533954 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 13:53:27 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-09 14:20:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 5 minutes 11 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 13, redundant 15
Fitness: max 0.917(104), min 0.333(4), ave 0.877
Test execution time: sum 1615697 ms, max 537138 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 14:20:35 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-09 14:47:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 32 minutes 29 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 14, redundant 10
Fitness: max 0.917(109), min 0.333(1), ave 0.886
Test execution time: sum 1625932 ms, max 540024 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 14:47:53 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-09 15:15:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 59 minutes 41 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 27, redundant 8
Fitness: max 0.917(98), min 0.583(3), ave 0.904
Test execution time: sum 1619879 ms, max 539378 ms, min 23 ms
----------------------------------------------------------------

2023-11-09 15:15:05 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-09 15:24:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 9 minutes 0 seconds
Variants: generated 200, build-succeeded 122, build-failed 60, syntax-invalid 10, redundant 8
Fitness: max 0.917(109), min 0(1), ave 0.88
Test execution time: sum 546982 ms, max 538710 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 15:24:24 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-09 15:33:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 18 minutes 21 seconds
Variants: generated 200, build-succeeded 122, build-failed 49, syntax-invalid 15, redundant 14
Fitness: max 0.917(112), min 0.333(1), ave 0.891
Test execution time: sum 548543 ms, max 540023 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 15:33:45 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-09 16:09:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 54 minutes 34 seconds
Variants: generated 200, build-succeeded 109, build-failed 54, syntax-invalid 27, redundant 10
Fitness: max 1(1), min 0.5(1), ave 0.888
Test execution time: sum 2160892 ms, max 539568 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 16:09:58 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-09 16:10:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 54 minutes 54 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 23, redundant 10
Fitness: max 1(1), min 0.333(2), ave 0.892
Test execution time: sum 7614 ms, max 99 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 16:10:18 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-09 16:10:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 55 minutes 15 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 20, redundant 10
Fitness: max 0.917(102), min 0.667(7), ave 0.898
Test execution time: sum 7946 ms, max 118 ms, min 23 ms
----------------------------------------------------------------

2023-11-09 16:10:39 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-09 16:19:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 4 minutes 30 seconds
Variants: generated 200, build-succeeded 95, build-failed 57, syntax-invalid 36, redundant 12
Fitness: max 0.917(85), min 0.333(2), ave 0.879
Test execution time: sum 542963 ms, max 536474 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 16:19:54 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-09 16:47:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 31 minutes 46 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 23, redundant 11
Fitness: max 0.917(100), min 0.583(3), ave 0.89
Test execution time: sum 1623209 ms, max 540023 ms, min 23 ms
----------------------------------------------------------------

2023-11-09 16:47:10 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-09 17:32:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 16 minutes 55 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 24, redundant 8
Fitness: max 0.917(101), min 0.333(1), ave 0.882
Test execution time: sum 2696622 ms, max 540023 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 17:32:19 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-09 19:08:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 52 minutes 58 seconds
Variants: generated 200, build-succeeded 123, build-failed 54, syntax-invalid 14, redundant 9
Fitness: max 0.917(106), min 0.333(1), ave 0.871
Test execution time: sum 5749749 ms, max 540023 ms, min 23 ms
----------------------------------------------------------------

2023-11-09 19:08:22 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-09 20:26:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 11 minutes 8 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 17, redundant 11
Fitness: max 0.917(95), min 0.333(4), ave 0.848
Test execution time: sum 4676567 ms, max 540024 ms, min 21 ms
----------------------------------------------------------------

2023-11-09 20:26:32 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-09 21:23:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 8 minutes 18 seconds
Variants: generated 200, build-succeeded 112, build-failed 61, syntax-invalid 17, redundant 10
Fitness: max 0.917(101), min 0.333(3), ave 0.877
Test execution time: sum 3417056 ms, max 540023 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 21:23:42 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-09 22:08:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 53 minutes 29 seconds
Variants: generated 200, build-succeeded 104, build-failed 69, syntax-invalid 20, redundant 7
Fitness: max 0.917(92), min 0.333(4), ave 0.871
Test execution time: sum 2697267 ms, max 1080022 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 22:08:53 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-09 22:42:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 hours 26 minutes 45 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 14, redundant 12
Fitness: max 0.917(105), min 0.333(1), ave 0.885
Test execution time: sum 1981675 ms, max 539539 ms, min 22 ms
----------------------------------------------------------------

2023-11-09 22:42:09 [main] [INFO]  KGenProgMain - GA stopped
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v83)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v83)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v83)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v83)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -418,7 +418,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v83)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v83)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v83)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v84)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v84)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v84)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v84)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v84)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v84)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v84)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v238)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v238)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v238)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v238)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v238)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v238)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v238)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v318)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v318)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v318)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v318)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +346,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v318)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v318)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v318)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v320)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v320)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v320)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v320)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v320)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v320)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v320)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v347)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v347)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v347)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v347)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v347)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v347)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v347)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v517)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v517)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v517)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v517)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +420,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v517)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v517)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v517)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v581)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v581)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v581)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v581)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -345,6 +345,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v581)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v581)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v581)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v901)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v901)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v901)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v901)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +345,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +450,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v901)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v901)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v901)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v944)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +184,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1130)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1139)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1139)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1139)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1139)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1139)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1139)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1139)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1151)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +346,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1177)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1304)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1304)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1304)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1304)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			resizeBuffer();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +346,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1304)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1304)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1304)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +184,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1320)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1377)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1722)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1722)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1722)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1722)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1722)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1722)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1722)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -449,6 +450,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v1796)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +344,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2305)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2347)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2347)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2347)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2347)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -343,6 +345,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2347)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2347)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2347)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2354)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2354)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2354)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2354)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -343,6 +344,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2354)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2354)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2354)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -449,6 +451,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2557)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2557)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2557)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2557)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
+			resizeBuffer();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -343,8 +345,10 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +453,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2557)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2557)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2557)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -343,8 +344,11 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,6 +332,7 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +346,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v2981)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +346,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3388)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3388)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3388)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3388)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +347,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3388)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3388)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3388)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3448)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3448)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3448)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3448)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            eof = true;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -449,6 +452,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			eof = true;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3448)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3448)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3448)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3584)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3584)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3584)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3584)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +345,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3584)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3584)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3584)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			currentLinePos = 0;
+			int readLen = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +420,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v3864)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4137)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4137)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4137)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4137)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -449,6 +452,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4137)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4137)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4137)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +346,10 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4735)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +345,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +450,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +346,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -449,7 +453,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+			if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v4785)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +347,9 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -449,6 +456,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -484,6 +492,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			int readLen = 0;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +346,16 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5713)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +345,9 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -449,6 +454,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v5721)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +344,11 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +453,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v7237)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10566)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10566)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10566)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10566)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = false;
+			eof = true;
+            pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +346,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -449,6 +454,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10566)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10566)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10566)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10576)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10576)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10576)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10576)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +349,11 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10576)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10576)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v10576)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+            pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -383,6 +386,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -449,6 +453,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11350)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11459)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11459)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11459)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11459)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +348,11 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +457,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11459)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11459)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11459)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11558)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11558)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11558)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11558)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			eof = true;
+			resizeBuffer();
+			resizeBuffer();
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +349,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11558)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11558)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11558)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11783)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11783)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11783)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11783)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,13 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+			resizeBuffer();
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +349,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -449,6 +456,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11783)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11783)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11783)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,14 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+            pos = 0;
+			resizeBuffer();
+			eof = true;
+			resizeBuffer();
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -449,6 +456,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v11995)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12326)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12326)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12326)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12326)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,14 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			pos = 0;
+			resizeBuffer();
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +351,12 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +461,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12326)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12326)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12326)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12515)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12515)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12515)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12515)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+            resizeBuffer();
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +347,10 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +455,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12515)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12515)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12515)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			resizeBuffer();
+			pos = 0;
+			eof = true;
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +349,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -383,6 +390,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -449,6 +457,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12566)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			lineLength = 0;  // disable chunk-separating
+			currentLinePos = 0;
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +351,12 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12570)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12755)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12755)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12755)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12755)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,15 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			currentLinePos = 0;
+			eof = true;
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -449,6 +457,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12755)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12755)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12755)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,18 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			currentLinePos = 0;
+			lineSeparator = CHUNK_SEPARATOR;
+			eof = true;
+			resizeBuffer();
+            System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
+			pos = 0;
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			pos = 0;
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +354,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v12844)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			resizeBuffer();
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +353,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +458,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13146)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13368)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13368)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13368)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13368)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+			resizeBuffer();
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +353,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13368)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13368)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v13368)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,13 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +348,16 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +462,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14949)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14949)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14949)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14949)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+			resizeBuffer();
+			resizeBuffer();
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			resizeBuffer();
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +353,14 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -383,6 +399,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14949)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14949)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v14949)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16545)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16545)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16545)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16545)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +350,15 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -449,6 +463,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16545)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16545)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16545)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +353,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -449,6 +460,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException("encodeInteger called with null parameter");
         }
         try {
             return string.getBytes(charsetName);
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v16964)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17134)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17134)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17134)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17134)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			resizeBuffer();
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +351,16 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			resizeBuffer();
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17134)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17134)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17134)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17150)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17150)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17150)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17150)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			resizeBuffer();
+			resizeBuffer();
+			eof = true;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17150)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17150)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17150)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17950)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17950)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17950)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17950)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			resizeBuffer();
+			eof = true;
+			pos = 0;
+			pos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +355,15 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17950)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17950)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17950)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17967)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17967)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17967)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17967)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			resizeBuffer();
+			eof = true;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +354,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17967)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17967)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17967)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17981)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17981)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17981)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17981)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			pos = 0;
+			resizeBuffer();
+			resizeBuffer();
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +355,14 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17981)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17981)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v17981)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18156)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18156)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18156)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18156)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			eof = true;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			readPos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +354,9 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18156)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18156)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18156)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18371)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18371)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18371)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18371)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +354,15 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18371)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18371)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v18371)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19531)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19531)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19531)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19531)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			pos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19531)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19531)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19531)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19740)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19740)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19740)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19740)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			eof = true;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,6 +358,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19740)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19740)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  PatchLogExporter - patch (v19740)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-09 22:42:09 [main] [INFO]  KGenProgMain - Summary
Reached generation = 109
Generated variants = 21600
Syntax valid variants = 19446
Build succeeded variants = 11042
Time elapsed = 24 hours 26 minutes 45 seconds
Exit status = FAILURE (time limit)
