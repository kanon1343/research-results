2023-11-08 10:42:33 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-08 10:42:33 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-08 10:42:33 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-08 10:42:33 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/kgenprog-8.toml (set by command line)
rootDir = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8 (set in config file)
productPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/java] (set in config file)
testPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64InputStreamTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 6 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /home/fse-pluto/Desktop/research
version = 1.8.2
================================================================
2023-11-08 10:42:36 [main] [INFO]  KGenProgMain - initial failed tests (1/12)
org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105: null

2023-11-08 10:42:36 [main] [INFO]  KGenProgMain - GA started
2023-11-08 10:42:36 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-08 11:06:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 3 seconds
Variants: generated 100, build-succeeded 16, build-failed 61, syntax-invalid 8, redundant 15
Fitness: max 0.917(7), min 0.333(1), ave 0.786
Test execution time: sum 1441100 ms, max 1440032 ms, min 29 ms
----------------------------------------------------------------

2023-11-08 11:06:40 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-08 11:42:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 seconds
Variants: generated 100, build-succeeded 26, build-failed 44, syntax-invalid 11, redundant 19
Fitness: max 0.917(10), min 0.333(1), ave 0.782
Test execution time: sum 2161550 ms, max 1440024 ms, min 24 ms
----------------------------------------------------------------

2023-11-08 11:42:44 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-08 14:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 6 seconds
Variants: generated 200, build-succeeded 81, build-failed 46, syntax-invalid 14, redundant 59
Fitness: max 0.917(15), min 0.333(3), ave 0.729
Test execution time: sum 8815679 ms, max 1440024 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 14:09:43 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-08 14:26:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 57 seconds
Variants: generated 200, build-succeeded 58, build-failed 57, syntax-invalid 30, redundant 55
Fitness: max 0.917(23), min 0.5(1), ave 0.82
Test execution time: sum 1007492 ms, max 900024 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 14:26:34 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-08 14:26:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 3 seconds
Variants: generated 200, build-succeeded 37, build-failed 58, syntax-invalid 40, redundant 65
Fitness: max 0.917(34), min 0.75(3), ave 0.903
Test execution time: sum 2840 ms, max 121 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 14:26:40 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-08 14:26:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 9 seconds
Variants: generated 200, build-succeeded 44, build-failed 56, syntax-invalid 52, redundant 48
Fitness: max 0.917(41), min 0.75(2), ave 0.907
Test execution time: sum 3423 ms, max 122 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 14:26:46 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-08 14:26:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 15 seconds
Variants: generated 200, build-succeeded 30, build-failed 70, syntax-invalid 39, redundant 61
Fitness: max 0.917(28), min 0.75(2), ave 0.906
Test execution time: sum 2894 ms, max 534 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 14:26:52 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-08 14:50:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 21 seconds
Variants: generated 200, build-succeeded 35, build-failed 57, syntax-invalid 44, redundant 64
Fitness: max 0.917(31), min 0.333(1), ave 0.886
Test execution time: sum 1442612 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 14:50:58 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-08 15:06:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 23 minutes 30 seconds
Variants: generated 200, build-succeeded 67, build-failed 57, syntax-invalid 34, redundant 42
Fitness: max 1(1), min 0.583(1), ave 0.905
Test execution time: sum 905204 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 15:06:06 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-08 15:30:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 37 seconds
Variants: generated 200, build-succeeded 57, build-failed 59, syntax-invalid 25, redundant 59
Fitness: max 0.917(51), min 0.333(4), ave 0.865
Test execution time: sum 1444262 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 15:30:14 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-08 15:30:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 46 seconds
Variants: generated 200, build-succeeded 62, build-failed 60, syntax-invalid 34, redundant 44
Fitness: max 1(1), min 0.5(2), ave 0.905
Test execution time: sum 4878 ms, max 157 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 15:30:23 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-08 15:54:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 11 minutes 54 seconds
Variants: generated 200, build-succeeded 59, build-failed 64, syntax-invalid 33, redundant 44
Fitness: max 0.917(50), min 0.333(1), ave 0.867
Test execution time: sum 1444312 ms, max 1440021 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 15:54:31 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-08 15:54:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 12 minutes 3 seconds
Variants: generated 200, build-succeeded 59, build-failed 64, syntax-invalid 28, redundant 49
Fitness: max 0.917(57), min 0.75(2), ave 0.911
Test execution time: sum 4879 ms, max 129 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 15:54:40 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-08 17:06:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 minutes 11 seconds
Variants: generated 200, build-succeeded 54, build-failed 56, syntax-invalid 43, redundant 47
Fitness: max 0.917(51), min 0.333(3), ave 0.884
Test execution time: sum 4324246 ms, max 1440022 ms, min 67 ms
----------------------------------------------------------------

2023-11-08 17:06:48 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-08 17:18:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 36 minutes 21 seconds
Variants: generated 200, build-succeeded 73, build-failed 54, syntax-invalid 40, redundant 33
Fitness: max 0.917(68), min 0.583(1), ave 0.903
Test execution time: sum 725625 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 17:18:57 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-08 17:19:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 36 minutes 30 seconds
Variants: generated 200, build-succeeded 63, build-failed 56, syntax-invalid 42, redundant 39
Fitness: max 0.917(62), min 0.75(1), ave 0.914
Test execution time: sum 5081 ms, max 128 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 17:19:06 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-08 17:19:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 36 minutes 38 seconds
Variants: generated 200, build-succeeded 59, build-failed 61, syntax-invalid 51, redundant 29
Fitness: max 0.917(54), min 0.75(5), ave 0.903
Test execution time: sum 4815 ms, max 368 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 17:19:15 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-08 17:19:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 36 minutes 48 seconds
Variants: generated 200, build-succeeded 63, build-failed 60, syntax-invalid 44, redundant 33
Fitness: max 1(1), min 0.75(4), ave 0.907
Test execution time: sum 5459 ms, max 546 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 17:19:25 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-08 17:19:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 36 minutes 57 seconds
Variants: generated 200, build-succeeded 62, build-failed 63, syntax-invalid 53, redundant 22
Fitness: max 1(1), min 0.917(61), ave 0.918
Test execution time: sum 5232 ms, max 127 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 17:19:34 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-08 17:19:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 37 minutes 7 seconds
Variants: generated 200, build-succeeded 68, build-failed 64, syntax-invalid 39, redundant 29
Fitness: max 0.917(62), min 0.667(2), ave 0.901
Test execution time: sum 5266 ms, max 137 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 17:19:43 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-08 17:19:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 37 minutes 16 seconds
Variants: generated 200, build-succeeded 63, build-failed 74, syntax-invalid 38, redundant 25
Fitness: max 0.917(61), min 0.75(1), ave 0.913
Test execution time: sum 4981 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 17:19:53 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-08 17:20:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 37 minutes 26 seconds
Variants: generated 200, build-succeeded 75, build-failed 61, syntax-invalid 33, redundant 31
Fitness: max 0.917(70), min 0.667(4), ave 0.901
Test execution time: sum 5772 ms, max 129 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 17:20:03 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-08 17:20:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 37 minutes 37 seconds
Variants: generated 200, build-succeeded 82, build-failed 63, syntax-invalid 33, redundant 22
Fitness: max 0.917(80), min 0.75(2), ave 0.913
Test execution time: sum 6845 ms, max 547 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 17:20:14 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-08 17:45:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 2 minutes 58 seconds
Variants: generated 200, build-succeeded 88, build-failed 65, syntax-invalid 25, redundant 22
Fitness: max 0.917(81), min 0.333(1), ave 0.896
Test execution time: sum 1515797 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 17:45:35 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-08 17:57:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 15 minutes 9 seconds
Variants: generated 200, build-succeeded 85, build-failed 68, syntax-invalid 27, redundant 20
Fitness: max 0.917(80), min 0.333(1), ave 0.898
Test execution time: sum 726521 ms, max 720022 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 17:57:46 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-08 18:21:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 39 minutes 20 seconds
Variants: generated 200, build-succeeded 76, build-failed 64, syntax-invalid 24, redundant 36
Fitness: max 0.917(72), min 0.333(1), ave 0.904
Test execution time: sum 1446109 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 18:21:57 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-08 18:22:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 39 minutes 31 seconds
Variants: generated 200, build-succeeded 75, build-failed 65, syntax-invalid 31, redundant 29
Fitness: max 0.917(72), min 0.5(1), ave 0.907
Test execution time: sum 6117 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 18:22:08 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-08 18:46:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 3 minutes 44 seconds
Variants: generated 200, build-succeeded 85, build-failed 69, syntax-invalid 25, redundant 21
Fitness: max 1(1), min 0.333(1), ave 0.909
Test execution time: sum 1447339 ms, max 1440022 ms, min 70 ms
----------------------------------------------------------------

2023-11-08 18:46:20 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-08 18:46:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 3 minutes 56 seconds
Variants: generated 200, build-succeeded 88, build-failed 68, syntax-invalid 23, redundant 21
Fitness: max 0.917(85), min 0.5(1), ave 0.908
Test execution time: sum 7184 ms, max 136 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 18:46:33 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-08 18:46:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 4 minutes 9 seconds
Variants: generated 200, build-succeeded 95, build-failed 59, syntax-invalid 24, redundant 22
Fitness: max 0.917(91), min 0.5(1), ave 0.905
Test execution time: sum 7651 ms, max 143 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 18:46:46 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-08 18:46:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 4 minutes 22 seconds
Variants: generated 200, build-succeeded 95, build-failed 57, syntax-invalid 23, redundant 25
Fitness: max 0.917(91), min 0(1), ave 0.9
Test execution time: sum 7490 ms, max 137 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 18:46:59 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-08 18:47:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 4 minutes 35 seconds
Variants: generated 200, build-succeeded 91, build-failed 64, syntax-invalid 27, redundant 18
Fitness: max 0.917(87), min 0.75(4), ave 0.909
Test execution time: sum 7340 ms, max 136 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 18:47:11 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-08 18:47:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 4 minutes 48 seconds
Variants: generated 200, build-succeeded 103, build-failed 49, syntax-invalid 27, redundant 21
Fitness: max 0.917(98), min 0.75(4), ave 0.909
Test execution time: sum 8188 ms, max 132 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 18:47:25 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-08 18:47:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 1 seconds
Variants: generated 200, build-succeeded 92, build-failed 59, syntax-invalid 31, redundant 18
Fitness: max 0.917(88), min 0.5(2), ave 0.904
Test execution time: sum 7334 ms, max 128 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 18:47:38 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-08 18:47:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 12 seconds
Variants: generated 200, build-succeeded 79, build-failed 57, syntax-invalid 42, redundant 22
Fitness: max 0.917(75), min 0.333(1), ave 0.898
Test execution time: sum 6122 ms, max 126 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 18:47:49 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-08 18:48:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 24 seconds
Variants: generated 200, build-succeeded 86, build-failed 64, syntax-invalid 31, redundant 19
Fitness: max 0.917(78), min 0(1), ave 0.886
Test execution time: sum 6396 ms, max 125 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 18:48:01 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-08 18:48:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 36 seconds
Variants: generated 200, build-succeeded 87, build-failed 65, syntax-invalid 34, redundant 14
Fitness: max 0.917(78), min 0.5(2), ave 0.888
Test execution time: sum 6419 ms, max 140 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 18:48:13 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-08 18:48:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 47 seconds
Variants: generated 200, build-succeeded 77, build-failed 65, syntax-invalid 42, redundant 16
Fitness: max 0.917(69), min 0.5(1), ave 0.891
Test execution time: sum 5545 ms, max 118 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 18:48:24 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-08 18:48:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 59 seconds
Variants: generated 200, build-succeeded 77, build-failed 62, syntax-invalid 42, redundant 19
Fitness: max 0.917(73), min 0.667(3), ave 0.905
Test execution time: sum 5744 ms, max 120 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 18:48:36 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-08 18:48:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 6 minutes 11 seconds
Variants: generated 200, build-succeeded 83, build-failed 57, syntax-invalid 45, redundant 15
Fitness: max 0.917(77), min 0(1), ave 0.891
Test execution time: sum 6140 ms, max 128 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 18:48:47 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-08 19:03:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 21 minutes 22 seconds
Variants: generated 200, build-succeeded 75, build-failed 55, syntax-invalid 56, redundant 14
Fitness: max 0.917(68), min 0.5(2), ave 0.889
Test execution time: sum 905446 ms, max 900022 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:03:58 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-08 19:04:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 21 minutes 34 seconds
Variants: generated 200, build-succeeded 77, build-failed 58, syntax-invalid 46, redundant 19
Fitness: max 1(1), min 0.667(2), ave 0.907
Test execution time: sum 5959 ms, max 136 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:04:10 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-08 19:04:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 21 minutes 47 seconds
Variants: generated 200, build-succeeded 84, build-failed 61, syntax-invalid 41, redundant 14
Fitness: max 0.917(78), min 0.583(1), ave 0.901
Test execution time: sum 6575 ms, max 149 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 19:04:23 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-08 19:04:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 22 minutes 0 seconds
Variants: generated 200, build-succeeded 92, build-failed 57, syntax-invalid 41, redundant 10
Fitness: max 0.917(84), min 0.5(1), ave 0.895
Test execution time: sum 6875 ms, max 128 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:04:37 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-08 19:04:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 22 minutes 12 seconds
Variants: generated 200, build-succeeded 80, build-failed 60, syntax-invalid 52, redundant 8
Fitness: max 1(1), min 0.5(1), ave 0.897
Test execution time: sum 6117 ms, max 113 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:04:49 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-08 19:05:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 22 minutes 24 seconds
Variants: generated 200, build-succeeded 71, build-failed 65, syntax-invalid 51, redundant 13
Fitness: max 1(1), min 0.667(5), ave 0.898
Test execution time: sum 5376 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:05:01 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-08 19:05:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 22 minutes 39 seconds
Variants: generated 200, build-succeeded 98, build-failed 66, syntax-invalid 21, redundant 15
Fitness: max 1(2), min 0.5(1), ave 0.9
Test execution time: sum 7713 ms, max 125 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:05:16 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-08 19:05:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 22 minutes 53 seconds
Variants: generated 200, build-succeeded 94, build-failed 59, syntax-invalid 34, redundant 13
Fitness: max 0.917(90), min 0.5(1), ave 0.905
Test execution time: sum 7621 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:05:30 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-08 19:05:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 23 minutes 7 seconds
Variants: generated 200, build-succeeded 96, build-failed 55, syntax-invalid 36, redundant 13
Fitness: max 0.917(89), min 0(1), ave 0.893
Test execution time: sum 7536 ms, max 133 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 19:05:44 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-08 19:06:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 23 minutes 23 seconds
Variants: generated 200, build-succeeded 107, build-failed 51, syntax-invalid 22, redundant 20
Fitness: max 0.917(101), min 0.5(1), ave 0.903
Test execution time: sum 8535 ms, max 130 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:06:00 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-08 19:06:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 23 minutes 41 seconds
Variants: generated 200, build-succeeded 125, build-failed 51, syntax-invalid 15, redundant 9
Fitness: max 0.917(119), min 0.5(2), ave 0.905
Test execution time: sum 10306 ms, max 130 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:06:18 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-08 19:06:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 23 minutes 57 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 23, redundant 13
Fitness: max 0.917(97), min 0.5(2), ave 0.896
Test execution time: sum 8553 ms, max 161 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:06:33 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-08 19:21:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 13 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 19, redundant 12
Fitness: max 1(1), min 0.5(7), ave 0.876
Test execution time: sum 908640 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:21:50 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-08 19:22:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 27 seconds
Variants: generated 200, build-succeeded 93, build-failed 65, syntax-invalid 32, redundant 10
Fitness: max 0.917(78), min 0.5(7), ave 0.865
Test execution time: sum 6616 ms, max 119 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:22:03 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-08 19:22:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 41 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 23, redundant 19
Fitness: max 0.917(89), min 0.5(4), ave 0.889
Test execution time: sum 7505 ms, max 109 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:22:18 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-08 19:22:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 55 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 31, redundant 15
Fitness: max 0.917(78), min 0(1), ave 0.856
Test execution time: sum 6716 ms, max 128 ms, min 20 ms
----------------------------------------------------------------

2023-11-08 19:22:32 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-08 19:22:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 40 minutes 10 seconds
Variants: generated 200, build-succeeded 97, build-failed 52, syntax-invalid 35, redundant 16
Fitness: max 0.917(86), min 0.5(5), ave 0.881
Test execution time: sum 7185 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:22:46 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-08 19:38:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 55 minutes 25 seconds
Variants: generated 200, build-succeeded 101, build-failed 51, syntax-invalid 31, redundant 17
Fitness: max 0.917(91), min 0.5(4), ave 0.886
Test execution time: sum 907491 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:38:01 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-08 19:38:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 55 minutes 40 seconds
Variants: generated 200, build-succeeded 96, build-failed 61, syntax-invalid 33, redundant 10
Fitness: max 0.917(88), min 0.5(4), ave 0.89
Test execution time: sum 7487 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:38:16 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-08 19:38:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 55 minutes 54 seconds
Variants: generated 200, build-succeeded 96, build-failed 58, syntax-invalid 39, redundant 7
Fitness: max 1(1), min 0.5(3), ave 0.885
Test execution time: sum 6836 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:38:31 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-08 19:38:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 56 minutes 8 seconds
Variants: generated 200, build-succeeded 85, build-failed 59, syntax-invalid 43, redundant 13
Fitness: max 0.917(74), min 0.5(6), ave 0.875
Test execution time: sum 6144 ms, max 122 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:38:44 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-08 19:38:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 56 minutes 22 seconds
Variants: generated 200, build-succeeded 95, build-failed 58, syntax-invalid 32, redundant 15
Fitness: max 1(1), min 0.5(6), ave 0.866
Test execution time: sum 6651 ms, max 114 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:38:59 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-08 19:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 56 minutes 36 seconds
Variants: generated 200, build-succeeded 95, build-failed 57, syntax-invalid 36, redundant 12
Fitness: max 0.917(84), min 0.5(5), ave 0.88
Test execution time: sum 6667 ms, max 128 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:39:13 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-08 19:39:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 56 minutes 51 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 34, redundant 10
Fitness: max 1(1), min 0.5(12), ave 0.853
Test execution time: sum 6439 ms, max 112 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:39:28 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-08 19:39:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 6 seconds
Variants: generated 200, build-succeeded 98, build-failed 59, syntax-invalid 36, redundant 7
Fitness: max 0.917(82), min 0.5(8), ave 0.863
Test execution time: sum 6729 ms, max 135 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:39:43 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-08 19:39:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 21 seconds
Variants: generated 200, build-succeeded 94, build-failed 59, syntax-invalid 33, redundant 14
Fitness: max 0.917(90), min 0.5(1), ave 0.906
Test execution time: sum 7106 ms, max 139 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:39:58 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-08 19:40:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 36 seconds
Variants: generated 200, build-succeeded 92, build-failed 60, syntax-invalid 36, redundant 12
Fitness: max 0.917(81), min 0.5(7), ave 0.874
Test execution time: sum 6471 ms, max 118 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:40:13 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-08 19:40:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 50 seconds
Variants: generated 200, build-succeeded 86, build-failed 70, syntax-invalid 33, redundant 11
Fitness: max 0.917(73), min 0.5(7), ave 0.865
Test execution time: sum 5863 ms, max 117 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:40:27 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-08 19:40:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 58 minutes 4 seconds
Variants: generated 200, build-succeeded 86, build-failed 62, syntax-invalid 43, redundant 9
Fitness: max 0.917(73), min 0.5(6), ave 0.868
Test execution time: sum 5864 ms, max 114 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:40:41 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-08 19:40:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 58 minutes 19 seconds
Variants: generated 200, build-succeeded 86, build-failed 60, syntax-invalid 39, redundant 15
Fitness: max 0.917(68), min 0.5(6), ave 0.853
Test execution time: sum 5613 ms, max 112 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:40:55 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-08 19:41:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 58 minutes 33 seconds
Variants: generated 200, build-succeeded 86, build-failed 59, syntax-invalid 44, redundant 11
Fitness: max 0.917(72), min 0.5(4), ave 0.868
Test execution time: sum 5873 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:41:10 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-08 19:41:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 58 minutes 48 seconds
Variants: generated 200, build-succeeded 85, build-failed 53, syntax-invalid 51, redundant 11
Fitness: max 0.917(76), min 0.5(3), ave 0.885
Test execution time: sum 6186 ms, max 115 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:41:24 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-08 19:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 59 minutes 3 seconds
Variants: generated 200, build-succeeded 85, build-failed 69, syntax-invalid 35, redundant 11
Fitness: max 0.917(72), min 0.5(7), ave 0.865
Test execution time: sum 6215 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:41:39 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-08 19:41:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 59 minutes 18 seconds
Variants: generated 200, build-succeeded 94, build-failed 52, syntax-invalid 40, redundant 14
Fitness: max 0.917(86), min 0.5(3), ave 0.891
Test execution time: sum 6835 ms, max 108 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:41:55 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-08 19:42:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 59 minutes 34 seconds
Variants: generated 200, build-succeeded 95, build-failed 59, syntax-invalid 34, redundant 12
Fitness: max 0.917(87), min 0.5(4), ave 0.889
Test execution time: sum 6900 ms, max 138 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:42:11 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-08 19:42:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 59 minutes 48 seconds
Variants: generated 200, build-succeeded 79, build-failed 61, syntax-invalid 48, redundant 12
Fitness: max 0.917(68), min 0.5(2), ave 0.88
Test execution time: sum 5403 ms, max 125 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:42:25 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-08 19:42:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 2 seconds
Variants: generated 200, build-succeeded 79, build-failed 62, syntax-invalid 46, redundant 13
Fitness: max 0.917(66), min 0.5(5), ave 0.866
Test execution time: sum 5392 ms, max 113 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:42:39 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-08 19:42:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 17 seconds
Variants: generated 200, build-succeeded 78, build-failed 64, syntax-invalid 42, redundant 16
Fitness: max 0.917(65), min 0.5(2), ave 0.871
Test execution time: sum 5283 ms, max 130 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:42:53 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-08 19:43:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 33 seconds
Variants: generated 200, build-succeeded 97, build-failed 56, syntax-invalid 32, redundant 15
Fitness: max 0.917(85), min 0.5(2), ave 0.883
Test execution time: sum 6852 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:43:10 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-08 19:43:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 49 seconds
Variants: generated 200, build-succeeded 91, build-failed 68, syntax-invalid 31, redundant 10
Fitness: max 1(1), min 0.5(2), ave 0.892
Test execution time: sum 6696 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:43:26 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-08 19:43:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 1 minutes 6 seconds
Variants: generated 200, build-succeeded 104, build-failed 54, syntax-invalid 27, redundant 15
Fitness: max 0.917(90), min 0(1), ave 0.877
Test execution time: sum 7244 ms, max 132 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 19:43:43 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-08 19:44:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 1 minutes 25 seconds
Variants: generated 200, build-succeeded 104, build-failed 65, syntax-invalid 22, redundant 9
Fitness: max 0.917(99), min 0.5(2), ave 0.901
Test execution time: sum 7882 ms, max 137 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:44:01 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-08 19:44:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 1 minutes 44 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 15, redundant 11
Fitness: max 1(2), min 0.5(4), ave 0.885
Test execution time: sum 8497 ms, max 120 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:44:20 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-08 19:44:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 2 minutes 3 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 20, redundant 10
Fitness: max 0.917(107), min 0.5(2), ave 0.898
Test execution time: sum 8877 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:44:40 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-08 19:44:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 2 minutes 22 seconds
Variants: generated 200, build-succeeded 115, build-failed 46, syntax-invalid 22, redundant 17
Fitness: max 0.917(101), min 0.5(3), ave 0.882
Test execution time: sum 8289 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:44:59 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-08 19:45:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 2 minutes 41 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 18, redundant 10
Fitness: max 0.917(98), min 0.5(2), ave 0.877
Test execution time: sum 8208 ms, max 140 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:45:18 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-08 19:45:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 3 minutes 1 seconds
Variants: generated 200, build-succeeded 121, build-failed 47, syntax-invalid 21, redundant 11
Fitness: max 0.917(111), min 0.667(10), ave 0.896
Test execution time: sum 8992 ms, max 117 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 19:45:38 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-08 20:00:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 19 seconds
Variants: generated 200, build-succeeded 101, build-failed 52, syntax-invalid 34, redundant 13
Fitness: max 0.917(92), min 0.5(2), ave 0.891
Test execution time: sum 907377 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:00:55 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-08 20:01:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 38 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 21, redundant 12
Fitness: max 0.917(97), min 0.5(1), ave 0.888
Test execution time: sum 7933 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:01:14 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-08 20:01:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 57 seconds
Variants: generated 200, build-succeeded 113, build-failed 56, syntax-invalid 21, redundant 10
Fitness: max 0.917(102), min 0.5(1), ave 0.891
Test execution time: sum 8428 ms, max 144 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:01:34 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-08 20:01:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 19 minutes 15 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 33, redundant 6
Fitness: max 0.917(91), min 0.667(10), ave 0.891
Test execution time: sum 7533 ms, max 117 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:01:52 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-08 20:02:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 19 minutes 35 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 26, redundant 10
Fitness: max 0.917(102), min 0.667(5), ave 0.904
Test execution time: sum 8518 ms, max 119 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:02:12 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-08 20:03:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 3 seconds
Variants: generated 200, build-succeeded 118, build-failed 55, syntax-invalid 17, redundant 10
Fitness: max 1(2), min 0.5(5), ave 0.869
Test execution time: sum 76486 ms, max 68372 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:03:40 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-08 20:04:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 23 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 19, redundant 9
Fitness: max 0.917(104), min 0.667(10), ave 0.894
Test execution time: sum 8473 ms, max 134 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:04:00 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-08 20:04:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 43 seconds
Variants: generated 200, build-succeeded 110, build-failed 58, syntax-invalid 24, redundant 8
Fitness: max 0.917(95), min 0.5(1), ave 0.881
Test execution time: sum 7988 ms, max 127 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:04:20 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-08 20:04:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 22 minutes 1 seconds
Variants: generated 200, build-succeeded 95, build-failed 59, syntax-invalid 37, redundant 9
Fitness: max 1(1), min 0.667(7), ave 0.897
Test execution time: sum 7142 ms, max 129 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:04:38 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-08 20:19:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 20 seconds
Variants: generated 200, build-succeeded 101, build-failed 66, syntax-invalid 23, redundant 10
Fitness: max 0.917(84), min 0.5(1), ave 0.872
Test execution time: sum 906973 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:19:57 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-08 20:20:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 40 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 24, redundant 6
Fitness: max 1(1), min 0.667(8), ave 0.899
Test execution time: sum 8155 ms, max 134 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:20:17 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-08 20:20:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 0 seconds
Variants: generated 200, build-succeeded 107, build-failed 56, syntax-invalid 27, redundant 10
Fitness: max 1(1), min 0.5(1), ave 0.895
Test execution time: sum 8188 ms, max 156 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:20:37 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-08 20:20:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 21 seconds
Variants: generated 200, build-succeeded 117, build-failed 51, syntax-invalid 23, redundant 9
Fitness: max 1(1), min 0.5(4), ave 0.892
Test execution time: sum 8916 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:20:58 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-08 20:21:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 42 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 29, redundant 7
Fitness: max 1(2), min 0.583(1), ave 0.901
Test execution time: sum 8686 ms, max 128 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:21:18 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-08 20:21:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 39 minutes 3 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0.5(4), ave 0.882
Test execution time: sum 8793 ms, max 139 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:21:40 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-08 20:22:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 39 minutes 24 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 19, redundant 14
Fitness: max 1(2), min 0.5(1), ave 0.901
Test execution time: sum 8580 ms, max 123 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:22:00 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-08 20:22:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 39 minutes 45 seconds
Variants: generated 200, build-succeeded 121, build-failed 51, syntax-invalid 19, redundant 9
Fitness: max 1(2), min 0.5(2), ave 0.889
Test execution time: sum 9113 ms, max 113 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:22:22 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-08 20:22:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 40 minutes 7 seconds
Variants: generated 200, build-succeeded 117, build-failed 59, syntax-invalid 13, redundant 11
Fitness: max 0.917(106), min 0.667(11), ave 0.893
Test execution time: sum 8972 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:22:44 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-08 20:23:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 40 minutes 30 seconds
Variants: generated 200, build-succeeded 126, build-failed 54, syntax-invalid 13, redundant 7
Fitness: max 1(3), min 0.5(1), ave 0.907
Test execution time: sum 10153 ms, max 140 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 20:23:07 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-08 20:23:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 40 minutes 53 seconds
Variants: generated 200, build-succeeded 120, build-failed 57, syntax-invalid 10, redundant 13
Fitness: max 1(2), min 0.5(2), ave 0.907
Test execution time: sum 9525 ms, max 130 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:23:29 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-08 20:23:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 41 minutes 13 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 21, redundant 10
Fitness: max 1(4), min 0.333(1), ave 0.9
Test execution time: sum 8033 ms, max 131 ms, min 21 ms
----------------------------------------------------------------

2023-11-08 20:23:50 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-08 20:24:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 41 minutes 35 seconds
Variants: generated 200, build-succeeded 112, build-failed 65, syntax-invalid 14, redundant 9
Fitness: max 1(4), min 0.667(3), ave 0.913
Test execution time: sum 8724 ms, max 135 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:24:12 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-08 20:24:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 41 minutes 57 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 18, redundant 10
Fitness: max 0.917(112), min 0.667(7), ave 0.902
Test execution time: sum 9049 ms, max 134 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:24:34 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-08 20:24:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 42 minutes 20 seconds
Variants: generated 200, build-succeeded 121, build-failed 50, syntax-invalid 16, redundant 13
Fitness: max 0.917(116), min 0.667(5), ave 0.906
Test execution time: sum 9756 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:24:56 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-08 20:25:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 42 minutes 40 seconds
Variants: generated 200, build-succeeded 99, build-failed 61, syntax-invalid 27, redundant 13
Fitness: max 0.917(92), min 0.667(6), ave 0.9
Test execution time: sum 7831 ms, max 137 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:25:17 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-08 20:25:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 43 minutes 1 seconds
Variants: generated 200, build-succeeded 102, build-failed 64, syntax-invalid 21, redundant 13
Fitness: max 0.917(86), min 0.333(1), ave 0.875
Test execution time: sum 7563 ms, max 136 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:25:37 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-08 20:25:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 43 minutes 22 seconds
Variants: generated 200, build-succeeded 107, build-failed 67, syntax-invalid 17, redundant 9
Fitness: max 1(1), min 0.667(9), ave 0.896
Test execution time: sum 8216 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:25:59 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-08 20:26:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 43 minutes 45 seconds
Variants: generated 200, build-succeeded 125, build-failed 55, syntax-invalid 15, redundant 5
Fitness: max 0.917(115), min 0.667(8), ave 0.898
Test execution time: sum 9575 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:26:22 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-08 20:26:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 44 minutes 8 seconds
Variants: generated 200, build-succeeded 125, build-failed 52, syntax-invalid 10, redundant 13
Fitness: max 0.917(116), min 0.667(9), ave 0.899
Test execution time: sum 9370 ms, max 131 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:26:45 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-08 20:27:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 44 minutes 32 seconds
Variants: generated 200, build-succeeded 130, build-failed 45, syntax-invalid 13, redundant 12
Fitness: max 0.917(127), min 0.667(1), ave 0.913
Test execution time: sum 10307 ms, max 131 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:27:09 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-08 20:27:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 44 minutes 55 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 14, redundant 12
Fitness: max 1(1), min 0.667(5), ave 0.905
Test execution time: sum 9177 ms, max 134 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:27:32 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-08 20:27:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 45 minutes 18 seconds
Variants: generated 200, build-succeeded 119, build-failed 45, syntax-invalid 16, redundant 20
Fitness: max 0.917(103), min 0.5(1), ave 0.885
Test execution time: sum 9075 ms, max 572 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:27:55 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-08 20:28:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 45 minutes 41 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 24, redundant 9
Fitness: max 0.917(100), min 0.5(1), ave 0.897
Test execution time: sum 8207 ms, max 134 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:28:17 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-08 20:28:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 46 minutes 3 seconds
Variants: generated 200, build-succeeded 108, build-failed 55, syntax-invalid 21, redundant 16
Fitness: max 1(1), min 0.667(4), ave 0.904
Test execution time: sum 8662 ms, max 142 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:28:40 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-08 20:29:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 46 minutes 27 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 13, redundant 11
Fitness: max 1(6), min 0.667(4), ave 0.91
Test execution time: sum 9803 ms, max 137 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:29:04 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-08 20:29:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 46 minutes 50 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 23, redundant 9
Fitness: max 1(2), min 0.5(1), ave 0.906
Test execution time: sum 8497 ms, max 135 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:29:27 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-08 20:38:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 56 minutes 11 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 21, redundant 13
Fitness: max 1(3), min 0.5(1), ave 0.902
Test execution time: sum 547253 ms, max 538652 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:38:48 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-08 20:54:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 11 minutes 35 seconds
Variants: generated 200, build-succeeded 125, build-failed 53, syntax-invalid 16, redundant 6
Fitness: max 1(1), min 0.5(3), ave 0.887
Test execution time: sum 909625 ms, max 900024 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 20:54:12 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-08 20:54:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 12 minutes 0 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 19, redundant 9
Fitness: max 1(1), min 0.667(1), ave 0.915
Test execution time: sum 10133 ms, max 131 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 20:54:36 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-08 21:10:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 27 minutes 23 seconds
Variants: generated 200, build-succeeded 109, build-failed 64, syntax-invalid 21, redundant 6
Fitness: max 1(2), min 0.417(1), ave 0.899
Test execution time: sum 908733 ms, max 900024 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 21:10:00 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-08 21:34:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 51 minutes 48 seconds
Variants: generated 200, build-succeeded 127, build-failed 48, syntax-invalid 10, redundant 15
Fitness: max 1(5), min 0.333(1), ave 0.905
Test execution time: sum 1450393 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 21:34:25 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-08 21:34:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 52 minutes 13 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 15, redundant 10
Fitness: max 1(5), min 0.5(2), ave 0.905
Test execution time: sum 9398 ms, max 154 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 21:34:50 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-08 21:35:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 52 minutes 38 seconds
Variants: generated 200, build-succeeded 126, build-failed 52, syntax-invalid 14, redundant 8
Fitness: max 1(5), min 0.5(5), ave 0.897
Test execution time: sum 9780 ms, max 130 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 21:35:15 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-08 21:35:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 53 minutes 1 seconds
Variants: generated 200, build-succeeded 107, build-failed 66, syntax-invalid 23, redundant 4
Fitness: max 1(2), min 0.5(1), ave 0.912
Test execution time: sum 8664 ms, max 132 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 21:35:38 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-08 21:36:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 53 minutes 25 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 21, redundant 7
Fitness: max 1(2), min 0.5(1), ave 0.908
Test execution time: sum 9265 ms, max 138 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 21:36:02 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-08 22:03:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 20 minutes 45 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 13, redundant 13
Fitness: max 0.917(105), min 0.583(3), ave 0.897
Test execution time: sum 1624565 ms, max 539974 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:03:22 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-08 22:12:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 30 minutes 0 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 20, redundant 13
Fitness: max 1(6), min 0.583(1), ave 0.907
Test execution time: sum 540571 ms, max 531892 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:12:37 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-08 22:13:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 30 minutes 24 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 21, redundant 5
Fitness: max 1(3), min 0.5(2), ave 0.899
Test execution time: sum 8676 ms, max 130 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:13:01 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-08 22:13:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 30 minutes 48 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 17, redundant 14
Fitness: max 1(3), min 0.667(8), ave 0.9
Test execution time: sum 8754 ms, max 116 ms, min 22 ms
----------------------------------------------------------------

2023-11-08 22:13:25 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-08 22:13:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 31 minutes 11 seconds
Variants: generated 200, build-succeeded 112, build-failed 53, syntax-invalid 23, redundant 12
Fitness: max 1(2), min 0.5(2), ave 0.889
Test execution time: sum 8219 ms, max 131 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:13:48 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-08 22:14:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 31 minutes 34 seconds
Variants: generated 200, build-succeeded 107, build-failed 54, syntax-invalid 28, redundant 11
Fitness: max 1(1), min 0.667(4), ave 0.905
Test execution time: sum 8309 ms, max 133 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:14:11 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-08 22:14:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 31 minutes 58 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 20, redundant 7
Fitness: max 1(3), min 0.667(10), ave 0.896
Test execution time: sum 8125 ms, max 136 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:14:35 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-11-08 22:14:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 32 minutes 21 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 24, redundant 6
Fitness: max 0.917(106), min 0.667(7), ave 0.901
Test execution time: sum 8400 ms, max 118 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:14:58 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-11-08 22:15:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 32 minutes 42 seconds
Variants: generated 169, build-succeeded 96, build-failed 42, syntax-invalid 17, redundant 14
Fitness: max 1(2), min 0.5(1), ave 0.901
Test execution time: sum 7116 ms, max 125 ms, min 23 ms
----------------------------------------------------------------

2023-11-08 22:15:19 [main] [INFO]  KGenProgMain - GA stopped
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1484)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1484)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1484)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1484)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -484,6 +485,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					byte[] buf = new byte[pos - readPos];
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1484)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1484)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1484)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1871)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1871)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1871)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1871)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            modulus = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1022,6 +1025,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1871)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1871)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v1871)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3219)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3219)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3219)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3219)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			currentLinePos = 0;
+			int bytesCopied = 0;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			buffer = null;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1025,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3219)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3219)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3219)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = false;
+			buffer = null;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v3449)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v5225)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v5225)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v5225)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v5225)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -486,7 +487,8 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
-                int b = in[inPos++];
+                int startSrc = 0;
+				int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
                 }
@@ -1022,6 +1024,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v5225)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v5225)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v5225)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8041)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8041)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8041)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8041)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +347,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +421,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -1022,6 +1024,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8041)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8041)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8041)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -381,7 +385,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte b = lineSeparator[lineSeparator.length - 1];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8834)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8834)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8834)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8834)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +349,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -486,7 +491,8 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
-                int b = in[inPos++];
+                int startSrc = 0;
+				int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
                 }
@@ -1022,6 +1028,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8834)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8834)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v8834)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			buffer = null;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -381,7 +385,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte b = lineSeparator[lineSeparator.length - 1];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -1022,6 +1027,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9083)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9083)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9083)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9083)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +349,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -381,7 +386,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte b = lineSeparator[lineSeparator.length - 1];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -486,7 +492,8 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
-                int b = in[inPos++];
+                int startSrc = 0;
+				int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
                 }
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9083)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9083)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v9083)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			buffer = null;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +348,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -486,7 +492,8 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
-                int b = in[inPos++];
+                int startSrc = 0;
+				int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
                 }
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v10278)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v11649)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v11649)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v11649)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v11649)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +350,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +425,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v11649)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v11649)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v11649)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12121)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12121)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12121)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12121)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +352,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12121)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12121)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12121)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v12578)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            modulus = (++modulus) % 4;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			buffer = null;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +353,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +428,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -1022,6 +1031,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			switch (modulus) {
+			case 2:
+				x = x << 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				break;
+			}
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +438,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16234)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16315)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16315)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16315)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16315)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,13 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer = null;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16315)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16315)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v16315)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +351,11 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18265)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,17 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +355,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1033,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            readPos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +353,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +428,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -1022,6 +1031,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v18816)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19370)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19370)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19370)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19370)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			int bytesCopied = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1022,6 +1035,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19370)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19370)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19370)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19517)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19517)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19517)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19517)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			int startSrc = 0;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +356,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1036,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19517)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19517)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19517)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19689)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19689)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19689)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19689)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            readPos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +353,11 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +431,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19689)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19689)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19689)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +357,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19816)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +356,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1036,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v19970)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
+			int startSrc = 0;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +354,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1033,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20026)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            readPos = 0;
+			currentLinePos = 0;
+			resizeBuffer();
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +354,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20272)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1022,6 +1034,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20367)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20532)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20532)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20532)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20532)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20532)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20532)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20532)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20540)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20540)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20540)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20540)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            readPos = 0;
+			x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +357,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1037,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20540)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20540)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20540)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +354,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1033,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20852)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			buffer = null;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +353,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1034,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20868)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20996)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20996)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20996)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20996)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			byte[] result = new byte[pos];
+			reset();
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1022,6 +1037,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20996)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20996)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v20996)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21183)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21183)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21183)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21183)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +358,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1036,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21183)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21183)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21183)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21186)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21186)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21186)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21186)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			reset();
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21186)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21186)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21186)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21302)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21302)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21302)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21302)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1038,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21302)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21302)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21302)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21314)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21314)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21314)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21314)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1022,6 +1037,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21314)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21314)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21314)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21365)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21365)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21365)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21365)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,27 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				lineLength = 0;
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			{
+				lineLength = 0;
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			currentLinePos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +365,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1043,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21365)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21365)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21365)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21379)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21379)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21379)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21379)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			readPos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			int startSrc = 0;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1022,6 +1034,9 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21379)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21379)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21379)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +358,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1037,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21466)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21508)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21508)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21508)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21508)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
+			int startSrc = 0;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21508)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21508)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21508)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			byte[] result = new byte[pos];
+			x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			int startSrc = 0;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1037,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21572)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21592)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21592)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21592)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21592)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1038,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21592)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21592)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v21592)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +354,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23225)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23225)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23225)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23225)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			buffer = null;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +439,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23225)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23225)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23225)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v23919)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24054)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24054)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24054)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24054)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +361,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24054)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24054)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24054)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24114)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24114)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24114)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24114)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1040,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24114)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24114)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24114)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24123)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24123)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24123)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24123)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1037,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24123)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24123)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24123)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24149)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24149)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24149)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24149)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24149)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24149)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24149)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24166)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24166)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24166)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24166)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24166)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24166)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24166)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24169)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24169)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24169)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24169)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				lineLength = 0;
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1041,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24169)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24169)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24169)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24362)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24362)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24362)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24362)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24362)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24362)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24362)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24369)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24369)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24369)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24369)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			buffer = null;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1038,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24369)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24369)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24369)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24578)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24589)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24589)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24589)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24589)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1040,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24589)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24589)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24589)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24593)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24699)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24699)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24699)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24699)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,29 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +367,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24699)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24699)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24699)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24949)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24949)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24949)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24949)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24949)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24949)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v24949)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25164)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25164)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25164)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25164)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +361,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1041,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25164)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25164)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25164)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos += 4;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25196)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25267)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25267)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25267)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25267)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1039,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25267)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25267)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25267)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			currentLinePos += 4;
+			reset();
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos += 4;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25322)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25322)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25322)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25322)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1041,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25322)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25322)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25322)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1041,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25340)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25392)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25392)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25392)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25392)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25392)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25392)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25392)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25534)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25534)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25534)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25534)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +361,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1040,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25534)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25534)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25534)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25547)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25547)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25547)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25547)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25547)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25547)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25547)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25558)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25558)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25558)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25558)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25558)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25558)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25558)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25570)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25570)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25570)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25570)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25570)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25570)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25570)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25576)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25576)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25576)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25576)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,11 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25576)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25576)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25576)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +358,11 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25742)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25778)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25778)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25778)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25778)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +356,12 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25778)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25778)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25778)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25797)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25797)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25797)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25797)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +357,12 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25797)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25797)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25797)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			modulus = (++modulus) % 3;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos += 4;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +361,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25798)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25906)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25906)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25906)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25906)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +361,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25906)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25906)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25906)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25925)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25925)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25925)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25925)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25925)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25925)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v25925)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,7 +362,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
+			eof = true;
+			eof = true;
+			throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26150)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26183)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26183)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26183)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26183)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,26 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +364,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26183)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26183)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26183)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26517)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26517)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26517)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26517)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +362,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1041,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26517)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26517)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26517)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,11 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26525)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			currentLinePos = 0;
+			reset();
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +357,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26529)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +357,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26537)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26544)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26544)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26544)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26544)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			modulus = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26544)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26544)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26544)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			readPos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,7 +360,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
+			eof = true;
+			eof = true;
+			throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
@@ -1022,6 +1039,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26705)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26705)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26705)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26705)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1037,9 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26705)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26705)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26705)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26724)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26724)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26724)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26724)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1040,9 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26724)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26724)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26724)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26748)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26748)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26748)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26748)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26748)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26748)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26748)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26811)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26811)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26811)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26811)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +356,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26811)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26811)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26811)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26949)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26949)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26949)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26949)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,17 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +355,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26949)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26949)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26949)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26960)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26960)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26960)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26960)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +358,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26960)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26960)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v26960)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +360,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1038,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27179)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27186)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27186)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27186)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27186)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +363,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1041,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27186)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27186)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27186)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27399)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27399)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27399)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27399)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +359,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27399)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27399)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27399)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27569)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27569)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27569)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27569)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,27 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27569)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27569)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27569)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27589)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27589)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27589)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27589)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27589)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27589)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27589)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +356,10 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -1022,6 +1037,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27597)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,26 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			eof = true;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +364,9 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			eof = true;
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27833)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27969)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27969)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27969)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27969)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,28 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			x = x << 6;
+			x = x << 6;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			x = x << 6;
+			eof = true;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -345,6 +366,7 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27969)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27969)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  PatchLogExporter - patch (v27969)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-08 22:15:19 [main] [INFO]  KGenProgMain - Summary
Reached generation = 141
Generated variants = 27969
Syntax valid variants = 23970
Build succeeded variants = 13326
Time elapsed = 11 hours 32 minutes 43 seconds
Exit status = SUCCESS
