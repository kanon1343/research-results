2023-08-09 17:01:20 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-09 17:01:20 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-09 17:01:20 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-09 17:01:21 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math46/kgenprog-46.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math46 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.complex.ComplexTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/afterResearch
version = 1.8.2
================================================================
2023-08-09 17:01:42 [main] [INFO]  KGenProgMain - initial failed tests (2/116)
org.apache.commons.math.complex.ComplexTest.testDivideZero: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
org.apache.commons.math.complex.ComplexTest.testAtanI: null

2023-08-09 17:01:43 [main] [INFO]  KGenProgMain - GA started
2023-08-09 17:01:43 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-09 17:01:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, build-succeeded 3, build-failed 55, syntax-invalid 3, redundant 39
Fitness: max 0.991(2), min 0.983(1), ave 0.989
Test execution time: sum 3259 ms, max 1224 ms, min 959 ms
----------------------------------------------------------------

2023-08-09 17:01:53 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-09 17:02:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 seconds
Variants: generated 100, build-succeeded 9, build-failed 51, syntax-invalid 6, redundant 34
Fitness: max 0.991(7), min 0.966(1), ave 0.988
Test execution time: sum 5358 ms, max 845 ms, min 455 ms
----------------------------------------------------------------

2023-08-09 17:02:03 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-09 17:02:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 seconds
Variants: generated 200, build-succeeded 31, build-failed 60, syntax-invalid 14, redundant 95
Fitness: max 1(3), min 0.966(7), ave 0.986
Test execution time: sum 15618 ms, max 622 ms, min 428 ms
----------------------------------------------------------------

2023-08-09 17:02:28 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-09 17:02:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 15 seconds
Variants: generated 200, build-succeeded 43, build-failed 46, syntax-invalid 20, redundant 91
Fitness: max 1(3), min 0.957(3), ave 0.984
Test execution time: sum 21184 ms, max 813 ms, min 404 ms
----------------------------------------------------------------

2023-08-09 17:02:58 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-09 17:03:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 43 seconds
Variants: generated 200, build-succeeded 39, build-failed 51, syntax-invalid 34, redundant 76
Fitness: max 0.991(28), min 0.948(1), ave 0.985
Test execution time: sum 18199 ms, max 630 ms, min 404 ms
----------------------------------------------------------------

2023-08-09 17:03:26 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-09 17:03:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 12 seconds
Variants: generated 200, build-succeeded 41, build-failed 60, syntax-invalid 37, redundant 62
Fitness: max 1(4), min 0.966(4), ave 0.987
Test execution time: sum 19642 ms, max 874 ms, min 417 ms
----------------------------------------------------------------

2023-08-09 17:03:55 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-09 17:04:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 38 seconds
Variants: generated 200, build-succeeded 39, build-failed 57, syntax-invalid 38, redundant 66
Fitness: max 1(1), min 0.966(4), ave 0.988
Test execution time: sum 18344 ms, max 619 ms, min 424 ms
----------------------------------------------------------------

2023-08-09 17:04:22 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-09 17:04:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 5 seconds
Variants: generated 200, build-succeeded 37, build-failed 52, syntax-invalid 50, redundant 61
Fitness: max 1(1), min 0.948(1), ave 0.985
Test execution time: sum 17308 ms, max 714 ms, min 414 ms
----------------------------------------------------------------

2023-08-09 17:04:48 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-09 17:05:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 29 seconds
Variants: generated 200, build-succeeded 37, build-failed 47, syntax-invalid 41, redundant 75
Fitness: max 1(4), min 0.966(1), ave 0.99
Test execution time: sum 17110 ms, max 542 ms, min 402 ms
----------------------------------------------------------------

2023-08-09 17:05:12 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-09 17:05:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 58 seconds
Variants: generated 200, build-succeeded 41, build-failed 56, syntax-invalid 43, redundant 60
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 20112 ms, max 994 ms, min 430 ms
----------------------------------------------------------------

2023-08-09 17:05:42 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-09 17:06:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 35 seconds
Variants: generated 200, build-succeeded 40, build-failed 52, syntax-invalid 50, redundant 58
Fitness: max 0.991(32), min 0.966(1), ave 0.988
Test execution time: sum 24960 ms, max 1026 ms, min 443 ms
----------------------------------------------------------------

2023-08-09 17:06:19 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-09 17:06:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 13 seconds
Variants: generated 200, build-succeeded 47, build-failed 50, syntax-invalid 52, redundant 51
Fitness: max 1(2), min 0.957(1), ave 0.989
Test execution time: sum 27801 ms, max 947 ms, min 447 ms
----------------------------------------------------------------

2023-08-09 17:06:57 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-09 17:07:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 55 seconds
Variants: generated 200, build-succeeded 50, build-failed 54, syntax-invalid 46, redundant 50
Fitness: max 1(1), min 0.983(9), ave 0.99
Test execution time: sum 30771 ms, max 917 ms, min 438 ms
----------------------------------------------------------------

2023-08-09 17:07:38 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-09 17:08:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 43 seconds
Variants: generated 200, build-succeeded 55, build-failed 61, syntax-invalid 48, redundant 36
Fitness: max 1(4), min 0.966(2), ave 0.99
Test execution time: sum 36207 ms, max 911 ms, min 454 ms
----------------------------------------------------------------

2023-08-09 17:08:27 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-09 17:09:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 33 seconds
Variants: generated 200, build-succeeded 55, build-failed 43, syntax-invalid 59, redundant 43
Fitness: max 1(1), min 0.966(4), ave 0.988
Test execution time: sum 37490 ms, max 970 ms, min 420 ms
----------------------------------------------------------------

2023-08-09 17:09:16 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-09 17:10:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 29 seconds
Variants: generated 200, build-succeeded 58, build-failed 50, syntax-invalid 42, redundant 50
Fitness: max 1(1), min 0.966(3), ave 0.987
Test execution time: sum 42125 ms, max 927 ms, min 474 ms
----------------------------------------------------------------

2023-08-09 17:10:12 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-09 17:11:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 17 seconds
Variants: generated 200, build-succeeded 56, build-failed 54, syntax-invalid 45, redundant 45
Fitness: max 1(3), min 0.966(3), ave 0.989
Test execution time: sum 36584 ms, max 949 ms, min 445 ms
----------------------------------------------------------------

2023-08-09 17:11:00 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-09 17:11:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 9 seconds
Variants: generated 200, build-succeeded 60, build-failed 55, syntax-invalid 38, redundant 47
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 40396 ms, max 915 ms, min 444 ms
----------------------------------------------------------------

2023-08-09 17:11:53 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-09 17:12:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 10 seconds
Variants: generated 200, build-succeeded 66, build-failed 51, syntax-invalid 42, redundant 41
Fitness: max 1(1), min 0.836(1), ave 0.986
Test execution time: sum 47411 ms, max 1023 ms, min 430 ms
----------------------------------------------------------------

2023-08-09 17:12:53 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-09 17:13:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 3 seconds
Variants: generated 200, build-succeeded 59, build-failed 59, syntax-invalid 49, redundant 33
Fitness: max 1(3), min 0.966(3), ave 0.99
Test execution time: sum 38816 ms, max 897 ms, min 434 ms
----------------------------------------------------------------

2023-08-09 17:13:46 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-09 17:14:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 3 seconds
Variants: generated 200, build-succeeded 62, build-failed 62, syntax-invalid 39, redundant 37
Fitness: max 0.991(52), min 0.966(2), ave 0.989
Test execution time: sum 45088 ms, max 941 ms, min 487 ms
----------------------------------------------------------------

2023-08-09 17:14:46 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-09 17:15:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 4 seconds
Variants: generated 200, build-succeeded 64, build-failed 48, syntax-invalid 47, redundant 41
Fitness: max 1(2), min 0.922(1), ave 0.988
Test execution time: sum 45447 ms, max 981 ms, min 465 ms
----------------------------------------------------------------

2023-08-09 17:15:47 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-09 17:16:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 5 seconds
Variants: generated 200, build-succeeded 62, build-failed 54, syntax-invalid 42, redundant 42
Fitness: max 1(1), min 0.974(2), ave 0.99
Test execution time: sum 45548 ms, max 1085 ms, min 425 ms
----------------------------------------------------------------

2023-08-09 17:16:48 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-09 17:17:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 11 seconds
Variants: generated 200, build-succeeded 72, build-failed 56, syntax-invalid 35, redundant 37
Fitness: max 1(2), min 0.948(1), ave 0.99
Test execution time: sum 50461 ms, max 979 ms, min 464 ms
----------------------------------------------------------------

2023-08-09 17:17:54 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-09 17:18:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 11 seconds
Variants: generated 200, build-succeeded 64, build-failed 58, syntax-invalid 46, redundant 32
Fitness: max 0.991(57), min 0.983(7), ave 0.99
Test execution time: sum 45880 ms, max 1065 ms, min 474 ms
----------------------------------------------------------------

2023-08-09 17:18:54 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-09 17:20:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 17 seconds
Variants: generated 200, build-succeeded 69, build-failed 61, syntax-invalid 45, redundant 25
Fitness: max 1(2), min 0.983(7), ave 0.991
Test execution time: sum 48693 ms, max 1044 ms, min 455 ms
----------------------------------------------------------------

2023-08-09 17:20:00 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-09 17:20:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 12 seconds
Variants: generated 200, build-succeeded 62, build-failed 59, syntax-invalid 50, redundant 29
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 41855 ms, max 920 ms, min 437 ms
----------------------------------------------------------------

2023-08-09 17:20:55 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-09 17:21:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 9 seconds
Variants: generated 200, build-succeeded 65, build-failed 49, syntax-invalid 32, redundant 54
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 44550 ms, max 868 ms, min 425 ms
----------------------------------------------------------------

2023-08-09 17:21:52 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-09 17:22:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 4 seconds
Variants: generated 200, build-succeeded 68, build-failed 64, syntax-invalid 32, redundant 36
Fitness: max 1(2), min 0.845(1), ave 0.988
Test execution time: sum 41838 ms, max 1005 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 17:22:47 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-09 17:23:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 4 seconds
Variants: generated 200, build-succeeded 69, build-failed 59, syntax-invalid 46, redundant 26
Fitness: max 1(1), min 0.871(1), ave 0.988
Test execution time: sum 46764 ms, max 926 ms, min 428 ms
----------------------------------------------------------------

2023-08-09 17:23:47 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-09 17:24:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 0 seconds
Variants: generated 200, build-succeeded 60, build-failed 61, syntax-invalid 53, redundant 26
Fitness: max 1(3), min 0.845(1), ave 0.989
Test execution time: sum 41110 ms, max 836 ms, min 473 ms
----------------------------------------------------------------

2023-08-09 17:24:43 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-09 17:25:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 46 seconds
Variants: generated 200, build-succeeded 52, build-failed 55, syntax-invalid 63, redundant 30
Fitness: max 1(4), min 0.966(2), ave 0.991
Test execution time: sum 34885 ms, max 906 ms, min 454 ms
----------------------------------------------------------------

2023-08-09 17:25:30 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-09 17:26:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 31 seconds
Variants: generated 200, build-succeeded 38, build-failed 59, syntax-invalid 74, redundant 29
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 29987 ms, max 1160 ms, min 434 ms
----------------------------------------------------------------

2023-08-09 17:26:14 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-09 17:27:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 24 seconds
Variants: generated 200, build-succeeded 59, build-failed 62, syntax-invalid 53, redundant 26
Fitness: max 1(1), min 0.974(1), ave 0.991
Test execution time: sum 40784 ms, max 973 ms, min 454 ms
----------------------------------------------------------------

2023-08-09 17:27:08 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-09 17:27:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 11 seconds
Variants: generated 200, build-succeeded 49, build-failed 55, syntax-invalid 66, redundant 30
Fitness: max 1(2), min 0.974(4), ave 0.99
Test execution time: sum 33187 ms, max 939 ms, min 452 ms
----------------------------------------------------------------

2023-08-09 17:27:54 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-09 17:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 0 seconds
Variants: generated 200, build-succeeded 50, build-failed 57, syntax-invalid 68, redundant 25
Fitness: max 1(4), min 0.983(3), ave 0.992
Test execution time: sum 34432 ms, max 874 ms, min 432 ms
----------------------------------------------------------------

2023-08-09 17:28:44 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-09 17:29:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 41 seconds
Variants: generated 200, build-succeeded 44, build-failed 68, syntax-invalid 69, redundant 19
Fitness: max 1(1), min 0.974(1), ave 0.991
Test execution time: sum 27653 ms, max 1077 ms, min 418 ms
----------------------------------------------------------------

2023-08-09 17:29:24 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-09 17:30:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 28 seconds
Variants: generated 200, build-succeeded 55, build-failed 66, syntax-invalid 56, redundant 23
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 34490 ms, max 1329 ms, min 419 ms
----------------------------------------------------------------

2023-08-09 17:30:11 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-09 17:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 15 seconds
Variants: generated 200, build-succeeded 50, build-failed 72, syntax-invalid 52, redundant 26
Fitness: max 0.991(46), min 0.948(1), ave 0.99
Test execution time: sum 33505 ms, max 847 ms, min 450 ms
----------------------------------------------------------------

2023-08-09 17:30:59 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-09 17:31:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 13 seconds
Variants: generated 200, build-succeeded 62, build-failed 66, syntax-invalid 56, redundant 16
Fitness: max 1(1), min 0.828(1), ave 0.988
Test execution time: sum 42646 ms, max 865 ms, min 461 ms
----------------------------------------------------------------

2023-08-09 17:31:56 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-09 17:33:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 19 seconds
Variants: generated 200, build-succeeded 70, build-failed 63, syntax-invalid 47, redundant 20
Fitness: max 0.991(54), min 0.966(1), ave 0.989
Test execution time: sum 50698 ms, max 1129 ms, min 444 ms
----------------------------------------------------------------

2023-08-09 17:33:02 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-09 17:34:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 29 seconds
Variants: generated 200, build-succeeded 79, build-failed 64, syntax-invalid 41, redundant 16
Fitness: max 1(2), min 0.931(1), ave 0.99
Test execution time: sum 54682 ms, max 953 ms, min 445 ms
----------------------------------------------------------------

2023-08-09 17:34:13 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-09 17:35:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 33 seconds
Variants: generated 200, build-succeeded 72, build-failed 58, syntax-invalid 47, redundant 23
Fitness: max 0.991(60), min 0.983(12), ave 0.99
Test execution time: sum 48104 ms, max 862 ms, min 422 ms
----------------------------------------------------------------

2023-08-09 17:35:17 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-09 17:36:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 49 seconds
Variants: generated 200, build-succeeded 69, build-failed 60, syntax-invalid 49, redundant 22
Fitness: max 1(2), min 0.931(1), ave 0.99
Test execution time: sum 57870 ms, max 1151 ms, min 425 ms
----------------------------------------------------------------

2023-08-09 17:36:32 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-09 17:37:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 4 seconds
Variants: generated 200, build-succeeded 83, build-failed 49, syntax-invalid 45, redundant 23
Fitness: max 1(1), min 0.983(8), ave 0.991
Test execution time: sum 58260 ms, max 1074 ms, min 434 ms
----------------------------------------------------------------

2023-08-09 17:37:47 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-09 17:38:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 8 seconds
Variants: generated 200, build-succeeded 72, build-failed 53, syntax-invalid 43, redundant 32
Fitness: max 1(2), min 0.836(1), ave 0.989
Test execution time: sum 48930 ms, max 910 ms, min 417 ms
----------------------------------------------------------------

2023-08-09 17:38:51 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-09 17:39:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 14 seconds
Variants: generated 200, build-succeeded 70, build-failed 43, syntax-invalid 54, redundant 33
Fitness: max 1(2), min 0.983(10), ave 0.99
Test execution time: sum 50749 ms, max 1039 ms, min 435 ms
----------------------------------------------------------------

2023-08-09 17:39:57 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-09 17:41:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 25 seconds
Variants: generated 200, build-succeeded 78, build-failed 53, syntax-invalid 47, redundant 22
Fitness: max 1(3), min 0.957(1), ave 0.99
Test execution time: sum 53937 ms, max 962 ms, min 432 ms
----------------------------------------------------------------

2023-08-09 17:41:08 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-09 17:42:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 23 seconds
Variants: generated 200, build-succeeded 66, build-failed 59, syntax-invalid 41, redundant 34
Fitness: max 1(1), min 0.983(6), ave 0.991
Test execution time: sum 43586 ms, max 961 ms, min 423 ms
----------------------------------------------------------------

2023-08-09 17:42:06 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-09 17:43:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 33 seconds
Variants: generated 200, build-succeeded 74, build-failed 61, syntax-invalid 40, redundant 25
Fitness: max 0.991(60), min 0.914(2), ave 0.987
Test execution time: sum 52919 ms, max 1003 ms, min 468 ms
----------------------------------------------------------------

2023-08-09 17:43:16 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-09 17:44:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 28 seconds
Variants: generated 200, build-succeeded 61, build-failed 52, syntax-invalid 58, redundant 29
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 40857 ms, max 1029 ms, min 443 ms
----------------------------------------------------------------

2023-08-09 17:44:11 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-09 17:45:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 29 seconds
Variants: generated 200, build-succeeded 63, build-failed 72, syntax-invalid 38, redundant 27
Fitness: max 1(1), min 0.966(4), ave 0.989
Test execution time: sum 45149 ms, max 957 ms, min 438 ms
----------------------------------------------------------------

2023-08-09 17:45:13 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-09 17:46:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 36 seconds
Variants: generated 200, build-succeeded 66, build-failed 70, syntax-invalid 39, redundant 25
Fitness: max 1(3), min 0.966(2), ave 0.99
Test execution time: sum 49205 ms, max 1075 ms, min 440 ms
----------------------------------------------------------------

2023-08-09 17:46:19 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-09 17:47:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 31 seconds
Variants: generated 200, build-succeeded 64, build-failed 73, syntax-invalid 51, redundant 12
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 40010 ms, max 903 ms, min 434 ms
----------------------------------------------------------------

2023-08-09 17:47:15 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-09 17:48:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 26 seconds
Variants: generated 200, build-succeeded 63, build-failed 61, syntax-invalid 52, redundant 24
Fitness: max 0.991(53), min 0.948(1), ave 0.989
Test execution time: sum 39776 ms, max 957 ms, min 413 ms
----------------------------------------------------------------

2023-08-09 17:48:09 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-09 17:49:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 23 seconds
Variants: generated 200, build-succeeded 59, build-failed 63, syntax-invalid 47, redundant 31
Fitness: max 1(1), min 0.974(1), ave 0.991
Test execution time: sum 42304 ms, max 1282 ms, min 459 ms
----------------------------------------------------------------

2023-08-09 17:49:06 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-09 17:50:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 29 seconds
Variants: generated 200, build-succeeded 68, build-failed 59, syntax-invalid 54, redundant 19
Fitness: max 0.991(59), min 0.966(1), ave 0.99
Test execution time: sum 48427 ms, max 958 ms, min 461 ms
----------------------------------------------------------------

2023-08-09 17:50:12 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-09 17:51:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 30 seconds
Variants: generated 200, build-succeeded 72, build-failed 52, syntax-invalid 37, redundant 39
Fitness: max 1(2), min 0.983(6), ave 0.991
Test execution time: sum 45641 ms, max 976 ms, min 415 ms
----------------------------------------------------------------

2023-08-09 17:51:13 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-09 17:52:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 41 seconds
Variants: generated 200, build-succeeded 80, build-failed 52, syntax-invalid 46, redundant 22
Fitness: max 1(4), min 0.966(1), ave 0.991
Test execution time: sum 56144 ms, max 994 ms, min 434 ms
----------------------------------------------------------------

2023-08-09 17:52:25 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-09 17:53:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 43 seconds
Variants: generated 200, build-succeeded 65, build-failed 55, syntax-invalid 58, redundant 22
Fitness: max 0.991(60), min 0.836(1), ave 0.988
Test execution time: sum 45264 ms, max 956 ms, min 424 ms
----------------------------------------------------------------

2023-08-09 17:53:26 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-09 17:54:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 44 seconds
Variants: generated 200, build-succeeded 67, build-failed 62, syntax-invalid 51, redundant 20
Fitness: max 1(1), min 0.966(2), ave 0.99
Test execution time: sum 44963 ms, max 944 ms, min 430 ms
----------------------------------------------------------------

2023-08-09 17:54:28 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-09 17:55:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 50 seconds
Variants: generated 200, build-succeeded 71, build-failed 49, syntax-invalid 51, redundant 29
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 51006 ms, max 1062 ms, min 466 ms
----------------------------------------------------------------

2023-08-09 17:55:34 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-09 17:56:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 51 seconds
Variants: generated 200, build-succeeded 65, build-failed 53, syntax-invalid 55, redundant 27
Fitness: max 1(2), min 0.957(1), ave 0.988
Test execution time: sum 44558 ms, max 826 ms, min 456 ms
----------------------------------------------------------------

2023-08-09 17:56:34 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-09 17:57:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 48 seconds
Variants: generated 200, build-succeeded 60, build-failed 49, syntax-invalid 58, redundant 33
Fitness: max 1(2), min 0.966(4), ave 0.989
Test execution time: sum 42731 ms, max 933 ms, min 496 ms
----------------------------------------------------------------

2023-08-09 17:57:32 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-09 17:57:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 57 seconds
Variants: generated 30, build-succeeded 4, build-failed 14, syntax-invalid 6, redundant 6
Fitness: max 1(2), min 0.991(2), ave 0.996
Test execution time: sum 2467 ms, max 745 ms, min 526 ms
----------------------------------------------------------------

2023-08-09 17:57:40 [main] [INFO]  KGenProgMain - GA stopped
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v241)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v241)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v241)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v241)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v241)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v241)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v301)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v301)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v301)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v301)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v307)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v307)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v307)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v307)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v307)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v307)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v428)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v428)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v428)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v428)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v428)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v428)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v572)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v572)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v572)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v572)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v572)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v572)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v912)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v912)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v912)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v912)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v912)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v912)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v997)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v997)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v997)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v997)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v997)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v997)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v999)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v1065)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v1065)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v1065)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v1065)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v1065)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v1065)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:48 [main] [INFO]  PatchLogExporter - patch (v1065)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1408)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1408)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1408)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1408)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1408)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1408)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1408)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1471)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1471)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1471)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1471)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1471)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1471)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1527)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1527)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1527)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1527)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1527)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1527)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1798)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1798)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1798)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1798)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1798)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v1798)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2288)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2288)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2288)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2288)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2438)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2438)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2438)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2438)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2438)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2438)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2438)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2449)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2449)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2449)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2449)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2449)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2449)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2495)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2495)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2495)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2495)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2495)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -292,10 +290,8 @@
         if (isNaN || Double.isNaN(divisor)) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
-        }
+        if (divisor == 0d)
+			return NaN;
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2495)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2691)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2691)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2691)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2691)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2691)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2691)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2691)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2810)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2810)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2810)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2810)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2810)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2810)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v2810)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3013)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3013)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3013)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3013)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3013)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3013)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3013)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3022)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3022)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3022)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3022)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3022)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3022)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3022)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3043)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3043)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3043)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3043)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3043)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3043)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3043)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3274)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3274)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3274)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3274)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3274)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3274)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3602)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3680)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3680)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3680)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3680)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3680)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3680)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3680)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3689)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3689)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3689)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3689)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3689)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3689)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v3689)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v4037)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v4037)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v4037)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v4037)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v4037)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v4037)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:49 [main] [INFO]  PatchLogExporter - patch (v4037)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4047)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4215)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4215)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4215)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4215)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4215)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4483)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4483)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4483)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4483)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4483)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,15 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4483)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4486)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4486)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4486)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4486)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4486)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4486)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4486)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4844)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4844)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4844)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4844)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4844)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4844)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4844)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4898)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4898)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4898)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4898)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4898)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4898)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v4898)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5082)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5082)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5082)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5082)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5082)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5082)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5082)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5228)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5228)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5228)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5228)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5228)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5287)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5287)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5287)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5287)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5287)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5287)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5287)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5421)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5452)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5452)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5452)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5452)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5452)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5452)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5452)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5684)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5684)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5684)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5684)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5684)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5684)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5684)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5841)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5841)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5841)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5841)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5841)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5841)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5841)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5878)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5878)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5878)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5878)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5878)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5878)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v5878)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6044)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6044)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6044)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6044)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6044)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6044)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6044)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6047)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6047)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6047)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6047)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6047)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6047)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6047)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6077)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6269)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6634)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6644)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6644)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6644)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6644)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6644)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6644)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:50 [main] [INFO]  PatchLogExporter - patch (v6644)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6858)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6865)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6865)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6865)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6865)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6865)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6865)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6865)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6889)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6889)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6889)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6889)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6889)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6889)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v6889)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7062)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7603)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7603)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7603)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7603)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,8 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7603)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7603)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +290,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v7603)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,10 +288,10 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
-        if (divisor == 0d) {
+        if (isNaN) {
             // return isZero ? NaN : INF; // See MATH-657
             return isZero ? NaN : INF;
         }
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -813,7 +813,6 @@
        is less than 0.5 ULP */
         double z = 0.04168701738764507;
         z = z * epsilon + 0.1666666505023083;
-        z = z * epsilon + 0.5000000000042687;
         z = z * epsilon + 1.0;
         z = z * epsilon + -3.940510424527919E-20;
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8007)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8028)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8028)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8028)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8028)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8028)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8028)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8028)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8408)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8408)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8408)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8408)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,10 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8408)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8408)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8408)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -813,7 +813,6 @@
        is less than 0.5 ULP */
         double z = 0.04168701738764507;
         z = z * epsilon + 0.1666666505023083;
-        z = z * epsilon + 0.5000000000042687;
         z = z * epsilon + 1.0;
         z = z * epsilon + -3.940510424527919E-20;
 
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8646)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8879)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8879)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8879)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8879)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,9 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8879)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8879)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8879)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +289,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:51 [main] [INFO]  PatchLogExporter - patch (v9028)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9077)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9077)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9077)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9077)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,8 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9077)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9077)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9077)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9281)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9281)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9281)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9281)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9281)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9281)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9281)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9288)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9288)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9288)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,10 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9288)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9288)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9289)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9289)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9289)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9289)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9289)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9289)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9289)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9493)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9493)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9493)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9493)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,11 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9493)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9493)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9493)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9869)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9869)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9869)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9869)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9869)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9869)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v9869)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10030)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10030)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10030)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10030)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,9 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10030)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10030)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +289,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10030)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10213)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10213)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10213)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10213)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,12 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10213)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10213)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10213)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10216)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,11 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -813,7 +813,6 @@
        is less than 0.5 ULP */
         double z = 0.04168701738764507;
         z = z * epsilon + 0.1666666505023083;
-        z = z * epsilon + 0.5000000000042687;
         z = z * epsilon + 1.0;
         z = z * epsilon + -3.940510424527919E-20;
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10297)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,10 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10403)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,10 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v10810)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,10 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -813,7 +813,6 @@
        is less than 0.5 ULP */
         double z = 0.04168701738764507;
         z = z * epsilon + 0.1666666505023083;
-        z = z * epsilon + 0.5000000000042687;
         z = z * epsilon + 1.0;
         z = z * epsilon + -3.940510424527919E-20;
 
2023-08-09 17:57:52 [main] [INFO]  PatchLogExporter - patch (v11223)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11282)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11282)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11282)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11282)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,9 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11282)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11282)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11282)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11417)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11417)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11417)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11417)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,11 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11417)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11417)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11417)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11435)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11435)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11435)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11435)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,11 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11435)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11435)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11435)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11457)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11457)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11457)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11457)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,11 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11457)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11457)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11457)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,9 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11492)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,10 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v11857)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,12 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12078)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12219)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12219)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12219)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12219)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,10 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12219)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12219)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12219)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,12 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12239)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,11 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12401)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12477)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12477)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12477)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12477)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -64,7 +64,11 @@
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
         msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12477)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12477)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12477)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12615)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12615)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12615)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,11 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12615)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12615)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12630)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12630)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12630)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12630)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,8 +63,11 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
-        msgArguments.add(ArgUtils.flatten(arguments));
+        context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		context=new HashMap<String, Object>();
+		msgArguments.add(ArgUtils.flatten(arguments));
     }
 
     /**
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12630)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12630)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 17:57:53 [main] [INFO]  PatchLogExporter - patch (v12630)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 17:57:53 [main] [INFO]  KGenProgMain - Summary
Reached generation = 65
Generated variants = 12630
Syntax valid variants = 9694
Build succeeded variants = 3703
Time elapsed = 56 minutes 10 seconds
Exit status = SUCCESS
