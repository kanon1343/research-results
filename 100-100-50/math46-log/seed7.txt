2023-08-09 20:15:43 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-09 20:15:43 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-09 20:15:43 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-09 20:15:44 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math46/kgenprog-46.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math46 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.complex.ComplexTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 7 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/afterResearch
version = 1.8.2
================================================================
2023-08-09 20:16:07 [main] [INFO]  KGenProgMain - initial failed tests (2/116)
org.apache.commons.math.complex.ComplexTest.testDivideZero: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
org.apache.commons.math.complex.ComplexTest.testAtanI: null

2023-08-09 20:16:07 [main] [INFO]  KGenProgMain - GA started
2023-08-09 20:16:07 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-09 20:16:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 100, build-succeeded 4, build-failed 54, syntax-invalid 4, redundant 38
Fitness: max 0.991(1), min 0.966(1), ave 0.981
Test execution time: sum 3778 ms, max 1275 ms, min 665 ms
----------------------------------------------------------------

2023-08-09 20:16:19 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-09 20:16:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 100, build-succeeded 13, build-failed 57, syntax-invalid 3, redundant 27
Fitness: max 0.991(6), min 0.948(1), ave 0.981
Test execution time: sum 7792 ms, max 792 ms, min 493 ms
----------------------------------------------------------------

2023-08-09 20:16:33 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-09 20:17:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 seconds
Variants: generated 200, build-succeeded 32, build-failed 63, syntax-invalid 7, redundant 98
Fitness: max 0.991(10), min 0.94(1), ave 0.973
Test execution time: sum 17296 ms, max 820 ms, min 434 ms
----------------------------------------------------------------

2023-08-09 20:17:00 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-09 20:17:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 24 seconds
Variants: generated 200, build-succeeded 45, build-failed 62, syntax-invalid 9, redundant 84
Fitness: max 1(2), min 0.94(1), ave 0.975
Test execution time: sum 21703 ms, max 676 ms, min 425 ms
----------------------------------------------------------------

2023-08-09 20:17:32 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-09 20:18:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 57 seconds
Variants: generated 200, build-succeeded 47, build-failed 63, syntax-invalid 19, redundant 71
Fitness: max 1(1), min 0.94(1), ave 0.979
Test execution time: sum 22504 ms, max 635 ms, min 404 ms
----------------------------------------------------------------

2023-08-09 20:18:05 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-09 20:18:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 30 seconds
Variants: generated 200, build-succeeded 49, build-failed 62, syntax-invalid 20, redundant 69
Fitness: max 0.991(38), min 0.966(3), ave 0.988
Test execution time: sum 22697 ms, max 580 ms, min 377 ms
----------------------------------------------------------------

2023-08-09 20:18:38 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-09 20:19:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 2 seconds
Variants: generated 200, build-succeeded 45, build-failed 56, syntax-invalid 31, redundant 68
Fitness: max 0.991(27), min 0.845(1), ave 0.98
Test execution time: sum 20782 ms, max 561 ms, min 397 ms
----------------------------------------------------------------

2023-08-09 20:19:10 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-09 20:19:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 30 seconds
Variants: generated 200, build-succeeded 42, build-failed 56, syntax-invalid 37, redundant 65
Fitness: max 0.991(31), min 0.922(1), ave 0.985
Test execution time: sum 19355 ms, max 638 ms, min 392 ms
----------------------------------------------------------------

2023-08-09 20:19:38 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-09 20:20:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 3 seconds
Variants: generated 200, build-succeeded 42, build-failed 63, syntax-invalid 26, redundant 69
Fitness: max 0.991(30), min 0.966(6), ave 0.986
Test execution time: sum 23196 ms, max 863 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 20:20:11 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-09 20:20:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 45 seconds
Variants: generated 200, build-succeeded 56, build-failed 60, syntax-invalid 24, redundant 60
Fitness: max 0.991(38), min 0.957(1), ave 0.986
Test execution time: sum 30829 ms, max 904 ms, min 401 ms
----------------------------------------------------------------

2023-08-09 20:20:53 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-09 20:21:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 34 seconds
Variants: generated 200, build-succeeded 63, build-failed 58, syntax-invalid 25, redundant 54
Fitness: max 1(3), min 0.966(4), ave 0.989
Test execution time: sum 36866 ms, max 917 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 20:21:42 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-09 20:22:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 33 seconds
Variants: generated 200, build-succeeded 73, build-failed 60, syntax-invalid 24, redundant 43
Fitness: max 1(1), min 0.966(3), ave 0.989
Test execution time: sum 45072 ms, max 898 ms, min 413 ms
----------------------------------------------------------------

2023-08-09 20:22:41 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-09 20:23:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 39 seconds
Variants: generated 200, build-succeeded 66, build-failed 60, syntax-invalid 24, redundant 50
Fitness: max 1(2), min 0.966(3), ave 0.99
Test execution time: sum 49238 ms, max 1103 ms, min 447 ms
----------------------------------------------------------------

2023-08-09 20:23:47 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-09 20:24:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 31 seconds
Variants: generated 200, build-succeeded 63, build-failed 64, syntax-invalid 28, redundant 45
Fitness: max 0.991(55), min 0.966(1), ave 0.99
Test execution time: sum 36595 ms, max 867 ms, min 401 ms
----------------------------------------------------------------

2023-08-09 20:24:39 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-09 20:25:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 18 seconds
Variants: generated 200, build-succeeded 58, build-failed 50, syntax-invalid 45, redundant 47
Fitness: max 1(3), min 0.966(6), ave 0.988
Test execution time: sum 33765 ms, max 826 ms, min 411 ms
----------------------------------------------------------------

2023-08-09 20:25:26 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-09 20:26:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 19 seconds
Variants: generated 200, build-succeeded 72, build-failed 48, syntax-invalid 37, redundant 43
Fitness: max 0.991(62), min 0.966(2), ave 0.99
Test execution time: sum 45391 ms, max 1066 ms, min 406 ms
----------------------------------------------------------------

2023-08-09 20:26:26 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-09 20:27:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 15 seconds
Variants: generated 200, build-succeeded 60, build-failed 55, syntax-invalid 43, redundant 42
Fitness: max 0.991(55), min 0.983(5), ave 0.991
Test execution time: sum 41223 ms, max 862 ms, min 429 ms
----------------------------------------------------------------

2023-08-09 20:27:23 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-09 20:28:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 24 seconds
Variants: generated 200, build-succeeded 75, build-failed 52, syntax-invalid 31, redundant 42
Fitness: max 1(2), min 0.966(4), ave 0.989
Test execution time: sum 50948 ms, max 2496 ms, min 394 ms
----------------------------------------------------------------

2023-08-09 20:28:31 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-09 20:29:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 10 seconds
Variants: generated 200, build-succeeded 65, build-failed 59, syntax-invalid 53, redundant 23
Fitness: max 1(4), min 0.836(1), ave 0.988
Test execution time: sum 33896 ms, max 829 ms, min 394 ms
----------------------------------------------------------------

2023-08-09 20:29:18 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-09 20:30:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 9 seconds
Variants: generated 200, build-succeeded 79, build-failed 52, syntax-invalid 48, redundant 21
Fitness: max 1(4), min 0.931(1), ave 0.99
Test execution time: sum 43870 ms, max 965 ms, min 407 ms
----------------------------------------------------------------

2023-08-09 20:30:17 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-09 20:31:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 57 seconds
Variants: generated 200, build-succeeded 65, build-failed 57, syntax-invalid 47, redundant 31
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 34575 ms, max 952 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 20:31:05 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-09 20:31:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 46 seconds
Variants: generated 200, build-succeeded 63, build-failed 52, syntax-invalid 56, redundant 29
Fitness: max 0.991(57), min 0.983(6), ave 0.991
Test execution time: sum 34707 ms, max 842 ms, min 395 ms
----------------------------------------------------------------

2023-08-09 20:31:53 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-09 20:32:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 40 seconds
Variants: generated 200, build-succeeded 66, build-failed 58, syntax-invalid 61, redundant 15
Fitness: max 1(2), min 0.966(1), ave 0.989
Test execution time: sum 38629 ms, max 1058 ms, min 409 ms
----------------------------------------------------------------

2023-08-09 20:32:48 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-09 20:33:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 35 seconds
Variants: generated 200, build-succeeded 65, build-failed 62, syntax-invalid 54, redundant 19
Fitness: max 1(1), min 0.983(9), ave 0.99
Test execution time: sum 38550 ms, max 897 ms, min 398 ms
----------------------------------------------------------------

2023-08-09 20:33:43 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-09 20:34:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 37 seconds
Variants: generated 200, build-succeeded 67, build-failed 65, syntax-invalid 49, redundant 19
Fitness: max 0.991(54), min 0.836(1), ave 0.985
Test execution time: sum 45056 ms, max 953 ms, min 406 ms
----------------------------------------------------------------

2023-08-09 20:34:45 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-09 20:35:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 47 seconds
Variants: generated 200, build-succeeded 69, build-failed 62, syntax-invalid 52, redundant 17
Fitness: max 1(2), min 0.983(12), ave 0.99
Test execution time: sum 50413 ms, max 2562 ms, min 409 ms
----------------------------------------------------------------

2023-08-09 20:35:55 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-09 20:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 36 seconds
Variants: generated 200, build-succeeded 65, build-failed 65, syntax-invalid 56, redundant 14
Fitness: max 0.991(55), min 0.974(1), ave 0.99
Test execution time: sum 34612 ms, max 880 ms, min 396 ms
----------------------------------------------------------------

2023-08-09 20:36:44 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-09 20:37:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 29 seconds
Variants: generated 200, build-succeeded 68, build-failed 58, syntax-invalid 50, redundant 24
Fitness: max 1(1), min 0.983(8), ave 0.99
Test execution time: sum 36703 ms, max 813 ms, min 406 ms
----------------------------------------------------------------

2023-08-09 20:37:37 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-09 20:38:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 20 seconds
Variants: generated 200, build-succeeded 62, build-failed 65, syntax-invalid 49, redundant 24
Fitness: max 0.991(51), min 0.957(1), ave 0.989
Test execution time: sum 33611 ms, max 929 ms, min 407 ms
----------------------------------------------------------------

2023-08-09 20:38:28 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-09 20:39:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 22 seconds
Variants: generated 200, build-succeeded 70, build-failed 54, syntax-invalid 43, redundant 33
Fitness: max 1(4), min 0.922(1), ave 0.99
Test execution time: sum 42817 ms, max 1033 ms, min 393 ms
----------------------------------------------------------------

2023-08-09 20:39:30 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-09 20:40:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 14 seconds
Variants: generated 200, build-succeeded 62, build-failed 60, syntax-invalid 55, redundant 23
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 34845 ms, max 884 ms, min 392 ms
----------------------------------------------------------------

2023-08-09 20:40:22 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-09 20:41:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 19 seconds
Variants: generated 200, build-succeeded 77, build-failed 52, syntax-invalid 54, redundant 17
Fitness: max 1(2), min 0.966(2), ave 0.991
Test execution time: sum 46972 ms, max 918 ms, min 415 ms
----------------------------------------------------------------

2023-08-09 20:41:27 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-09 20:42:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 20 seconds
Variants: generated 200, build-succeeded 60, build-failed 60, syntax-invalid 62, redundant 18
Fitness: max 1(2), min 0.957(1), ave 0.989
Test execution time: sum 38852 ms, max 920 ms, min 399 ms
----------------------------------------------------------------

2023-08-09 20:42:28 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-09 20:43:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 30 seconds
Variants: generated 200, build-succeeded 72, build-failed 52, syntax-invalid 50, redundant 26
Fitness: max 1(1), min 0.931(1), ave 0.989
Test execution time: sum 48404 ms, max 865 ms, min 441 ms
----------------------------------------------------------------

2023-08-09 20:43:38 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-09 20:44:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 18 seconds
Variants: generated 200, build-succeeded 56, build-failed 59, syntax-invalid 60, redundant 25
Fitness: max 0.991(54), min 0.983(2), ave 0.991
Test execution time: sum 31741 ms, max 997 ms, min 395 ms
----------------------------------------------------------------

2023-08-09 20:44:26 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-09 20:45:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 9 seconds
Variants: generated 200, build-succeeded 66, build-failed 50, syntax-invalid 59, redundant 25
Fitness: max 1(3), min 0.966(1), ave 0.991
Test execution time: sum 34265 ms, max 939 ms, min 384 ms
----------------------------------------------------------------

2023-08-09 20:45:17 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-09 20:46:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 53 seconds
Variants: generated 200, build-succeeded 52, build-failed 54, syntax-invalid 66, redundant 28
Fitness: max 1(2), min 0.966(1), ave 0.991
Test execution time: sum 28395 ms, max 943 ms, min 398 ms
----------------------------------------------------------------

2023-08-09 20:46:01 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-09 20:46:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 40 seconds
Variants: generated 200, build-succeeded 59, build-failed 52, syntax-invalid 65, redundant 24
Fitness: max 0.991(50), min 0.966(2), ave 0.989
Test execution time: sum 31383 ms, max 891 ms, min 398 ms
----------------------------------------------------------------

2023-08-09 20:46:48 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-09 20:47:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 24 seconds
Variants: generated 200, build-succeeded 46, build-failed 64, syntax-invalid 71, redundant 19
Fitness: max 0.991(41), min 0.983(5), ave 0.99
Test execution time: sum 26353 ms, max 924 ms, min 399 ms
----------------------------------------------------------------

2023-08-09 20:47:31 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-09 20:48:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 20 seconds
Variants: generated 200, build-succeeded 67, build-failed 46, syntax-invalid 65, redundant 22
Fitness: max 0.991(63), min 0.983(4), ave 0.991
Test execution time: sum 39449 ms, max 894 ms, min 390 ms
----------------------------------------------------------------

2023-08-09 20:48:28 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-09 20:49:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 10 seconds
Variants: generated 200, build-succeeded 54, build-failed 53, syntax-invalid 73, redundant 20
Fitness: max 1(1), min 0.983(6), ave 0.991
Test execution time: sum 31717 ms, max 921 ms, min 385 ms
----------------------------------------------------------------

2023-08-09 20:49:18 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-09 20:50:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 9 seconds
Variants: generated 200, build-succeeded 65, build-failed 49, syntax-invalid 60, redundant 26
Fitness: max 0.991(52), min 0.931(1), ave 0.988
Test execution time: sum 40742 ms, max 878 ms, min 418 ms
----------------------------------------------------------------

2023-08-09 20:50:17 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-09 20:51:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 15 seconds
Variants: generated 200, build-succeeded 64, build-failed 55, syntax-invalid 53, redundant 28
Fitness: max 1(1), min 0.966(2), ave 0.99
Test execution time: sum 45549 ms, max 1075 ms, min 429 ms
----------------------------------------------------------------

2023-08-09 20:51:22 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-09 20:52:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 18 seconds
Variants: generated 200, build-succeeded 58, build-failed 60, syntax-invalid 59, redundant 23
Fitness: max 0.991(51), min 0.966(1), ave 0.99
Test execution time: sum 40888 ms, max 2823 ms, min 383 ms
----------------------------------------------------------------

2023-08-09 20:52:26 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-09 20:53:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 3 seconds
Variants: generated 200, build-succeeded 54, build-failed 56, syntax-invalid 65, redundant 25
Fitness: max 0.991(45), min 0.974(2), ave 0.99
Test execution time: sum 28245 ms, max 892 ms, min 392 ms
----------------------------------------------------------------

2023-08-09 20:53:11 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-09 20:53:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 43 seconds
Variants: generated 200, build-succeeded 45, build-failed 55, syntax-invalid 72, redundant 28
Fitness: max 1(1), min 0.957(1), ave 0.989
Test execution time: sum 24545 ms, max 906 ms, min 399 ms
----------------------------------------------------------------

2023-08-09 20:53:51 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-09 20:54:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 36 seconds
Variants: generated 200, build-succeeded 68, build-failed 46, syntax-invalid 66, redundant 20
Fitness: max 0.991(53), min 0.845(1), ave 0.986
Test execution time: sum 35913 ms, max 807 ms, min 392 ms
----------------------------------------------------------------

2023-08-09 20:54:44 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-09 20:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 19 seconds
Variants: generated 200, build-succeeded 48, build-failed 54, syntax-invalid 74, redundant 24
Fitness: max 0.991(39), min 0.974(1), ave 0.99
Test execution time: sum 26994 ms, max 988 ms, min 388 ms
----------------------------------------------------------------

2023-08-09 20:55:27 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-09 20:56:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 13 seconds
Variants: generated 200, build-succeeded 65, build-failed 59, syntax-invalid 54, redundant 22
Fitness: max 0.991(47), min 0.957(1), ave 0.988
Test execution time: sum 36925 ms, max 830 ms, min 387 ms
----------------------------------------------------------------

2023-08-09 20:56:21 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-09 20:57:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 11 seconds
Variants: generated 200, build-succeeded 66, build-failed 52, syntax-invalid 64, redundant 18
Fitness: max 1(2), min 0.966(2), ave 0.989
Test execution time: sum 40328 ms, max 966 ms, min 401 ms
----------------------------------------------------------------

2023-08-09 20:57:19 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-09 20:58:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 16 seconds
Variants: generated 200, build-succeeded 64, build-failed 57, syntax-invalid 60, redundant 19
Fitness: max 0.991(56), min 0.966(2), ave 0.99
Test execution time: sum 42394 ms, max 986 ms, min 398 ms
----------------------------------------------------------------

2023-08-09 20:58:23 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-09 20:59:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 15 seconds
Variants: generated 200, build-succeeded 56, build-failed 57, syntax-invalid 67, redundant 20
Fitness: max 1(1), min 0.966(5), ave 0.988
Test execution time: sum 37803 ms, max 863 ms, min 430 ms
----------------------------------------------------------------

2023-08-09 20:59:22 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-09 21:00:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 18 seconds
Variants: generated 200, build-succeeded 60, build-failed 62, syntax-invalid 62, redundant 16
Fitness: max 1(2), min 0.966(1), ave 0.991
Test execution time: sum 42167 ms, max 2974 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 21:00:26 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-09 21:01:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 6 seconds
Variants: generated 200, build-succeeded 57, build-failed 52, syntax-invalid 63, redundant 28
Fitness: max 0.991(52), min 0.931(1), ave 0.989
Test execution time: sum 29494 ms, max 837 ms, min 406 ms
----------------------------------------------------------------

2023-08-09 21:01:13 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-09 21:02:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 58 seconds
Variants: generated 200, build-succeeded 62, build-failed 64, syntax-invalid 56, redundant 18
Fitness: max 0.991(58), min 0.966(2), ave 0.99
Test execution time: sum 34346 ms, max 878 ms, min 408 ms
----------------------------------------------------------------

2023-08-09 21:02:06 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-09 21:03:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 55 seconds
Variants: generated 200, build-succeeded 68, build-failed 59, syntax-invalid 58, redundant 15
Fitness: max 1(2), min 0.974(1), ave 0.991
Test execution time: sum 37605 ms, max 952 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 21:03:03 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-09 21:04:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 52 seconds
Variants: generated 200, build-succeeded 62, build-failed 59, syntax-invalid 61, redundant 18
Fitness: max 1(4), min 0.983(6), ave 0.991
Test execution time: sum 36482 ms, max 1007 ms, min 395 ms
----------------------------------------------------------------

2023-08-09 21:04:00 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-09 21:04:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 40 seconds
Variants: generated 200, build-succeeded 52, build-failed 62, syntax-invalid 68, redundant 18
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 30116 ms, max 947 ms, min 395 ms
----------------------------------------------------------------

2023-08-09 21:04:48 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-09 21:05:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 27 seconds
Variants: generated 200, build-succeeded 46, build-failed 73, syntax-invalid 62, redundant 19
Fitness: max 1(1), min 0.983(5), ave 0.991
Test execution time: sum 27712 ms, max 944 ms, min 409 ms
----------------------------------------------------------------

2023-08-09 21:05:35 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-09 21:06:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 20 seconds
Variants: generated 200, build-succeeded 53, build-failed 50, syntax-invalid 76, redundant 21
Fitness: max 1(1), min 0.931(1), ave 0.99
Test execution time: sum 34279 ms, max 923 ms, min 404 ms
----------------------------------------------------------------

2023-08-09 21:06:27 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-09 21:07:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 27 seconds
Variants: generated 200, build-succeeded 67, build-failed 62, syntax-invalid 55, redundant 16
Fitness: max 1(2), min 0.983(6), ave 0.991
Test execution time: sum 44600 ms, max 930 ms, min 430 ms
----------------------------------------------------------------

2023-08-09 21:07:35 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-09 21:08:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 28 seconds
Variants: generated 200, build-succeeded 53, build-failed 60, syntax-invalid 74, redundant 13
Fitness: max 1(2), min 0.983(7), ave 0.991
Test execution time: sum 35892 ms, max 898 ms, min 416 ms
----------------------------------------------------------------

2023-08-09 21:08:36 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-09 21:09:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 16 seconds
Variants: generated 200, build-succeeded 58, build-failed 58, syntax-invalid 63, redundant 21
Fitness: max 1(2), min 0.974(1), ave 0.991
Test execution time: sum 31366 ms, max 873 ms, min 395 ms
----------------------------------------------------------------

2023-08-09 21:09:24 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-09 21:10:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 6 seconds
Variants: generated 200, build-succeeded 54, build-failed 60, syntax-invalid 62, redundant 24
Fitness: max 1(2), min 0.974(1), ave 0.991
Test execution time: sum 30221 ms, max 934 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 21:10:13 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-09 21:10:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 45 seconds
Variants: generated 200, build-succeeded 41, build-failed 64, syntax-invalid 74, redundant 21
Fitness: max 1(1), min 0.983(5), ave 0.991
Test execution time: sum 22431 ms, max 952 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 21:10:52 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-09 21:11:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 33 seconds
Variants: generated 200, build-succeeded 53, build-failed 51, syntax-invalid 71, redundant 25
Fitness: max 1(4), min 0.966(1), ave 0.991
Test execution time: sum 29706 ms, max 868 ms, min 402 ms
----------------------------------------------------------------

2023-08-09 21:11:40 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-09 21:12:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 25 seconds
Variants: generated 200, build-succeeded 58, build-failed 53, syntax-invalid 74, redundant 15
Fitness: max 1(2), min 0.957(1), ave 0.99
Test execution time: sum 33517 ms, max 900 ms, min 390 ms
----------------------------------------------------------------

2023-08-09 21:12:33 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-09 21:13:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 19 seconds
Variants: generated 200, build-succeeded 56, build-failed 59, syntax-invalid 66, redundant 19
Fitness: max 1(3), min 0.966(1), ave 0.99
Test execution time: sum 33345 ms, max 871 ms, min 396 ms
----------------------------------------------------------------

2023-08-09 21:13:27 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-09 21:14:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 13 seconds
Variants: generated 200, build-succeeded 53, build-failed 47, syntax-invalid 74, redundant 26
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 33318 ms, max 965 ms, min 384 ms
----------------------------------------------------------------

2023-08-09 21:14:21 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-09 21:15:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 7 seconds
Variants: generated 200, build-succeeded 50, build-failed 49, syntax-invalid 80, redundant 21
Fitness: max 0.991(47), min 0.966(1), ave 0.991
Test execution time: sum 32779 ms, max 943 ms, min 447 ms
----------------------------------------------------------------

2023-08-09 21:15:15 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-09 21:16:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 52 seconds
Variants: generated 200, build-succeeded 34, build-failed 55, syntax-invalid 91, redundant 20
Fitness: max 1(4), min 0.991(30), ave 0.992
Test execution time: sum 23023 ms, max 910 ms, min 424 ms
----------------------------------------------------------------

2023-08-09 21:16:00 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-09 21:17:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 seconds
Variants: generated 200, build-succeeded 51, build-failed 56, syntax-invalid 73, redundant 20
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 36233 ms, max 1040 ms, min 412 ms
----------------------------------------------------------------

2023-08-09 21:17:01 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-09 21:17:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 35 seconds
Variants: generated 200, build-succeeded 43, build-failed 63, syntax-invalid 77, redundant 17
Fitness: max 0.991(41), min 0.983(2), ave 0.991
Test execution time: sum 23353 ms, max 894 ms, min 391 ms
----------------------------------------------------------------

2023-08-09 21:17:42 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-09 21:18:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 15 seconds
Variants: generated 200, build-succeeded 40, build-failed 53, syntax-invalid 82, redundant 25
Fitness: max 1(3), min 0.957(1), ave 0.991
Test execution time: sum 22091 ms, max 879 ms, min 400 ms
----------------------------------------------------------------

2023-08-09 21:18:23 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-09 21:19:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 57 seconds
Variants: generated 200, build-succeeded 39, build-failed 65, syntax-invalid 84, redundant 12
Fitness: max 0.991(34), min 0.983(5), ave 0.99
Test execution time: sum 22191 ms, max 991 ms, min 398 ms
----------------------------------------------------------------

2023-08-09 21:19:04 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-09 21:19:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 41 seconds
Variants: generated 200, build-succeeded 45, build-failed 53, syntax-invalid 77, redundant 25
Fitness: max 1(2), min 0.931(1), ave 0.99
Test execution time: sum 24879 ms, max 832 ms, min 386 ms
----------------------------------------------------------------

2023-08-09 21:19:48 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-09 21:20:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 28 seconds
Variants: generated 200, build-succeeded 48, build-failed 60, syntax-invalid 79, redundant 13
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 28371 ms, max 1019 ms, min 401 ms
----------------------------------------------------------------

2023-08-09 21:20:36 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-09 21:21:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 11 seconds
Variants: generated 200, build-succeeded 40, build-failed 63, syntax-invalid 81, redundant 16
Fitness: max 1(1), min 0.983(4), ave 0.991
Test execution time: sum 23370 ms, max 862 ms, min 398 ms
----------------------------------------------------------------

2023-08-09 21:21:19 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-09 21:21:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 47 seconds
Variants: generated 200, build-succeeded 28, build-failed 64, syntax-invalid 90, redundant 18
Fitness: max 1(1), min 0.983(3), ave 0.991
Test execution time: sum 18320 ms, max 1038 ms, min 422 ms
----------------------------------------------------------------

2023-08-09 21:21:55 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-09 21:22:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 32 seconds
Variants: generated 200, build-succeeded 38, build-failed 70, syntax-invalid 78, redundant 14
Fitness: max 0.991(33), min 0.957(1), ave 0.99
Test execution time: sum 24907 ms, max 919 ms, min 420 ms
----------------------------------------------------------------

2023-08-09 21:22:40 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-09 21:23:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 13 seconds
Variants: generated 200, build-succeeded 32, build-failed 67, syntax-invalid 77, redundant 24
Fitness: max 0.991(27), min 0.957(1), ave 0.989
Test execution time: sum 20588 ms, max 947 ms, min 424 ms
----------------------------------------------------------------

2023-08-09 21:23:21 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-09 21:24:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 0 seconds
Variants: generated 200, build-succeeded 40, build-failed 59, syntax-invalid 76, redundant 25
Fitness: max 1(2), min 0.974(1), ave 0.991
Test execution time: sum 26284 ms, max 922 ms, min 430 ms
----------------------------------------------------------------

2023-08-09 21:24:08 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-09 21:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 51 seconds
Variants: generated 200, build-succeeded 37, build-failed 59, syntax-invalid 82, redundant 22
Fitness: max 1(2), min 0.966(1), ave 0.991
Test execution time: sum 26355 ms, max 1021 ms, min 425 ms
----------------------------------------------------------------

2023-08-09 21:24:59 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-09 21:25:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 35 seconds
Variants: generated 200, build-succeeded 30, build-failed 66, syntax-invalid 80, redundant 24
Fitness: max 0.991(27), min 0.983(3), ave 0.991
Test execution time: sum 20460 ms, max 876 ms, min 545 ms
----------------------------------------------------------------

2023-08-09 21:25:43 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-09 21:26:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 55 seconds
Variants: generated 59, build-succeeded 15, build-failed 28, syntax-invalid 3, redundant 13
Fitness: max 1(1), min 0.931(1), ave 0.987
Test execution time: sum 10166 ms, max 809 ms, min 544 ms
----------------------------------------------------------------

2023-08-09 21:26:03 [main] [INFO]  KGenProgMain - GA stopped
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v455)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v455)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v455)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v455)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v455)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v455)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1833)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1833)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1833)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1833)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1833)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2880,7 +2880,6 @@
             zb += xb * TANGENT_TABLE_B[idx];
             ya = epsA / za;
 
-            temp = ya * HEX_40000000;
             final double yaa = (ya + temp) - temp;
             final double yab = ya - yaa;
 
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1864)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1864)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1864)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1864)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1864)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1864)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2080)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2080)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2080)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2080)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2080)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2080)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2217)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2217)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2217)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2217)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2217)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2217)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2254)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2254)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2254)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2254)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2254)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2254)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2254)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2664)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2664)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2664)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2664)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2664)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2664)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2664)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2682)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2682)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2682)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2682)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2682)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:12 [main] [INFO]  PatchLogExporter - patch (v2682)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3217)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3217)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3217)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3217)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3217)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3217)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2880,7 +2880,6 @@
             zb += xb * TANGENT_TABLE_B[idx];
             ya = epsA / za;
 
-            temp = ya * HEX_40000000;
             final double yaa = (ya + temp) - temp;
             final double yab = ya - yaa;
 
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3217)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3220)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3220)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3220)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3220)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3220)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3220)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3220)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3433)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3433)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3433)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3433)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3433)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3433)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3434)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3434)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3434)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3434)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3434)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3434)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2880,7 +2880,6 @@
             zb += xb * TANGENT_TABLE_B[idx];
             ya = epsA / za;
 
-            temp = ya * HEX_40000000;
             final double yaa = (ya + temp) - temp;
             final double yab = ya - yaa;
 
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3434)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3455)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3455)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3455)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3455)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3455)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3455)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3455)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3478)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3478)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3478)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3478)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3478)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3478)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3478)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3608)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3608)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3608)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3608)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3608)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double real2 = 2.0 * real;
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3608)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3608)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3634)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3634)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3634)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3634)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3634)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3634)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2880,7 +2880,6 @@
             zb += xb * TANGENT_TABLE_B[idx];
             ya = epsA / za;
 
-            temp = ya * HEX_40000000;
             final double yaa = (ya + temp) - temp;
             final double yab = ya - yaa;
 
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3634)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3660)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3660)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3660)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3660)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3660)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3660)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3711)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3711)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3711)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3711)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3711)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3711)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3890)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3890)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3890)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3890)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3890)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3890)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3890)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3900)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3900)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3900)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3900)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3900)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3900)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v3900)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4219)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4219)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4219)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4219)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4219)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer ret = null;
+			double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4219)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4279)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4279)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4279)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4279)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4279)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4279)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4279)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4428)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4428)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4428)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4428)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4428)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4428)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4801)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4801)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4801)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4801)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4801)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4801)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4801)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,10 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5261)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5261)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5261)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5261)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5261)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5261)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5261)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5627)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5627)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5627)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5627)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5627)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5627)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5627)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5650)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5650)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5650)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5650)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5650)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5650)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5650)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5664)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5664)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5664)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5664)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5664)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5664)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5664)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5808)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5808)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5808)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5808)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5808)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5808)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5808)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:13 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6027)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6027)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6027)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6027)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6027)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6027)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6027)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,7 +287,7 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
         if (divisor == 0d) {
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6088)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6254)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6254)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6254)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6254)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6254)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6254)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6254)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3238,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6454)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6454)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6454)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6454)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6454)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6454)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6454)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6855)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6855)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6855)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6855)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6855)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6855)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6855)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6861)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6861)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6861)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6861)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6861)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6861)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3238,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v6861)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7048)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7048)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7048)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7048)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7048)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7048)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7048)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7827)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7827)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7827)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7827)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7827)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7827)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v7827)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8265)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8265)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8265)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8265)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8265)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8265)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8265)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8856)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8856)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8856)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8856)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8856)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8856)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v8856)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9648)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9648)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9648)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9648)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9648)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +912,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9648)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9648)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9658)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9658)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9658)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9658)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9658)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,8 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9658)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v9658)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10073)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10073)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10073)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10073)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10073)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = imaginary / real;
+			double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10073)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10073)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10202)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10202)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10202)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10202)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10202)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10202)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10202)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10225)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10225)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10225)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10225)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = imaginary / real;
+			double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10225)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10887)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10887)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10887)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10887)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10887)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10887)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v10887)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1176,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11070)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11070)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11070)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11070)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11070)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11070)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11070)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11086)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11086)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11086)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11086)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11086)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11086)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11086)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:14 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11669)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11669)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11669)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11669)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11669)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11669)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11669)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11839)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11839)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11839)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11839)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11839)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11839)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11839)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11868)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11868)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11868)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11868)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11868)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double expReal = FastMath.exp(real);
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11868)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v11868)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12019)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12019)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12019)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12019)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12019)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12019)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12019)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12211)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12211)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12211)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12211)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12211)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12211)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12211)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12220)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12220)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12220)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12220)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12220)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +290,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12220)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12220)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12409)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12409)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12409)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12409)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12409)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12409)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12409)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12452)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12452)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12452)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12452)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12452)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12452)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12452)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12698)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12698)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12698)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12698)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12698)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12698)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12698)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12825)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12825)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12825)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12825)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12825)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12825)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12825)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12845)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12845)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12845)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12845)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12845)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +290,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12845)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12845)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12851)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12851)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12851)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12851)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12851)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +290,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12851)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12851)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12858)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12858)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12858)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12858)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12858)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12858)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v12858)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13045)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13045)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13045)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13045)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13045)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13045)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13045)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13098)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13098)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13098)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13098)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13098)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,16 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double expReal = FastMath.exp(real);
+		double real2 = 2.0 * real;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13098)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13098)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13217)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13217)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13217)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13217)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13217)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13217)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3238,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13217)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13238)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13238)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13238)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13238)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13238)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13238)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13238)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13427)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13427)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13427)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13427)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13427)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13817)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13817)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13817)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13817)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13817)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +909,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13817)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13817)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13819)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13819)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13819)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13819)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13819)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13819)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3238,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13819)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13847)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13847)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13847)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13847)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13847)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13847)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3238,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:15 [main] [INFO]  PatchLogExporter - patch (v13847)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v13895)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v13895)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v13895)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v13895)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v13895)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v13895)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v13895)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14053)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14053)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14053)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14053)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14053)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14053)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14053)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14424)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14424)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14424)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14424)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14424)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14424)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14424)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14462)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14462)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14462)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14462)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14462)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1176,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14462)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14462)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,15 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -983,7 +979,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double expReal = FastMath.exp(real);
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3238,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14977)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14977)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14977)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14977)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14977)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double expReal = FastMath.exp(real);
+		double real2 = 2.0 * real;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14977)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v14977)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15089)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15089)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15089)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15089)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15089)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15089)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15089)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15272)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15272)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15272)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15272)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15272)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +913,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15272)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15272)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15477)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15477)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15477)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15477)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15477)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15477)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
@@ -3074,7 +3073,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3156,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3238,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v15477)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16022)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16022)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16022)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16022)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16022)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16022)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16022)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16076)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16076)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16076)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16076)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16076)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16076)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16076)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +912,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +290,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double expReal = FastMath.exp(real);
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +911,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
@@ -3157,7 +3157,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, false);
     }
@@ -3239,7 +3239,7 @@
 
       temp = ra + rb;
       rb = -(temp - ra - rb);
-      ra = temp;
+      final double ys[] = new double[2];
 
       return atan(ra, rb, x<0);
     }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16659)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16659)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16659)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16659)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16659)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);
     }
 }
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16659)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3074,7 +3074,7 @@
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
-        ra = temp;
+        final double ys[] = new double[2];
 
         if (ra == 0) { // Fix up the sign so atan works correctly
             ra = copySign(0.0, y);
2023-08-09 21:26:16 [main] [INFO]  PatchLogExporter - patch (v16659)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-09 21:26:16 [main] [INFO]  KGenProgMain - Summary
Reached generation = 85
Generated variants = 16659
Syntax valid variants = 11901
Build succeeded variants = 4596
Time elapsed = 1 hours 10 minutes 8 seconds
Exit status = SUCCESS
