2023-08-06 16:30:27 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 16:30:27 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 16:30:27 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 16:30:27 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 6 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-06 16:30:45 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-06 16:30:45 [main] [INFO]  KGenProgMain - GA started
2023-08-06 16:30:46 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 16:30:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, build-succeeded 26, build-failed 59, syntax-invalid 6, redundant 9
Fitness: max 1(2), min 0(24), ave 0.077
Test execution time: sum 2985 ms, max 314 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 16:30:56 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 16:31:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 100, build-succeeded 25, build-failed 58, syntax-invalid 5, redundant 12
Fitness: max 1(1), min 0(24), ave 0.04
Test execution time: sum 1771 ms, max 126 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 16:31:03 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 16:31:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 200, build-succeeded 41, build-failed 62, syntax-invalid 5, redundant 92
Fitness: max 1(2), min 0(39), ave 0.049
Test execution time: sum 2482 ms, max 143 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 16:31:11 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 16:31:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 seconds
Variants: generated 200, build-succeeded 69, build-failed 57, syntax-invalid 10, redundant 64
Fitness: max 1(2), min 0(67), ave 0.029
Test execution time: sum 4530 ms, max 213 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 16:31:24 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 16:31:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 seconds
Variants: generated 200, build-succeeded 88, build-failed 54, syntax-invalid 6, redundant 52
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 5447 ms, max 135 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 16:31:38 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 16:31:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 4 seconds
Variants: generated 200, build-succeeded 83, build-failed 64, syntax-invalid 11, redundant 42
Fitness: max 1(2), min 0(81), ave 0.024
Test execution time: sum 4990 ms, max 173 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:31:50 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 16:32:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 18 seconds
Variants: generated 200, build-succeeded 96, build-failed 62, syntax-invalid 9, redundant 33
Fitness: max 1(1), min 0(95), ave 0.01
Test execution time: sum 5716 ms, max 200 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:32:04 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 16:32:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 32 seconds
Variants: generated 200, build-succeeded 106, build-failed 57, syntax-invalid 16, redundant 21
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6089 ms, max 213 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:32:18 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 16:32:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 46 seconds
Variants: generated 200, build-succeeded 102, build-failed 58, syntax-invalid 19, redundant 21
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6055 ms, max 217 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:32:32 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 16:32:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 59 seconds
Variants: generated 200, build-succeeded 96, build-failed 56, syntax-invalid 18, redundant 30
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5435 ms, max 185 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:32:45 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 16:36:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 14 seconds
Variants: generated 200, build-succeeded 108, build-failed 54, syntax-invalid 19, redundant 19
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 186512 ms, max 180066 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 16:36:00 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 16:39:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 28 seconds
Variants: generated 200, build-succeeded 96, build-failed 62, syntax-invalid 25, redundant 17
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 185591 ms, max 180075 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 16:39:14 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 16:39:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 42 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 25, redundant 19
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5416 ms, max 129 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:39:28 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 16:42:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 56 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 22, redundant 8
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 186121 ms, max 180058 ms, min 47 ms
----------------------------------------------------------------

2023-08-06 16:42:42 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 16:45:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 9 seconds
Variants: generated 200, build-succeeded 95, build-failed 59, syntax-invalid 30, redundant 16
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 185331 ms, max 180060 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:45:55 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 16:52:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 22 seconds
Variants: generated 200, build-succeeded 97, build-failed 66, syntax-invalid 22, redundant 15
Fitness: max 1(1), min 0(96), ave 0.01
Test execution time: sum 365486 ms, max 180064 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 16:52:08 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 16:52:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 37 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 16, redundant 4
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6964 ms, max 165 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 16:52:23 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 16:58:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 52 seconds
Variants: generated 200, build-succeeded 106, build-failed 60, syntax-invalid 26, redundant 8
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 365869 ms, max 180069 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 16:58:38 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 17:01:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 6 seconds
Variants: generated 200, build-succeeded 99, build-failed 72, syntax-invalid 17, redundant 12
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 185732 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:01:51 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 17:02:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 20 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 18, redundant 10
Fitness: max 1(2), min 0(111), ave 0.018
Test execution time: sum 6517 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:02:06 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 17:02:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 35 seconds
Variants: generated 200, build-succeeded 118, build-failed 59, syntax-invalid 14, redundant 9
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6574 ms, max 167 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:02:21 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 17:02:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 49 seconds
Variants: generated 200, build-succeeded 107, build-failed 66, syntax-invalid 16, redundant 11
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 5931 ms, max 135 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:02:35 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-06 17:02:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 5 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 15, redundant 13
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6058 ms, max 213 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:02:51 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-06 17:03:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 18 seconds
Variants: generated 200, build-succeeded 102, build-failed 70, syntax-invalid 18, redundant 10
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5697 ms, max 139 ms, min 47 ms
----------------------------------------------------------------

2023-08-06 17:03:04 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-06 17:03:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 32 seconds
Variants: generated 200, build-succeeded 103, build-failed 66, syntax-invalid 21, redundant 10
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 5657 ms, max 132 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:03:18 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-06 17:03:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 47 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 17, redundant 13
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6118 ms, max 195 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:03:33 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-06 17:03:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 2 seconds
Variants: generated 200, build-succeeded 105, build-failed 67, syntax-invalid 18, redundant 10
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5904 ms, max 128 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:03:48 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-06 17:04:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 17 seconds
Variants: generated 200, build-succeeded 107, build-failed 68, syntax-invalid 18, redundant 7
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6071 ms, max 237 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:04:03 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-06 17:04:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 33 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 23, redundant 9
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 6098 ms, max 203 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:04:19 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-06 17:04:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 49 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 21, redundant 7
Fitness: max 1(2), min 0(111), ave 0.018
Test execution time: sum 6409 ms, max 129 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:04:35 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-06 17:04:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 5 seconds
Variants: generated 200, build-succeeded 102, build-failed 64, syntax-invalid 25, redundant 9
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5809 ms, max 209 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:04:51 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-06 17:05:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 21 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 18, redundant 18
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6235 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:05:07 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-06 17:05:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 37 seconds
Variants: generated 200, build-succeeded 104, build-failed 68, syntax-invalid 21, redundant 7
Fitness: max 1(1), min 0(103), ave 0.01
Test execution time: sum 5868 ms, max 136 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:05:23 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-06 17:05:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 55 seconds
Variants: generated 200, build-succeeded 111, build-failed 74, syntax-invalid 12, redundant 3
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6419 ms, max 190 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:05:41 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-06 17:05:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 12 seconds
Variants: generated 200, build-succeeded 109, build-failed 49, syntax-invalid 30, redundant 12
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 6407 ms, max 140 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:05:58 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-06 17:06:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 30 seconds
Variants: generated 200, build-succeeded 116, build-failed 64, syntax-invalid 13, redundant 7
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 6561 ms, max 113 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:06:16 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-06 17:06:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 48 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 17, redundant 10
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6237 ms, max 202 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:06:34 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-06 17:06:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 6 seconds
Variants: generated 200, build-succeeded 109, build-failed 55, syntax-invalid 27, redundant 9
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6157 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:06:52 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-06 17:07:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 23 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 21, redundant 12
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 6314 ms, max 144 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:07:09 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-06 17:07:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 44 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 21, redundant 9
Fitness: max 1(2), min 0(112), ave 0.018
Test execution time: sum 7205 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:07:30 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-06 17:07:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 3 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 17, redundant 10
Fitness: max 1(2), min 0(111), ave 0.018
Test execution time: sum 6635 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:07:49 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-06 17:08:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 21 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 18, redundant 11
Fitness: max 1(5), min 0(106), ave 0.045
Test execution time: sum 6245 ms, max 137 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:08:07 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-06 17:08:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 42 seconds
Variants: generated 200, build-succeeded 112, build-failed 66, syntax-invalid 15, redundant 7
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6775 ms, max 187 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:08:28 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-06 17:08:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 2 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 24, redundant 6
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 6817 ms, max 192 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:08:48 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-06 17:09:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 20 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 15, redundant 9
Fitness: max 1(4), min 0(107), ave 0.036
Test execution time: sum 6546 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:09:06 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-06 17:09:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 48 seconds
Variants: generated 200, build-succeeded 120, build-failed 57, syntax-invalid 16, redundant 7
Fitness: max 1(2), min 0(118), ave 0.017
Test execution time: sum 8729 ms, max 201 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:09:34 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-06 17:09:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 9 seconds
Variants: generated 200, build-succeeded 118, build-failed 63, syntax-invalid 12, redundant 7
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7045 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:09:55 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-06 17:10:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 30 seconds
Variants: generated 200, build-succeeded 120, build-failed 62, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0(119), ave 0.008
Test execution time: sum 7569 ms, max 191 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:10:16 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-06 17:10:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 50 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 12, redundant 13
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6586 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:10:36 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-06 17:10:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 9 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 21, redundant 3
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6207 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:10:55 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-06 17:11:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 27 seconds
Variants: generated 200, build-succeeded 108, build-failed 62, syntax-invalid 22, redundant 8
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 6131 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:11:13 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-06 17:11:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 46 seconds
Variants: generated 200, build-succeeded 100, build-failed 72, syntax-invalid 22, redundant 6
Fitness: max 1(1), min 0(99), ave 0.01
Test execution time: sum 5757 ms, max 181 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:11:32 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-06 17:11:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 5 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 19, redundant 8
Fitness: max 1(3), min 0(105), ave 0.028
Test execution time: sum 6209 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:11:51 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-06 17:12:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 25 seconds
Variants: generated 200, build-succeeded 93, build-failed 73, syntax-invalid 28, redundant 6
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5355 ms, max 160 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:12:11 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-06 17:12:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 44 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 22, redundant 9
Fitness: max 1(3), min 0(106), ave 0.028
Test execution time: sum 6165 ms, max 179 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 17:12:30 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-06 17:12:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 4 seconds
Variants: generated 200, build-succeeded 116, build-failed 60, syntax-invalid 19, redundant 5
Fitness: max 1(1), min 0(115), ave 0.009
Test execution time: sum 6491 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:12:50 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-06 17:13:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 25 seconds
Variants: generated 200, build-succeeded 119, build-failed 61, syntax-invalid 10, redundant 10
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6781 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:13:11 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-06 17:13:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 45 seconds
Variants: generated 200, build-succeeded 100, build-failed 67, syntax-invalid 22, redundant 11
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 5882 ms, max 139 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:13:31 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-06 17:13:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 9 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 26, redundant 7
Fitness: max 1(2), min 0(105), ave 0.019
Test execution time: sum 6731 ms, max 174 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:13:55 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-06 17:14:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 30 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 29, redundant 8
Fitness: max 1(5), min 0(98), ave 0.049
Test execution time: sum 6173 ms, max 189 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:14:16 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-06 17:14:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 53 seconds
Variants: generated 200, build-succeeded 92, build-failed 65, syntax-invalid 36, redundant 7
Fitness: max 1(2), min 0(90), ave 0.022
Test execution time: sum 5709 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 17:14:39 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-06 17:15:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 15 seconds
Variants: generated 200, build-succeeded 95, build-failed 62, syntax-invalid 36, redundant 7
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5584 ms, max 196 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:15:01 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-06 17:15:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 37 seconds
Variants: generated 200, build-succeeded 93, build-failed 62, syntax-invalid 35, redundant 10
Fitness: max 1(1), min 0(92), ave 0.011
Test execution time: sum 5555 ms, max 204 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:15:23 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-06 17:15:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 0 seconds
Variants: generated 200, build-succeeded 96, build-failed 63, syntax-invalid 29, redundant 12
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5683 ms, max 136 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:15:46 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-06 17:19:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 23 seconds
Variants: generated 200, build-succeeded 89, build-failed 61, syntax-invalid 43, redundant 7
Fitness: max 1(1), min 0(88), ave 0.011
Test execution time: sum 185284 ms, max 180066 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:19:09 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-06 17:19:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 45 seconds
Variants: generated 200, build-succeeded 87, build-failed 63, syntax-invalid 38, redundant 12
Fitness: max 1(3), min 0(84), ave 0.034
Test execution time: sum 5263 ms, max 159 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:19:31 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-06 17:19:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 12 seconds
Variants: generated 200, build-succeeded 99, build-failed 60, syntax-invalid 37, redundant 4
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 7092 ms, max 145 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:19:58 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-06 17:20:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 35 seconds
Variants: generated 200, build-succeeded 99, build-failed 65, syntax-invalid 28, redundant 8
Fitness: max 1(2), min 0(97), ave 0.02
Test execution time: sum 5756 ms, max 125 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:20:21 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-06 17:20:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 58 seconds
Variants: generated 200, build-succeeded 102, build-failed 65, syntax-invalid 25, redundant 8
Fitness: max 1(1), min 0(101), ave 0.01
Test execution time: sum 6148 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:20:44 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-06 17:21:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 19 seconds
Variants: generated 200, build-succeeded 90, build-failed 62, syntax-invalid 39, redundant 9
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 5347 ms, max 163 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:21:05 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-06 17:21:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 40 seconds
Variants: generated 200, build-succeeded 76, build-failed 66, syntax-invalid 45, redundant 13
Fitness: max 0(76), min 0(76), ave 0
Test execution time: sum 4675 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:21:26 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-06 17:21:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 3 seconds
Variants: generated 200, build-succeeded 97, build-failed 60, syntax-invalid 35, redundant 8
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5698 ms, max 185 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:21:49 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-06 17:22:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 26 seconds
Variants: generated 200, build-succeeded 82, build-failed 67, syntax-invalid 40, redundant 11
Fitness: max 0(82), min 0(82), ave 0
Test execution time: sum 4849 ms, max 135 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:22:11 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-06 17:22:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 49 seconds
Variants: generated 200, build-succeeded 93, build-failed 44, syntax-invalid 46, redundant 17
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5582 ms, max 188 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:22:34 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-06 17:22:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 12 seconds
Variants: generated 200, build-succeeded 85, build-failed 58, syntax-invalid 44, redundant 13
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 4831 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:22:58 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-06 17:23:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 37 seconds
Variants: generated 200, build-succeeded 89, build-failed 68, syntax-invalid 36, redundant 7
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 5276 ms, max 144 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:23:22 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-06 17:23:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 0 seconds
Variants: generated 200, build-succeeded 87, build-failed 64, syntax-invalid 42, redundant 7
Fitness: max 0(87), min 0(87), ave 0
Test execution time: sum 4972 ms, max 183 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:23:46 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-06 17:24:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 22 seconds
Variants: generated 200, build-succeeded 88, build-failed 50, syntax-invalid 44, redundant 18
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 4888 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:24:08 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-06 17:24:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 47 seconds
Variants: generated 200, build-succeeded 108, build-failed 62, syntax-invalid 23, redundant 7
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 5875 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:24:32 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-06 17:24:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 11 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 22, redundant 13
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6026 ms, max 179 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:24:57 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-06 17:25:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 36 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 20, redundant 13
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6246 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:25:22 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-06 17:25:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 1 seconds
Variants: generated 200, build-succeeded 106, build-failed 64, syntax-invalid 20, redundant 10
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 5984 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:25:47 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-06 17:26:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 26 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 24, redundant 8
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6067 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:26:11 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-06 17:26:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 52 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 18, redundant 13
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6026 ms, max 127 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:26:37 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-06 17:27:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 17 seconds
Variants: generated 200, build-succeeded 108, build-failed 64, syntax-invalid 20, redundant 8
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6078 ms, max 146 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:27:03 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-06 17:27:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 42 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 21, redundant 9
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5874 ms, max 183 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:27:28 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-06 17:27:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 9 seconds
Variants: generated 200, build-succeeded 119, build-failed 64, syntax-invalid 8, redundant 9
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6603 ms, max 126 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:27:55 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-06 17:28:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 35 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 21, redundant 13
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6223 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:28:21 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-06 17:28:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 1 seconds
Variants: generated 200, build-succeeded 114, build-failed 49, syntax-invalid 20, redundant 17
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6344 ms, max 176 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:28:47 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-06 17:29:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 27 seconds
Variants: generated 200, build-succeeded 119, build-failed 50, syntax-invalid 15, redundant 16
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6585 ms, max 177 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:29:13 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-06 17:29:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 53 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 13, redundant 8
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 6564 ms, max 120 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:29:39 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-06 17:30:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 21 seconds
Variants: generated 200, build-succeeded 122, build-failed 63, syntax-invalid 11, redundant 4
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 6871 ms, max 111 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:30:07 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-06 17:30:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 48 seconds
Variants: generated 200, build-succeeded 114, build-failed 63, syntax-invalid 11, redundant 12
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6523 ms, max 182 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:30:34 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-06 17:31:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 13, redundant 12
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 6636 ms, max 171 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:31:02 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-06 17:31:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 21, redundant 7
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6268 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:31:29 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-06 17:31:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 10 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 20, redundant 8
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6427 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:31:57 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-06 17:32:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 38 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 15, redundant 10
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6453 ms, max 198 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:32:24 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-06 17:32:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 4 seconds
Variants: generated 200, build-succeeded 89, build-failed 69, syntax-invalid 31, redundant 11
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 5171 ms, max 126 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:32:50 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-06 17:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 32 seconds
Variants: generated 200, build-succeeded 112, build-failed 65, syntax-invalid 17, redundant 6
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6729 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:33:18 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-06 17:36:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 0 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 23, redundant 7
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 186280 ms, max 180062 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:36:46 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-06 17:37:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 28 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 23, redundant 12
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6204 ms, max 184 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:37:14 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-06 17:37:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 56 seconds
Variants: generated 200, build-succeeded 118, build-failed 59, syntax-invalid 15, redundant 8
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6611 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:37:42 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-06 17:38:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 24 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 12, redundant 11
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6509 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:38:10 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-06 17:38:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 53 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 15, redundant 13
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6379 ms, max 187 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:38:39 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-06 17:39:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 22 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 15, redundant 10
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6458 ms, max 183 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 17:39:08 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-06 17:39:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 51 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 15, redundant 12
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6433 ms, max 155 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:39:37 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-06 17:40:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 20 seconds
Variants: generated 200, build-succeeded 130, build-failed 45, syntax-invalid 13, redundant 12
Fitness: max 0(130), min 0(130), ave 0
Test execution time: sum 7348 ms, max 202 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:40:06 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-06 17:40:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 50 seconds
Variants: generated 200, build-succeeded 125, build-failed 49, syntax-invalid 11, redundant 15
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 6997 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:40:37 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-06 17:41:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 19 seconds
Variants: generated 200, build-succeeded 108, build-failed 63, syntax-invalid 19, redundant 10
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6140 ms, max 144 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:41:05 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-06 17:41:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 48 seconds
Variants: generated 200, build-succeeded 105, build-failed 64, syntax-invalid 25, redundant 6
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6134 ms, max 122 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:41:34 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-06 17:42:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 16 seconds
Variants: generated 200, build-succeeded 98, build-failed 64, syntax-invalid 28, redundant 10
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5788 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:42:02 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-06 17:42:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 46 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 19, redundant 7
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6633 ms, max 135 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:42:32 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-06 17:43:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 14 seconds
Variants: generated 200, build-succeeded 106, build-failed 56, syntax-invalid 22, redundant 16
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6135 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:43:00 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-06 17:43:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 41 seconds
Variants: generated 200, build-succeeded 95, build-failed 62, syntax-invalid 33, redundant 10
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5589 ms, max 130 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:43:27 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-06 17:43:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 11 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 22, redundant 10
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6620 ms, max 182 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:43:57 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-06 17:44:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 38 seconds
Variants: generated 200, build-succeeded 95, build-failed 63, syntax-invalid 30, redundant 12
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5225 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:44:25 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-06 17:44:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 10 seconds
Variants: generated 200, build-succeeded 119, build-failed 61, syntax-invalid 9, redundant 11
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6962 ms, max 162 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:44:56 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-06 17:45:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 41 seconds
Variants: generated 200, build-succeeded 121, build-failed 56, syntax-invalid 13, redundant 10
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 6876 ms, max 139 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:45:27 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-06 17:45:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 11 seconds
Variants: generated 200, build-succeeded 111, build-failed 66, syntax-invalid 17, redundant 6
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6345 ms, max 185 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:45:58 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-06 17:46:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 43 seconds
Variants: generated 200, build-succeeded 119, build-failed 63, syntax-invalid 8, redundant 10
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6764 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:46:29 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-06 17:46:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 13 seconds
Variants: generated 200, build-succeeded 113, build-failed 64, syntax-invalid 16, redundant 7
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6448 ms, max 184 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:46:59 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-06 17:47:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 45 seconds
Variants: generated 200, build-succeeded 127, build-failed 58, syntax-invalid 9, redundant 6
Fitness: max 0(127), min 0(127), ave 0
Test execution time: sum 7134 ms, max 181 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:47:31 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-06 17:48:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 15 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 21, redundant 12
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6144 ms, max 164 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:48:02 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-06 17:48:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 46 seconds
Variants: generated 200, build-succeeded 113, build-failed 69, syntax-invalid 14, redundant 4
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6438 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:48:32 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-06 17:49:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 17 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 10, redundant 16
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6665 ms, max 172 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 17:49:03 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-06 17:49:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 48 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 13, redundant 11
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6551 ms, max 183 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:49:34 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-06 17:50:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 58, syntax-invalid 25, redundant 6
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6293 ms, max 128 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:50:04 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-06 17:50:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 48 seconds
Variants: generated 200, build-succeeded 105, build-failed 61, syntax-invalid 23, redundant 11
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5864 ms, max 118 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:50:34 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-06 17:51:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 18 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 23, redundant 7
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6077 ms, max 185 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:51:04 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-06 17:51:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 49 seconds
Variants: generated 200, build-succeeded 106, build-failed 58, syntax-invalid 23, redundant 13
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6032 ms, max 117 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:51:35 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-06 17:52:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 21 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 15, redundant 13
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 6767 ms, max 185 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:52:07 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-06 17:52:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 53 seconds
Variants: generated 200, build-succeeded 115, build-failed 56, syntax-invalid 17, redundant 12
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6579 ms, max 170 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:52:40 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-06 17:53:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 26 seconds
Variants: generated 200, build-succeeded 111, build-failed 58, syntax-invalid 18, redundant 13
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6314 ms, max 178 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 17:53:12 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-06 17:56:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 59 seconds
Variants: generated 200, build-succeeded 115, build-failed 56, syntax-invalid 17, redundant 12
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 186738 ms, max 180072 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 17:56:45 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-06 17:57:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 33 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 17, redundant 14
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6876 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 17:57:19 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-06 18:00:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 6 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 21, redundant 12
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 185966 ms, max 180064 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:00:52 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-06 18:04:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 37 seconds
Variants: generated 200, build-succeeded 104, build-failed 56, syntax-invalid 24, redundant 16
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 185898 ms, max 180074 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:04:23 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-06 18:07:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 6 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 32, redundant 12
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 185570 ms, max 180056 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:07:52 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-06 18:08:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 37 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 19, redundant 10
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6017 ms, max 117 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:08:23 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-06 18:11:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 9 seconds
Variants: generated 200, build-succeeded 112, build-failed 57, syntax-invalid 15, redundant 16
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 186508 ms, max 180069 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:11:55 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-06 18:12:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 42 seconds
Variants: generated 200, build-succeeded 112, build-failed 67, syntax-invalid 14, redundant 7
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6425 ms, max 177 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:12:28 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-06 18:16:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 16 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 16, redundant 8
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 186723 ms, max 180066 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:16:02 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-06 18:16:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 50 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 23, redundant 21
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5917 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:16:36 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-06 18:17:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 24 seconds
Variants: generated 200, build-succeeded 110, build-failed 61, syntax-invalid 19, redundant 10
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6472 ms, max 128 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:17:10 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-06 18:17:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 55 seconds
Variants: generated 200, build-succeeded 97, build-failed 60, syntax-invalid 26, redundant 17
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5697 ms, max 122 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:17:41 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-06 18:21:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 28 seconds
Variants: generated 200, build-succeeded 100, build-failed 59, syntax-invalid 29, redundant 12
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 185802 ms, max 180066 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:21:14 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-06 18:21:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 58 seconds
Variants: generated 200, build-succeeded 98, build-failed 66, syntax-invalid 25, redundant 11
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5697 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:21:44 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-06 18:25:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 31 seconds
Variants: generated 200, build-succeeded 104, build-failed 53, syntax-invalid 33, redundant 10
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 185914 ms, max 180066 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:25:17 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-06 18:25:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 3 seconds
Variants: generated 200, build-succeeded 89, build-failed 66, syntax-invalid 35, redundant 10
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 5111 ms, max 197 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:25:49 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-06 18:35:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 36 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 30, redundant 14
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 546137 ms, max 180075 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 18:35:22 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-06 18:44:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 5 seconds
Variants: generated 200, build-succeeded 66, build-failed 66, syntax-invalid 56, redundant 12
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 543832 ms, max 180072 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 18:44:51 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-06 18:54:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 36 seconds
Variants: generated 200, build-succeeded 93, build-failed 64, syntax-invalid 33, redundant 10
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 545210 ms, max 180065 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:54:22 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-06 18:54:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 8 seconds
Variants: generated 200, build-succeeded 82, build-failed 68, syntax-invalid 39, redundant 11
Fitness: max 0(82), min 0(82), ave 0
Test execution time: sum 4718 ms, max 131 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:54:54 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-06 18:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 41 seconds
Variants: generated 200, build-succeeded 94, build-failed 54, syntax-invalid 39, redundant 13
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5503 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 18:55:27 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-06 18:56:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 16 seconds
Variants: generated 200, build-succeeded 86, build-failed 70, syntax-invalid 38, redundant 6
Fitness: max 0(86), min 0(86), ave 0
Test execution time: sum 5289 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:56:02 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-06 18:56:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 50 seconds
Variants: generated 200, build-succeeded 101, build-failed 44, syntax-invalid 41, redundant 14
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5843 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:56:36 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-06 18:57:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 24 seconds
Variants: generated 200, build-succeeded 97, build-failed 65, syntax-invalid 30, redundant 8
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5589 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:57:10 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-06 18:57:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 0 seconds
Variants: generated 200, build-succeeded 102, build-failed 61, syntax-invalid 27, redundant 10
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5838 ms, max 121 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:57:46 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-06 18:58:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 35 seconds
Variants: generated 200, build-succeeded 93, build-failed 64, syntax-invalid 33, redundant 10
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5356 ms, max 114 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 18:58:21 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-06 18:58:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 10 seconds
Variants: generated 200, build-succeeded 94, build-failed 60, syntax-invalid 39, redundant 7
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5426 ms, max 131 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:58:56 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-06 18:59:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 46 seconds
Variants: generated 200, build-succeeded 104, build-failed 54, syntax-invalid 33, redundant 9
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6117 ms, max 174 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 18:59:32 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-06 19:00:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 18 seconds
Variants: generated 200, build-succeeded 84, build-failed 58, syntax-invalid 41, redundant 17
Fitness: max 0(84), min 0(84), ave 0
Test execution time: sum 4906 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:00:04 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-06 19:00:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 54 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 32, redundant 12
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5669 ms, max 121 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 19:00:40 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-06 19:01:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 29 seconds
Variants: generated 200, build-succeeded 92, build-failed 64, syntax-invalid 36, redundant 8
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5343 ms, max 113 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:01:15 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-06 19:01:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 6 seconds
Variants: generated 200, build-succeeded 94, build-failed 71, syntax-invalid 22, redundant 13
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5598 ms, max 184 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:01:52 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-06 19:02:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 43 seconds
Variants: generated 200, build-succeeded 107, build-failed 56, syntax-invalid 25, redundant 12
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6331 ms, max 140 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:02:29 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-06 19:03:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 21 seconds
Variants: generated 200, build-succeeded 100, build-failed 68, syntax-invalid 23, redundant 9
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6173 ms, max 230 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:03:07 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-06 19:03:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 57 seconds
Variants: generated 200, build-succeeded 84, build-failed 74, syntax-invalid 35, redundant 7
Fitness: max 0(84), min 0(84), ave 0
Test execution time: sum 5272 ms, max 112 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:03:43 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-06 19:04:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 36 seconds
Variants: generated 200, build-succeeded 105, build-failed 73, syntax-invalid 14, redundant 8
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6463 ms, max 205 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 19:04:22 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-06 19:05:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 14 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 16, redundant 11
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6553 ms, max 117 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:05:00 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-06 19:05:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 53 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 15, redundant 12
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6794 ms, max 130 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:05:39 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-06 19:06:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 31 seconds
Variants: generated 200, build-succeeded 104, build-failed 68, syntax-invalid 17, redundant 11
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6454 ms, max 137 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:06:18 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-06 19:06:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 9 seconds
Variants: generated 200, build-succeeded 86, build-failed 84, syntax-invalid 18, redundant 12
Fitness: max 0(86), min 0(86), ave 0
Test execution time: sum 5267 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:06:55 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-06 19:10:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 46 seconds
Variants: generated 200, build-succeeded 92, build-failed 84, syntax-invalid 21, redundant 3
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 185832 ms, max 180065 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:10:32 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-06 19:11:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 25 seconds
Variants: generated 200, build-succeeded 106, build-failed 63, syntax-invalid 17, redundant 14
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6612 ms, max 133 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:11:11 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-06 19:11:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 5 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 10, redundant 16
Fitness: max 1(1), min 0(114), ave 0.009
Test execution time: sum 7338 ms, max 131 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:11:51 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-06 19:12:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 44 seconds
Variants: generated 200, build-succeeded 99, build-failed 74, syntax-invalid 16, redundant 11
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 5924 ms, max 111 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:12:30 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-06 19:13:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 23 seconds
Variants: generated 200, build-succeeded 101, build-failed 74, syntax-invalid 13, redundant 12
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6149 ms, max 134 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:13:09 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-06 19:13:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 2 seconds
Variants: generated 200, build-succeeded 112, build-failed 64, syntax-invalid 13, redundant 11
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6771 ms, max 182 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:13:49 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-06 19:14:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 40 seconds
Variants: generated 200, build-succeeded 93, build-failed 75, syntax-invalid 20, redundant 12
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5670 ms, max 129 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:14:27 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-06 19:15:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 19 seconds
Variants: generated 200, build-succeeded 97, build-failed 71, syntax-invalid 17, redundant 15
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5792 ms, max 121 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:15:05 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-06 19:15:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 58 seconds
Variants: generated 200, build-succeeded 102, build-failed 68, syntax-invalid 22, redundant 8
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6398 ms, max 154 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:15:44 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-06 19:16:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 35 seconds
Variants: generated 200, build-succeeded 91, build-failed 70, syntax-invalid 33, redundant 6
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5617 ms, max 126 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:16:21 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-06 19:16:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 13 seconds
Variants: generated 200, build-succeeded 96, build-failed 68, syntax-invalid 27, redundant 9
Fitness: max 1(2), min 0(94), ave 0.021
Test execution time: sum 6043 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:16:59 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-06 19:17:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 52 seconds
Variants: generated 200, build-succeeded 100, build-failed 69, syntax-invalid 25, redundant 6
Fitness: max 1(1), min 0(99), ave 0.01
Test execution time: sum 6168 ms, max 218 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:17:39 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-06 19:18:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 31 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 30, redundant 8
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6328 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:18:17 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-06 19:18:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 9 seconds
Variants: generated 200, build-succeeded 92, build-failed 63, syntax-invalid 30, redundant 15
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5495 ms, max 140 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:18:55 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-06 19:19:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 47 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 27, redundant 12
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6275 ms, max 130 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:19:33 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-06 19:23:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 26 seconds
Variants: generated 200, build-succeeded 104, build-failed 61, syntax-invalid 27, redundant 8
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 186152 ms, max 180064 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:23:12 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-06 19:23:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 2 seconds
Variants: generated 200, build-succeeded 90, build-failed 56, syntax-invalid 33, redundant 21
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 5484 ms, max 139 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:23:48 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-06 19:24:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 39 seconds
Variants: generated 200, build-succeeded 101, build-failed 54, syntax-invalid 32, redundant 13
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6019 ms, max 130 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:24:26 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-06 19:25:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 minutes 16 seconds
Variants: generated 200, build-succeeded 85, build-failed 67, syntax-invalid 35, redundant 13
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 5081 ms, max 122 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:25:02 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-06 19:25:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 minutes 54 seconds
Variants: generated 200, build-succeeded 95, build-failed 61, syntax-invalid 35, redundant 9
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 6020 ms, max 172 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:25:40 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-06 19:26:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 32 seconds
Variants: generated 200, build-succeeded 98, build-failed 63, syntax-invalid 27, redundant 12
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5823 ms, max 126 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:26:18 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-06 19:26:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 11 seconds
Variants: generated 200, build-succeeded 101, build-failed 62, syntax-invalid 31, redundant 6
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6312 ms, max 115 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:26:57 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-06 19:27:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 49 seconds
Variants: generated 200, build-succeeded 94, build-failed 68, syntax-invalid 31, redundant 7
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5992 ms, max 200 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:27:35 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-06 19:28:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 28 seconds
Variants: generated 200, build-succeeded 99, build-failed 68, syntax-invalid 24, redundant 9
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6040 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:28:14 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-06 19:28:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 8 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 20, redundant 16
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6592 ms, max 122 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:28:54 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-06 19:29:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 46 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 26, redundant 9
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6094 ms, max 127 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:29:32 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-06 19:30:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 23 seconds
Variants: generated 200, build-succeeded 88, build-failed 52, syntax-invalid 38, redundant 22
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 5215 ms, max 127 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:30:09 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-06 19:30:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 seconds
Variants: generated 200, build-succeeded 95, build-failed 55, syntax-invalid 34, redundant 16
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5719 ms, max 125 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:30:48 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-06 19:31:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 seconds
Variants: generated 200, build-succeeded 90, build-failed 59, syntax-invalid 38, redundant 13
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 5513 ms, max 123 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:31:25 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-06 19:32:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 20 seconds
Variants: generated 200, build-succeeded 112, build-failed 43, syntax-invalid 27, redundant 18
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6664 ms, max 152 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:32:06 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-06 19:32:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 58 seconds
Variants: generated 200, build-succeeded 97, build-failed 55, syntax-invalid 38, redundant 10
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5825 ms, max 114 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:32:44 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-06 19:33:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 34 seconds
Variants: generated 200, build-succeeded 78, build-failed 70, syntax-invalid 44, redundant 8
Fitness: max 0(78), min 0(78), ave 0
Test execution time: sum 4593 ms, max 75 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:33:20 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-06 19:33:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 10 seconds
Variants: generated 200, build-succeeded 77, build-failed 72, syntax-invalid 44, redundant 7
Fitness: max 0(77), min 0(77), ave 0
Test execution time: sum 4691 ms, max 148 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:33:56 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-06 19:34:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 48 seconds
Variants: generated 200, build-succeeded 97, build-failed 62, syntax-invalid 29, redundant 12
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 6124 ms, max 185 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:34:35 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-06 19:35:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 28 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 31, redundant 13
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6098 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:35:14 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-06 19:35:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 8 seconds
Variants: generated 200, build-succeeded 98, build-failed 65, syntax-invalid 28, redundant 9
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6176 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:35:54 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-06 19:36:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 47 seconds
Variants: generated 200, build-succeeded 99, build-failed 62, syntax-invalid 27, redundant 12
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6383 ms, max 123 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:36:33 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-06 19:37:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 27 seconds
Variants: generated 200, build-succeeded 91, build-failed 58, syntax-invalid 32, redundant 19
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5708 ms, max 137 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:37:13 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-06 19:37:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 9 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 22, redundant 10
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6673 ms, max 208 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 19:37:55 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-06 19:38:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 51 seconds
Variants: generated 200, build-succeeded 106, build-failed 51, syntax-invalid 27, redundant 16
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6781 ms, max 215 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:38:37 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-06 19:42:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 35 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 17, redundant 13
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 187100 ms, max 180059 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:42:22 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-06 19:43:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 20 seconds
Variants: generated 200, build-succeeded 116, build-failed 60, syntax-invalid 13, redundant 11
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7107 ms, max 125 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:43:06 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-06 19:43:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 3 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 16, redundant 19
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6510 ms, max 140 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:43:49 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-06 19:44:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 46 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 23, redundant 12
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6670 ms, max 145 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:44:32 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-06 19:45:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 31 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 15, redundant 11
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7122 ms, max 126 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:45:17 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-06 19:46:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 15 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 20, redundant 10
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6625 ms, max 146 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:46:01 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-06 19:46:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 59 seconds
Variants: generated 200, build-succeeded 101, build-failed 72, syntax-invalid 18, redundant 9
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6155 ms, max 120 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:46:45 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-06 19:47:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 44 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 25, redundant 8
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6899 ms, max 172 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:47:30 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-06 19:48:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 29 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 18, redundant 11
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6444 ms, max 131 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:48:15 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-06 19:49:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 14 seconds
Variants: generated 200, build-succeeded 107, build-failed 56, syntax-invalid 18, redundant 19
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6479 ms, max 119 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:49:00 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-06 19:49:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 0 seconds
Variants: generated 200, build-succeeded 110, build-failed 64, syntax-invalid 19, redundant 7
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6994 ms, max 158 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:49:46 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-06 19:50:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 44 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 30, redundant 9
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6333 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:50:30 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-06 19:51:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 29 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 22, redundant 7
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6946 ms, max 225 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 19:51:16 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-06 19:52:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 21 minutes 15 seconds
Variants: generated 200, build-succeeded 105, build-failed 62, syntax-invalid 20, redundant 13
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6511 ms, max 138 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:52:01 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-06 19:52:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 22 minutes 1 seconds
Variants: generated 200, build-succeeded 101, build-failed 63, syntax-invalid 23, redundant 13
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6294 ms, max 121 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:52:47 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-06 19:53:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 22 minutes 46 seconds
Variants: generated 200, build-succeeded 98, build-failed 55, syntax-invalid 28, redundant 19
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6058 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:53:32 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-06 19:54:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 23 minutes 29 seconds
Variants: generated 200, build-succeeded 88, build-failed 64, syntax-invalid 39, redundant 9
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 5425 ms, max 126 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:54:15 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-06 19:55:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 14 seconds
Variants: generated 200, build-succeeded 96, build-failed 56, syntax-invalid 32, redundant 16
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5925 ms, max 119 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:55:00 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-06 19:55:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 57 seconds
Variants: generated 200, build-succeeded 99, build-failed 55, syntax-invalid 28, redundant 18
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6110 ms, max 128 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:55:43 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-06 19:56:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 42 seconds
Variants: generated 200, build-succeeded 103, build-failed 64, syntax-invalid 24, redundant 9
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6739 ms, max 137 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 19:56:28 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-06 19:57:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 27 seconds
Variants: generated 200, build-succeeded 104, build-failed 57, syntax-invalid 22, redundant 17
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6360 ms, max 135 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:57:13 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-06 19:57:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 11 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 24, redundant 9
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6547 ms, max 127 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 19:57:57 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-06 19:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 54 seconds
Variants: generated 200, build-succeeded 99, build-failed 62, syntax-invalid 29, redundant 10
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 5967 ms, max 115 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:58:40 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-06 19:59:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 38 seconds
Variants: generated 200, build-succeeded 98, build-failed 63, syntax-invalid 27, redundant 12
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5891 ms, max 116 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 19:59:24 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-06 20:00:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 29 minutes 22 seconds
Variants: generated 200, build-succeeded 97, build-failed 67, syntax-invalid 24, redundant 12
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5848 ms, max 137 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:00:08 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-06 20:00:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 6 seconds
Variants: generated 200, build-succeeded 93, build-failed 55, syntax-invalid 31, redundant 21
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5635 ms, max 113 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:00:52 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-06 20:01:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 49 seconds
Variants: generated 200, build-succeeded 84, build-failed 56, syntax-invalid 37, redundant 23
Fitness: max 0(84), min 0(84), ave 0
Test execution time: sum 5207 ms, max 146 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:01:35 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-06 20:02:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 31 minutes 32 seconds
Variants: generated 200, build-succeeded 83, build-failed 65, syntax-invalid 36, redundant 16
Fitness: max 0(83), min 0(83), ave 0
Test execution time: sum 5119 ms, max 139 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:02:18 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-06 20:03:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 17 seconds
Variants: generated 200, build-succeeded 92, build-failed 62, syntax-invalid 35, redundant 11
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5939 ms, max 194 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:03:03 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-06 20:03:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 33 minutes 4 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 26, redundant 10
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 7087 ms, max 124 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:03:50 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-06 20:04:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 33 minutes 52 seconds
Variants: generated 200, build-succeeded 103, build-failed 56, syntax-invalid 30, redundant 11
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 6928 ms, max 212 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:04:38 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-06 20:05:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 41 seconds
Variants: generated 200, build-succeeded 102, build-failed 55, syntax-invalid 23, redundant 20
Fitness: max 1(1), min 0(101), ave 0.01
Test execution time: sum 6850 ms, max 128 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:05:27 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-08-06 20:06:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 30 seconds
Variants: generated 200, build-succeeded 113, build-failed 52, syntax-invalid 18, redundant 17
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7190 ms, max 137 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:06:16 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-08-06 20:07:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 20 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 20, redundant 9
Fitness: max 1(1), min 0(115), ave 0.009
Test execution time: sum 7347 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:07:06 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-08-06 20:07:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 9 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 24, redundant 13
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 6827 ms, max 150 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:07:55 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-08-06 20:08:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 58 seconds
Variants: generated 200, build-succeeded 103, build-failed 52, syntax-invalid 27, redundant 18
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6854 ms, max 139 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:08:44 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-08-06 20:09:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 46 seconds
Variants: generated 200, build-succeeded 99, build-failed 57, syntax-invalid 27, redundant 17
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 6393 ms, max 142 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:09:33 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-08-06 20:10:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 37 seconds
Variants: generated 200, build-succeeded 112, build-failed 65, syntax-invalid 15, redundant 8
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7552 ms, max 149 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:10:23 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-08-06 20:11:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 24 seconds
Variants: generated 200, build-succeeded 98, build-failed 63, syntax-invalid 29, redundant 10
Fitness: max 1(2), min 0(96), ave 0.02
Test execution time: sum 6601 ms, max 150 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:11:11 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-08-06 20:12:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 15 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 18, redundant 12
Fitness: max 1(3), min 0(104), ave 0.028
Test execution time: sum 7141 ms, max 121 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:12:01 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-08-06 20:12:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 4 seconds
Variants: generated 200, build-succeeded 108, build-failed 62, syntax-invalid 21, redundant 9
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 7311 ms, max 137 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:12:50 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-08-06 20:13:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 52 seconds
Variants: generated 200, build-succeeded 100, build-failed 58, syntax-invalid 27, redundant 15
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6442 ms, max 117 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:13:38 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-08-06 20:14:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 40 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 21, redundant 11
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6953 ms, max 130 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:14:26 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-08-06 20:15:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 28 seconds
Variants: generated 200, build-succeeded 102, build-failed 58, syntax-invalid 30, redundant 10
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6940 ms, max 133 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:15:15 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-08-06 20:16:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 45 minutes 17 seconds
Variants: generated 200, build-succeeded 103, build-failed 61, syntax-invalid 29, redundant 7
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 7023 ms, max 119 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:16:03 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-08-06 20:16:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 46 minutes 5 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 26, redundant 14
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6821 ms, max 138 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:16:51 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-08-06 20:17:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 46 minutes 52 seconds
Variants: generated 200, build-succeeded 96, build-failed 55, syntax-invalid 36, redundant 13
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 6168 ms, max 123 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:17:38 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-08-06 20:18:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 47 minutes 43 seconds
Variants: generated 200, build-succeeded 108, build-failed 64, syntax-invalid 21, redundant 7
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 7045 ms, max 141 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:18:29 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-08-06 20:19:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 48 minutes 29 seconds
Variants: generated 200, build-succeeded 90, build-failed 67, syntax-invalid 36, redundant 7
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 6045 ms, max 137 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:19:16 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-08-06 20:20:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 49 minutes 17 seconds
Variants: generated 200, build-succeeded 98, build-failed 61, syntax-invalid 32, redundant 9
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6235 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:20:03 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-08-06 20:20:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 4 seconds
Variants: generated 200, build-succeeded 94, build-failed 56, syntax-invalid 37, redundant 13
Fitness: max 1(1), min 0(93), ave 0.011
Test execution time: sum 6300 ms, max 152 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:20:50 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-08-06 20:21:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 54 seconds
Variants: generated 200, build-succeeded 99, build-failed 65, syntax-invalid 27, redundant 9
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6704 ms, max 219 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:21:40 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-08-06 20:22:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 51 minutes 42 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 32, redundant 14
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6355 ms, max 148 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:22:28 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-08-06 20:23:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 52 minutes 34 seconds
Variants: generated 200, build-succeeded 101, build-failed 59, syntax-invalid 20, redundant 20
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 7358 ms, max 303 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:23:21 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-08-06 20:24:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 53 minutes 25 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 17, redundant 15
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7219 ms, max 149 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:24:11 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-08-06 20:25:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 minutes 14 seconds
Variants: generated 200, build-succeeded 98, build-failed 61, syntax-invalid 23, redundant 18
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6684 ms, max 150 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:25:00 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-08-06 20:25:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 2 seconds
Variants: generated 200, build-succeeded 94, build-failed 59, syntax-invalid 30, redundant 17
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 6378 ms, max 215 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:25:48 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-08-06 20:26:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 53 seconds
Variants: generated 200, build-succeeded 106, build-failed 55, syntax-invalid 24, redundant 15
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 7251 ms, max 221 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:26:39 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-08-06 20:27:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 56 minutes 46 seconds
Variants: generated 200, build-succeeded 104, build-failed 58, syntax-invalid 22, redundant 16
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 7233 ms, max 166 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:27:32 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-08-06 20:28:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 57 minutes 37 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 22, redundant 11
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7492 ms, max 133 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:28:23 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-08-06 20:29:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 30 seconds
Variants: generated 200, build-succeeded 101, build-failed 62, syntax-invalid 22, redundant 15
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6822 ms, max 136 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:29:16 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-08-06 20:30:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 23 seconds
Variants: generated 200, build-succeeded 110, build-failed 61, syntax-invalid 17, redundant 12
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 7689 ms, max 148 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:30:09 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-08-06 20:31:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 15, redundant 11
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7952 ms, max 151 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:31:04 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-08-06 20:32:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 1 minutes 14 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 25, redundant 10
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 7528 ms, max 168 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:32:00 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-08-06 20:32:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 2 minutes 10 seconds
Variants: generated 200, build-succeeded 108, build-failed 66, syntax-invalid 16, redundant 10
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 7267 ms, max 144 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:32:56 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-08-06 20:33:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 3 minutes 4 seconds
Variants: generated 200, build-succeeded 105, build-failed 66, syntax-invalid 20, redundant 9
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6838 ms, max 137 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:33:50 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-08-06 20:34:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 3 minutes 57 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 18, redundant 13
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6914 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 20:34:43 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-08-06 20:35:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 4 minutes 50 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 18, redundant 10
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7055 ms, max 133 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:35:36 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-08-06 20:36:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 5 minutes 45 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 15, redundant 12
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7748 ms, max 149 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:36:31 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-08-06 20:37:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 41 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 13, redundant 13
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7849 ms, max 177 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:37:27 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-08-06 20:38:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 38 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 20, redundant 10
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 7982 ms, max 204 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:38:24 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-08-06 20:39:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 33 seconds
Variants: generated 200, build-succeeded 104, build-failed 65, syntax-invalid 19, redundant 12
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 7004 ms, max 161 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:39:20 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-08-06 20:40:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 34 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 14, redundant 11
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 8288 ms, max 209 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:40:20 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-08-06 20:41:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 10 minutes 31 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 18, redundant 13
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7384 ms, max 182 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:41:17 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-08-06 20:42:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 11 minutes 29 seconds
Variants: generated 200, build-succeeded 120, build-failed 53, syntax-invalid 10, redundant 17
Fitness: max 1(1), min 0(119), ave 0.008
Test execution time: sum 8072 ms, max 137 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:42:15 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-08-06 20:43:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 26 seconds
Variants: generated 200, build-succeeded 109, build-failed 67, syntax-invalid 17, redundant 7
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7413 ms, max 168 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:43:12 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-08-06 20:44:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 25 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 9, redundant 17
Fitness: max 1(1), min 0(115), ave 0.009
Test execution time: sum 7665 ms, max 182 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:44:11 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-08-06 20:45:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 minutes 24 seconds
Variants: generated 200, build-succeeded 109, build-failed 71, syntax-invalid 14, redundant 6
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7117 ms, max 143 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:45:10 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-08-06 20:46:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 15 minutes 21 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 18, redundant 16
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7565 ms, max 208 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:46:08 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-08-06 20:47:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 23 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 20, redundant 6
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 8463 ms, max 228 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:47:09 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-08-06 20:48:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 minutes 23 seconds
Variants: generated 200, build-succeeded 109, build-failed 66, syntax-invalid 13, redundant 12
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7862 ms, max 144 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 20:48:09 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-08-06 20:49:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 24 seconds
Variants: generated 200, build-succeeded 124, build-failed 51, syntax-invalid 12, redundant 13
Fitness: max 1(1), min 0(123), ave 0.008
Test execution time: sum 8597 ms, max 136 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:49:10 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-08-06 20:50:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 27 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 17, redundant 12
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8461 ms, max 211 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 20:50:13 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-08-06 20:51:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 27 seconds
Variants: generated 200, build-succeeded 108, build-failed 64, syntax-invalid 19, redundant 9
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 7782 ms, max 171 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:51:13 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-08-06 20:52:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 30 seconds
Variants: generated 200, build-succeeded 122, build-failed 53, syntax-invalid 8, redundant 17
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 8824 ms, max 172 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:52:16 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-08-06 20:53:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 22 minutes 33 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 16, redundant 17
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 8565 ms, max 207 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:53:19 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-08-06 20:54:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 23 minutes 41 seconds
Variants: generated 200, build-succeeded 118, build-failed 59, syntax-invalid 11, redundant 12
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 9356 ms, max 228 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:54:27 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-08-06 20:55:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 24 minutes 46 seconds
Variants: generated 200, build-succeeded 121, build-failed 55, syntax-invalid 7, redundant 17
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 9209 ms, max 258 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 20:55:32 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-08-06 20:56:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 25 minutes 51 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 11, redundant 15
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8844 ms, max 203 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 20:56:37 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-08-06 20:57:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 26 minutes 58 seconds
Variants: generated 200, build-succeeded 117, build-failed 64, syntax-invalid 10, redundant 9
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 9726 ms, max 220 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 20:57:44 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-08-06 20:58:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 4 seconds
Variants: generated 200, build-succeeded 122, build-failed 47, syntax-invalid 13, redundant 18
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 10004 ms, max 439 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 20:58:51 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-08-06 20:59:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 29 minutes 6 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 15, redundant 12
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 8213 ms, max 106 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 20:59:52 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-08-06 21:00:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 30 minutes 12 seconds
Variants: generated 200, build-succeeded 121, build-failed 61, syntax-invalid 8, redundant 10
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 9346 ms, max 202 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:00:58 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-08-06 21:02:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 31 minutes 26 seconds
Variants: generated 200, build-succeeded 111, build-failed 50, syntax-invalid 18, redundant 21
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 10001 ms, max 210 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 21:02:12 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-08-06 21:03:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 32 minutes 28 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 11, redundant 17
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 8384 ms, max 97 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 21:03:14 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-08-06 21:04:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 33 minutes 31 seconds
Variants: generated 200, build-succeeded 118, build-failed 61, syntax-invalid 6, redundant 15
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 8771 ms, max 186 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:04:17 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-08-06 21:05:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 34 minutes 34 seconds
Variants: generated 200, build-succeeded 112, build-failed 67, syntax-invalid 14, redundant 7
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8527 ms, max 149 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:05:20 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-08-06 21:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 35 minutes 42 seconds
Variants: generated 200, build-succeeded 119, build-failed 54, syntax-invalid 6, redundant 21
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 9432 ms, max 266 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:06:28 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-08-06 21:07:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 36 minutes 46 seconds
Variants: generated 200, build-succeeded 124, build-failed 56, syntax-invalid 5, redundant 15
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 9262 ms, max 243 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:07:32 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-08-06 21:08:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 53 seconds
Variants: generated 200, build-succeeded 121, build-failed 63, syntax-invalid 0, redundant 16
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 9299 ms, max 278 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:08:39 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-08-06 21:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 57 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 10, redundant 10
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 8915 ms, max 144 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:09:44 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-08-06 21:10:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 40 minutes 0 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 12, redundant 17
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8120 ms, max 152 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:10:46 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-08-06 21:11:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 minutes 7 seconds
Variants: generated 200, build-succeeded 123, build-failed 55, syntax-invalid 2, redundant 20
Fitness: max 0(123), min 0(123), ave 0
Test execution time: sum 9616 ms, max 210 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:11:53 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-08-06 21:12:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 12 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 14, redundant 8
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 8772 ms, max 157 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:12:59 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-08-06 21:14:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 43 minutes 18 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 13, redundant 16
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 8868 ms, max 187 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:14:04 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-08-06 21:18:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 29 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 11, redundant 15
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 190690 ms, max 180074 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 21:18:15 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-08-06 21:19:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 48 minutes 39 seconds
Variants: generated 200, build-succeeded 121, build-failed 57, syntax-invalid 8, redundant 14
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 10419 ms, max 286 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:19:26 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-08-06 21:20:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 49 minutes 50 seconds
Variants: generated 200, build-succeeded 124, build-failed 55, syntax-invalid 6, redundant 15
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 9716 ms, max 166 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:20:36 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-08-06 21:21:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 51 minutes 4 seconds
Variants: generated 200, build-succeeded 122, build-failed 52, syntax-invalid 8, redundant 18
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 11279 ms, max 409 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:21:50 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-08-06 21:23:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 52 minutes 14 seconds
Variants: generated 200, build-succeeded 124, build-failed 60, syntax-invalid 7, redundant 9
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 9780 ms, max 208 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:23:00 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-08-06 21:24:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 53 minutes 32 seconds
Variants: generated 200, build-succeeded 125, build-failed 59, syntax-invalid 1, redundant 15
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 11620 ms, max 252 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:24:18 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-08-06 21:25:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 54 minutes 47 seconds
Variants: generated 200, build-succeeded 120, build-failed 56, syntax-invalid 2, redundant 22
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 11005 ms, max 197 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:25:33 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-08-06 21:26:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 56 minutes 3 seconds
Variants: generated 200, build-succeeded 116, build-failed 64, syntax-invalid 6, redundant 14
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 10529 ms, max 249 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:26:49 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-08-06 21:28:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 57 minutes 16 seconds
Variants: generated 200, build-succeeded 122, build-failed 55, syntax-invalid 11, redundant 12
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 11306 ms, max 399 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 21:28:02 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-08-06 21:29:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 58 minutes 28 seconds
Variants: generated 200, build-succeeded 122, build-failed 54, syntax-invalid 9, redundant 15
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 9942 ms, max 300 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:29:14 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-08-06 21:30:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 59 minutes 42 seconds
Variants: generated 200, build-succeeded 130, build-failed 57, syntax-invalid 5, redundant 8
Fitness: max 0(130), min 0(130), ave 0
Test execution time: sum 10580 ms, max 158 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:30:29 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-08-06 21:31:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 55 seconds
Variants: generated 200, build-succeeded 125, build-failed 57, syntax-invalid 2, redundant 16
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 9780 ms, max 329 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:31:41 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-08-06 21:32:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 2 minutes 7 seconds
Variants: generated 200, build-succeeded 126, build-failed 57, syntax-invalid 2, redundant 15
Fitness: max 0(126), min 0(126), ave 0
Test execution time: sum 9710 ms, max 201 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 21:32:53 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-08-06 21:34:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 3 minutes 16 seconds
Variants: generated 200, build-succeeded 127, build-failed 58, syntax-invalid 5, redundant 10
Fitness: max 0(127), min 0(127), ave 0
Test execution time: sum 9925 ms, max 163 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:34:02 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-08-06 21:35:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 4 minutes 26 seconds
Variants: generated 200, build-succeeded 127, build-failed 57, syntax-invalid 3, redundant 13
Fitness: max 0(127), min 0(127), ave 0
Test execution time: sum 10236 ms, max 300 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:35:12 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-08-06 21:36:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 32 seconds
Variants: generated 200, build-succeeded 129, build-failed 51, syntax-invalid 5, redundant 15
Fitness: max 0(129), min 0(129), ave 0
Test execution time: sum 9664 ms, max 169 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:36:18 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-08-06 21:37:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 6 minutes 38 seconds
Variants: generated 200, build-succeeded 124, build-failed 66, syntax-invalid 4, redundant 6
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 9041 ms, max 175 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 21:37:24 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-08-06 21:38:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 7 minutes 43 seconds
Variants: generated 200, build-succeeded 121, build-failed 64, syntax-invalid 4, redundant 11
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 9051 ms, max 247 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 21:38:30 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-08-06 21:39:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 8 minutes 54 seconds
Variants: generated 200, build-succeeded 127, build-failed 57, syntax-invalid 6, redundant 10
Fitness: max 0(127), min 0(127), ave 0
Test execution time: sum 10064 ms, max 160 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:39:40 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-08-06 21:40:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 10 minutes 0 seconds
Variants: generated 200, build-succeeded 118, build-failed 64, syntax-invalid 4, redundant 14
Fitness: max 1(1), min 0(117), ave 0.008
Test execution time: sum 8815 ms, max 104 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:40:46 [main] [INFO]  KGenProgMain - entered the era of 339th generation.
2023-08-06 21:42:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 11 minutes 19 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 12, redundant 11
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 10140 ms, max 205 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 21:42:05 [main] [INFO]  KGenProgMain - entered the era of 340th generation.
2023-08-06 21:43:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 12 minutes 36 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 14, redundant 15
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 9688 ms, max 165 ms, min 72 ms
----------------------------------------------------------------

2023-08-06 21:43:22 [main] [INFO]  KGenProgMain - entered the era of 341st generation.
2023-08-06 21:44:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 13 minutes 57 seconds
Variants: generated 200, build-succeeded 117, build-failed 60, syntax-invalid 8, redundant 15
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 9965 ms, max 175 ms, min 69 ms
----------------------------------------------------------------

2023-08-06 21:44:43 [main] [INFO]  KGenProgMain - entered the era of 342nd generation.
2023-08-06 21:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 16 seconds
Variants: generated 200, build-succeeded 121, build-failed 54, syntax-invalid 13, redundant 12
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 10280 ms, max 147 ms, min 69 ms
----------------------------------------------------------------

2023-08-06 21:46:02 [main] [INFO]  KGenProgMain - entered the era of 343rd generation.
2023-08-06 21:47:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 16 minutes 38 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 13, redundant 14
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 10037 ms, max 183 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 21:47:24 [main] [INFO]  KGenProgMain - entered the era of 344th generation.
2023-08-06 21:48:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 18 minutes 5 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 9, redundant 20
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 10597 ms, max 184 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 21:48:51 [main] [INFO]  KGenProgMain - entered the era of 345th generation.
2023-08-06 21:50:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 19 minutes 29 seconds
Variants: generated 200, build-succeeded 103, build-failed 60, syntax-invalid 22, redundant 15
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 9886 ms, max 276 ms, min 72 ms
----------------------------------------------------------------

2023-08-06 21:50:15 [main] [INFO]  KGenProgMain - entered the era of 346th generation.
2023-08-06 21:51:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 20 minutes 55 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 9, redundant 14
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 10548 ms, max 351 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 21:51:41 [main] [INFO]  KGenProgMain - entered the era of 347th generation.
2023-08-06 21:53:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 22 minutes 23 seconds
Variants: generated 200, build-succeeded 123, build-failed 49, syntax-invalid 6, redundant 22
Fitness: max 0(123), min 0(123), ave 0
Test execution time: sum 11322 ms, max 326 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 21:53:09 [main] [INFO]  KGenProgMain - entered the era of 348th generation.
2023-08-06 21:54:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 23 minutes 49 seconds
Variants: generated 200, build-succeeded 119, build-failed 44, syntax-invalid 11, redundant 26
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 11101 ms, max 339 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 21:54:35 [main] [INFO]  KGenProgMain - entered the era of 349th generation.
2023-08-06 21:56:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 25 minutes 22 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 10, redundant 12
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 11633 ms, max 312 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 21:56:09 [main] [INFO]  KGenProgMain - entered the era of 350th generation.
2023-08-06 21:57:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 48 seconds
Variants: generated 200, build-succeeded 123, build-failed 54, syntax-invalid 7, redundant 16
Fitness: max 0(123), min 0(123), ave 0
Test execution time: sum 10682 ms, max 164 ms, min 69 ms
----------------------------------------------------------------

2023-08-06 21:57:34 [main] [INFO]  KGenProgMain - entered the era of 351st generation.
2023-08-06 21:59:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 28 minutes 16 seconds
Variants: generated 200, build-succeeded 120, build-failed 62, syntax-invalid 6, redundant 12
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 10691 ms, max 193 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 21:59:02 [main] [INFO]  KGenProgMain - entered the era of 352nd generation.
2023-08-06 22:00:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 29 minutes 43 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 9, redundant 16
Fitness: max 1(1), min 0(119), ave 0.008
Test execution time: sum 11092 ms, max 187 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:00:29 [main] [INFO]  KGenProgMain - entered the era of 353rd generation.
2023-08-06 22:01:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 31 minutes 10 seconds
Variants: generated 200, build-succeeded 123, build-failed 50, syntax-invalid 8, redundant 19
Fitness: max 1(1), min 0(122), ave 0.008
Test execution time: sum 11291 ms, max 328 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:01:56 [main] [INFO]  KGenProgMain - entered the era of 354th generation.
2023-08-06 22:03:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 32 minutes 37 seconds
Variants: generated 200, build-succeeded 118, build-failed 54, syntax-invalid 7, redundant 21
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 11250 ms, max 322 ms, min 72 ms
----------------------------------------------------------------

2023-08-06 22:03:23 [main] [INFO]  KGenProgMain - entered the era of 355th generation.
2023-08-06 22:04:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 34 minutes 4 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 3, redundant 21
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 10110 ms, max 244 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:04:50 [main] [INFO]  KGenProgMain - entered the era of 356th generation.
2023-08-06 22:06:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 35 minutes 31 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 8, redundant 18
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 10936 ms, max 185 ms, min 72 ms
----------------------------------------------------------------

2023-08-06 22:06:17 [main] [INFO]  KGenProgMain - entered the era of 357th generation.
2023-08-06 22:07:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 36 minutes 58 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 13, redundant 16
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 10786 ms, max 189 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 22:07:45 [main] [INFO]  KGenProgMain - entered the era of 358th generation.
2023-08-06 22:09:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 38 minutes 22 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 22, redundant 11
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 10277 ms, max 207 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 22:09:08 [main] [INFO]  KGenProgMain - entered the era of 359th generation.
2023-08-06 22:10:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 39 minutes 49 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 13, redundant 9
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 10314 ms, max 163 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:10:35 [main] [INFO]  KGenProgMain - entered the era of 360th generation.
2023-08-06 22:12:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 41 minutes 17 seconds
Variants: generated 200, build-succeeded 117, build-failed 64, syntax-invalid 8, redundant 11
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 10406 ms, max 233 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:12:03 [main] [INFO]  KGenProgMain - entered the era of 361st generation.
2023-08-06 22:13:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 42 minutes 44 seconds
Variants: generated 200, build-succeeded 124, build-failed 60, syntax-invalid 7, redundant 9
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 10680 ms, max 174 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 22:13:30 [main] [INFO]  KGenProgMain - entered the era of 362nd generation.
2023-08-06 22:14:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 44 minutes 5 seconds
Variants: generated 200, build-succeeded 100, build-failed 50, syntax-invalid 17, redundant 33
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 8643 ms, max 127 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:14:51 [main] [INFO]  KGenProgMain - entered the era of 363rd generation.
2023-08-06 22:16:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 45 minutes 31 seconds
Variants: generated 200, build-succeeded 112, build-failed 61, syntax-invalid 17, redundant 10
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 9672 ms, max 174 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 22:16:17 [main] [INFO]  KGenProgMain - entered the era of 364th generation.
2023-08-06 22:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 46 minutes 59 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 15, redundant 9
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 9848 ms, max 193 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:17:46 [main] [INFO]  KGenProgMain - entered the era of 365th generation.
2023-08-06 22:19:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 48 minutes 25 seconds
Variants: generated 200, build-succeeded 106, build-failed 58, syntax-invalid 22, redundant 14
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 9211 ms, max 160 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 22:19:11 [main] [INFO]  KGenProgMain - entered the era of 366th generation.
2023-08-06 22:20:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 49 minutes 51 seconds
Variants: generated 200, build-succeeded 111, build-failed 54, syntax-invalid 22, redundant 13
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 10221 ms, max 341 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:20:37 [main] [INFO]  KGenProgMain - entered the era of 367th generation.
2023-08-06 22:22:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 51 minutes 18 seconds
Variants: generated 200, build-succeeded 121, build-failed 53, syntax-invalid 16, redundant 10
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 10392 ms, max 232 ms, min 70 ms
----------------------------------------------------------------

2023-08-06 22:22:04 [main] [INFO]  KGenProgMain - entered the era of 368th generation.
2023-08-06 22:23:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 52 minutes 45 seconds
Variants: generated 200, build-succeeded 115, build-failed 64, syntax-invalid 14, redundant 7
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 9995 ms, max 194 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:23:31 [main] [INFO]  KGenProgMain - entered the era of 369th generation.
2023-08-06 22:24:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 54 minutes 11 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 27, redundant 12
Fitness: max 1(3), min 0(99), ave 0.029
Test execution time: sum 9251 ms, max 173 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:24:57 [main] [INFO]  KGenProgMain - entered the era of 370th generation.
2023-08-06 22:26:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 55 minutes 31 seconds
Variants: generated 200, build-succeeded 88, build-failed 59, syntax-invalid 39, redundant 14
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 7978 ms, max 143 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:26:17 [main] [INFO]  KGenProgMain - entered the era of 371st generation.
2023-08-06 22:27:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 57 minutes 1 seconds
Variants: generated 200, build-succeeded 104, build-failed 54, syntax-invalid 20, redundant 22
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 10177 ms, max 263 ms, min 72 ms
----------------------------------------------------------------

2023-08-06 22:27:47 [main] [INFO]  KGenProgMain - entered the era of 372nd generation.
2023-08-06 22:29:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 58 minutes 30 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 13, redundant 13
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 9737 ms, max 167 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:29:16 [main] [INFO]  KGenProgMain - entered the era of 373rd generation.
2023-08-06 22:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 3 seconds
Variants: generated 200, build-succeeded 117, build-failed 54, syntax-invalid 14, redundant 15
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 11718 ms, max 550 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:30:49 [main] [INFO]  KGenProgMain - entered the era of 374th generation.
2023-08-06 22:32:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 1 minutes 29 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 17, redundant 15
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 10064 ms, max 158 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:32:15 [main] [INFO]  KGenProgMain - entered the era of 375th generation.
2023-08-06 22:33:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 2 minutes 57 seconds
Variants: generated 200, build-succeeded 116, build-failed 54, syntax-invalid 15, redundant 15
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 9997 ms, max 155 ms, min 72 ms
----------------------------------------------------------------

2023-08-06 22:33:44 [main] [INFO]  KGenProgMain - entered the era of 376th generation.
2023-08-06 22:35:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 4 minutes 27 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 16, redundant 16
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 9150 ms, max 212 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:35:13 [main] [INFO]  KGenProgMain - entered the era of 377th generation.
2023-08-06 22:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 5 minutes 58 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 10, redundant 16
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 10370 ms, max 205 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 22:36:44 [main] [INFO]  KGenProgMain - entered the era of 378th generation.
2023-08-06 22:38:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 7 minutes 23 seconds
Variants: generated 200, build-succeeded 117, build-failed 63, syntax-invalid 10, redundant 10
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 8927 ms, max 195 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:38:10 [main] [INFO]  KGenProgMain - entered the era of 379th generation.
2023-08-06 22:39:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 8 minutes 37 seconds
Variants: generated 200, build-succeeded 117, build-failed 51, syntax-invalid 10, redundant 22
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 8696 ms, max 157 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:39:23 [main] [INFO]  KGenProgMain - entered the era of 380th generation.
2023-08-06 22:40:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 9 minutes 49 seconds
Variants: generated 200, build-succeeded 114, build-failed 66, syntax-invalid 11, redundant 9
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 8027 ms, max 155 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:40:35 [main] [INFO]  KGenProgMain - entered the era of 381st generation.
2023-08-06 22:41:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 11 minutes 2 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 12, redundant 13
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 8241 ms, max 246 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:41:48 [main] [INFO]  KGenProgMain - entered the era of 382nd generation.
2023-08-06 22:43:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 12 minutes 16 seconds
Variants: generated 200, build-succeeded 112, build-failed 58, syntax-invalid 11, redundant 19
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8241 ms, max 137 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:43:02 [main] [INFO]  KGenProgMain - entered the era of 383rd generation.
2023-08-06 22:44:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 13 minutes 29 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 15, redundant 16
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 8583 ms, max 151 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:44:15 [main] [INFO]  KGenProgMain - entered the era of 384th generation.
2023-08-06 22:45:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 14 minutes 43 seconds
Variants: generated 200, build-succeeded 121, build-failed 57, syntax-invalid 7, redundant 15
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 9028 ms, max 160 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:45:29 [main] [INFO]  KGenProgMain - entered the era of 385th generation.
2023-08-06 22:46:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 15 minutes 58 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 13, redundant 20
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 8193 ms, max 165 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:46:44 [main] [INFO]  KGenProgMain - entered the era of 386th generation.
2023-08-06 22:47:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 17 minutes 11 seconds
Variants: generated 200, build-succeeded 109, build-failed 53, syntax-invalid 12, redundant 26
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 8143 ms, max 145 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:47:57 [main] [INFO]  KGenProgMain - entered the era of 387th generation.
2023-08-06 22:49:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 18 minutes 25 seconds
Variants: generated 200, build-succeeded 110, build-failed 61, syntax-invalid 13, redundant 16
Fitness: max 1(2), min 0(108), ave 0.018
Test execution time: sum 8173 ms, max 126 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:49:11 [main] [INFO]  KGenProgMain - entered the era of 388th generation.
2023-08-06 22:50:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 19 minutes 40 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 6, redundant 19
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 9045 ms, max 206 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:50:26 [main] [INFO]  KGenProgMain - entered the era of 389th generation.
2023-08-06 22:51:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 20 minutes 55 seconds
Variants: generated 200, build-succeeded 123, build-failed 56, syntax-invalid 8, redundant 13
Fitness: max 0(123), min 0(123), ave 0
Test execution time: sum 9367 ms, max 172 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:51:41 [main] [INFO]  KGenProgMain - entered the era of 390th generation.
2023-08-06 22:52:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 12 seconds
Variants: generated 200, build-succeeded 124, build-failed 51, syntax-invalid 6, redundant 19
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 9650 ms, max 158 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:52:58 [main] [INFO]  KGenProgMain - entered the era of 391st generation.
2023-08-06 22:54:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 23 minutes 27 seconds
Variants: generated 200, build-succeeded 108, build-failed 67, syntax-invalid 16, redundant 9
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 8028 ms, max 139 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:54:13 [main] [INFO]  KGenProgMain - entered the era of 392nd generation.
2023-08-06 22:55:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 minutes 44 seconds
Variants: generated 200, build-succeeded 120, build-failed 66, syntax-invalid 3, redundant 11
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 8988 ms, max 296 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:55:30 [main] [INFO]  KGenProgMain - entered the era of 393rd generation.
2023-08-06 22:56:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 26 minutes 0 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 9, redundant 16
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 9015 ms, max 340 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 22:56:46 [main] [INFO]  KGenProgMain - entered the era of 394th generation.
2023-08-06 22:58:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 27 minutes 17 seconds
Variants: generated 200, build-succeeded 126, build-failed 56, syntax-invalid 6, redundant 12
Fitness: max 0(126), min 0(126), ave 0
Test execution time: sum 10031 ms, max 135 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 22:58:03 [main] [INFO]  KGenProgMain - entered the era of 395th generation.
2023-08-06 22:59:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 28 minutes 38 seconds
Variants: generated 200, build-succeeded 119, build-failed 57, syntax-invalid 6, redundant 18
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 9884 ms, max 270 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 22:59:24 [main] [INFO]  KGenProgMain - entered the era of 396th generation.
2023-08-06 23:00:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 29 minutes 54 seconds
Variants: generated 200, build-succeeded 115, build-failed 49, syntax-invalid 9, redundant 27
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 9183 ms, max 162 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 23:00:41 [main] [INFO]  KGenProgMain - entered the era of 397th generation.
2023-08-06 23:00:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 30 minutes 3 seconds
Variants: generated 23, build-succeeded 6, build-failed 16, syntax-invalid 0, redundant 1
Fitness: max 1(1), min 0(5), ave 0.167
Test execution time: sum 451 ms, max 91 ms, min 67 ms
----------------------------------------------------------------

2023-08-06 23:00:49 [main] [INFO]  KGenProgMain - GA stopped
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v166)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v166)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v166)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v166)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v166)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -288,6 +288,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v242)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v293)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v293)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v293)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        increasing = true;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v293)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v293)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v293)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -288,6 +288,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v437)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v437)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v437)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v437)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:52 [main] [INFO]  PatchLogExporter - patch (v437)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i <= maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v466)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v466)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v466)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v466)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v466)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i < maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.iterationCount = iterationCount;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +281,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v857)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v857)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v857)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v857)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v857)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v857)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -288,9 +288,10 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i < maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,12 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -288,6 +279,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1827)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1827)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1827)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -197,14 +196,12 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1827)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1827)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v1827)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y2 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
@@ -288,6 +287,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v2802)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v2802)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v2802)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v2802)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v2802)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v2802)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v2802)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -288,7 +288,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
-            y0 = y1;
+			y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = true;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3487)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,7 +174,11 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
                         "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
@@ -262,6 +266,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3679)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3679)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3679)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3679)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3679)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3679)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3690)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3690)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3690)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3690)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3690)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v3690)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5457)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5457)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5457)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5457)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -197,9 +196,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -282,7 +278,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5457)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5457)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5457)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,7 +156,7 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
+        this.resultComputed = true;
 
         double ret = Double.NaN;
 
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +289,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5616)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -116,7 +117,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5616)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5616)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5616)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -214,7 +213,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5616)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5616)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5616)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +289,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5652)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -116,7 +117,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5652)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5652)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5652)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -214,7 +213,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +282,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5652)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5652)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v5652)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +289,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -243,7 +242,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,14 +197,12 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +212,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6272)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6629)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -272,8 +271,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6629)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6629)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6629)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6629)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6629)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -288,6 +288,8 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6680)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -272,8 +271,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6680)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6680)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6680)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v6680)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,8 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7542)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -272,8 +271,11 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7542)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7542)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7542)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7542)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7542)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -288,6 +287,9 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
+			y1 = f.value(x1);
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7577)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -272,8 +271,11 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7577)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7577)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7577)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7577)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7577)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7577)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -288,6 +288,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7660)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -274,6 +274,10 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7660)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7660)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -179,7 +179,8 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+                ta = tb;
+				// evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
@@ -204,7 +205,10 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +218,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7660)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7660)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7660)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7697)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -274,6 +274,10 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7697)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7697)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,10 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +217,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7697)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7697)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7697)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7921)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +117,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -274,6 +274,10 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7921)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7921)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -204,7 +203,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +214,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7921)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7921)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7921)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7921)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7926)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -274,6 +273,14 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7926)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7926)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7926)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7926)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v7926)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8105)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -274,6 +274,10 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8105)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8105)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,9 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +216,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8105)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8105)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8105)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8105)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +281,8 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8135)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8135)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8135)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8135)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8135)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8135)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +282,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,10 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -274,6 +277,10 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +215,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8142)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8149)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +116,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8149)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8149)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,10 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +217,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8149)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8149)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8149)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8172)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
@@ -287,7 +286,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8172)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8172)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8172)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,9 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8172)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8172)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8172)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,8 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8419)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -274,6 +273,10 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8419)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8419)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,9 +197,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -289,7 +286,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8419)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -288,6 +285,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8606)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -217,7 +217,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +273,10 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8606)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8606)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,9 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8606)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8606)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8606)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8606)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -262,6 +261,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8720)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +116,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8720)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8720)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8720)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
@@ -214,7 +215,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8720)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8720)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8720)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +281,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8758)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    interpolatedTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -274,6 +273,14 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8758)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8758)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8758)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,14 +197,12 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8758)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8758)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8758)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8783)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -272,8 +272,19 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8783)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8783)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8783)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8783)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8783)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +281,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +176,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    this.h = Math.abs(h);
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,8 +219,7 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
+    dirtyState = true;
 
   }
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8941)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -242,7 +241,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8941)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8941)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8941)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8941)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v8941)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,12 +281,13 @@
             }
             // Save old X1, Y1
             x0 = x1;
-            y0 = y1;
+			y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                delta = x1 - x0;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9355)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -274,6 +274,13 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9355)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9355)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9355)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9355)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9355)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9355)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +282,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9931)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -274,6 +274,18 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9931)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9931)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9931)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9931)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9931)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v9931)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -293,7 +287,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                delta = x1 - x0;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10113)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.h = Math.abs(h);
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,8 +220,7 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
+    dirtyState = true;
 
   }
 
@@ -272,8 +271,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10113)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10113)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10113)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10113)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10113)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10354)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +117,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -272,8 +272,11 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -287,7 +290,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10354)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10354)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10354)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10354)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10354)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:53 [main] [INFO]  PatchLogExporter - patch (v10354)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10373)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    this.h = Math.abs(h);
     this.dirtyState   = true;
 
   }
@@ -177,7 +176,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +272,22 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10373)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10373)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10373)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10373)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10375)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,8 +272,23 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -287,7 +302,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10375)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10375)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10375)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10375)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10375)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10714)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    interpolatedState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -274,6 +273,22 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10714)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10714)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    interpolatedState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,7 +218,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -288,6 +280,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10780)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -272,8 +272,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -287,7 +294,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10780)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10780)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,7 +204,8 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
-                                return handler.g(t, interpolator.getInterpolatedState());
+                                g0Positive = g0 >= 0;
+								return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10780)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10780)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10780)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10780)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -288,6 +281,7 @@
             }
             // Save old X1, Y1
             x0 = x1;
+			y1 = f.value(x1);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,16 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    interpolatedState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -272,8 +274,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -287,7 +296,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -272,8 +271,19 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -224,6 +224,7 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
@@ -289,7 +290,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
@@ -140,7 +139,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11414)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            checkResultComputed();
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -262,6 +263,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11507)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -272,8 +273,19 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11507)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11507)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11507)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -289,7 +289,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11507)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11507)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11507)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11724)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -272,8 +271,19 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11724)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11724)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11724)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11724)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11724)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11724)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,10 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -274,6 +273,18 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -224,6 +224,7 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
@@ -289,7 +290,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11746)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +178,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -274,6 +275,35 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+			interpolatedTime = Double.NaN;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11746)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11746)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11746)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11746)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,10 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -272,8 +272,27 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11757)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,10 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -272,8 +272,19 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			currentTime = Double.NaN;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -224,6 +223,7 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11758)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11905)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,8 +273,19 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11905)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11905)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -224,6 +224,7 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
@@ -289,7 +290,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11905)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11905)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11905)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				oldDelta = delta;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +255,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11918)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = true;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,8 +114,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -274,6 +272,26 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11918)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11918)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11918)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -289,7 +289,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11918)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11918)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v11918)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
   }
 
   /** {@inheritDoc} */
@@ -274,6 +273,26 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -418,7 +437,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -289,7 +289,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12376)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12745)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +116,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -272,8 +272,27 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -287,7 +306,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12745)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12745)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12745)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    increasing = gb >= ga;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -224,6 +224,7 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12745)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12745)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12863)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -272,8 +273,23 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12863)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12863)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -91,6 +90,7 @@
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
         maximalIterationCount = count;
+		this.absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12863)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -224,6 +224,9 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
+						pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
@@ -289,7 +292,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12863)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12863)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12863)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,7 +114,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +176,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
   }
 
   /** {@inheritDoc} */
@@ -272,8 +271,10 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -287,7 +288,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -224,6 +224,8 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
@@ -289,7 +291,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -272,8 +272,19 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -287,7 +298,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v12988)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13332)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,8 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
   }
 
   /** {@inheritDoc} */
@@ -274,6 +273,26 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13332)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13332)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13332)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -224,6 +224,8 @@
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
+						pendingEventTime = root;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13332)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13332)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13395)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = true;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,8 +114,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
+    dirtyState = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +175,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -273,7 +271,22 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13395)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13395)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13395)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    increasing = gb >= ga;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13395)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13395)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13395)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,9 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13522)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,10 +112,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
   }
 
   /** {@inheritDoc} */
@@ -274,6 +273,18 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -418,7 +429,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13522)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13522)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13522)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -289,7 +288,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13522)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13522)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v13522)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v34942)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +107,26 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -274,6 +285,30 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v34942)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v34942)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v34942)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v34942)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v34942)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,10 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v35112)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +107,27 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -274,6 +286,22 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v35112)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v35112)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v35112)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v35112)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v35112)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,10 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36508)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +112,18 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	previousTime = currentTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +223,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +279,26 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36508)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36508)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36508)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36508)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36508)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36508)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,13 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36530)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +113,20 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	previousTime = currentTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -274,6 +285,26 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36530)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36530)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36530)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36530)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36530)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36530)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,12 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36727)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +112,18 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -274,6 +280,34 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36727)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36727)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36727)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36727)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36727)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v36727)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,11 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48303)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +112,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +281,81 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48303)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48303)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,6 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48303)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48303)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48303)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,10 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48592)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,6 +113,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -219,6 +227,7 @@
     currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
+	h = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -274,6 +283,81 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48592)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48592)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48592)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -323,7 +321,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48592)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48592)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48592)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,12 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48770)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +113,22 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +190,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -274,6 +287,58 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48770)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48770)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,6 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
+		nextAction = EventHandler.CONTINUE;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -175,8 +176,10 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            increasing = true;
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48770)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48770)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v48770)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,12 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49104)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +107,17 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +279,56 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49104)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49104)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,6 +102,8 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
+		double ga = g0;
+		nextAction = EventHandler.CONTINUE;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49104)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49104)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49104)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
@@ -262,6 +260,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49379)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
-    interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +106,17 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -219,6 +223,7 @@
     currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
+	h = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -242,7 +247,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -274,6 +278,66 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49379)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49379)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -177,6 +176,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -240,7 +239,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    return (nextAction == EventHandler.RESET_STATE) || (nextAction == EventHandler.RESET_DERIVATIVES);
                 }
 
             }
@@ -323,7 +322,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49379)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49379)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49379)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,13 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49652)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +112,13 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +280,78 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49652)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49652)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,11 +177,12 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49652)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49652)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49652)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -78,6 +78,7 @@
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		double x;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v49652)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -262,6 +262,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50008)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -113,6 +112,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +281,68 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			dirtyState = false;
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50008)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50008)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,6 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50008)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50008)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50008)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -78,6 +78,7 @@
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		double x;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50008)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,16 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50091)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -113,6 +112,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +281,68 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			dirtyState = false;
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50091)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50091)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,6 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50091)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50091)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50091)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -78,6 +78,7 @@
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		double x;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50091)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,16 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50216)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +112,13 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +280,78 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50216)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50216)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,11 +177,12 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50216)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50216)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50216)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -78,6 +78,7 @@
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		double x;
     }
 
     /**
2023-08-06 23:00:54 [main] [INFO]  PatchLogExporter - patch (v50216)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -262,6 +262,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50224)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +112,13 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +280,78 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50224)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,11 +177,12 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50224)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50224)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -78,6 +78,7 @@
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		double x;
     }
 
     /**
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50224)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -252,7 +252,11 @@
                 delta = 0.5 * dx;
                 oldDelta = delta;
             } else {
-                double r3 = y1 / y0;
+                {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
+				double r3 = y1 / y0;
                 double p;
                 double p1;
                 // the equality test (x0 == x2) is intentional,
@@ -262,6 +266,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +112,13 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +280,78 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,11 +177,12 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -78,6 +78,7 @@
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		double x;
     }
 
     /**
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v50243)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -262,6 +262,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51287)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,15 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +283,86 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51287)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51287)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,11 +177,11 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51287)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51287)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51287)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,15 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51803)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,12 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +280,83 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51803)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51803)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,11 +177,11 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,12 +282,12 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
+			handler.resetState(t, y);
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51803)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51803)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v51803)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -262,6 +262,11 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v52410)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +111,9 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -274,6 +274,80 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			dirtyState = false;
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
@@ -418,8 +492,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v52410)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v52410)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v52410)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,6 +177,8 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v52410)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v52410)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v52410)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,16 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +112,13 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +249,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -274,6 +279,89 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -177,11 +178,13 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
+                increasing = true;
+				interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57385)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,11 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            checkResultComputed();
+			checkResultComputed();
+			checkResultComputed();
+			checkResultComputed();
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -262,6 +266,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,12 +106,20 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -271,9 +278,106 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+          h = Double.NaN;
+		h = Double.NaN;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -177,6 +178,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v57723)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            checkResultComputed();
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -262,6 +263,12 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +278,110 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.MathRuntimeException
+++ org.apache.commons.math.MathRuntimeException
@@ -206,7 +206,8 @@
             /** {@inheritDoc} */
             @Override
             public String getMessage() {
-                return buildMessage(Locale.US, pattern, arguments);
+                printStackTrace(System.err);
+				return buildMessage(Locale.US, pattern, arguments);
             }
 
             /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,6 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v58755)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,10 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            checkResultComputed();
+			checkResultComputed();
+			checkResultComputed();
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -262,6 +265,17 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,12 +106,14 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -218,8 +219,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -274,6 +273,126 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.MathRuntimeException
+++ org.apache.commons.math.MathRuntimeException
@@ -206,7 +206,8 @@
             /** {@inheritDoc} */
             @Override
             public String getMessage() {
-                return buildMessage(Locale.US, pattern, arguments);
+                printStackTrace(System.err);
+				return buildMessage(Locale.US, pattern, arguments);
             }
 
             /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,6 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			pendingEvent = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v59088)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v63072)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,11 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +248,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      finalized = true;
   }
 
   /** {@inheritDoc} */
@@ -274,6 +279,133 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v63072)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -97,6 +97,8 @@
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
       System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	finalizeStep();
+	finalizeStep();
   }
 
   /** Write the instance to an output channel.
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v63072)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v63072)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,8 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
+                increasing = true;
+				interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v63072)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v63072)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v63072)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,12 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v67311)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +113,12 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	dirtyState = false;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -217,7 +220,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +276,138 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v67311)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -97,6 +97,8 @@
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
       System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	finalizeStep();
+	finalizeStep();
   }
 
   /** Write the instance to an output channel.
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v67311)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v67311)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,8 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
+                increasing = true;
+				interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +214,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    ga = gb;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v67311)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v67311)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v67311)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,13 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70161)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    setInterpolatedTime(getInterpolatedTime());
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +111,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +274,186 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			getInterpolatedState();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70161)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -97,6 +97,7 @@
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
       System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	finalizeStep();
   }
 
   /** Write the instance to an output channel.
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70161)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70161)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0 = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70161)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70161)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70161)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,9 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70343)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    setInterpolatedTime(getInterpolatedTime());
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +112,12 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -274,6 +276,162 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70343)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70343)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,9 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70343)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70343)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v70343)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,12 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73466)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    setInterpolatedTime(getInterpolatedTime());
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,7 +225,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +281,147 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			getInterpolatedState();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73466)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73466)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,7 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -214,7 +215,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73466)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73466)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73466)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -276,10 +284,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73486)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    setInterpolatedTime(getInterpolatedTime());
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,7 +225,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +281,147 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			getInterpolatedState();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73486)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73486)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,7 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -214,7 +215,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73486)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73486)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73486)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73498)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    setInterpolatedTime(getInterpolatedTime());
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,7 +225,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +281,147 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			getInterpolatedState();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73498)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73498)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,7 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -213,8 +214,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73498)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73498)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v73498)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,14 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v75971)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -113,6 +112,11 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +278,171 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+			previousTime = Double.NaN;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v75971)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v75971)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,9 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -214,7 +217,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEvent = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v75971)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v75971)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v75971)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				clearResult();
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +255,11 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77119)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    setInterpolatedTime(getInterpolatedTime());
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -106,13 +105,18 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +278,186 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77119)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77119)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -151,6 +150,7 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77119)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77119)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77119)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,13 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77122)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,9 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    interpolatedDerivatives = null;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +278,198 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			getInterpolatedState();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77122)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77122)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77122)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v77122)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,10 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v79023)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
+	h = -h;
   }
 
   /** Simple constructor.
@@ -113,6 +113,9 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -274,6 +277,210 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v79023)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v79023)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,8 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v79023)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v79023)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 23:00:55 [main] [INFO]  PatchLogExporter - patch (v79023)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -262,6 +254,11 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+					functionValueAccuracy = defaultFunctionValueAccuracy;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-06 23:00:55 [main] [INFO]  KGenProgMain - Summary
Reached generation = 397
Generated variants = 79023
Syntax valid variants = 71119
Build succeeded variants = 42191
Time elapsed = 6 hours 30 minutes 9 seconds
Exit status = SUCCESS
