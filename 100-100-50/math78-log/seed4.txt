2023-08-06 04:44:21 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 04:44:21 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 04:44:21 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 04:44:21 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 4 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-06 04:44:38 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-06 04:44:39 [main] [INFO]  KGenProgMain - GA started
2023-08-06 04:44:39 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 04:44:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 100, build-succeeded 28, build-failed 55, syntax-invalid 3, redundant 14
Fitness: max 1(1), min 0(27), ave 0.036
Test execution time: sum 3417 ms, max 345 ms, min 64 ms
----------------------------------------------------------------

2023-08-06 04:44:50 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 04:44:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 seconds
Variants: generated 100, build-succeeded 23, build-failed 65, syntax-invalid 5, redundant 7
Fitness: max 0(23), min 0(23), ave 0
Test execution time: sum 1595 ms, max 130 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:44:58 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 04:45:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 seconds
Variants: generated 200, build-succeeded 49, build-failed 59, syntax-invalid 6, redundant 86
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 3377 ms, max 198 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:45:09 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 04:45:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 seconds
Variants: generated 200, build-succeeded 66, build-failed 62, syntax-invalid 1, redundant 71
Fitness: max 1(2), min 0(64), ave 0.03
Test execution time: sum 4134 ms, max 191 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:45:20 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 04:45:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 seconds
Variants: generated 200, build-succeeded 73, build-failed 67, syntax-invalid 10, redundant 50
Fitness: max 1(3), min 0(70), ave 0.041
Test execution time: sum 4550 ms, max 213 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 04:45:33 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 04:45:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 7 seconds
Variants: generated 200, build-succeeded 84, build-failed 56, syntax-invalid 9, redundant 51
Fitness: max 1(8), min 0(76), ave 0.095
Test execution time: sum 5140 ms, max 181 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:45:46 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 04:45:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 19 seconds
Variants: generated 200, build-succeeded 81, build-failed 53, syntax-invalid 18, redundant 48
Fitness: max 1(3), min 0(78), ave 0.037
Test execution time: sum 4642 ms, max 138 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:45:58 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 04:46:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 31 seconds
Variants: generated 200, build-succeeded 70, build-failed 64, syntax-invalid 24, redundant 42
Fitness: max 1(3), min 0(67), ave 0.043
Test execution time: sum 3993 ms, max 120 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 04:46:10 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 04:46:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 44 seconds
Variants: generated 200, build-succeeded 80, build-failed 66, syntax-invalid 22, redundant 32
Fitness: max 1(5), min 0(75), ave 0.062
Test execution time: sum 4615 ms, max 194 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:46:23 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 04:46:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 55 seconds
Variants: generated 200, build-succeeded 79, build-failed 64, syntax-invalid 30, redundant 27
Fitness: max 1(2), min 0(77), ave 0.025
Test execution time: sum 4586 ms, max 171 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:46:35 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 04:46:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 9 seconds
Variants: generated 200, build-succeeded 87, build-failed 64, syntax-invalid 14, redundant 35
Fitness: max 1(2), min 0(85), ave 0.023
Test execution time: sum 5166 ms, max 194 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:46:48 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 04:47:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 24 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 16, redundant 24
Fitness: max 1(2), min 0(101), ave 0.019
Test execution time: sum 5966 ms, max 184 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:47:03 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 04:47:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 39 seconds
Variants: generated 200, build-succeeded 101, build-failed 58, syntax-invalid 19, redundant 22
Fitness: max 1(1), min 0(100), ave 0.01
Test execution time: sum 5850 ms, max 189 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 04:47:18 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 04:47:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 54 seconds
Variants: generated 200, build-succeeded 102, build-failed 56, syntax-invalid 18, redundant 24
Fitness: max 1(1), min 0(101), ave 0.01
Test execution time: sum 6013 ms, max 206 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:47:33 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 04:47:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 10 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 12, redundant 23
Fitness: max 1(2), min 0(101), ave 0.019
Test execution time: sum 6105 ms, max 158 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:47:49 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 04:48:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 27 seconds
Variants: generated 200, build-succeeded 115, build-failed 53, syntax-invalid 20, redundant 12
Fitness: max 1(3), min 0(112), ave 0.026
Test execution time: sum 6793 ms, max 189 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:48:06 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 04:48:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 43 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 9, redundant 15
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 6613 ms, max 198 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:48:22 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 04:48:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 0 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 8, redundant 17
Fitness: max 1(2), min 0(118), ave 0.017
Test execution time: sum 7105 ms, max 203 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:48:39 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 04:48:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 17 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 19, redundant 14
Fitness: max 1(2), min 0(104), ave 0.019
Test execution time: sum 6443 ms, max 250 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:48:56 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 04:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 33 seconds
Variants: generated 200, build-succeeded 115, build-failed 50, syntax-invalid 12, redundant 23
Fitness: max 1(1), min 0(114), ave 0.009
Test execution time: sum 6570 ms, max 138 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:49:12 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 04:49:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 48 seconds
Variants: generated 200, build-succeeded 105, build-failed 60, syntax-invalid 21, redundant 14
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5954 ms, max 133 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:49:27 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 04:49:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 5 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 9, redundant 19
Fitness: max 1(2), min 0(111), ave 0.018
Test execution time: sum 6616 ms, max 202 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:49:44 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-06 04:50:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 22 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 14, redundant 14
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 6483 ms, max 160 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:50:01 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-06 04:50:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 39 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 12, redundant 9
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7032 ms, max 183 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:50:19 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-06 04:50:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 58 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 12, redundant 13
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 6555 ms, max 142 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:50:37 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-06 04:50:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 16 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 16, redundant 11
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 6771 ms, max 124 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:50:55 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-06 04:51:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 32 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 11, redundant 14
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6552 ms, max 121 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:51:11 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-06 04:51:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 48 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 22, redundant 15
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5743 ms, max 131 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:51:27 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-06 04:51:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 5 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 17, redundant 9
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6789 ms, max 159 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:51:44 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-06 04:51:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 20 seconds
Variants: generated 200, build-succeeded 98, build-failed 64, syntax-invalid 25, redundant 13
Fitness: max 1(1), min 0(97), ave 0.01
Test execution time: sum 5443 ms, max 111 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:51:59 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-06 04:52:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 36 seconds
Variants: generated 200, build-succeeded 110, build-failed 56, syntax-invalid 25, redundant 9
Fitness: max 1(2), min 0(108), ave 0.018
Test execution time: sum 6275 ms, max 220 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:52:15 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-06 04:52:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 53 seconds
Variants: generated 200, build-succeeded 112, build-failed 65, syntax-invalid 9, redundant 14
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6193 ms, max 132 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:52:33 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-06 04:52:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 10 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 25, redundant 8
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 6140 ms, max 192 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:52:49 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-06 04:53:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 28 seconds
Variants: generated 200, build-succeeded 119, build-failed 64, syntax-invalid 5, redundant 12
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6784 ms, max 191 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:53:08 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-06 04:53:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 45 seconds
Variants: generated 200, build-succeeded 116, build-failed 47, syntax-invalid 25, redundant 12
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 6712 ms, max 150 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:53:24 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-06 04:53:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 3 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 9, redundant 16
Fitness: max 1(3), min 0(110), ave 0.027
Test execution time: sum 6572 ms, max 137 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:53:42 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-06 04:54:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 20 seconds
Variants: generated 200, build-succeeded 110, build-failed 65, syntax-invalid 12, redundant 13
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6435 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:54:00 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-06 04:54:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 38 seconds
Variants: generated 200, build-succeeded 119, build-failed 60, syntax-invalid 12, redundant 9
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6815 ms, max 111 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:54:17 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-06 04:54:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 56 seconds
Variants: generated 200, build-succeeded 120, build-failed 58, syntax-invalid 16, redundant 6
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 6925 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:54:36 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-06 04:54:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 15 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 6, redundant 16
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6871 ms, max 146 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:54:54 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-06 04:55:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 34 seconds
Variants: generated 200, build-succeeded 120, build-failed 63, syntax-invalid 3, redundant 14
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 6865 ms, max 140 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:55:13 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-06 04:55:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 55 seconds
Variants: generated 200, build-succeeded 122, build-failed 54, syntax-invalid 13, redundant 11
Fitness: max 1(1), min 0(121), ave 0.008
Test execution time: sum 7919 ms, max 221 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:55:34 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-06 04:55:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 15 seconds
Variants: generated 200, build-succeeded 127, build-failed 55, syntax-invalid 8, redundant 10
Fitness: max 0(127), min 0(127), ave 0
Test execution time: sum 7562 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:55:54 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-06 04:56:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 35 seconds
Variants: generated 200, build-succeeded 122, build-failed 63, syntax-invalid 9, redundant 6
Fitness: max 1(2), min 0(120), ave 0.016
Test execution time: sum 7284 ms, max 135 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:56:15 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-06 04:56:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 3 seconds
Variants: generated 200, build-succeeded 131, build-failed 57, syntax-invalid 4, redundant 8
Fitness: max 0(131), min 0(131), ave 0
Test execution time: sum 8967 ms, max 203 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:56:42 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-06 04:57:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 24 seconds
Variants: generated 200, build-succeeded 119, build-failed 60, syntax-invalid 13, redundant 8
Fitness: max 1(1), min 0(118), ave 0.008
Test execution time: sum 6994 ms, max 140 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:57:03 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-06 04:57:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 44 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 21, redundant 4
Fitness: max 1(1), min 0(114), ave 0.009
Test execution time: sum 6828 ms, max 141 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:57:23 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-06 04:57:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 5 seconds
Variants: generated 200, build-succeeded 126, build-failed 55, syntax-invalid 11, redundant 8
Fitness: max 1(1), min 0(125), ave 0.008
Test execution time: sum 7595 ms, max 201 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:57:45 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-06 05:04:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 25 seconds
Variants: generated 200, build-succeeded 106, build-failed 60, syntax-invalid 26, redundant 8
Fitness: max 1(3), min 0(103), ave 0.028
Test execution time: sum 366105 ms, max 180068 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:04:04 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-06 05:07:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 44 seconds
Variants: generated 200, build-succeeded 105, build-failed 60, syntax-invalid 23, redundant 12
Fitness: max 1(2), min 0(103), ave 0.019
Test execution time: sum 186073 ms, max 180062 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:07:23 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-06 05:07:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 2 seconds
Variants: generated 200, build-succeeded 89, build-failed 65, syntax-invalid 41, redundant 5
Fitness: max 1(2), min 0(87), ave 0.022
Test execution time: sum 5212 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:07:41 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-06 05:08:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 21 seconds
Variants: generated 200, build-succeeded 98, build-failed 53, syntax-invalid 35, redundant 14
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5556 ms, max 126 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 05:08:00 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-06 05:11:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 40 seconds
Variants: generated 200, build-succeeded 91, build-failed 69, syntax-invalid 34, redundant 6
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 185347 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:11:19 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-06 05:11:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 58 seconds
Variants: generated 200, build-succeeded 96, build-failed 59, syntax-invalid 40, redundant 5
Fitness: max 1(1), min 0(95), ave 0.01
Test execution time: sum 5637 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:11:38 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-06 05:11:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 18 seconds
Variants: generated 200, build-succeeded 96, build-failed 61, syntax-invalid 34, redundant 9
Fitness: max 1(1), min 0(95), ave 0.01
Test execution time: sum 5751 ms, max 190 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:11:57 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-06 05:12:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 37 seconds
Variants: generated 200, build-succeeded 93, build-failed 68, syntax-invalid 33, redundant 6
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5302 ms, max 141 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:12:16 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-06 05:12:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 57 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 32, redundant 6
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5873 ms, max 194 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:12:36 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-06 05:12:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 17 seconds
Variants: generated 200, build-succeeded 99, build-failed 66, syntax-invalid 26, redundant 9
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 5606 ms, max 178 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:12:56 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-06 05:13:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 38 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 22, redundant 8
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 6282 ms, max 127 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:13:17 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-06 05:13:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 58 seconds
Variants: generated 200, build-succeeded 102, build-failed 55, syntax-invalid 31, redundant 12
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5990 ms, max 196 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:13:37 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-06 05:13:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 18 seconds
Variants: generated 200, build-succeeded 104, build-failed 56, syntax-invalid 32, redundant 8
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6036 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:13:58 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-06 05:14:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 39 seconds
Variants: generated 200, build-succeeded 99, build-failed 56, syntax-invalid 38, redundant 7
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 5859 ms, max 197 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:14:18 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-06 05:14:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 0 seconds
Variants: generated 200, build-succeeded 92, build-failed 55, syntax-invalid 35, redundant 18
Fitness: max 1(1), min 0(91), ave 0.011
Test execution time: sum 5466 ms, max 183 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:14:39 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-06 05:24:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 21 seconds
Variants: generated 200, build-succeeded 95, build-failed 64, syntax-invalid 31, redundant 10
Fitness: max 1(2), min 0(93), ave 0.021
Test execution time: sum 545717 ms, max 180068 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 05:24:00 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-06 05:36:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 41 seconds
Variants: generated 200, build-succeeded 88, build-failed 63, syntax-invalid 42, redundant 7
Fitness: max 1(1), min 0(87), ave 0.011
Test execution time: sum 725177 ms, max 180094 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 05:36:21 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-06 05:39:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 3 seconds
Variants: generated 200, build-succeeded 85, build-failed 70, syntax-invalid 41, redundant 4
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 185212 ms, max 180067 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 05:39:42 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-06 05:46:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 26 seconds
Variants: generated 200, build-succeeded 104, build-failed 57, syntax-invalid 30, redundant 9
Fitness: max 1(1), min 0(103), ave 0.01
Test execution time: sum 366314 ms, max 180080 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 05:46:05 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-06 05:49:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 47 seconds
Variants: generated 200, build-succeeded 99, build-failed 52, syntax-invalid 33, redundant 16
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 185895 ms, max 180067 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 05:49:27 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-06 05:52:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 9 seconds
Variants: generated 200, build-succeeded 96, build-failed 56, syntax-invalid 43, redundant 5
Fitness: max 1(2), min 0(94), ave 0.021
Test execution time: sum 185789 ms, max 180057 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 05:52:48 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-06 05:56:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 31 seconds
Variants: generated 200, build-succeeded 95, build-failed 72, syntax-invalid 28, redundant 5
Fitness: max 1(3), min 0(92), ave 0.032
Test execution time: sum 185715 ms, max 180071 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 05:56:11 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-06 06:05:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 1 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 23, redundant 6
Fitness: max 1(2), min 0(104), ave 0.019
Test execution time: sum 547229 ms, max 180211 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 06:05:40 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-06 06:06:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 25 seconds
Variants: generated 200, build-succeeded 86, build-failed 71, syntax-invalid 33, redundant 10
Fitness: max 1(1), min 0(85), ave 0.012
Test execution time: sum 5477 ms, max 182 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:06:05 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-06 06:15:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 53 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 22, redundant 8
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 546401 ms, max 180068 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:15:32 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-06 06:27:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 20 seconds
Variants: generated 200, build-succeeded 105, build-failed 68, syntax-invalid 20, redundant 7
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 726472 ms, max 180076 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 06:27:59 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-06 06:28:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 47 seconds
Variants: generated 200, build-succeeded 108, build-failed 54, syntax-invalid 28, redundant 10
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 6514 ms, max 170 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 06:28:26 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-06 06:28:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 16 seconds
Variants: generated 200, build-succeeded 103, build-failed 67, syntax-invalid 21, redundant 9
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 6409 ms, max 184 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:28:55 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-06 06:29:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 42 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 36, redundant 8
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5968 ms, max 190 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:29:21 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-06 06:32:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 10 seconds
Variants: generated 200, build-succeeded 99, build-failed 64, syntax-invalid 24, redundant 13
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 186165 ms, max 180062 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:32:49 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-06 06:33:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 35 seconds
Variants: generated 200, build-succeeded 83, build-failed 73, syntax-invalid 37, redundant 7
Fitness: max 1(1), min 0(82), ave 0.012
Test execution time: sum 4936 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 06:33:14 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-06 06:33:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 2 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 30, redundant 8
Fitness: max 1(1), min 0(101), ave 0.01
Test execution time: sum 6386 ms, max 166 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 06:33:42 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-06 06:34:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 29 seconds
Variants: generated 200, build-succeeded 105, build-failed 57, syntax-invalid 32, redundant 6
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6216 ms, max 168 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 06:34:09 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-06 06:34:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 55 seconds
Variants: generated 200, build-succeeded 83, build-failed 71, syntax-invalid 41, redundant 5
Fitness: max 0(83), min 0(83), ave 0
Test execution time: sum 5220 ms, max 180 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:34:34 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-06 06:35:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 21 seconds
Variants: generated 200, build-succeeded 95, build-failed 68, syntax-invalid 30, redundant 7
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5820 ms, max 170 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:35:00 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-06 06:35:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 47 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 32, redundant 12
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5903 ms, max 183 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:35:26 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-06 06:35:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 8 seconds
Variants: generated 200, build-succeeded 70, build-failed 69, syntax-invalid 50, redundant 11
Fitness: max 0(70), min 0(70), ave 0
Test execution time: sum 4005 ms, max 111 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 06:35:48 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-06 06:36:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 32 seconds
Variants: generated 200, build-succeeded 77, build-failed 66, syntax-invalid 48, redundant 9
Fitness: max 1(1), min 0(76), ave 0.013
Test execution time: sum 4433 ms, max 112 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:36:11 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-06 06:36:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 55 seconds
Variants: generated 200, build-succeeded 86, build-failed 54, syntax-invalid 48, redundant 12
Fitness: max 1(1), min 0(85), ave 0.012
Test execution time: sum 5080 ms, max 165 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:36:35 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-06 06:37:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 21 seconds
Variants: generated 200, build-succeeded 94, build-failed 65, syntax-invalid 31, redundant 10
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5525 ms, max 162 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:37:00 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-06 06:37:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 45 seconds
Variants: generated 200, build-succeeded 91, build-failed 62, syntax-invalid 36, redundant 11
Fitness: max 1(3), min 0(88), ave 0.033
Test execution time: sum 5235 ms, max 117 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:37:24 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-06 06:37:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 11 seconds
Variants: generated 200, build-succeeded 98, build-failed 60, syntax-invalid 33, redundant 9
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5673 ms, max 117 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:37:50 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-06 06:38:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 37 seconds
Variants: generated 200, build-succeeded 104, build-failed 58, syntax-invalid 26, redundant 12
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 5886 ms, max 173 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 06:38:16 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-06 06:38:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 5 seconds
Variants: generated 200, build-succeeded 103, build-failed 66, syntax-invalid 25, redundant 6
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6018 ms, max 118 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:38:44 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-06 06:39:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 29 seconds
Variants: generated 200, build-succeeded 83, build-failed 59, syntax-invalid 44, redundant 14
Fitness: max 0(83), min 0(83), ave 0
Test execution time: sum 4727 ms, max 120 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:39:08 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-06 06:39:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 54 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 37, redundant 7
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5469 ms, max 116 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:39:33 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-06 06:39:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 20 seconds
Variants: generated 200, build-succeeded 94, build-failed 62, syntax-invalid 32, redundant 12
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5473 ms, max 165 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:39:59 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-06 06:40:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 45 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 33, redundant 9
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5662 ms, max 161 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:40:24 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-06 06:40:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 12 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 33, redundant 11
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5782 ms, max 111 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:40:51 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-06 06:41:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 35 seconds
Variants: generated 200, build-succeeded 84, build-failed 62, syntax-invalid 45, redundant 9
Fitness: max 1(1), min 0(83), ave 0.012
Test execution time: sum 4690 ms, max 111 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:41:14 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-06 06:41:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 51 seconds
Variants: generated 136, build-succeeded 41, build-failed 67, syntax-invalid 18, redundant 10
Fitness: max 1(2), min 0(39), ave 0.049
Test execution time: sum 2403 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 06:41:31 [main] [INFO]  KGenProgMain - GA stopped
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v385)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v385)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v385)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v385)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v385)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v535)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v535)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v535)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v535)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v535)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v549)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v549)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v549)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v549)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v549)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v711)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v711)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        nextAction = EventHandler.CONTINUE;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v711)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v711)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v711)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v768)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,6 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		forward = true;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v768)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v768)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v768)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v768)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v786)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -217,7 +217,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v786)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v786)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v786)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v786)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v786)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -261,6 +261,7 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
+					y0 = y1;
                     p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v935)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v935)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v935)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v935)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v935)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v945)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v945)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v945)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v945)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v945)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v950)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v950)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v950)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v950)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v950)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v952)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v952)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v952)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v952)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v958)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v958)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v958)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v958)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v958)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v975)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v975)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v975)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v975)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v975)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1160)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1160)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1160)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -247,7 +247,6 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1160)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1160)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1187)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1187)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1187)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1187)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1187)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        pendingEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1314)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1314)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1314)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1314)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1314)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1357)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,6 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		forward = true;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1357)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1357)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1357)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1357)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1546)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1546)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1546)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1546)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1546)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1547)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1547)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        pendingEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1547)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1547)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1547)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1558)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1558)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1558)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1558)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1569)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1569)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1569)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1569)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1569)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1574)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -244,6 +243,7 @@
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
       dirtyState       = true;
+	h = Double.NaN;
   }
 
   /** {@inheritDoc} */
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1574)
--- org.apache.commons.math.MathRuntimeException
+++ org.apache.commons.math.MathRuntimeException
@@ -125,7 +125,7 @@
      */
     private static String buildMessage(final Locale locale, final String pattern,
                                        final Object ... arguments) {
-        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
+        return buildMessage(Locale.getDefault(), pattern, arguments);
     }
 
     /** Gets the pattern used to build the message of this throwable.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1574)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1574)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1574)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1574)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.forward = true;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1795)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1795)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1795)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1795)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1795)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1992)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,8 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -208,7 +205,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedTime = Double.NaN;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1992)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1992)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1992)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1992)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1996)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1996)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1996)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        nextAction = EventHandler.CONTINUE;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1996)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v1996)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2112)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +111,6 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2112)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2112)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2112)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2112)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2112)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2124)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2124)
--- org.apache.commons.math.MathRuntimeException
+++ org.apache.commons.math.MathRuntimeException
@@ -125,7 +125,7 @@
      */
     private static String buildMessage(final Locale locale, final String pattern,
                                        final Object ... arguments) {
-        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
+        return buildMessage(Locale.getDefault(), pattern, arguments);
     }
 
     /** Gets the pattern used to build the message of this throwable.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2124)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2124)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2124)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2124)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,8 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -215,6 +214,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2367)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2522)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
@@ -96,7 +95,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2522)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2522)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        double ta = t0;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2522)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2522)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2769)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,7 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2769)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2769)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2769)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -247,7 +247,6 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2769)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:34 [main] [INFO]  PatchLogExporter - patch (v2769)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -112,7 +112,6 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2912)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2912)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2912)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        previousEventTime = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -181,7 +181,7 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
+                forward = interpolator.isForward();
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2912)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2912)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2912)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2914)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2914)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2914)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        double ta = t0;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2914)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2914)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2914)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2938)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2938)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -247,7 +248,6 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2938)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2938)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v2938)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3177)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,8 +111,7 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    interpolatedTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3177)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3177)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3177)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3177)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3177)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3302)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3302)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3302)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3302)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3302)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3330)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3330)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3330)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3330)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3330)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3330)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3535)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +173,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3535)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3535)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3535)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,7 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
+                forward = interpolator.isForward();
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3535)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3535)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3548)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +173,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3548)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3548)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3548)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3548)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3548)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
@@ -96,7 +95,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        double ta = t0;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4103)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4103)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
@@ -96,7 +95,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4103)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4103)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4103)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4103)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4122)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +173,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4122)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4122)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -106,7 +107,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4122)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4322)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,8 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4322)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4322)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,9 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4322)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4322)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4795)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4795)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4795)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,12 +95,12 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4795)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v4795)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5687)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -113,8 +111,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5687)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5687)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5687)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5687)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5687)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5687)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i < maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -113,9 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5900)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -113,9 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5900)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5900)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5900)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5900)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v5900)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6282)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -113,9 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6282)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6282)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6282)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6282)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6282)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6282)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,9 +112,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +174,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -238,8 +239,6 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
                     ga = gb;
                 }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -274,8 +275,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 * y1 >= 0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6833)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,9 +112,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +174,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6833)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -238,8 +239,6 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
                     ga = gb;
                 }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6833)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -280,7 +281,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    {
+						x0 = x1;
+						x1 = x2;
+						x2 = x0;
+						y0 = y1;
+						y1 = y2;
+						y2 = y0;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6878)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,9 +112,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +174,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6878)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6878)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6878)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -238,8 +239,6 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
                     ga = gb;
                 }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6878)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6878)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v6878)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -238,8 +239,6 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
                     ga = gb;
                 }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,7 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				iterationCount = i;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8462)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,7 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8462)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8462)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8462)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8462)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8462)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8462)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,12 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8884)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +110,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -177,7 +175,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8884)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8884)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8884)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -238,8 +238,6 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
                     ga = gb;
                 }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8884)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8884)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v8884)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9035)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +110,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -177,7 +175,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9035)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9035)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -238,8 +238,6 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
                     ga = gb;
                 }
 
@@ -284,6 +282,7 @@
 
         t0 = t;
         g0 = handler.g(t, y);
+		increasing = true;
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9035)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9035)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9035)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9367)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +111,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -177,9 +176,8 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9367)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9367)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,7 +197,39 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
+                    {
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t) throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler.g(t, interpolator.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setAbsoluteAccuracy(convergence);
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
@@ -282,8 +314,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
+		increasing = true;
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9367)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9367)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9367)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9538)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,7 +110,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9538)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9538)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9538)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9538)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9538)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,7 +225,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (!resultComputed) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -237,7 +239,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9587)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,11 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9587)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9587)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -284,6 +284,7 @@
 
         t0 = t;
         g0 = handler.g(t, y);
+		increasing = true;
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9587)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9587)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9587)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9587)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (!resultComputed) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -282,7 +282,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9589)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,10 +111,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9589)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9589)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,17 +95,16 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +171,9 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9589)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9589)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9589)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (!resultComputed) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9787)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +110,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -177,9 +175,8 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9787)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9787)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9787)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9787)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9787)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9787)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,8 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            final double x3 = 0.5 * (x1 + x2);
+			i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +111,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -272,7 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +176,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -282,7 +282,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        g0Positive = increasing;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9854)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +176,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v9896)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				++i;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10405)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +174,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,9 +216,6 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
-
   }
 
   /** {@inheritDoc} */
@@ -272,7 +265,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10405)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10405)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10405)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10405)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10637)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +111,14 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -179,7 +180,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -272,7 +273,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10637)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10637)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10637)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10637)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v10637)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,21 +224,12 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11366)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +110,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -177,7 +175,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -272,7 +269,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11366)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11366)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,9 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11366)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11366)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11366)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11595)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,7 +111,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +272,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11595)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11595)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,9 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -105,7 +107,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -223,7 +224,8 @@
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
+                        ga = gb;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11595)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11595)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11595)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v11595)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -301,7 +301,6 @@
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
-                delta = x1 - x0;
                 oldDelta = delta;
             }
             i++;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12385)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,11 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12385)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12385)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12385)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12385)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12385)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12385)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12410)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,10 +110,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +175,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -272,7 +269,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
@@ -287,7 +284,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12410)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12410)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12410)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12410)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12410)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:35 [main] [INFO]  PatchLogExporter - patch (v12410)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +296,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12561)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,10 +112,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -208,7 +207,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12561)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12561)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,12 +100,10 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +170,9 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12561)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12561)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12561)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12561)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,10 +110,11 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +176,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,9 +218,6 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
-
   }
 
   /** {@inheritDoc} */
@@ -272,7 +267,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v12730)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (f == null) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13030)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +110,11 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +176,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
@@ -287,7 +285,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13030)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13030)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13030)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13030)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13030)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -282,7 +274,8 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    double fmin;
+					oldDelta = delta;
                     delta = p / p1;
                 }
             }
@@ -304,7 +297,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13390)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +110,13 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -177,7 +176,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,9 +218,6 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
-
   }
 
   /** {@inheritDoc} */
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13390)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13390)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -104,7 +105,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13390)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13390)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13390)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13485)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +110,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13485)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13485)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -104,7 +105,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13485)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13485)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13485)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13485)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				y2 = y0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -282,7 +274,8 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    double fmin;
+					oldDelta = delta;
                     delta = p / p1;
                 }
             }
@@ -304,7 +297,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,12 +111,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -177,9 +176,8 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13536)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -282,7 +281,8 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    double fmin;
+					oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13715)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +106,15 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    h = currentTime - previousTime;
+	h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13715)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13715)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,7 +95,8 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        pendingEvent = false;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -104,7 +105,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13715)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13715)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13715)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13715)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -272,7 +271,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -282,7 +280,8 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    double fmin;
+					oldDelta = delta;
                     delta = p / p1;
                 }
             }
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +174,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,9 +216,6 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
-
   }
 
   /** {@inheritDoc} */
@@ -272,7 +265,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13799)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -112,10 +111,11 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -208,7 +207,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13799)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13799)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13799)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13799)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13799)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13799)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13842)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13842)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13842)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,9 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -172,7 +168,10 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			g0Positive = increasing;
+			g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13842)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13842)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13842)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13880)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13880)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13880)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,9 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -172,7 +168,10 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			g0Positive = increasing;
+			g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13880)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13880)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v13880)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -276,11 +276,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
+                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14182)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,16 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -117,7 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -179,7 +179,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
@@ -287,7 +287,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14182)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14182)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14182)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14182)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14182)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14182)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -106,12 +105,10 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -272,7 +269,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
@@ -287,7 +284,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,8 +282,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
+		boolean resetDerivatives = false;
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14757)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14915)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** Simple constructor.
@@ -111,13 +109,11 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
 
   }
 
@@ -272,7 +268,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14915)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14915)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,6 +96,7 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		g0Positive = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -105,7 +106,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +172,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = increasing;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14915)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14915)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v14915)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +106,14 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    h = currentTime - previousTime;
+	h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    dirtyState = false;
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -174,7 +172,9 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15339)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -282,7 +281,8 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    double fmin;
+					oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -217,7 +214,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    final int n = (currentState == null) ? -1 : currentState.length;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,12 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15582)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15767)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -270,7 +268,9 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15767)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15767)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,8 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,7 +280,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15767)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15767)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15767)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,11 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v15767)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v16923)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +103,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -115,7 +111,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -168,7 +163,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -177,7 +171,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -217,7 +210,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    final int n = (currentState == null) ? -1 : currentState.length;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -232,7 +225,8 @@
 
   /** {@inheritDoc} */
   public double getCurrentTime() {
-    return currentTime;
+    finalized = false;
+	return currentTime;
   }
 
   /** {@inheritDoc} */
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v16923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v16923)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v16923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v16923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v16923)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v16923)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -282,7 +282,8 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    double fmin;
+					oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17190)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,11 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +112,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +173,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -208,7 +203,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -217,7 +211,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    final int n = (currentState == null) ? -1 : currentState.length;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17190)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17190)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,6 +96,7 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		g0Positive = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17190)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17190)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17190)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17190)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17528)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -106,13 +105,13 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -270,7 +269,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17528)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17528)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,13 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		g0Positive = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -241,6 +240,9 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					increasing = gb >= ga;
+					increasing = gb >= ga;
+					increasing = gb >= ga;
                 }
 
             }
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17528)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17528)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17528)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -71,12 +71,17 @@
     protected UnivariateRealSolverImpl(final UnivariateRealFunction f,
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
-        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+        super(100, 1E-6);
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17559)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +110,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -270,7 +269,9 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17559)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17559)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,6 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		g0Positive = true;
+		g0Positive = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -241,6 +243,7 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					increasing = gb >= ga;
                 }
 
             }
@@ -282,7 +285,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17559)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17559)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17559)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -71,12 +71,18 @@
     protected UnivariateRealSolverImpl(final UnivariateRealFunction f,
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
-        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+        super(100, 1E-6);
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17575)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
+	h = -h;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -270,7 +267,9 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17575)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17575)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,13 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		g0Positive = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -241,6 +240,7 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					increasing = gb >= ga;
                 }
 
             }
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17575)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17575)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v17575)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -71,12 +71,15 @@
     protected UnivariateRealSolverImpl(final UnivariateRealFunction f,
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
-        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+        super(100, 1E-6);
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19371)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -106,16 +105,13 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -168,7 +164,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -208,7 +203,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +266,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19371)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19371)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,6 +96,7 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		g0Positive = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
@@ -241,6 +242,7 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					increasing = gb >= ga;
                 }
 
             }
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19371)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19371)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19371)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,12 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19371)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
+	h = -h;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -241,6 +241,9 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					increasing = gb >= ga;
+					increasing = gb >= ga;
+					increasing = gb >= ga;
                 }
 
             }
@@ -282,7 +285,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,14 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19532)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -292,6 +291,7 @@
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
+				double ret = Double.NaN;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19536)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    h = currentTime - previousTime;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -208,7 +205,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -218,7 +214,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = currentTime;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -270,7 +266,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19536)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19536)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19536)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,13 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		g0Positive = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19536)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19536)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:41:36 [main] [INFO]  PatchLogExporter - patch (v19536)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,12 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:41:36 [main] [INFO]  KGenProgMain - Summary
Reached generation = 99
Generated variants = 19536
Syntax valid variants = 17198
Build succeeded variants = 9782
Time elapsed = 1 hours 56 minutes 57 seconds
Exit status = SUCCESS
