2023-08-06 03:29:51 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 03:29:51 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 03:29:51 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 03:29:51 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-06 03:30:09 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-06 03:30:09 [main] [INFO]  KGenProgMain - GA started
2023-08-06 03:30:09 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 03:30:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 100, build-succeeded 33, build-failed 53, syntax-invalid 7, redundant 7
Fitness: max 1(1), min 0(32), ave 0.03
Test execution time: sum 3501 ms, max 222 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 03:30:22 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 03:30:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 seconds
Variants: generated 100, build-succeeded 28, build-failed 57, syntax-invalid 7, redundant 8
Fitness: max 1(1), min 0(27), ave 0.036
Test execution time: sum 1796 ms, max 90 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:30:29 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 03:30:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 seconds
Variants: generated 200, build-succeeded 43, build-failed 47, syntax-invalid 33, redundant 77
Fitness: max 1(4), min 0(39), ave 0.093
Test execution time: sum 2887 ms, max 261 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:30:37 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 03:30:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 seconds
Variants: generated 200, build-succeeded 57, build-failed 63, syntax-invalid 4, redundant 76
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3353 ms, max 92 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:30:46 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 03:30:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 seconds
Variants: generated 200, build-succeeded 68, build-failed 61, syntax-invalid 4, redundant 67
Fitness: max 0(68), min 0(68), ave 0
Test execution time: sum 4244 ms, max 163 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:30:57 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 03:34:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 58 seconds
Variants: generated 200, build-succeeded 80, build-failed 62, syntax-invalid 6, redundant 52
Fitness: max 0(80), min 0(80), ave 0
Test execution time: sum 184857 ms, max 180079 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:34:08 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 03:37:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 10 seconds
Variants: generated 200, build-succeeded 96, build-failed 57, syntax-invalid 9, redundant 38
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 185450 ms, max 180055 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:37:20 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 03:40:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 23 seconds
Variants: generated 200, build-succeeded 104, build-failed 63, syntax-invalid 9, redundant 24
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 185942 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:40:33 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 03:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 36 seconds
Variants: generated 200, build-succeeded 96, build-failed 66, syntax-invalid 11, redundant 27
Fitness: max 1(1), min 0(95), ave 0.01
Test execution time: sum 5419 ms, max 137 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:40:45 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 03:40:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 49 seconds
Variants: generated 200, build-succeeded 107, build-failed 59, syntax-invalid 13, redundant 21
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6097 ms, max 213 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:40:59 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 03:41:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 2 seconds
Variants: generated 200, build-succeeded 100, build-failed 61, syntax-invalid 15, redundant 24
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 5561 ms, max 86 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:41:11 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 03:41:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 16 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 12, redundant 18
Fitness: max 1(2), min 0(111), ave 0.018
Test execution time: sum 6238 ms, max 166 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:41:25 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 03:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 29 seconds
Variants: generated 200, build-succeeded 110, build-failed 51, syntax-invalid 15, redundant 24
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6265 ms, max 209 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:41:39 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 03:41:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 43 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 14, redundant 11
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6219 ms, max 146 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:41:53 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 03:42:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 57 seconds
Variants: generated 200, build-succeeded 99, build-failed 69, syntax-invalid 20, redundant 12
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 5695 ms, max 207 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:42:07 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 03:42:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 12 seconds
Variants: generated 200, build-succeeded 102, build-failed 62, syntax-invalid 20, redundant 16
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6070 ms, max 211 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:42:21 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 03:42:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 34 seconds
Variants: generated 200, build-succeeded 112, build-failed 64, syntax-invalid 13, redundant 11
Fitness: max 1(7), min 0(105), ave 0.062
Test execution time: sum 8009 ms, max 193 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:42:44 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 03:42:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 50 seconds
Variants: generated 200, build-succeeded 114, build-failed 63, syntax-invalid 13, redundant 10
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6407 ms, max 134 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:42:59 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 03:43:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 4 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 18, redundant 15
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 6355 ms, max 206 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:43:14 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 03:43:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 19 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 13, redundant 16
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 5802 ms, max 112 ms, min 48 ms
----------------------------------------------------------------

2023-08-06 03:43:28 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 03:43:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 33 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 19, redundant 10
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 6402 ms, max 145 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:43:43 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 03:43:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 50 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 13, redundant 9
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6665 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:43:59 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-06 03:44:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 6 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 16, redundant 16
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6300 ms, max 211 ms, min 47 ms
----------------------------------------------------------------

2023-08-06 03:44:16 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-06 03:44:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 22 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 17, redundant 11
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6215 ms, max 189 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:44:32 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-06 03:44:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 38 seconds
Variants: generated 200, build-succeeded 114, build-failed 66, syntax-invalid 11, redundant 9
Fitness: max 1(3), min 0(111), ave 0.026
Test execution time: sum 6492 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:44:48 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-06 03:45:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 54 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 16, redundant 10
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 6673 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:45:04 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-06 03:45:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 13 seconds
Variants: generated 200, build-succeeded 120, build-failed 59, syntax-invalid 14, redundant 7
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7221 ms, max 202 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:45:22 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-06 03:45:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 29 seconds
Variants: generated 200, build-succeeded 110, build-failed 66, syntax-invalid 17, redundant 7
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6489 ms, max 206 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:45:39 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-06 03:45:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 46 seconds
Variants: generated 200, build-succeeded 121, build-failed 52, syntax-invalid 15, redundant 12
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 6982 ms, max 192 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:45:56 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-06 03:46:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 1 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 21, redundant 9
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6097 ms, max 119 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:46:11 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-06 03:46:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 18 seconds
Variants: generated 200, build-succeeded 119, build-failed 54, syntax-invalid 23, redundant 4
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6829 ms, max 126 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:46:28 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-06 03:49:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 35 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 16, redundant 12
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 186386 ms, max 180084 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:49:44 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-06 03:50:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 51 seconds
Variants: generated 200, build-succeeded 118, build-failed 53, syntax-invalid 23, redundant 6
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6743 ms, max 124 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:50:01 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-06 03:50:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 7 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 30, redundant 6
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5833 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:50:17 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-06 03:50:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 24 seconds
Variants: generated 200, build-succeeded 109, build-failed 64, syntax-invalid 21, redundant 6
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6304 ms, max 120 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:50:33 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-06 03:50:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 41 seconds
Variants: generated 200, build-succeeded 123, build-failed 53, syntax-invalid 15, redundant 9
Fitness: max 1(2), min 0(121), ave 0.016
Test execution time: sum 6927 ms, max 126 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:50:51 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-06 03:51:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 58 seconds
Variants: generated 200, build-succeeded 108, build-failed 61, syntax-invalid 26, redundant 5
Fitness: max 1(2), min 0(106), ave 0.019
Test execution time: sum 6318 ms, max 146 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:51:08 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-06 03:51:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 16 seconds
Variants: generated 200, build-succeeded 118, build-failed 55, syntax-invalid 15, redundant 12
Fitness: max 1(5), min 0(113), ave 0.042
Test execution time: sum 7092 ms, max 195 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:51:26 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-06 03:51:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 34 seconds
Variants: generated 200, build-succeeded 123, build-failed 58, syntax-invalid 14, redundant 5
Fitness: max 1(4), min 0(119), ave 0.033
Test execution time: sum 7252 ms, max 168 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:51:44 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-06 03:52:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 51 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 18, redundant 7
Fitness: max 1(2), min 0(113), ave 0.017
Test execution time: sum 6518 ms, max 114 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:52:01 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-06 03:52:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 9 seconds
Variants: generated 200, build-succeeded 116, build-failed 59, syntax-invalid 18, redundant 7
Fitness: max 1(1), min 0(115), ave 0.009
Test execution time: sum 6754 ms, max 187 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:52:19 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-06 03:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 28 seconds
Variants: generated 200, build-succeeded 115, build-failed 65, syntax-invalid 14, redundant 6
Fitness: max 1(5), min 0(110), ave 0.043
Test execution time: sum 6834 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:52:37 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-06 03:55:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 45 seconds
Variants: generated 200, build-succeeded 105, build-failed 70, syntax-invalid 22, redundant 3
Fitness: max 1(2), min 0(103), ave 0.019
Test execution time: sum 185948 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 03:55:55 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-06 03:59:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 3 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 20, redundant 7
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 186873 ms, max 180071 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:59:13 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-06 03:59:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 21 seconds
Variants: generated 200, build-succeeded 115, build-failed 56, syntax-invalid 22, redundant 7
Fitness: max 1(4), min 0(111), ave 0.035
Test execution time: sum 6483 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 03:59:30 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-06 04:02:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 40 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 19, redundant 6
Fitness: max 1(2), min 0(113), ave 0.017
Test execution time: sum 186776 ms, max 180064 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:02:49 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-06 04:06:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 57 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 20, redundant 13
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 186682 ms, max 180062 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:06:07 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-06 04:12:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 17 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 19, redundant 7
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 366905 ms, max 180070 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:12:27 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-06 04:15:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 36 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 21, redundant 8
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 186391 ms, max 180055 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:15:46 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-06 04:19:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 54 seconds
Variants: generated 200, build-succeeded 103, build-failed 52, syntax-invalid 35, redundant 10
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 185994 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:19:04 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-06 04:19:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 15 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 19, redundant 5
Fitness: max 1(3), min 0(110), ave 0.027
Test execution time: sum 6574 ms, max 193 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:19:24 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-06 04:19:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 32 seconds
Variants: generated 200, build-succeeded 89, build-failed 65, syntax-invalid 39, redundant 7
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 4976 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:19:42 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-06 04:20:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 50 seconds
Variants: generated 200, build-succeeded 87, build-failed 57, syntax-invalid 48, redundant 8
Fitness: max 1(1), min 0(86), ave 0.011
Test execution time: sum 5122 ms, max 154 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:20:00 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-06 04:20:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 8 seconds
Variants: generated 200, build-succeeded 93, build-failed 53, syntax-invalid 42, redundant 12
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5229 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:20:17 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-06 04:23:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 26 seconds
Variants: generated 200, build-succeeded 104, build-failed 55, syntax-invalid 35, redundant 6
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 185889 ms, max 180066 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:23:36 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-06 04:23:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 44 seconds
Variants: generated 200, build-succeeded 88, build-failed 48, syntax-invalid 45, redundant 19
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 5094 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:23:54 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-06 04:27:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 2 seconds
Variants: generated 200, build-succeeded 98, build-failed 50, syntax-invalid 42, redundant 10
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 185574 ms, max 180070 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:27:12 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-06 04:27:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 21 seconds
Variants: generated 200, build-succeeded 93, build-failed 64, syntax-invalid 36, redundant 7
Fitness: max 1(1), min 0(92), ave 0.011
Test execution time: sum 5311 ms, max 146 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:27:31 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-06 04:27:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 41 seconds
Variants: generated 200, build-succeeded 103, build-failed 53, syntax-invalid 30, redundant 14
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6018 ms, max 192 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:27:50 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-06 04:28:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 0 seconds
Variants: generated 200, build-succeeded 97, build-failed 63, syntax-invalid 31, redundant 9
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5743 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:28:10 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-06 04:28:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 20 seconds
Variants: generated 200, build-succeeded 81, build-failed 62, syntax-invalid 50, redundant 7
Fitness: max 0(81), min 0(81), ave 0
Test execution time: sum 4754 ms, max 140 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:28:30 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-06 04:28:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 39 seconds
Variants: generated 200, build-succeeded 81, build-failed 64, syntax-invalid 44, redundant 11
Fitness: max 0(81), min 0(81), ave 0
Test execution time: sum 4819 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:28:48 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-06 04:29:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 59 seconds
Variants: generated 200, build-succeeded 95, build-failed 67, syntax-invalid 36, redundant 2
Fitness: max 1(1), min 0(94), ave 0.011
Test execution time: sum 5504 ms, max 116 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:29:09 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-06 04:29:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 19 seconds
Variants: generated 200, build-succeeded 93, build-failed 57, syntax-invalid 45, redundant 5
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5398 ms, max 138 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:29:29 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-06 04:29:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 39 seconds
Variants: generated 200, build-succeeded 100, build-failed 53, syntax-invalid 34, redundant 13
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 5871 ms, max 115 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:29:49 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-06 04:30:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 0 seconds
Variants: generated 200, build-succeeded 105, build-failed 54, syntax-invalid 33, redundant 8
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5879 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:30:10 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-06 04:30:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 seconds
Variants: generated 200, build-succeeded 110, build-failed 56, syntax-invalid 26, redundant 8
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6310 ms, max 196 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:30:31 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-06 04:30:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 seconds
Variants: generated 200, build-succeeded 101, build-failed 62, syntax-invalid 32, redundant 5
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5810 ms, max 118 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:30:53 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-06 04:31:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 4 seconds
Variants: generated 200, build-succeeded 88, build-failed 59, syntax-invalid 50, redundant 3
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 4875 ms, max 116 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:31:13 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-06 04:31:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 23 seconds
Variants: generated 200, build-succeeded 70, build-failed 69, syntax-invalid 53, redundant 8
Fitness: max 0(70), min 0(70), ave 0
Test execution time: sum 4144 ms, max 137 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:31:32 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-06 04:31:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 43 seconds
Variants: generated 200, build-succeeded 89, build-failed 59, syntax-invalid 43, redundant 9
Fitness: max 1(2), min 0(87), ave 0.022
Test execution time: sum 5132 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:31:52 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-06 04:32:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 5 seconds
Variants: generated 200, build-succeeded 104, build-failed 58, syntax-invalid 31, redundant 7
Fitness: max 1(1), min 0(103), ave 0.01
Test execution time: sum 5894 ms, max 76 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 04:32:15 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-06 04:32:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 29 seconds
Variants: generated 200, build-succeeded 108, build-failed 50, syntax-invalid 32, redundant 10
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6427 ms, max 177 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:32:38 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-06 04:33:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 51 seconds
Variants: generated 200, build-succeeded 98, build-failed 54, syntax-invalid 32, redundant 16
Fitness: max 1(1), min 0(97), ave 0.01
Test execution time: sum 5903 ms, max 202 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:33:01 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-06 04:33:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 14 seconds
Variants: generated 200, build-succeeded 103, build-failed 65, syntax-invalid 26, redundant 6
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 6170 ms, max 151 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:33:23 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-06 04:33:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 37 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 20, redundant 12
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 6730 ms, max 196 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:33:47 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-06 04:34:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 0 seconds
Variants: generated 200, build-succeeded 99, build-failed 66, syntax-invalid 30, redundant 5
Fitness: max 1(2), min 0(97), ave 0.02
Test execution time: sum 5723 ms, max 130 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 04:34:10 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-06 04:34:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 23 seconds
Variants: generated 200, build-succeeded 100, build-failed 60, syntax-invalid 31, redundant 9
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 5928 ms, max 143 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:34:33 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-06 04:34:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 45 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 38, redundant 8
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5936 ms, max 182 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:34:54 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-06 04:35:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 7 seconds
Variants: generated 200, build-succeeded 92, build-failed 60, syntax-invalid 37, redundant 11
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5425 ms, max 164 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:35:17 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-06 04:35:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 30 seconds
Variants: generated 200, build-succeeded 96, build-failed 57, syntax-invalid 32, redundant 15
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5886 ms, max 182 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:35:40 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-06 04:36:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 52 seconds
Variants: generated 200, build-succeeded 92, build-failed 63, syntax-invalid 38, redundant 7
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5539 ms, max 177 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:36:02 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-06 04:36:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 14 seconds
Variants: generated 200, build-succeeded 92, build-failed 50, syntax-invalid 45, redundant 13
Fitness: max 1(1), min 0(91), ave 0.011
Test execution time: sum 5369 ms, max 76 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:36:23 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-06 04:36:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 38 seconds
Variants: generated 200, build-succeeded 102, build-failed 55, syntax-invalid 34, redundant 9
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6158 ms, max 140 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:36:47 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-06 04:37:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 3 seconds
Variants: generated 200, build-succeeded 112, build-failed 52, syntax-invalid 26, redundant 10
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6596 ms, max 114 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:37:12 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-06 04:37:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 27 seconds
Variants: generated 200, build-succeeded 96, build-failed 61, syntax-invalid 32, redundant 11
Fitness: max 1(1), min 0(95), ave 0.01
Test execution time: sum 5775 ms, max 148 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:37:37 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-06 04:38:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 50 seconds
Variants: generated 200, build-succeeded 88, build-failed 64, syntax-invalid 40, redundant 8
Fitness: max 1(2), min 0(86), ave 0.023
Test execution time: sum 5420 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:38:00 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-06 04:38:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 14 seconds
Variants: generated 200, build-succeeded 94, build-failed 63, syntax-invalid 37, redundant 6
Fitness: max 1(4), min 0(90), ave 0.043
Test execution time: sum 5615 ms, max 121 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 04:38:24 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-06 04:38:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 39 seconds
Variants: generated 200, build-succeeded 109, build-failed 57, syntax-invalid 22, redundant 12
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6689 ms, max 203 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:38:49 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-06 04:39:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 5 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 25, redundant 12
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6098 ms, max 105 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:39:15 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-06 04:39:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 30 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 21, redundant 11
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6509 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:39:40 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-06 04:40:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 55 seconds
Variants: generated 200, build-succeeded 109, build-failed 54, syntax-invalid 29, redundant 8
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6668 ms, max 213 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:40:05 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-06 04:40:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 21 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 20, redundant 9
Fitness: max 1(2), min 0(110), ave 0.018
Test execution time: sum 6785 ms, max 137 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:40:31 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-06 04:40:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 46 seconds
Variants: generated 200, build-succeeded 96, build-failed 65, syntax-invalid 34, redundant 5
Fitness: max 1(2), min 0(94), ave 0.021
Test execution time: sum 5624 ms, max 145 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:40:55 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-06 04:41:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 10 seconds
Variants: generated 200, build-succeeded 100, build-failed 62, syntax-invalid 27, redundant 11
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6064 ms, max 209 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:41:19 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-06 04:41:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 34 seconds
Variants: generated 200, build-succeeded 99, build-failed 64, syntax-invalid 31, redundant 6
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6089 ms, max 196 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 04:41:44 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-06 04:42:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 59 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 28, redundant 7
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6295 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:42:09 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-06 04:42:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 26 seconds
Variants: generated 200, build-succeeded 112, build-failed 61, syntax-invalid 17, redundant 10
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 6513 ms, max 123 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:42:35 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-06 04:43:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 50 seconds
Variants: generated 200, build-succeeded 94, build-failed 67, syntax-invalid 30, redundant 9
Fitness: max 1(7), min 0(87), ave 0.074
Test execution time: sum 5447 ms, max 128 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:43:00 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-06 04:43:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 16 seconds
Variants: generated 200, build-succeeded 101, build-failed 61, syntax-invalid 31, redundant 7
Fitness: max 1(1), min 0(100), ave 0.01
Test execution time: sum 6036 ms, max 199 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:43:26 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-06 04:43:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 41 seconds
Variants: generated 200, build-succeeded 93, build-failed 55, syntax-invalid 36, redundant 16
Fitness: max 1(8), min 0(85), ave 0.086
Test execution time: sum 5529 ms, max 198 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:43:51 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-06 04:44:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 4 seconds
Variants: generated 180, build-succeeded 81, build-failed 64, syntax-invalid 29, redundant 6
Fitness: max 1(6), min 0(75), ave 0.074
Test execution time: sum 4779 ms, max 122 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 04:44:14 [main] [INFO]  KGenProgMain - GA stopped
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v141)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v141)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v141)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v141)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:17 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v277)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v277)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v277)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v277)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v277)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v279)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v279)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v279)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v279)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v279)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2115)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2115)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,6 +171,10 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+			{
+				g0Positive = g0 >= 0;
+				nextAction = EventHandler.CONTINUE;
+			}
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2115)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2115)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2115)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v2120)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3076)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -113,7 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    dirtyState = true;
 
     finalized         = false;
     this.forward      = forward;
@@ -208,7 +208,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3076)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3076)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3076)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3076)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3076)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3085)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -113,7 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    dirtyState = true;
 
     finalized         = false;
     this.forward      = forward;
@@ -208,7 +208,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3085)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3085)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3085)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3085)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3085)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -113,7 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    dirtyState = true;
 
     finalized         = false;
     this.forward      = forward;
@@ -208,7 +208,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (Math.abs(delta) > tolerance) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3106)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedState = null;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -106,7 +106,7 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
+    interpolatedState = null;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3106)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3106)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3106)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3106)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3106)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3176)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedState = null;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -106,7 +106,7 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
+    interpolatedState = null;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3176)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3176)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3176)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3176)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3176)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3190)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedState = null;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -106,7 +106,7 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
+    interpolatedState = null;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3190)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3190)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3190)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3190)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3190)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3193)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedState = null;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -106,7 +106,7 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
+    interpolatedState = null;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -208,7 +208,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -270,7 +271,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3193)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3193)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3193)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3193)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3193)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3570)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3570)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3570)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3570)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3570)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
     }
 
     /**
@@ -155,7 +155,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3570)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3868)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -208,7 +208,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -270,7 +271,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3868)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3868)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3868)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3868)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3868)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v3868)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedState = null;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4669)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedState = null;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4669)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4669)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4669)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4669)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4669)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4669)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4703)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,8 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedState = null;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -208,7 +207,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4703)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4703)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4703)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4703)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v4703)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6925)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +207,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6925)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6925)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,8 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -247,7 +245,18 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            final UnivariateRealFunction f = new UnivariateRealFunction() {
+				public double value(final double t) throws FunctionEvaluationException {
+					try {
+						interpolator.setInterpolatedTime(t);
+						return handler.g(t, interpolator.getInterpolatedState());
+					} catch (DerivativeException e) {
+						throw new FunctionEvaluationException(e, t);
+					} catch (EventException e) {
+						throw new FunctionEvaluationException(e, t);
+					}
+				}
+			};
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6925)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6925)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6925)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6955)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -208,7 +207,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6955)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6955)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +174,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -247,7 +246,18 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            final UnivariateRealFunction f = new UnivariateRealFunction() {
+				public double value(final double t) throws FunctionEvaluationException {
+					try {
+						interpolator.setInterpolatedTime(t);
+						return handler.g(t, interpolator.getInterpolatedState());
+					} catch (DerivativeException e) {
+						throw new FunctionEvaluationException(e, t);
+					} catch (EventException e) {
+						throw new FunctionEvaluationException(e, t);
+					}
+				}
+			};
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6955)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6955)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6955)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v6955)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7119)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7119)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7119)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,8 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7119)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7119)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7119)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7119)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -274,6 +272,8 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -247,7 +247,18 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            final UnivariateRealFunction f = new UnivariateRealFunction() {
+				public double value(final double t) throws FunctionEvaluationException {
+					try {
+						interpolator.setInterpolatedTime(t);
+						return handler.g(t, interpolator.getInterpolatedState());
+					} catch (DerivativeException e) {
+						throw new FunctionEvaluationException(e, t);
+					} catch (EventException e) {
+						throw new FunctionEvaluationException(e, t);
+					}
+				}
+			};
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7310)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,8 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedState = null;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,14 +106,11 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7310)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7310)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7310)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7310)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7310)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,8 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedState = null;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -106,7 +105,7 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
+    interpolatedState = null;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -208,7 +207,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -169,7 +168,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7337)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -113,7 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    dirtyState = true;
 
     finalized         = false;
     this.forward      = forward;
@@ -208,7 +207,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7337)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7337)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7337)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7337)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7337)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7337)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7361)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,8 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedState = null;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7361)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7361)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7361)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7361)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7361)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7361)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +167,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -208,7 +205,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +241,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,8 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7429)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7429)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7429)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7429)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7429)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7429)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7429)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7541)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -208,7 +207,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7541)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7541)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7541)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7541)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7541)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7541)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7545)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -274,6 +272,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7545)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7545)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,11 +174,13 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+                pendingEvent = false;
+				// evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7545)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7545)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7545)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7545)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7565)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -208,7 +205,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +241,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7565)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7565)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7565)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7565)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7565)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7565)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7722)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -208,7 +208,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +245,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7722)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7722)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,11 +98,9 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
+        increasing = true;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7722)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7722)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7722)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7722)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7726)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7726)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7726)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,7 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
+        increasing = true;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7726)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7726)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7726)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7726)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,12 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
-                x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,13 +276,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -282,7 +274,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8120)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +206,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8120)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8120)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8120)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8120)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8120)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8120)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,13 +232,8 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
-            }
+            if (Math.abs(y1) <= functionValueAccuracy)
+				this.iterationCount = iterationCount;
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8126)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8126)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8126)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,11 +98,8 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
+        increasing = true;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8126)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8126)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8126)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8186)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -208,7 +207,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8186)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8186)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8186)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8186)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8186)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +139,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8186)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8198)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8198)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8198)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8198)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8198)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8198)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,7 +139,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:18 [main] [INFO]  PatchLogExporter - patch (v8198)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8304)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8304)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8304)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -323,7 +321,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8304)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8304)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8304)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8312)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8312)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8312)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8312)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8312)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8312)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8312)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,13 +232,8 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
-            }
+            if (Math.abs(y1) <= functionValueAccuracy)
+				this.iterationCount = iterationCount;
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8601)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -116,7 +113,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +204,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8601)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8601)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8601)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8601)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8601)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8601)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8660)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -116,7 +113,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +204,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8660)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8660)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8660)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8660)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8660)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8709)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +206,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +242,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8709)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8709)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8709)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8709)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8709)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,7 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8709)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -282,7 +282,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,7 +114,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +205,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +241,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -274,6 +271,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,7 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +206,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -274,6 +273,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -282,7 +280,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
@@ -162,7 +164,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8838)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -240,6 +240,7 @@
                 return result;
             }
             double dx = x2 - x1;
+			resultComputed = true;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,7 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +206,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -274,6 +273,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
@@ -162,7 +164,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v8840)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -240,6 +240,7 @@
                 return result;
             }
             double dx = x2 - x1;
+			resultComputed = true;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9555)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +207,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9555)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9555)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,11 +98,8 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9555)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9555)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9555)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9555)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i < maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -240,6 +240,7 @@
                 return result;
             }
             double dx = x2 - x1;
+			resultComputed = true;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9908)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,12 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -116,7 +113,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +204,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -274,6 +272,8 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9908)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9908)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9908)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9908)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9908)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9958)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,7 +114,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -274,6 +271,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9958)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9958)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9958)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9958)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9958)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9958)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9982)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +207,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9982)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9982)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -323,7 +321,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9982)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9982)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9982)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v9982)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -231,6 +231,7 @@
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
+				clearResult();
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,12 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
@@ -116,7 +114,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +205,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -274,6 +273,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		interpolatedTime = Double.NaN;
       }
 
       return interpolatedState;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v10276)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v11246)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -208,7 +206,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v11246)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v11246)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -323,7 +321,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v11246)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v11246)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v11246)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v12206)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +104,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -116,7 +112,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -169,7 +164,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -244,6 +238,7 @@
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
       dirtyState       = true;
+	h = currentTime - previousTime;
   }
 
   /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v12206)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v12206)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v12206)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +174,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v12206)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v12206)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v12206)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13928)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13928)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13928)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13928)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,8 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13928)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13928)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13928)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
@@ -162,7 +167,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13959)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13959)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13959)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,9 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13959)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13959)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13959)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,12 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
@@ -162,7 +168,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v13959)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -267,7 +259,9 @@
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
-                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+                    resultComputed = true;
+					resultComputed = true;
+					p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14152)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14152)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14152)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14152)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14152)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14152)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,13 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14152)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					double m;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14490)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,7 +114,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -208,7 +205,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +242,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14490)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14490)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14490)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -282,7 +280,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -323,7 +321,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14490)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14490)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14490)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +103,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -116,8 +111,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +201,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14766)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,6 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14884)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +103,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -117,7 +112,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +202,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -269,12 +264,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		h = Double.NaN;
 
       return interpolatedState;
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14884)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14884)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14884)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14884)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14884)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v14884)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				y2 = y0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -267,7 +260,8 @@
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
-                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+                    resultComputed = true;
+					p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15027)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -108,7 +106,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +269,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15027)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15027)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15027)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15027)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15027)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15027)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i <= maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15093)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -108,7 +106,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +269,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15093)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15093)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15093)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15093)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15093)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v15093)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,8 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,11 +98,8 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +210,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = g0 >= 0;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,13 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16833)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,8 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16833)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16833)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,11 +98,8 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v16833)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,13 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17025)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17025)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17025)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        pendingEventTime = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17025)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17025)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17025)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,13 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17025)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -267,7 +267,8 @@
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
-                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+                    resultComputed = true;
+					p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17085)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17085)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17085)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        pendingEventTime = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17085)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17085)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17085)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,13 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17085)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -267,7 +267,8 @@
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
-                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+                    resultComputed = true;
+					p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17208)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17208)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17208)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17208)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17208)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17208)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17217)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17217)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17217)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17217)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17217)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17217)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17274)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17274)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17274)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17274)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17274)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17274)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17274)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,14 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            {
+				x0 = x1;
+				x1 = x2;
+				x2 = x0;
+				y0 = y1;
+				y1 = y2;
+				y2 = y0;
+			}
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18246)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,12 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18246)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18246)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18246)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18246)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18246)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18246)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18250)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,12 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18250)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18250)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18250)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18250)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18250)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18408)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +207,13 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +247,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18408)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18408)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18408)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18408)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18408)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -140,6 +139,14 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18408)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18458)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +207,13 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +247,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18458)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18458)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18458)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18458)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18458)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -140,6 +139,14 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v18458)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -275,14 +275,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					functionValueAccuracy = defaultFunctionValueAccuracy;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19334)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +206,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -218,8 +220,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19334)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19334)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19334)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19334)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19334)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19334)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,13 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19510)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19510)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19510)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19510)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19510)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19510)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19510)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,7 +139,12 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19526)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,14 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19526)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19526)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19526)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19526)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19526)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19526)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +139,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19537)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +206,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +244,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19537)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19537)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +76,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19537)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,8 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        pendingEventTime = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +174,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19537)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19537)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19537)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +139,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19558)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -108,7 +106,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19558)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19558)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19558)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -213,6 +215,10 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					{
+						g0Positive = g0 >= 0;
+						nextAction = EventHandler.CONTINUE;
+					}
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19558)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19558)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:19 [main] [INFO]  PatchLogExporter - patch (v19558)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,7 +138,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,12 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -218,8 +221,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -242,7 +243,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -323,7 +322,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19573)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +138,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19583)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +207,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +245,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19583)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19583)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19583)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        pendingEventTime = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19583)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19583)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19583)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +139,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19587)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,11 +89,9 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
@@ -208,7 +206,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +244,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19587)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19587)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19587)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +174,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -323,7 +324,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19587)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19587)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19587)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,7 +138,10 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +205,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +76,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19905)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +241,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19905)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19905)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19905)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
+		nextAction = EventHandler.CONTINUE;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19905)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19905)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19905)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
@@ -162,7 +167,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19907)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,13 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +275,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19907)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19907)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19907)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19907)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19907)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19907)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19915)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +241,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19915)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19915)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19915)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +174,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19915)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19915)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19915)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +139,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19934)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +206,10 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -216,7 +217,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    finalized = false;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -242,8 +244,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19934)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19934)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19934)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+		nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -323,7 +324,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19934)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19934)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19934)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +139,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19951)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +204,12 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +243,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19951)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19951)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19951)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +174,9 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -323,7 +325,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19951)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19951)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19951)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19981)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -108,7 +106,6 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -170,7 +166,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -208,7 +204,13 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19981)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19981)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19981)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+		nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19981)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19981)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19981)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19988)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -108,7 +106,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -208,7 +206,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +244,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19988)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19988)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+		nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19988)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19988)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19988)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,12 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
@@ -162,7 +168,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19998)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,8 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +206,14 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +277,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19998)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19998)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19998)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19998)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19998)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v19998)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,6 +139,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +107,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -208,7 +207,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,15 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20129)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -108,7 +106,6 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -208,7 +205,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20129)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20129)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20129)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20129)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -108,7 +106,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +241,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +76,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -175,6 +174,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -140,7 +139,9 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.resultComputed = true;
     }
 
     /**
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20165)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,12 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
@@ -287,7 +288,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20165)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20165)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20165)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20165)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20165)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20165)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,11 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
     }
 
     /**
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20173)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,11 +89,9 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
@@ -108,7 +106,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -208,7 +206,12 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +275,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20173)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20173)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20173)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        g0Positive = true;
+        t0 = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			pendingEvent = false;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -323,7 +324,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20173)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20173)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20173)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,8 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20180)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -179,7 +178,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +206,11 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	interpolatedDerivatives = null;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20180)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20180)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20180)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -323,7 +322,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20180)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20180)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 04:44:20 [main] [INFO]  PatchLogExporter - patch (v20180)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,6 +140,12 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.resultComputed = true;
     }
 
@@ -162,7 +168,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 04:44:20 [main] [INFO]  KGenProgMain - Summary
Reached generation = 102
Generated variants = 20180
Syntax valid variants = 17600
Build succeeded variants = 10305
Time elapsed = 1 hours 14 minutes 10 seconds
Exit status = SUCCESS
