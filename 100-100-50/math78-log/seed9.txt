2023-08-08 00:07:38 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-08 00:07:38 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-08 00:07:38 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-08 00:07:38 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 9 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-08 00:07:57 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-08 00:07:57 [main] [INFO]  KGenProgMain - GA started
2023-08-08 00:07:57 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-08 00:08:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 100, build-succeeded 19, build-failed 59, syntax-invalid 12, redundant 10
Fitness: max 1(1), min 0(18), ave 0.053
Test execution time: sum 2632 ms, max 244 ms, min 68 ms
----------------------------------------------------------------

2023-08-08 00:08:09 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-08 00:08:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, build-succeeded 22, build-failed 63, syntax-invalid 8, redundant 7
Fitness: max 0(22), min 0(22), ave 0
Test execution time: sum 1726 ms, max 102 ms, min 58 ms
----------------------------------------------------------------

2023-08-08 00:08:14 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-08 00:08:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 seconds
Variants: generated 200, build-succeeded 33, build-failed 65, syntax-invalid 8, redundant 94
Fitness: max 0(33), min 0(33), ave 0
Test execution time: sum 2217 ms, max 113 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 00:08:22 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-08 00:08:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 seconds
Variants: generated 200, build-succeeded 70, build-failed 56, syntax-invalid 9, redundant 65
Fitness: max 0(70), min 0(70), ave 0
Test execution time: sum 4206 ms, max 139 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:08:33 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-08 00:08:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 seconds
Variants: generated 200, build-succeeded 62, build-failed 67, syntax-invalid 9, redundant 62
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3970 ms, max 241 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 00:08:43 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-08 00:08:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 seconds
Variants: generated 200, build-succeeded 71, build-failed 69, syntax-invalid 8, redundant 52
Fitness: max 1(3), min 0(68), ave 0.042
Test execution time: sum 4363 ms, max 185 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:08:54 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-08 00:09:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 8 seconds
Variants: generated 200, build-succeeded 85, build-failed 65, syntax-invalid 4, redundant 46
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 4944 ms, max 147 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:09:06 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-08 00:09:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 21 seconds
Variants: generated 200, build-succeeded 93, build-failed 66, syntax-invalid 3, redundant 38
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5279 ms, max 133 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:09:18 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-08 00:09:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 33 seconds
Variants: generated 200, build-succeeded 103, build-failed 55, syntax-invalid 16, redundant 26
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 5947 ms, max 131 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:09:31 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-08 00:09:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 46 seconds
Variants: generated 200, build-succeeded 91, build-failed 66, syntax-invalid 11, redundant 32
Fitness: max 1(1), min 0(90), ave 0.011
Test execution time: sum 5506 ms, max 135 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:09:44 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-08 00:09:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 59 seconds
Variants: generated 200, build-succeeded 95, build-failed 70, syntax-invalid 6, redundant 29
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5350 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:09:57 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-08 00:10:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 12 seconds
Variants: generated 200, build-succeeded 105, build-failed 56, syntax-invalid 15, redundant 24
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6119 ms, max 167 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:10:10 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-08 00:10:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 25 seconds
Variants: generated 200, build-succeeded 93, build-failed 64, syntax-invalid 16, redundant 27
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5288 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:10:23 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-08 00:10:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 39 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 14, redundant 15
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6029 ms, max 156 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:10:37 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-08 00:10:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 53 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 17, redundant 19
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6545 ms, max 258 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:10:51 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-08 00:14:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 8 seconds
Variants: generated 200, build-succeeded 99, build-failed 60, syntax-invalid 20, redundant 21
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 185818 ms, max 180061 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:14:06 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-08 00:14:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 21 seconds
Variants: generated 200, build-succeeded 103, build-failed 66, syntax-invalid 13, redundant 18
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 5757 ms, max 135 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:14:19 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-08 00:17:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 35 seconds
Variants: generated 200, build-succeeded 91, build-failed 63, syntax-invalid 35, redundant 11
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 185210 ms, max 180054 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:17:33 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-08 00:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 48 seconds
Variants: generated 200, build-succeeded 99, build-failed 55, syntax-invalid 27, redundant 19
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 5377 ms, max 128 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:17:46 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-08 00:18:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 2 seconds
Variants: generated 200, build-succeeded 94, build-failed 72, syntax-invalid 24, redundant 10
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5390 ms, max 144 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:18:00 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-08 00:18:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 17 seconds
Variants: generated 200, build-succeeded 95, build-failed 64, syntax-invalid 28, redundant 13
Fitness: max 1(1), min 0(94), ave 0.011
Test execution time: sum 5494 ms, max 206 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:18:15 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-08 00:18:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 31 seconds
Variants: generated 200, build-succeeded 105, build-failed 62, syntax-invalid 17, redundant 16
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5729 ms, max 143 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:18:29 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-08 00:18:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 45 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 27, redundant 17
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5379 ms, max 136 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:18:43 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-08 00:18:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 59 seconds
Variants: generated 200, build-succeeded 103, build-failed 55, syntax-invalid 25, redundant 17
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 5689 ms, max 209 ms, min 48 ms
----------------------------------------------------------------

2023-08-08 00:18:57 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-08 00:19:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 13 seconds
Variants: generated 200, build-succeeded 94, build-failed 54, syntax-invalid 23, redundant 29
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5058 ms, max 138 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:19:10 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-08 00:19:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 27 seconds
Variants: generated 200, build-succeeded 94, build-failed 63, syntax-invalid 31, redundant 12
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5391 ms, max 218 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:19:25 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-08 00:19:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 41 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 23, redundant 12
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5767 ms, max 131 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:19:39 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-08 00:19:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 56 seconds
Variants: generated 200, build-succeeded 103, build-failed 53, syntax-invalid 28, redundant 16
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 5840 ms, max 193 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:19:54 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-08 00:23:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 12 seconds
Variants: generated 200, build-succeeded 104, build-failed 59, syntax-invalid 31, redundant 6
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 186126 ms, max 180060 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:23:10 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-08 00:23:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 27 seconds
Variants: generated 200, build-succeeded 100, build-failed 51, syntax-invalid 37, redundant 12
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 5719 ms, max 143 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:23:25 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-08 00:23:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 43 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 23, redundant 13
Fitness: max 1(2), min 0(105), ave 0.019
Test execution time: sum 5940 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:23:41 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-08 00:23:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 0 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 33, redundant 2
Fitness: max 1(3), min 0(98), ave 0.03
Test execution time: sum 5718 ms, max 149 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:23:58 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-08 00:27:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 15 seconds
Variants: generated 200, build-succeeded 95, build-failed 63, syntax-invalid 33, redundant 9
Fitness: max 1(1), min 0(94), ave 0.011
Test execution time: sum 185493 ms, max 180074 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:27:13 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-08 00:27:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 31 seconds
Variants: generated 200, build-succeeded 97, build-failed 57, syntax-invalid 30, redundant 16
Fitness: max 1(1), min 0(96), ave 0.01
Test execution time: sum 5622 ms, max 182 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:27:29 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-08 00:30:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 48 seconds
Variants: generated 200, build-succeeded 94, build-failed 62, syntax-invalid 38, redundant 6
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 185422 ms, max 180058 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:30:46 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-08 00:34:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 4 seconds
Variants: generated 200, build-succeeded 89, build-failed 62, syntax-invalid 41, redundant 8
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 185321 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:34:02 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-08 00:34:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 21 seconds
Variants: generated 200, build-succeeded 97, build-failed 64, syntax-invalid 25, redundant 14
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5828 ms, max 189 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:34:19 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-08 00:34:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 38 seconds
Variants: generated 200, build-succeeded 100, build-failed 63, syntax-invalid 28, redundant 9
Fitness: max 1(1), min 0(99), ave 0.01
Test execution time: sum 5842 ms, max 211 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:34:36 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-08 00:37:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 54 seconds
Variants: generated 200, build-succeeded 100, build-failed 59, syntax-invalid 29, redundant 12
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 185855 ms, max 180067 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:37:52 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-08 00:38:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 11 seconds
Variants: generated 200, build-succeeded 92, build-failed 62, syntax-invalid 34, redundant 12
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5481 ms, max 192 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:38:09 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-08 00:38:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 29 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 26, redundant 9
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5866 ms, max 141 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:38:27 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-08 00:38:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 47 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 22, redundant 10
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6328 ms, max 175 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:38:45 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-08 00:39:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 4 seconds
Variants: generated 200, build-succeeded 91, build-failed 63, syntax-invalid 34, redundant 12
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5092 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:39:02 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-08 00:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 23 seconds
Variants: generated 200, build-succeeded 110, build-failed 56, syntax-invalid 23, redundant 11
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6322 ms, max 140 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:39:21 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-08 00:39:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 41 seconds
Variants: generated 200, build-succeeded 97, build-failed 63, syntax-invalid 30, redundant 10
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5716 ms, max 189 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:39:39 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-08 00:39:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 0 seconds
Variants: generated 200, build-succeeded 98, build-failed 62, syntax-invalid 29, redundant 11
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5612 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:39:58 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-08 00:40:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 18 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 24, redundant 6
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5880 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:40:16 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-08 00:43:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 38 seconds
Variants: generated 200, build-succeeded 107, build-failed 55, syntax-invalid 26, redundant 12
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 186188 ms, max 180064 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:43:36 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-08 00:43:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 57 seconds
Variants: generated 200, build-succeeded 98, build-failed 63, syntax-invalid 32, redundant 7
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5460 ms, max 142 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:43:55 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-08 00:44:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 16 seconds
Variants: generated 200, build-succeeded 102, build-failed 65, syntax-invalid 23, redundant 10
Fitness: max 1(1), min 0(101), ave 0.01
Test execution time: sum 5855 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:44:14 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-08 00:44:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 36 seconds
Variants: generated 200, build-succeeded 106, build-failed 55, syntax-invalid 30, redundant 9
Fitness: max 1(1), min 0(105), ave 0.009
Test execution time: sum 6046 ms, max 201 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:44:34 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-08 00:44:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 56 seconds
Variants: generated 200, build-succeeded 102, build-failed 62, syntax-invalid 26, redundant 10
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5668 ms, max 114 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:44:54 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-08 00:45:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 17 seconds
Variants: generated 200, build-succeeded 101, build-failed 63, syntax-invalid 22, redundant 14
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5616 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:45:15 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-08 00:45:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 39 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 15, redundant 16
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6548 ms, max 197 ms, min 49 ms
----------------------------------------------------------------

2023-08-08 00:45:37 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-08 00:45:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 58 seconds
Variants: generated 200, build-succeeded 104, build-failed 59, syntax-invalid 21, redundant 16
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 5850 ms, max 75 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:45:56 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-08 00:46:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 19 seconds
Variants: generated 200, build-succeeded 101, build-failed 52, syntax-invalid 37, redundant 10
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5777 ms, max 141 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:46:17 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-08 00:46:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 22, redundant 11
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6186 ms, max 133 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 00:46:39 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-08 00:47:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 3 seconds
Variants: generated 200, build-succeeded 113, build-failed 54, syntax-invalid 21, redundant 12
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6521 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:47:01 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-08 00:47:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 24 seconds
Variants: generated 200, build-succeeded 97, build-failed 60, syntax-invalid 35, redundant 8
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5534 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 00:47:21 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-08 00:47:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 44 seconds
Variants: generated 200, build-succeeded 93, build-failed 68, syntax-invalid 35, redundant 4
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5324 ms, max 150 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:47:42 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-08 00:48:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 5 seconds
Variants: generated 200, build-succeeded 88, build-failed 72, syntax-invalid 33, redundant 7
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 4949 ms, max 144 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:48:03 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-08 00:48:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 27 seconds
Variants: generated 200, build-succeeded 102, build-failed 44, syntax-invalid 35, redundant 19
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5869 ms, max 190 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:48:25 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-08 00:48:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 50 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 25, redundant 9
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6426 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:48:48 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-08 00:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 14 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 19, redundant 9
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6370 ms, max 146 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:49:12 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-08 00:49:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 37 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 23, redundant 5
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6217 ms, max 152 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:49:35 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-08 00:49:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 59 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 16, redundant 12
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6447 ms, max 175 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:49:57 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-08 00:50:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 23 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 21, redundant 10
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 6954 ms, max 182 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:50:21 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-08 00:50:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 47 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 14, redundant 22
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6480 ms, max 134 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:50:45 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-08 00:51:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 9 seconds
Variants: generated 200, build-succeeded 100, build-failed 65, syntax-invalid 26, redundant 9
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 5643 ms, max 81 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:51:06 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-08 00:51:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 32 seconds
Variants: generated 200, build-succeeded 115, build-failed 53, syntax-invalid 17, redundant 15
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6427 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:51:30 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-08 00:51:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 56 seconds
Variants: generated 200, build-succeeded 106, build-failed 65, syntax-invalid 16, redundant 13
Fitness: max 1(1), min 0(105), ave 0.009
Test execution time: sum 6043 ms, max 190 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:51:54 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-08 00:52:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 21 seconds
Variants: generated 200, build-succeeded 114, build-failed 62, syntax-invalid 17, redundant 7
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 6636 ms, max 187 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:52:19 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-08 00:52:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 45 seconds
Variants: generated 200, build-succeeded 97, build-failed 66, syntax-invalid 23, redundant 14
Fitness: max 1(2), min 0(95), ave 0.021
Test execution time: sum 5556 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:52:43 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-08 00:53:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 8 seconds
Variants: generated 200, build-succeeded 95, build-failed 68, syntax-invalid 24, redundant 13
Fitness: max 1(1), min 0(94), ave 0.011
Test execution time: sum 5519 ms, max 196 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:53:06 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-08 00:53:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 29 seconds
Variants: generated 200, build-succeeded 89, build-failed 70, syntax-invalid 29, redundant 12
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 4971 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:53:27 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-08 00:53:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 52 seconds
Variants: generated 200, build-succeeded 90, build-failed 71, syntax-invalid 27, redundant 12
Fitness: max 1(2), min 0(88), ave 0.022
Test execution time: sum 5036 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-08-08 00:53:50 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-08 00:54:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 16 seconds
Variants: generated 200, build-succeeded 95, build-failed 68, syntax-invalid 29, redundant 8
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5390 ms, max 126 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:54:14 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-08 00:54:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 39 seconds
Variants: generated 200, build-succeeded 90, build-failed 68, syntax-invalid 27, redundant 15
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 5271 ms, max 123 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:54:37 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-08 00:55:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 5 seconds
Variants: generated 200, build-succeeded 100, build-failed 68, syntax-invalid 19, redundant 13
Fitness: max 1(4), min 0(96), ave 0.04
Test execution time: sum 5933 ms, max 126 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:55:03 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-08 00:58:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 28 seconds
Variants: generated 200, build-succeeded 98, build-failed 63, syntax-invalid 30, redundant 9
Fitness: max 1(4), min 0(94), ave 0.041
Test execution time: sum 185696 ms, max 180061 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 00:58:26 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-08 00:58:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 52 seconds
Variants: generated 200, build-succeeded 90, build-failed 64, syntax-invalid 30, redundant 16
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 5168 ms, max 147 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:58:50 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-08 00:59:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 17 seconds
Variants: generated 200, build-succeeded 88, build-failed 76, syntax-invalid 29, redundant 7
Fitness: max 1(2), min 0(86), ave 0.023
Test execution time: sum 5217 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 00:59:15 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-08 00:59:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 41 seconds
Variants: generated 200, build-succeeded 94, build-failed 71, syntax-invalid 25, redundant 10
Fitness: max 1(2), min 0(92), ave 0.021
Test execution time: sum 5381 ms, max 128 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 00:59:39 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-08 01:00:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 6 seconds
Variants: generated 200, build-succeeded 92, build-failed 73, syntax-invalid 28, redundant 7
Fitness: max 1(2), min 0(90), ave 0.022
Test execution time: sum 5286 ms, max 122 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:00:04 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-08 01:00:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 32 seconds
Variants: generated 200, build-succeeded 111, build-failed 58, syntax-invalid 20, redundant 11
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6519 ms, max 179 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:00:30 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-08 01:00:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 58 seconds
Variants: generated 200, build-succeeded 95, build-failed 65, syntax-invalid 24, redundant 16
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5641 ms, max 188 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:00:56 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-08 01:01:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 26 seconds
Variants: generated 200, build-succeeded 109, build-failed 69, syntax-invalid 17, redundant 5
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6592 ms, max 201 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:01:24 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-08 01:01:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 54 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 13, redundant 12
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6842 ms, max 193 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:01:52 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-08 01:02:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 20 seconds
Variants: generated 200, build-succeeded 93, build-failed 71, syntax-invalid 33, redundant 3
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5664 ms, max 174 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:02:18 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-08 01:02:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 48 seconds
Variants: generated 200, build-succeeded 105, build-failed 69, syntax-invalid 20, redundant 6
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6272 ms, max 158 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:02:46 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-08 01:03:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 15 seconds
Variants: generated 200, build-succeeded 106, build-failed 66, syntax-invalid 19, redundant 9
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6389 ms, max 177 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:03:13 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-08 01:03:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 43 seconds
Variants: generated 200, build-succeeded 109, build-failed 54, syntax-invalid 19, redundant 18
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6675 ms, max 199 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:03:41 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-08 01:04:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 11 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 19, redundant 8
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 6829 ms, max 193 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:04:09 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-08 01:04:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 38 seconds
Variants: generated 200, build-succeeded 106, build-failed 60, syntax-invalid 13, redundant 21
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6294 ms, max 132 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:04:36 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-08 01:05:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 8 seconds
Variants: generated 200, build-succeeded 124, build-failed 57, syntax-invalid 15, redundant 4
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 7298 ms, max 125 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:05:05 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-08 01:05:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 36 seconds
Variants: generated 200, build-succeeded 105, build-failed 68, syntax-invalid 20, redundant 7
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6151 ms, max 118 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:05:34 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-08 01:06:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 4 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 18, redundant 9
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 6725 ms, max 183 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:06:02 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-08 01:06:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 34 seconds
Variants: generated 200, build-succeeded 116, build-failed 60, syntax-invalid 13, redundant 11
Fitness: max 1(3), min 0(113), ave 0.026
Test execution time: sum 6938 ms, max 114 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:06:32 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-08 01:07:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 3 seconds
Variants: generated 200, build-succeeded 114, build-failed 70, syntax-invalid 8, redundant 8
Fitness: max 1(2), min 0(112), ave 0.018
Test execution time: sum 6870 ms, max 208 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:07:01 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-08 01:07:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 33 seconds
Variants: generated 200, build-succeeded 120, build-failed 54, syntax-invalid 15, redundant 11
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7145 ms, max 183 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:07:31 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-08 01:08:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 seconds
Variants: generated 200, build-succeeded 114, build-failed 68, syntax-invalid 11, redundant 7
Fitness: max 1(3), min 0(111), ave 0.026
Test execution time: sum 6932 ms, max 215 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:08:02 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-08 01:08:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 seconds
Variants: generated 200, build-succeeded 120, build-failed 64, syntax-invalid 5, redundant 11
Fitness: max 1(1), min 0(119), ave 0.008
Test execution time: sum 7062 ms, max 143 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:08:32 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-08 01:09:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 5 seconds
Variants: generated 200, build-succeeded 122, build-failed 61, syntax-invalid 3, redundant 14
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 7201 ms, max 137 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:09:03 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-08 01:09:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 35 seconds
Variants: generated 200, build-succeeded 104, build-failed 73, syntax-invalid 17, redundant 6
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6293 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:09:33 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-08 01:10:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 5 seconds
Variants: generated 200, build-succeeded 119, build-failed 58, syntax-invalid 14, redundant 9
Fitness: max 1(1), min 0(118), ave 0.008
Test execution time: sum 7064 ms, max 137 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:10:03 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-08 01:10:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 35 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 15, redundant 7
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7020 ms, max 204 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:10:33 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-08 01:14:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 6 seconds
Variants: generated 200, build-succeeded 112, build-failed 71, syntax-invalid 8, redundant 9
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 186741 ms, max 180067 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:14:04 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-08 01:17:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 35 seconds
Variants: generated 200, build-succeeded 101, build-failed 78, syntax-invalid 13, redundant 8
Fitness: max 1(2), min 0(99), ave 0.02
Test execution time: sum 186111 ms, max 180066 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:17:33 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-08 01:18:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 6 seconds
Variants: generated 200, build-succeeded 107, build-failed 70, syntax-invalid 12, redundant 11
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6417 ms, max 125 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:18:04 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-08 01:18:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 37 seconds
Variants: generated 200, build-succeeded 109, build-failed 70, syntax-invalid 12, redundant 9
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6559 ms, max 117 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:18:35 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-08 01:19:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 8 seconds
Variants: generated 200, build-succeeded 106, build-failed 67, syntax-invalid 14, redundant 13
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6252 ms, max 136 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:19:06 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-08 01:19:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 40 seconds
Variants: generated 200, build-succeeded 116, build-failed 64, syntax-invalid 11, redundant 9
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7057 ms, max 183 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:19:38 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-08 01:20:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 12 seconds
Variants: generated 200, build-succeeded 109, build-failed 69, syntax-invalid 13, redundant 9
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6394 ms, max 129 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:20:10 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-08 01:20:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 43 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 19, redundant 13
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 6668 ms, max 206 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:20:41 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-08 01:21:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 13 seconds
Variants: generated 200, build-succeeded 95, build-failed 72, syntax-invalid 23, redundant 10
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5807 ms, max 188 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:21:11 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-08 01:21:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 45 seconds
Variants: generated 200, build-succeeded 109, build-failed 64, syntax-invalid 23, redundant 4
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6580 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:21:43 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-08 01:22:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 17 seconds
Variants: generated 200, build-succeeded 114, build-failed 49, syntax-invalid 13, redundant 24
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6854 ms, max 199 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:22:15 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-08 01:22:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 49 seconds
Variants: generated 200, build-succeeded 96, build-failed 62, syntax-invalid 21, redundant 21
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5883 ms, max 182 ms, min 51 ms
----------------------------------------------------------------

2023-08-08 01:22:47 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-08 01:23:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 22 seconds
Variants: generated 200, build-succeeded 105, build-failed 74, syntax-invalid 12, redundant 9
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6355 ms, max 200 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:23:20 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-08 01:23:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 55 seconds
Variants: generated 200, build-succeeded 120, build-failed 59, syntax-invalid 7, redundant 14
Fitness: max 1(1), min 0(119), ave 0.008
Test execution time: sum 7194 ms, max 137 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:23:53 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-08 01:27:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 28 seconds
Variants: generated 200, build-succeeded 114, build-failed 55, syntax-invalid 16, redundant 15
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 186731 ms, max 180069 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:27:26 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-08 01:28:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 2 seconds
Variants: generated 200, build-succeeded 119, build-failed 57, syntax-invalid 13, redundant 11
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 6852 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:28:00 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-08 01:28:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 35 seconds
Variants: generated 200, build-succeeded 106, build-failed 63, syntax-invalid 23, redundant 8
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6355 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:28:33 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-08 01:29:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 8 seconds
Variants: generated 200, build-succeeded 106, build-failed 64, syntax-invalid 22, redundant 8
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6361 ms, max 121 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:29:06 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-08 01:29:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 41 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 20, redundant 11
Fitness: max 1(2), min 0(108), ave 0.018
Test execution time: sum 6846 ms, max 206 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:29:39 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-08 01:30:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 16 seconds
Variants: generated 200, build-succeeded 120, build-failed 63, syntax-invalid 8, redundant 9
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7145 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:30:14 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-08 01:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 51 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 8, redundant 19
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7040 ms, max 134 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:30:49 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-08 01:31:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 25 seconds
Variants: generated 200, build-succeeded 120, build-failed 62, syntax-invalid 9, redundant 9
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7151 ms, max 135 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:31:23 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-08 01:31:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 59 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 10, redundant 16
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 6922 ms, max 115 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:31:57 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-08 01:32:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 34 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 18, redundant 6
Fitness: max 1(2), min 0(109), ave 0.018
Test execution time: sum 6710 ms, max 113 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:32:32 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-08 01:33:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 10 seconds
Variants: generated 200, build-succeeded 123, build-failed 62, syntax-invalid 7, redundant 8
Fitness: max 1(1), min 0(122), ave 0.008
Test execution time: sum 7541 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:33:08 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-08 01:33:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 45 seconds
Variants: generated 200, build-succeeded 117, build-failed 64, syntax-invalid 2, redundant 17
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 6982 ms, max 124 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:33:43 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-08 01:34:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 21 seconds
Variants: generated 200, build-succeeded 127, build-failed 59, syntax-invalid 5, redundant 9
Fitness: max 1(3), min 0(124), ave 0.024
Test execution time: sum 7736 ms, max 129 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:34:19 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-08 01:34:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 57 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 7, redundant 12
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7149 ms, max 146 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:34:55 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-08 01:35:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 33 seconds
Variants: generated 200, build-succeeded 119, build-failed 69, syntax-invalid 4, redundant 8
Fitness: max 1(1), min 0(118), ave 0.008
Test execution time: sum 7485 ms, max 141 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:35:31 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-08 01:36:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 11 seconds
Variants: generated 200, build-succeeded 118, build-failed 64, syntax-invalid 1, redundant 17
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7400 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:36:09 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-08 01:36:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 47 seconds
Variants: generated 200, build-succeeded 119, build-failed 66, syntax-invalid 5, redundant 10
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7300 ms, max 140 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:36:45 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-08 01:37:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 25 seconds
Variants: generated 200, build-succeeded 132, build-failed 55, syntax-invalid 6, redundant 7
Fitness: max 1(2), min 0(130), ave 0.015
Test execution time: sum 8396 ms, max 188 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:37:23 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-08 01:37:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 1 seconds
Variants: generated 200, build-succeeded 116, build-failed 64, syntax-invalid 8, redundant 12
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7129 ms, max 193 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:37:59 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-08 01:38:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 38 seconds
Variants: generated 200, build-succeeded 118, build-failed 63, syntax-invalid 7, redundant 12
Fitness: max 1(2), min 0(116), ave 0.017
Test execution time: sum 7316 ms, max 147 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:38:36 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-08 01:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 15 seconds
Variants: generated 200, build-succeeded 120, build-failed 62, syntax-invalid 2, redundant 16
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7154 ms, max 129 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:39:13 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-08 01:39:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 52 seconds
Variants: generated 200, build-succeeded 121, build-failed 63, syntax-invalid 10, redundant 6
Fitness: max 1(1), min 0(120), ave 0.008
Test execution time: sum 7279 ms, max 130 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:39:50 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-08 01:40:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 29 seconds
Variants: generated 200, build-succeeded 121, build-failed 63, syntax-invalid 8, redundant 8
Fitness: max 1(3), min 0(118), ave 0.025
Test execution time: sum 7177 ms, max 139 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:40:27 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-08 01:41:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 4 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 17, redundant 9
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 6893 ms, max 139 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:41:02 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-08 01:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 41 seconds
Variants: generated 200, build-succeeded 117, build-failed 63, syntax-invalid 11, redundant 9
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7171 ms, max 132 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:41:39 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-08 01:42:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 17 seconds
Variants: generated 200, build-succeeded 109, build-failed 71, syntax-invalid 7, redundant 13
Fitness: max 1(3), min 0(106), ave 0.028
Test execution time: sum 6609 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:42:15 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-08 01:42:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 52 seconds
Variants: generated 200, build-succeeded 109, build-failed 68, syntax-invalid 16, redundant 7
Fitness: max 1(3), min 0(106), ave 0.028
Test execution time: sum 6805 ms, max 187 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:42:50 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-08 01:43:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 26 seconds
Variants: generated 200, build-succeeded 107, build-failed 55, syntax-invalid 20, redundant 18
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 6487 ms, max 146 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:43:24 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-08 01:43:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 1 seconds
Variants: generated 200, build-succeeded 108, build-failed 63, syntax-invalid 13, redundant 16
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6396 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-08-08 01:43:59 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-08 01:44:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 38 seconds
Variants: generated 200, build-succeeded 120, build-failed 55, syntax-invalid 10, redundant 15
Fitness: max 1(2), min 0(118), ave 0.017
Test execution time: sum 7347 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:44:36 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-08 01:45:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 16 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 18, redundant 9
Fitness: max 1(1), min 0(114), ave 0.009
Test execution time: sum 7264 ms, max 140 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:45:14 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-08 01:45:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 53 seconds
Variants: generated 200, build-succeeded 119, build-failed 54, syntax-invalid 18, redundant 9
Fitness: max 1(2), min 0(117), ave 0.017
Test execution time: sum 7415 ms, max 123 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:45:51 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-08 01:46:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 30 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 12, redundant 10
Fitness: max 1(4), min 0(113), ave 0.034
Test execution time: sum 7330 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:46:28 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-08 01:47:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 6 seconds
Variants: generated 200, build-succeeded 107, build-failed 64, syntax-invalid 22, redundant 7
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6638 ms, max 149 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:47:04 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-08 01:47:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 43 seconds
Variants: generated 200, build-succeeded 110, build-failed 58, syntax-invalid 23, redundant 9
Fitness: max 1(2), min 0(108), ave 0.018
Test execution time: sum 6942 ms, max 149 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:47:41 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-08 01:48:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 20 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 18, redundant 7
Fitness: max 1(2), min 0(110), ave 0.018
Test execution time: sum 6958 ms, max 119 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:48:18 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-08 01:48:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 57 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 14, redundant 11
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6965 ms, max 208 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:48:55 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-08 01:49:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 35 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 16, redundant 10
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7225 ms, max 159 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:49:33 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-08 01:50:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 13 seconds
Variants: generated 200, build-succeeded 112, build-failed 69, syntax-invalid 11, redundant 8
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7048 ms, max 145 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:50:11 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-08 01:50:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 51 seconds
Variants: generated 200, build-succeeded 112, build-failed 73, syntax-invalid 10, redundant 5
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 7038 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:50:49 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-08 01:51:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 28 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 22, redundant 10
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 7103 ms, max 195 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:51:26 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-08 01:52:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 4 seconds
Variants: generated 200, build-succeeded 110, build-failed 70, syntax-invalid 12, redundant 8
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6631 ms, max 121 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:52:02 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-08 01:52:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 41 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 15, redundant 11
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6965 ms, max 136 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:52:39 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-08 01:53:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 20 seconds
Variants: generated 200, build-succeeded 121, build-failed 56, syntax-invalid 12, redundant 11
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7850 ms, max 176 ms, min 53 ms
----------------------------------------------------------------

2023-08-08 01:53:18 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-08 01:53:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 59 seconds
Variants: generated 200, build-succeeded 127, build-failed 54, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0(126), ave 0.008
Test execution time: sum 8016 ms, max 141 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:53:57 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-08 01:54:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 38 seconds
Variants: generated 200, build-succeeded 112, build-failed 53, syntax-invalid 23, redundant 12
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7391 ms, max 139 ms, min 55 ms
----------------------------------------------------------------

2023-08-08 01:54:36 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-08 01:55:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 17 seconds
Variants: generated 200, build-succeeded 115, build-failed 65, syntax-invalid 11, redundant 9
Fitness: max 1(1), min 0(114), ave 0.009
Test execution time: sum 7393 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:55:15 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-08 01:55:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 55 seconds
Variants: generated 200, build-succeeded 122, build-failed 56, syntax-invalid 15, redundant 7
Fitness: max 1(1), min 0(121), ave 0.008
Test execution time: sum 7636 ms, max 149 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:55:53 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-08 01:56:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 33 seconds
Variants: generated 200, build-succeeded 121, build-failed 58, syntax-invalid 6, redundant 15
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7349 ms, max 113 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:56:31 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-08 01:57:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 12 seconds
Variants: generated 200, build-succeeded 118, build-failed 64, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0(117), ave 0.008
Test execution time: sum 7358 ms, max 151 ms, min 54 ms
----------------------------------------------------------------

2023-08-08 01:57:10 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-08 01:57:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 27 seconds
Variants: generated 82, build-succeeded 25, build-failed 41, syntax-invalid 9, redundant 7
Fitness: max 1(2), min 0(23), ave 0.08
Test execution time: sum 1733 ms, max 142 ms, min 57 ms
----------------------------------------------------------------

2023-08-08 01:57:25 [main] [INFO]  KGenProgMain - GA stopped
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v8)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v8)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v8)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v8)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v832)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,8 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v832)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v832)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v832)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v832)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v843)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,8 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v843)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v843)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v843)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v843)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:28 [main] [INFO]  PatchLogExporter - patch (v843)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v869)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,8 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v869)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v869)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v869)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v869)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v869)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (!resultComputed) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v1659)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	interpolatedTime = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v1659)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v1659)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v1659)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v1659)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v3889)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,9 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v3889)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v3889)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -185,7 +183,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -203,7 +201,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +210,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v3889)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v3889)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v3889)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,6 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5932)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,8 +110,9 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -174,7 +174,6 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +268,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (currentState == null) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5932)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5932)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5932)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5932)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5932)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5967)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -273,7 +271,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5967)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5967)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5967)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v5967)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6036)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -217,7 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -269,11 +265,10 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (currentState == null) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
@@ -288,7 +283,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedDerivatives;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6036)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6036)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,10 +98,9 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6036)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6036)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6055)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -217,7 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -269,11 +265,10 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (currentState == null) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
@@ -288,7 +283,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedDerivatives;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6055)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6055)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,10 +98,9 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6055)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6055)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6159)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,8 +110,9 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +269,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (currentState == null) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6159)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6159)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6159)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6159)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6159)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6337)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6337)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6337)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -185,7 +184,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6337)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6337)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6337)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,6 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6579)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -273,7 +274,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6579)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6579)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,10 +98,10 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        g0Positive = increasing;
+		g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6579)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v6579)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v7292)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,9 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,7 +219,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -242,7 +243,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v7292)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v7292)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -203,7 +201,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +210,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v7292)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v7292)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9722)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,11 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +211,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -217,7 +220,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -269,11 +271,10 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (currentState == null) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9722)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9722)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9722)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,8 +100,9 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+        g0Positive = g0 >= 0;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9722)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9722)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9722)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9940)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,7 +220,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9940)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9940)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9940)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -172,7 +172,9 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9940)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9940)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v9940)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v13983)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +110,16 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +215,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v13983)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v13983)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v13983)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v13983)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v13983)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v13983)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14171)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,10 +110,14 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +212,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14171)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14171)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14171)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14171)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14171)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14314)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,11 +106,18 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +215,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14314)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14314)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14314)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14314)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14314)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14357)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,10 +111,16 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
-
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
+    interpolatedState       = new double[y.length];
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +215,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14357)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14357)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14357)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -216,8 +217,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (nextAction == EventHandler.RESET_STATE) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14357)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14357)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,10 +110,13 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +211,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,12 +101,11 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        g0 = Double.NaN;
 
     }
 
@@ -181,7 +180,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +201,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14971)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,13 +106,20 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +215,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14971)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14971)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14971)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14971)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,10 +111,14 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,7 +179,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = isForward;
@@ -209,6 +214,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,13 @@
 
         // some dummy values ...
         t0                = Double.NaN;
+		pendingEvent = false;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15532)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,17 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +218,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -435,6 +445,7 @@
     interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];
 
     finalized = true;
+	this.forward = true;
 
     return in.readDouble();
 
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15532)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15532)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15532)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +201,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15532)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15532)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15539)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,14 +106,19 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +213,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -242,7 +247,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15539)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15539)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15539)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -323,7 +321,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15539)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15539)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15581)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,18 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +219,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -242,7 +253,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15581)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15581)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15581)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,6 +172,7 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+			g0Positive = g0 >= 0;
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15581)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15581)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15590)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,12 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15590)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15590)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15590)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,8 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -172,7 +170,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15590)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15590)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15714)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,13 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +215,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15714)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15714)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,8 +100,9 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+		g0                = Double.NaN;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -172,7 +173,9 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -203,7 +206,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,10 +111,12 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +177,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
@@ -209,6 +209,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,7 +150,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15783)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,10 +111,14 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	this.forward = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,9 +179,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+    h = -h;
+	h = -h;
+	h = -h;
+	finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -209,6 +214,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15783)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15783)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15783)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -172,7 +170,9 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15783)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15783)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15792)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,10 +110,12 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,7 +176,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = isForward;
@@ -209,6 +211,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15792)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15792)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15792)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,8 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15792)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v15792)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16111)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,13 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +214,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16111)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16111)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16111)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16111)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16111)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16179)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,15 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	this.forward = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +217,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -243,7 +254,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16179)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16179)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16179)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16179)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16179)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16269)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,18 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +220,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16269)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16269)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        g0Positive = increasing;
+		g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -172,7 +173,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -203,7 +205,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16269)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16269)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16269)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16325)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,14 +106,17 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +211,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16325)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16325)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16325)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16325)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16325)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,11 +111,13 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+    h = -h;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -175,8 +177,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
@@ -209,6 +209,11 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,7 +172,9 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -203,7 +205,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16595)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,10 +110,14 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    this.forward = forward;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +212,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16595)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16595)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16595)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -172,7 +171,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16595)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v16595)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v18274)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,17 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +218,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v18274)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v18274)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,9 +172,11 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v18274)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v18274)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19073)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,11 +110,16 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
+    interpolatedState       = new double[y.length];
+    h = -h;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +213,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19073)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19073)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,7 +150,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -172,9 +171,11 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19073)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19073)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19225)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,16 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +217,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19225)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,9 +172,11 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19225)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19225)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,14 +106,16 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,9 +176,9 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+    h = -h;
+	h = -h;
+	finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -209,6 +210,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,8 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        previousEventTime = Double.NaN;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -175,6 +173,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:29 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19314)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,11 +110,21 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
+    interpolatedState       = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +218,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19314)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19314)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19314)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19314)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19581)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,11 +110,17 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+    h = -h;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -175,7 +180,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = isForward;
@@ -209,6 +215,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -434,7 +442,8 @@
     interpolatedState       = (dimension < 0) ? null : new double[dimension];
     interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];
 
-    finalized = true;
+    h = -h;
+	finalized = true;
 
     return in.readDouble();
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19581)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19581)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19581)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19581)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,20 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +220,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -175,6 +173,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,11 +110,19 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+    h = -h;
+	h = -h;
+	h = -h;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +216,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (Math.abs(y1) <= functionValueAccuracy) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19862)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,11 +110,19 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+    h = -h;
+	h = -h;
+	h = -h;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +216,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19862)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19862)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19862)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19862)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19862)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19889)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,11 +110,19 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
+    h = -h;
+	h = -h;
+	h = -h;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +216,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19889)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19889)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19889)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19889)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v19889)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i <= maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20072)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,11 +106,15 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +212,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20072)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20072)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20072)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,9 +172,12 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20072)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20072)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20072)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20662)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,11 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +212,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +277,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20662)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20662)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20662)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,9 +172,12 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20662)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v20662)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21273)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,18 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +219,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21273)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21273)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -175,6 +174,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21273)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21273)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21273)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21280)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +110,18 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +219,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21280)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21280)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -175,6 +174,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21280)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21280)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v21280)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i <= maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v22403)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,22 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +222,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v22403)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v22403)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v22403)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v22403)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
@@ -172,9 +173,12 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v22403)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v22403)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v23653)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,9 +110,22 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +221,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +288,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v23653)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v23653)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v23653)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v23653)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v23653)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v23653)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -275,14 +275,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					clearResult();
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24609)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +109,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +222,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24609)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24609)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24609)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24609)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24609)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24623)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +109,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +222,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24623)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24623)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24623)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24623)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v24623)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25607)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,29 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +229,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25607)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25607)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25607)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25607)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25659)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,29 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +229,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25659)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25659)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25659)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25659)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25815)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +226,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25815)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25815)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25815)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25815)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25815)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v25815)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26193)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,10 +111,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +223,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +290,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26193)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26193)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26193)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26193)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26193)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26193)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26270)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,25 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +225,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +293,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26270)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26270)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26270)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26270)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26270)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    double m;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26272)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,25 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +225,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +293,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26272)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26272)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26272)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26272)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26272)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26346)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +228,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +293,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26346)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26346)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26346)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26346)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26346)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26618)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
+    interpolatedState       = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +224,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +292,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26618)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26618)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26618)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26618)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v26618)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -301,7 +293,8 @@
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
-                delta = x1 - x0;
+                double r3 = y1 / y0;
+				delta = x1 - x0;
                 oldDelta = delta;
             }
             i++;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27236)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,25 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +225,11 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27236)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27236)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27236)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27236)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27236)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    x0 = x1;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27244)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,25 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +225,11 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27244)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27244)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27244)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27244)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27244)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    clearResult();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27627)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +110,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +227,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +293,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27627)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27627)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27627)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27627)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27682)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +110,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +227,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +293,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27682)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27682)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,6 +175,7 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
+			interpolator.setInterpolatedTime(t0);
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27682)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27682)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v27682)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i <= maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28076)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +111,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +227,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28076)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28076)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28076)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28076)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28076)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28237)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +111,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +227,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28237)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28237)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28237)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28237)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28237)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,8 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        double x0 = min;
+		clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -233,10 +234,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28253)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +111,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +227,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28253)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28253)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28253)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28253)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28253)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,8 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        double x0 = min;
+		clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -233,10 +234,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -275,14 +272,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					i++;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28295)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +111,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +227,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28295)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28295)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28295)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28295)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28295)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28295)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,8 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        double x0 = min;
+		clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -233,10 +234,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28427)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,26 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +226,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +292,11 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28427)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28427)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28427)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28904)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,26 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +226,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +293,12 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28904)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28904)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28904)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28904)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28904)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    {
+						x0 = x1;
+						x1 = x2;
+						x2 = x0;
+						y0 = y1;
+						y1 = y2;
+						y2 = y0;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28967)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +111,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +228,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +296,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28967)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28967)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28967)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28967)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28967)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    {
+						x0 = x1;
+						x1 = x2;
+						x2 = x0;
+						y0 = y1;
+						y1 = y2;
+						y2 = y0;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28985)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -111,9 +112,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +229,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +295,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28985)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28985)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28985)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28985)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v28985)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y2 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29098)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,25 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    dirtyState = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +225,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +293,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29098)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29098)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -323,7 +322,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29098)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29098)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29140)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -111,9 +112,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +228,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +295,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29140)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29140)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29140)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29140)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29140)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    {
+						x0 = x1;
+						x1 = x2;
+						x2 = x0;
+						y0 = y1;
+						y1 = y2;
+						y2 = y0;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,26 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -209,6 +228,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +296,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    {
+						x0 = x1;
+						x1 = x2;
+						x2 = x0;
+						y0 = y1;
+						y1 = y2;
+						y2 = y0;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29333)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +228,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +294,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29333)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29333)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		double ga = g0;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29333)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29333)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:30 [main] [INFO]  PatchLogExporter - patch (v29333)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    {
+						x0 = x1;
+						x1 = x2;
+						x2 = x0;
+						y0 = y1;
+						y1 = y2;
+						y2 = y0;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29644)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +111,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +193,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -209,6 +224,11 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29644)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29644)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29644)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29644)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29644)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29685)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +111,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +193,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -209,6 +224,11 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29685)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29685)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29685)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29685)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    y0 = y1;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29877)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +110,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    interpolatedDerivatives = null;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +226,12 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29877)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29877)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,7 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
 
     }
 
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29877)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29877)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v29877)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30083)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +111,26 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
+    interpolatedState       = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +224,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +292,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30083)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30083)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30083)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30083)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30083)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30089)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +111,26 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
+    interpolatedState       = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +224,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +292,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30089)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30089)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30089)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30089)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30089)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30089)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30242)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,15 +106,26 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -169,7 +179,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -209,6 +218,13 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -218,8 +234,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -273,7 +287,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i < maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30250)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,15 +106,26 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -169,7 +179,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -209,6 +218,13 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -218,8 +234,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -273,7 +287,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30250)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30250)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = handler.eventOccurred(t, y, !(increasing ^ forward));
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30250)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30250)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30262)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,15 +106,26 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -169,7 +179,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -209,6 +218,13 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -218,8 +234,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -273,7 +287,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30262)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30262)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30262)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30262)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,15 +106,26 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -169,7 +179,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -209,6 +218,13 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -218,8 +234,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -273,7 +287,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    final double t0 = interpolator.getPreviousTime();
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30609)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +110,30 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +229,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30609)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30609)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30609)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30609)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30609)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30609)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -294,6 +290,7 @@
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
+				return x1;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30685)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +110,30 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +229,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30685)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30685)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30685)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30685)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30685)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30685)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30846)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,13 +105,28 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +222,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +289,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30846)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30846)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30846)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30846)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30846)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,13 +105,28 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +222,9 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +289,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31613)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +110,22 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +187,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -209,6 +218,11 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -220,9 +234,6 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
-
   }
 
   /** {@inheritDoc} */
@@ -273,7 +284,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31613)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31613)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31613)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31613)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31613)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31613)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -246,8 +246,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if ((y1 > 0) == (y2 > 0)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31879)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,9 +110,29 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
+	finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +228,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +296,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31879)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31879)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31879)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31879)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v31879)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (Math.abs(y1) <= functionValueAccuracy) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v32683)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,12 +110,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	interpolatedState = null;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
-    finalized         = false;
-    this.forward      = forward;
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -209,6 +220,13 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v32683)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v32683)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v32683)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v32683)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v32683)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v32683)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -246,8 +242,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if ((y1 > 0) == (y2 > 0)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33023)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +109,23 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +219,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +287,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		finalized = true;
+		finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33023)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33023)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33023)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33023)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -92,7 +91,6 @@
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /** Check if a result has been computed.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33023)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33276)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedState = null;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +111,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	final int n = (currentState == null) ? -1 : currentState.length;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -209,6 +226,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33276)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33276)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33276)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33276)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33276)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +110,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	final int n = (currentState == null) ? -1 : currentState.length;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +189,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    interpolatedState = null;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -209,6 +221,12 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33605)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33854)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,31 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +231,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +299,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33854)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33854)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33854)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33854)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33854)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33854)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (delta / oldDelta > 1) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33882)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,9 +111,31 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    finalized = true;
+	finalized = false;
+	finalized = false;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = -h;
+	h = -h;
+	h = -h;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -209,6 +231,10 @@
    */
   public void shift() {
     previousTime = currentTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
   }
 
   /** Store the current step time.
@@ -273,7 +299,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          finalized = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33882)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33882)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33882)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33882)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33882)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 01:57:31 [main] [INFO]  PatchLogExporter - patch (v33882)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-08 01:57:31 [main] [INFO]  KGenProgMain - Summary
Reached generation = 171
Generated variants = 33882
Syntax valid variants = 30731
Build succeeded variants = 17866
Time elapsed = 1 hours 49 minutes 33 seconds
Exit status = SUCCESS
