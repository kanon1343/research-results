2023-08-06 00:12:26 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 00:12:26 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 00:12:26 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 00:12:26 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 2 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-06 00:12:44 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-06 00:12:45 [main] [INFO]  KGenProgMain - GA started
2023-08-06 00:12:45 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 00:12:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, build-succeeded 29, build-failed 56, syntax-invalid 8, redundant 7
Fitness: max 1(1), min 0(28), ave 0.034
Test execution time: sum 3366 ms, max 350 ms, min 62 ms
----------------------------------------------------------------

2023-08-06 00:12:55 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 00:13:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 100, build-succeeded 26, build-failed 60, syntax-invalid 3, redundant 11
Fitness: max 0(26), min 0(26), ave 0
Test execution time: sum 1904 ms, max 196 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 00:13:02 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 00:16:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 26 seconds
Variants: generated 200, build-succeeded 50, build-failed 56, syntax-invalid 5, redundant 89
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 183128 ms, max 180059 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 00:16:12 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 00:19:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 40 seconds
Variants: generated 200, build-succeeded 85, build-failed 58, syntax-invalid 3, redundant 54
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 185149 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 00:19:26 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 00:19:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 56 seconds
Variants: generated 200, build-succeeded 88, build-failed 57, syntax-invalid 10, redundant 45
Fitness: max 1(1), min 0(87), ave 0.011
Test execution time: sum 5747 ms, max 209 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:19:41 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 00:19:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 12 seconds
Variants: generated 200, build-succeeded 91, build-failed 63, syntax-invalid 7, redundant 39
Fitness: max 1(1), min 0(90), ave 0.011
Test execution time: sum 5924 ms, max 192 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:19:57 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 00:20:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 27 seconds
Variants: generated 200, build-succeeded 91, build-failed 63, syntax-invalid 7, redundant 39
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5755 ms, max 210 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 00:20:13 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 00:20:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 41 seconds
Variants: generated 200, build-succeeded 103, build-failed 58, syntax-invalid 4, redundant 35
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 5911 ms, max 125 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 00:20:26 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 00:20:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 54 seconds
Variants: generated 200, build-succeeded 100, build-failed 53, syntax-invalid 10, redundant 37
Fitness: max 1(1), min 0(99), ave 0.01
Test execution time: sum 5863 ms, max 145 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 00:20:39 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 00:20:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 7 seconds
Variants: generated 200, build-succeeded 103, build-failed 53, syntax-invalid 14, redundant 30
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6020 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:20:53 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 00:21:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 22 seconds
Variants: generated 200, build-succeeded 99, build-failed 59, syntax-invalid 17, redundant 25
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 6083 ms, max 197 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:21:07 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 00:21:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 37 seconds
Variants: generated 200, build-succeeded 96, build-failed 71, syntax-invalid 9, redundant 24
Fitness: max 1(1), min 0(95), ave 0.01
Test execution time: sum 6026 ms, max 235 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 00:21:22 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 00:21:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 49 seconds
Variants: generated 200, build-succeeded 91, build-failed 61, syntax-invalid 15, redundant 33
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5376 ms, max 198 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:21:35 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 00:21:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 3 seconds
Variants: generated 200, build-succeeded 106, build-failed 52, syntax-invalid 21, redundant 21
Fitness: max 1(1), min 0(105), ave 0.009
Test execution time: sum 6269 ms, max 144 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:21:48 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 00:22:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 16 seconds
Variants: generated 200, build-succeeded 101, build-failed 67, syntax-invalid 15, redundant 17
Fitness: max 1(3), min 0(98), ave 0.03
Test execution time: sum 5968 ms, max 170 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 00:22:01 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 00:22:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 30 seconds
Variants: generated 200, build-succeeded 106, build-failed 62, syntax-invalid 7, redundant 25
Fitness: max 1(2), min 0(104), ave 0.019
Test execution time: sum 6346 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:22:16 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 00:22:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 45 seconds
Variants: generated 200, build-succeeded 114, build-failed 43, syntax-invalid 11, redundant 32
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6761 ms, max 203 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:22:30 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 00:22:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 2 seconds
Variants: generated 200, build-succeeded 124, build-failed 56, syntax-invalid 8, redundant 12
Fitness: max 1(1), min 0(123), ave 0.008
Test execution time: sum 7573 ms, max 168 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 00:22:47 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 00:23:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 17 seconds
Variants: generated 200, build-succeeded 113, build-failed 66, syntax-invalid 3, redundant 18
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6428 ms, max 125 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 00:23:02 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 00:23:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 32 seconds
Variants: generated 200, build-succeeded 115, build-failed 64, syntax-invalid 4, redundant 17
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6636 ms, max 200 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 00:23:17 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 00:23:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 47 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 12, redundant 15
Fitness: max 1(3), min 0(111), ave 0.026
Test execution time: sum 6725 ms, max 214 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:23:32 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 00:23:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 1 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 5, redundant 25
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6216 ms, max 195 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:23:46 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-06 00:24:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 16 seconds
Variants: generated 200, build-succeeded 109, build-failed 68, syntax-invalid 11, redundant 12
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6403 ms, max 201 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:24:01 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-06 00:24:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 30 seconds
Variants: generated 200, build-succeeded 103, build-failed 61, syntax-invalid 4, redundant 32
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 5755 ms, max 124 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 00:24:15 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-06 00:27:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 45 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 14, redundant 14
Fitness: max 1(1), min 0(115), ave 0.009
Test execution time: sum 186504 ms, max 180058 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:27:30 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-06 00:30:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 0 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 19, redundant 17
Fitness: max 1(2), min 0(109), ave 0.018
Test execution time: sum 186706 ms, max 180066 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 00:30:46 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-06 01:37:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 17, redundant 13
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 3967644 ms, max 180191 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 01:37:03 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-06 01:46:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 33 seconds
Variants: generated 200, build-succeeded 117, build-failed 51, syntax-invalid 12, redundant 20
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 547241 ms, max 180108 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 01:46:19 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-06 01:52:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 49 seconds
Variants: generated 200, build-succeeded 111, build-failed 50, syntax-invalid 10, redundant 29
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 366872 ms, max 180119 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 01:52:34 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-06 02:07:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 4 seconds
Variants: generated 200, build-succeeded 108, build-failed 64, syntax-invalid 24, redundant 4
Fitness: max 1(2), min 0(106), ave 0.019
Test execution time: sum 906641 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:07:49 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-06 02:11:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 19 seconds
Variants: generated 200, build-succeeded 92, build-failed 70, syntax-invalid 22, redundant 16
Fitness: max 1(3), min 0(89), ave 0.033
Test execution time: sum 185640 ms, max 180057 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:11:04 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-06 02:11:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 33 seconds
Variants: generated 200, build-succeeded 107, build-failed 50, syntax-invalid 15, redundant 28
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 6213 ms, max 100 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:11:18 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-06 02:11:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 49 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 11, redundant 16
Fitness: max 1(2), min 0(113), ave 0.017
Test execution time: sum 6596 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:11:34 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-06 02:11:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 4 seconds
Variants: generated 200, build-succeeded 107, build-failed 68, syntax-invalid 4, redundant 21
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6004 ms, max 93 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:11:49 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-06 02:12:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 20 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 22, redundant 10
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6387 ms, max 208 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:12:05 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-06 02:12:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 36 seconds
Variants: generated 200, build-succeeded 111, build-failed 64, syntax-invalid 10, redundant 15
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 6461 ms, max 80 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:12:21 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-06 02:12:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 51 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 18, redundant 11
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6487 ms, max 119 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:12:37 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-06 02:12:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 seconds
Variants: generated 200, build-succeeded 121, build-failed 59, syntax-invalid 11, redundant 9
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7007 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:12:53 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-06 02:13:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 21, redundant 11
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6187 ms, max 85 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:13:07 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-06 02:13:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 14, redundant 19
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6153 ms, max 121 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:13:23 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-06 02:13:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 14, redundant 13
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6304 ms, max 83 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:13:38 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-06 02:13:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 9 seconds
Variants: generated 200, build-succeeded 104, build-failed 64, syntax-invalid 17, redundant 15
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 5995 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:13:54 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-06 02:14:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 23 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 28, redundant 12
Fitness: max 1(5), min 0(98), ave 0.049
Test execution time: sum 5904 ms, max 105 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:14:09 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-06 02:14:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 39 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 20, redundant 16
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6192 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:14:24 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-06 02:14:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 55 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 16, redundant 17
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6235 ms, max 89 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:14:40 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-06 02:14:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 11 seconds
Variants: generated 200, build-succeeded 106, build-failed 59, syntax-invalid 16, redundant 19
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6052 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:14:56 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-06 02:15:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 27 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 17, redundant 17
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6144 ms, max 82 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:15:12 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-06 02:15:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 46 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 17, redundant 8
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6693 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:15:31 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-06 02:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 2 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 19, redundant 11
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 6165 ms, max 80 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:15:48 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-06 02:16:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 21 seconds
Variants: generated 200, build-succeeded 105, build-failed 64, syntax-invalid 16, redundant 15
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6096 ms, max 184 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:16:06 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-06 02:16:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 37 seconds
Variants: generated 200, build-succeeded 101, build-failed 71, syntax-invalid 19, redundant 9
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5719 ms, max 104 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:16:22 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-06 02:16:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 54 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 20, redundant 15
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5888 ms, max 196 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:16:39 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-06 02:16:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 8 seconds
Variants: generated 200, build-succeeded 94, build-failed 59, syntax-invalid 31, redundant 16
Fitness: max 1(1), min 0(93), ave 0.011
Test execution time: sum 5406 ms, max 89 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:16:54 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-06 02:17:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 26 seconds
Variants: generated 200, build-succeeded 104, build-failed 62, syntax-invalid 16, redundant 18
Fitness: max 1(2), min 0(102), ave 0.019
Test execution time: sum 6208 ms, max 189 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:17:11 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-06 02:17:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 43 seconds
Variants: generated 200, build-succeeded 108, build-failed 66, syntax-invalid 13, redundant 13
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6120 ms, max 82 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:17:28 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-06 02:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 1 seconds
Variants: generated 200, build-succeeded 98, build-failed 73, syntax-invalid 18, redundant 11
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5713 ms, max 183 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:17:46 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-06 02:18:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 18 seconds
Variants: generated 200, build-succeeded 113, build-failed 64, syntax-invalid 14, redundant 9
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6374 ms, max 88 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:18:04 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-06 02:18:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 36 seconds
Variants: generated 200, build-succeeded 93, build-failed 79, syntax-invalid 19, redundant 9
Fitness: max 1(1), min 0(92), ave 0.011
Test execution time: sum 5640 ms, max 161 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:18:21 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-06 02:18:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 53 seconds
Variants: generated 200, build-succeeded 98, build-failed 68, syntax-invalid 20, redundant 14
Fitness: max 1(1), min 0(97), ave 0.01
Test execution time: sum 5977 ms, max 107 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 02:18:39 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-06 02:18:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 12 seconds
Variants: generated 200, build-succeeded 105, build-failed 61, syntax-invalid 18, redundant 16
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6260 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:18:57 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-06 02:19:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 29 seconds
Variants: generated 200, build-succeeded 90, build-failed 77, syntax-invalid 9, redundant 24
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 5217 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:19:14 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-06 02:19:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 47 seconds
Variants: generated 200, build-succeeded 114, build-failed 66, syntax-invalid 11, redundant 9
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6433 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:19:32 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-06 02:19:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 5 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 9, redundant 21
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6097 ms, max 191 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:19:51 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-06 02:20:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 23 seconds
Variants: generated 200, build-succeeded 102, build-failed 69, syntax-invalid 9, redundant 20
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5808 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:20:08 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-06 02:20:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 41 seconds
Variants: generated 200, build-succeeded 103, build-failed 59, syntax-invalid 27, redundant 11
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 5783 ms, max 109 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:20:26 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-06 02:20:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 59 seconds
Variants: generated 200, build-succeeded 104, build-failed 67, syntax-invalid 20, redundant 9
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 5745 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:20:45 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-06 02:21:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 18 seconds
Variants: generated 200, build-succeeded 90, build-failed 67, syntax-invalid 22, redundant 21
Fitness: max 1(1), min 0(89), ave 0.011
Test execution time: sum 5116 ms, max 177 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:21:03 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-06 02:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 36 seconds
Variants: generated 200, build-succeeded 102, build-failed 73, syntax-invalid 18, redundant 7
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5588 ms, max 87 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:21:21 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-06 02:21:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 56 seconds
Variants: generated 200, build-succeeded 99, build-failed 58, syntax-invalid 29, redundant 14
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 5780 ms, max 173 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:21:41 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-06 02:21:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 13 seconds
Variants: generated 200, build-succeeded 90, build-failed 60, syntax-invalid 38, redundant 12
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 4893 ms, max 83 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:21:58 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-06 02:22:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 32 seconds
Variants: generated 200, build-succeeded 95, build-failed 58, syntax-invalid 34, redundant 13
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5555 ms, max 207 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:22:17 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-06 02:22:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 51 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 28, redundant 7
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 5540 ms, max 96 ms, min 49 ms
----------------------------------------------------------------

2023-08-06 02:22:36 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-06 02:22:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 11 seconds
Variants: generated 200, build-succeeded 96, build-failed 58, syntax-invalid 34, redundant 12
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5396 ms, max 103 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:22:56 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-06 02:23:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 29 seconds
Variants: generated 200, build-succeeded 88, build-failed 54, syntax-invalid 42, redundant 16
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 4780 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:23:14 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-06 02:23:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 48 seconds
Variants: generated 200, build-succeeded 97, build-failed 56, syntax-invalid 33, redundant 14
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5525 ms, max 180 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:23:34 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-06 02:23:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 7 seconds
Variants: generated 200, build-succeeded 90, build-failed 59, syntax-invalid 33, redundant 18
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 4821 ms, max 83 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:23:53 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-06 02:24:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 27 seconds
Variants: generated 200, build-succeeded 97, build-failed 55, syntax-invalid 31, redundant 17
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5264 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:24:12 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-06 02:27:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 47 seconds
Variants: generated 200, build-succeeded 96, build-failed 70, syntax-invalid 24, redundant 10
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 185555 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:27:32 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-06 02:27:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 7 seconds
Variants: generated 200, build-succeeded 104, build-failed 61, syntax-invalid 23, redundant 12
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 5714 ms, max 89 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:27:52 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-06 02:28:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 29 seconds
Variants: generated 200, build-succeeded 106, build-failed 68, syntax-invalid 21, redundant 5
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6129 ms, max 108 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:28:15 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-06 02:28:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 48 seconds
Variants: generated 200, build-succeeded 92, build-failed 75, syntax-invalid 27, redundant 6
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5069 ms, max 104 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:28:33 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-06 02:28:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 8 seconds
Variants: generated 200, build-succeeded 102, build-failed 57, syntax-invalid 27, redundant 14
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5863 ms, max 196 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:28:53 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-06 02:29:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 28 seconds
Variants: generated 200, build-succeeded 102, build-failed 69, syntax-invalid 22, redundant 7
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 5625 ms, max 89 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:29:13 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-06 02:29:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 49 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 25, redundant 8
Fitness: max 1(2), min 0(104), ave 0.019
Test execution time: sum 6239 ms, max 105 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:29:35 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-06 02:29:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 11 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 21, redundant 15
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 5828 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:29:56 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-06 02:30:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 33 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 25, redundant 7
Fitness: max 1(2), min 0(110), ave 0.018
Test execution time: sum 6632 ms, max 117 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:30:18 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-06 02:30:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 54 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 23, redundant 14
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6250 ms, max 112 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:30:40 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-06 02:31:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 16 seconds
Variants: generated 200, build-succeeded 102, build-failed 63, syntax-invalid 27, redundant 8
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6047 ms, max 115 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:31:01 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-06 02:31:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 38 seconds
Variants: generated 200, build-succeeded 106, build-failed 50, syntax-invalid 20, redundant 24
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6218 ms, max 190 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:31:23 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-06 02:31:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 0 seconds
Variants: generated 200, build-succeeded 110, build-failed 58, syntax-invalid 20, redundant 12
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6352 ms, max 139 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:31:46 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-06 02:32:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 20 seconds
Variants: generated 200, build-succeeded 91, build-failed 62, syntax-invalid 36, redundant 11
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5183 ms, max 85 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:32:05 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-06 02:32:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 43 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 20, redundant 12
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6608 ms, max 109 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:32:28 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-06 02:32:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 5 seconds
Variants: generated 200, build-succeeded 109, build-failed 65, syntax-invalid 21, redundant 5
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6188 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:32:50 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-06 02:33:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 28 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 23, redundant 3
Fitness: max 1(2), min 0(114), ave 0.017
Test execution time: sum 6872 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:33:13 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-06 02:33:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 52 seconds
Variants: generated 200, build-succeeded 123, build-failed 56, syntax-invalid 10, redundant 11
Fitness: max 1(3), min 0(120), ave 0.024
Test execution time: sum 7701 ms, max 196 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 02:33:37 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-06 02:37:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 16 seconds
Variants: generated 200, build-succeeded 118, build-failed 55, syntax-invalid 12, redundant 15
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 187275 ms, max 180064 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:37:01 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-06 02:43:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 41 seconds
Variants: generated 200, build-succeeded 120, build-failed 58, syntax-invalid 9, redundant 13
Fitness: max 1(2), min 0(118), ave 0.017
Test execution time: sum 367801 ms, max 180148 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:43:26 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-06 02:43:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 6 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 22, redundant 11
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 7029 ms, max 137 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:43:51 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-06 02:53:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 30 seconds
Variants: generated 200, build-succeeded 120, build-failed 61, syntax-invalid 13, redundant 6
Fitness: max 1(2), min 0(118), ave 0.017
Test execution time: sum 547467 ms, max 180069 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 02:53:15 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-06 02:59:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 55 seconds
Variants: generated 200, build-succeeded 115, build-failed 65, syntax-invalid 7, redundant 13
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 367177 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-08-06 02:59:40 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-06 03:03:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 17 seconds
Variants: generated 200, build-succeeded 113, build-failed 64, syntax-invalid 14, redundant 9
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 186821 ms, max 180059 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:03:02 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-06 03:03:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 41 seconds
Variants: generated 200, build-succeeded 113, build-failed 64, syntax-invalid 5, redundant 18
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6653 ms, max 118 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:03:26 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-06 03:03:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 3 seconds
Variants: generated 200, build-succeeded 109, build-failed 67, syntax-invalid 12, redundant 12
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6505 ms, max 87 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:03:48 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-06 03:04:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 27 seconds
Variants: generated 200, build-succeeded 122, build-failed 59, syntax-invalid 10, redundant 9
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 7252 ms, max 145 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:04:13 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-06 03:04:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 52 seconds
Variants: generated 200, build-succeeded 129, build-failed 60, syntax-invalid 9, redundant 2
Fitness: max 1(1), min 0(128), ave 0.008
Test execution time: sum 7678 ms, max 86 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:04:37 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-06 03:05:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 16 seconds
Variants: generated 200, build-succeeded 119, build-failed 54, syntax-invalid 17, redundant 10
Fitness: max 1(2), min 0(117), ave 0.017
Test execution time: sum 7254 ms, max 196 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:05:02 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-06 03:05:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 41 seconds
Variants: generated 200, build-succeeded 117, build-failed 60, syntax-invalid 13, redundant 10
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 7085 ms, max 82 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:05:26 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-06 03:05:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 6 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 10, redundant 9
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7246 ms, max 135 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:05:51 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-06 03:06:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 31 seconds
Variants: generated 200, build-succeeded 116, build-failed 65, syntax-invalid 11, redundant 8
Fitness: max 1(4), min 0(112), ave 0.034
Test execution time: sum 7104 ms, max 79 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:06:16 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-06 03:06:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 57 seconds
Variants: generated 200, build-succeeded 117, build-failed 74, syntax-invalid 3, redundant 6
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7146 ms, max 195 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:06:43 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-06 03:07:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 minutes 23 seconds
Variants: generated 200, build-succeeded 120, build-failed 67, syntax-invalid 8, redundant 5
Fitness: max 1(1), min 0(119), ave 0.008
Test execution time: sum 7311 ms, max 84 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:07:08 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-06 03:07:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 minutes 48 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 18, redundant 10
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 6775 ms, max 113 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:07:34 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-06 03:07:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 14 seconds
Variants: generated 200, build-succeeded 112, build-failed 74, syntax-invalid 8, redundant 6
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6508 ms, max 77 ms, min 51 ms
----------------------------------------------------------------

2023-08-06 03:07:59 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-06 03:08:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 40 seconds
Variants: generated 200, build-succeeded 109, build-failed 75, syntax-invalid 14, redundant 2
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6628 ms, max 142 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:08:26 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-06 03:08:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 7 seconds
Variants: generated 200, build-succeeded 110, build-failed 64, syntax-invalid 23, redundant 3
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 6737 ms, max 189 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:08:52 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-06 03:09:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 32 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 20, redundant 9
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6507 ms, max 79 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:09:18 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-06 03:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 58 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 16, redundant 14
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6490 ms, max 192 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:09:43 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-06 03:10:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 25 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 15, redundant 7
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7131 ms, max 125 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:10:10 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-06 03:10:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 53 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 18, redundant 9
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7067 ms, max 210 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:10:38 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-06 03:11:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 24 seconds
Variants: generated 200, build-succeeded 121, build-failed 58, syntax-invalid 13, redundant 8
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7864 ms, max 131 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:11:09 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-06 03:11:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 51 seconds
Variants: generated 200, build-succeeded 115, build-failed 64, syntax-invalid 14, redundant 7
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 7110 ms, max 99 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:11:36 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-06 03:12:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 18 seconds
Variants: generated 200, build-succeeded 117, build-failed 63, syntax-invalid 16, redundant 4
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 7139 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:12:04 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-06 03:12:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 46 seconds
Variants: generated 200, build-succeeded 113, build-failed 67, syntax-invalid 12, redundant 8
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 7137 ms, max 181 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:12:32 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-06 03:13:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 seconds
Variants: generated 200, build-succeeded 107, build-failed 64, syntax-invalid 15, redundant 14
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 6730 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:13:00 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-06 03:13:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 seconds
Variants: generated 200, build-succeeded 113, build-failed 66, syntax-invalid 11, redundant 10
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7219 ms, max 127 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:13:29 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-06 03:13:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 11 seconds
Variants: generated 200, build-succeeded 118, build-failed 59, syntax-invalid 16, redundant 7
Fitness: max 1(2), min 0(116), ave 0.017
Test execution time: sum 7346 ms, max 120 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:13:56 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-06 03:14:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 39 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 15, redundant 10
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7209 ms, max 118 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:14:25 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-06 03:14:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 6 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 17, redundant 11
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6768 ms, max 79 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:14:51 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-06 03:15:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 35 seconds
Variants: generated 200, build-succeeded 119, build-failed 53, syntax-invalid 17, redundant 11
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7250 ms, max 123 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:15:20 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-06 03:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 2 seconds
Variants: generated 200, build-succeeded 127, build-failed 53, syntax-invalid 11, redundant 9
Fitness: max 1(2), min 0(125), ave 0.016
Test execution time: sum 7833 ms, max 97 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:15:48 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-06 03:16:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 32 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 14, redundant 15
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6834 ms, max 188 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:16:17 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-06 03:16:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 59 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 13, redundant 10
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7014 ms, max 87 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:16:44 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-06 03:17:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 29 seconds
Variants: generated 200, build-succeeded 118, build-failed 63, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0(117), ave 0.008
Test execution time: sum 7228 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:17:14 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-06 03:17:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 56 seconds
Variants: generated 200, build-succeeded 106, build-failed 57, syntax-invalid 11, redundant 26
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6363 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:17:42 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-06 03:18:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 26 seconds
Variants: generated 200, build-succeeded 123, build-failed 55, syntax-invalid 13, redundant 9
Fitness: max 1(2), min 0(121), ave 0.016
Test execution time: sum 7516 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:18:12 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-06 03:18:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 56 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 11, redundant 11
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7343 ms, max 78 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:18:41 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-06 03:19:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 27 seconds
Variants: generated 200, build-succeeded 117, build-failed 56, syntax-invalid 7, redundant 20
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7335 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:19:13 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-06 03:19:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 56 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 14, redundant 11
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 7054 ms, max 86 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:19:42 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-06 03:20:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 28 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 5, redundant 25
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7213 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:20:13 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-06 03:20:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 57 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 14, redundant 12
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7313 ms, max 89 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:20:42 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-06 03:21:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 28 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 18, redundant 12
Fitness: max 1(2), min 0(112), ave 0.018
Test execution time: sum 7365 ms, max 199 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:21:13 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-06 03:21:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 2 seconds
Variants: generated 200, build-succeeded 119, build-failed 59, syntax-invalid 12, redundant 10
Fitness: max 1(2), min 0(117), ave 0.017
Test execution time: sum 7927 ms, max 136 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:21:47 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-06 03:22:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 33 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 15, redundant 10
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 7240 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:22:19 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-06 03:22:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 4 seconds
Variants: generated 200, build-succeeded 116, build-failed 63, syntax-invalid 17, redundant 4
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7265 ms, max 83 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:22:49 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-06 03:23:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 36 seconds
Variants: generated 200, build-succeeded 118, build-failed 66, syntax-invalid 10, redundant 6
Fitness: max 1(3), min 0(115), ave 0.025
Test execution time: sum 7473 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:23:21 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-06 03:23:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 7 seconds
Variants: generated 200, build-succeeded 124, build-failed 57, syntax-invalid 9, redundant 10
Fitness: max 1(1), min 0(123), ave 0.008
Test execution time: sum 7840 ms, max 89 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:23:53 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-06 03:24:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 42 seconds
Variants: generated 200, build-succeeded 120, build-failed 54, syntax-invalid 13, redundant 13
Fitness: max 1(2), min 0(118), ave 0.017
Test execution time: sum 8048 ms, max 157 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:24:27 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-06 03:25:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 15 seconds
Variants: generated 200, build-succeeded 112, build-failed 49, syntax-invalid 28, redundant 11
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7488 ms, max 207 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:25:00 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-06 03:25:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 47 seconds
Variants: generated 200, build-succeeded 118, build-failed 54, syntax-invalid 20, redundant 8
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7322 ms, max 90 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:25:32 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-06 03:26:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 20 seconds
Variants: generated 200, build-succeeded 120, build-failed 59, syntax-invalid 18, redundant 3
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7440 ms, max 131 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:26:05 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-06 03:26:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 53 seconds
Variants: generated 200, build-succeeded 118, build-failed 50, syntax-invalid 19, redundant 13
Fitness: max 1(1), min 0(117), ave 0.008
Test execution time: sum 7671 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:26:38 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-06 03:27:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 24 seconds
Variants: generated 200, build-succeeded 118, build-failed 56, syntax-invalid 15, redundant 11
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7087 ms, max 98 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:27:09 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-06 03:27:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 57 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 13, redundant 8
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7256 ms, max 128 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:27:43 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-06 03:28:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 31 seconds
Variants: generated 200, build-succeeded 113, build-failed 53, syntax-invalid 25, redundant 9
Fitness: max 1(3), min 0(110), ave 0.027
Test execution time: sum 7732 ms, max 243 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:28:17 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-06 03:28:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 4 seconds
Variants: generated 200, build-succeeded 122, build-failed 50, syntax-invalid 20, redundant 8
Fitness: max 0(122), min 0(122), ave 0
Test execution time: sum 7152 ms, max 90 ms, min 52 ms
----------------------------------------------------------------

2023-08-06 03:28:49 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-06 03:29:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 37 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 21, redundant 10
Fitness: max 1(3), min 0(106), ave 0.028
Test execution time: sum 6783 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:29:22 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-06 03:29:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 58 seconds
Variants: generated 134, build-succeeded 68, build-failed 46, syntax-invalid 10, redundant 10
Fitness: max 1(2), min 0(66), ave 0.029
Test execution time: sum 4268 ms, max 85 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:29:43 [main] [INFO]  KGenProgMain - GA stopped
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v640)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v640)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v640)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v640)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v640)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v640)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    delta = (x0 - x1) / (1 - y0 / y1);
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v814)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,6 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
+	dirtyState = false;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v814)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v814)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v814)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v814)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v814)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -248,6 +247,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (Math.abs(y1) <= functionValueAccuracy) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1821)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
@@ -287,7 +286,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1821)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1821)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1821)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1821)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v1821)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                double p;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2097)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2097)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2097)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -169,7 +168,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            final double t0 = interpolator.getPreviousTime();
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,6 +212,7 @@
                             }
                         }
                     };
+					forward = interpolator.isForward();
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2097)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2097)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2097)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2471)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2471)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2471)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2471)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2471)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2471)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2601)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2601)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2601)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +247,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2601)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2601)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2658)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2658)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2658)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2658)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2658)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2658)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    p1 = 1.0 - r3;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2817)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2817)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2817)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2817)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2817)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2817)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -265,6 +265,7 @@
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
+					delta = 0.5 * oldDelta;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2845)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2845)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2845)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +247,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2845)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2845)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v2845)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -265,6 +265,7 @@
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
+					delta = 0.5 * oldDelta;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3225)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    finalized = false;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3225)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3225)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3225)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3225)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i < maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3824)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3824)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3824)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3824)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3824)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3824)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -304,7 +300,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3862)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3862)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3862)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3862)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3862)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v3862)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +296,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4541)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,8 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4541)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4541)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +245,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4541)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4541)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4541)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4701)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4701)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,8 +212,9 @@
                             }
                         }
                     };
+					forward = interpolator.isForward();
+					forward = interpolator.isForward();
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +249,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4701)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4701)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4701)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4864)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4864)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4864)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +247,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4864)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4864)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4864)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4977)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,8 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4977)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4977)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +247,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4977)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4977)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v4977)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,8 +212,8 @@
                             }
                         }
                     };
+					forward = interpolator.isForward();
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +248,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5356)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5356)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5356)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        pendingEventTime = Double.NaN;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -231,9 +230,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
@@ -248,6 +244,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5356)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5356)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -269,7 +270,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +247,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,8 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -248,6 +247,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -304,7 +299,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5774)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,8 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,8 +220,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5774)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5774)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +247,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5774)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5774)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5859)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,8 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5859)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5859)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
+        pendingEventTime = Double.NaN;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -150,7 +150,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -212,6 +211,7 @@
                             }
                         }
                     };
+					forward = interpolator.isForward();
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5859)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5859)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5859)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +296,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,8 +212,8 @@
                             }
                         }
                     };
+					forward = interpolator.isForward();
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5984)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5984)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5984)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5984)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5984)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v5984)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -269,7 +269,7 @@
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
-                if (p > 0.0) {
+                if (dx <= 0.0) {
                     p1 = -p1;
                 } else {
                     p = -p;
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6179)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6179)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6179)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -181,7 +180,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6179)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6179)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6179)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6365)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6365)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6365)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,8 +212,8 @@
                             }
                         }
                     };
+					forward = interpolator.isForward();
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6365)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6365)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6365)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6387)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +107,6 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6387)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6387)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6387)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6387)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6387)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6387)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -301,7 +301,6 @@
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
-                delta = x1 - x0;
                 oldDelta = delta;
             }
             i++;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6913)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6913)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6913)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,6 +212,7 @@
                             }
                         }
                     };
+					forward = interpolator.isForward();
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
@@ -248,6 +249,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6913)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6913)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:47 [main] [INFO]  PatchLogExporter - patch (v6913)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8212)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,8 +222,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8212)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8212)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8212)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8212)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8212)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8228)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,8 +222,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8228)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(tb);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8228)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8250)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,8 +222,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8250)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8250)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8250)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8250)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8250)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.defaultFunctionValueAccuracy = 1.0e-15;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8291)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,8 +222,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8291)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8291)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8291)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8291)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8292)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,8 +222,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8292)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8292)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8292)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8292)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v8292)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v9596)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +276,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v9596)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v9596)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v9596)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v9596)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v9596)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10265)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +114,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10265)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10265)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,15 +98,15 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        final BrentSolver solver = new BrentSolver();
+		increasing        = true;
+        double ta = t0;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10265)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10265)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10265)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +114,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,15 +98,15 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        final BrentSolver solver = new BrentSolver();
+		increasing        = true;
+        double ta = t0;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +114,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,15 +98,15 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        final BrentSolver solver = new BrentSolver();
+		increasing        = true;
+        double ta = t0;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -177,6 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			ta = tb;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -248,6 +249,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11284)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,8 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +115,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +175,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11284)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11284)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,15 +98,14 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        double ta = t0;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -248,6 +247,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11284)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11284)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11284)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11432)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -243,7 +249,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11432)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11432)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        double ta = t0;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11432)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11432)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v11432)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v12669)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -243,7 +246,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v12669)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v12669)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,12 +101,11 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        double ta = t0;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +147,6 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +167,7 @@
 
         try {
 
-            forward = interpolator.isForward();
+            final double t0 = interpolator.getPreviousTime();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -248,6 +246,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v12669)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v12669)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v13105)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v13105)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v13105)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,15 +98,12 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        double ta = t0;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +145,6 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -238,8 +234,6 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
                     ga = gb;
                 }
 
@@ -248,6 +242,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v13105)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v13105)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v13105)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16421)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16421)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16421)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -101,7 +102,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16421)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16421)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16421)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,15 +274,13 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16427)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16427)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16427)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -101,7 +102,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -248,6 +248,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16427)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16427)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -282,7 +282,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16843)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +119,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -243,7 +247,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16843)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16843)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16843)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16843)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16843)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -282,7 +274,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16892)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +119,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -243,7 +247,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16892)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16892)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16892)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16892)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v16892)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,13 +276,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +208,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +251,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18425)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18425)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18425)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +208,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -248,6 +252,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18425)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18425)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18425)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18618)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +119,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18618)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18618)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +250,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18618)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18618)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18618)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,8 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y1 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18627)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +119,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18627)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18627)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +250,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18627)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18627)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18627)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -258,7 +259,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18667)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +119,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18667)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18667)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +250,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18667)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18667)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v18667)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,16 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19019)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -243,7 +248,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19019)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19019)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19019)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,7 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
+        double ta = t0;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +205,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -248,6 +249,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19019)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19019)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19074)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -243,7 +248,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19074)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19074)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,7 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
+        double ta = t0;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -203,7 +205,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -248,6 +249,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19074)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19074)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19074)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +117,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +252,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +288,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -282,7 +283,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +119,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,7 +222,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    this.h = Math.abs(h);
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -276,13 +277,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19465)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +119,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,7 +222,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    this.h = Math.abs(h);
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19465)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19465)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19465)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19465)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v19465)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,16 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -282,7 +275,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -245,9 +246,10 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -268,7 +270,8 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20831)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,7 +222,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    this.h = Math.abs(h);
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20831)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20831)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,7 +104,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -248,6 +250,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20831)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20831)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20831)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -228,6 +228,7 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				x0 = x1;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20889)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,7 +222,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    this.h = Math.abs(h);
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20889)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20889)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,7 +104,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +251,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +287,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20889)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20889)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v20889)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -228,6 +228,7 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				x0 = x1;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +215,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -182,6 +181,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,9 +247,9 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21442)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +214,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21442)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21442)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,9 +249,9 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -286,8 +290,7 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
+            boolean resetDerivatives = false;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21442)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21442)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21442)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,8 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i < maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21461)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +214,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21461)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21461)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,9 +249,9 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -286,8 +290,7 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
+            boolean resetDerivatives = false;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21461)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21461)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21461)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,8 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y2 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21469)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +214,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21469)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21469)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,9 +249,9 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -286,8 +290,7 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
+            boolean resetDerivatives = false;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21469)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21469)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21469)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,8 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if ((y1 > 0) == (y2 > 0)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21492)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +214,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21492)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21492)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -245,9 +248,9 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -286,8 +289,7 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
+            boolean resetDerivatives = false;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21492)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21492)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21492)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21816)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21816)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21816)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -101,9 +102,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21816)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21816)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v21816)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v22095)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	final int n = (currentState == null) ? -1 : currentState.length;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +117,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -208,7 +210,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v22095)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v22095)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v22095)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v22095)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:48 [main] [INFO]  PatchLogExporter - patch (v22095)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,16 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v22666)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,15 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v22666)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v22666)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -182,6 +181,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,9 +247,9 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -268,7 +270,8 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v22666)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v22666)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v22666)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,8 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i <= maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -288,7 +289,6 @@
             }
             // Save old X1, Y1
             x0 = x1;
-            y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24115)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,16 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24115)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24115)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +183,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +251,9 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24115)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24115)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24115)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24308)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24308)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24308)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,7 +104,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +250,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -268,7 +272,8 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24308)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24308)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24308)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -276,10 +279,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24584)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,16 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24584)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24584)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -286,8 +289,7 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
+            pendingEvent = false;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24584)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24584)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24584)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24840)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,15 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	final int n = (currentState == null) ? -1 : currentState.length;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24840)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24840)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +269,9 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24840)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24840)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24840)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,16 +222,11 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24930)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -208,7 +214,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24930)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -324,8 +326,6 @@
             handler.resetState(t, y);
         }
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-
         return (nextAction == EventHandler.RESET_STATE) ||
                (nextAction == EventHandler.RESET_DERIVATIVES);
 
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24930)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v24930)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,11 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -276,10 +281,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25603)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25603)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25603)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25603)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -101,7 +102,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -182,6 +182,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +254,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25603)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25603)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25621)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25621)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25621)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -101,7 +102,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -182,6 +182,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -248,6 +254,7 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
+			pendingEvent = false;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25621)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25621)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v25621)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26267)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -242,7 +248,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26267)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26267)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,7 +104,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +249,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +271,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
@@ -282,7 +288,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26267)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26267)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26267)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26671)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,16 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26671)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26671)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +183,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +248,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +270,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26671)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26671)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26671)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,16 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26675)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,16 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26675)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26675)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +183,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +248,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +270,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
@@ -282,7 +287,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26675)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26675)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v26675)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27807)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27807)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        double ta = t0;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +183,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -245,8 +249,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +271,9 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27807)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27807)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27843)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27843)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27843)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        double ta = t0;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +183,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +250,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +272,9 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27843)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27843)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v27843)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,16 +222,12 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28004)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28004)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28004)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +183,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +274,11 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28004)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28004)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28004)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -181,7 +181,8 @@
                         min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            verifyBracketing(min, max, f);
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -222,6 +223,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -290,7 +293,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28097)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28097)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28097)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28097)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +183,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +274,11 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28097)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28097)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28097)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -181,7 +181,8 @@
                         min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            verifyBracketing(min, max, f);
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -222,6 +223,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28234)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28234)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28234)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +248,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +270,9 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28234)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28234)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28234)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -275,14 +277,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					p = dx * r3;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28609)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,18 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    dirtyState = false;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28609)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28609)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28609)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +271,12 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28609)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28609)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28609)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28615)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,18 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    dirtyState = false;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28615)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +271,12 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28615)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28615)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -280,6 +282,7 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
+					delta = x1 - x0;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28655)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,18 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    dirtyState = false;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28655)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28655)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,9 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -182,6 +184,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +271,12 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28655)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28655)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28655)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,8 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,17 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -248,7 +259,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    this.dirtyState = true;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +271,8 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29016)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29016)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29016)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29016)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,10 +104,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +251,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +273,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29016)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29016)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29016)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29034)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29034)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29034)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,10 +104,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +251,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +273,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29034)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29034)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29034)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -276,10 +280,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29894)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29894)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29894)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -268,7 +274,12 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29894)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29894)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v29894)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -258,7 +261,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i <= maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -273,7 +276,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,10 +104,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +251,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +273,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,8 +222,12 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i < maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30411)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -273,7 +276,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30411)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30411)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,10 +104,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -245,8 +250,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +272,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30411)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30411)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30411)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30440)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -273,7 +276,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30440)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30440)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,10 +104,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -245,8 +251,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +273,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30440)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30440)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30440)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -276,10 +280,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,10 +103,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +180,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -245,8 +246,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +268,11 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30863)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,13 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -229,7 +236,6 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30937)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30937)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30937)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30937)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,7 +104,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -268,7 +273,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30937)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30937)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30937)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,9 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30975)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30975)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30975)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30975)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,7 +104,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +182,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +218,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    boolean resetDerivatives = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -245,8 +249,7 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            increasing = true;
             pendingEventTime = Double.NaN;
             return false;
 
@@ -268,7 +271,11 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30975)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30975)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v30975)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31111)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -273,7 +279,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31111)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31111)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31111)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -268,7 +273,10 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31111)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31111)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31111)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,10 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31134)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31134)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31134)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        nextAction = EventHandler.CONTINUE;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,10 +104,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				increasing = true;
+				increasing = true;
+				increasing = true;
+				increasing = true;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -268,7 +270,11 @@
      * step.
      */
     public double getEventTime() {
-        return pendingEventTime;
+        g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
+		return pendingEventTime;
     }
 
     /** Acknowledge the fact the step has been accepted by the integrator.
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31134)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31134)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 03:29:49 [main] [INFO]  PatchLogExporter - patch (v31134)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -222,6 +222,12 @@
         double oldDelta = delta;
 
         int i = 0;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -229,7 +235,6 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-06 03:29:49 [main] [INFO]  KGenProgMain - Summary
Reached generation = 157
Generated variants = 31134
Syntax valid variants = 28605
Build succeeded variants = 16836
Time elapsed = 3 hours 17 minutes 4 seconds
Exit status = SUCCESS
