2023-08-05 15:27:03 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-05 15:27:03 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-05 15:27:03 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-05 15:27:04 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 0 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-05 15:27:24 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-05 15:27:25 [main] [INFO]  KGenProgMain - GA started
2023-08-05 15:27:25 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-05 15:27:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 100, build-succeeded 27, build-failed 61, syntax-invalid 6, redundant 6
Fitness: max 1(1), min 0(26), ave 0.037
Test execution time: sum 5192 ms, max 778 ms, min 95 ms
----------------------------------------------------------------

2023-08-05 15:27:41 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-05 15:27:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 100, build-succeeded 35, build-failed 49, syntax-invalid 5, redundant 11
Fitness: max 1(2), min 0(33), ave 0.057
Test execution time: sum 3586 ms, max 300 ms, min 71 ms
----------------------------------------------------------------

2023-08-05 15:27:53 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-05 15:28:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 seconds
Variants: generated 200, build-succeeded 51, build-failed 55, syntax-invalid 4, redundant 90
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 4588 ms, max 249 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 15:28:09 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-05 15:28:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 0 seconds
Variants: generated 200, build-succeeded 67, build-failed 64, syntax-invalid 9, redundant 60
Fitness: max 1(1), min 0(66), ave 0.015
Test execution time: sum 5777 ms, max 239 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:28:25 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-05 15:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 19 seconds
Variants: generated 200, build-succeeded 78, build-failed 61, syntax-invalid 9, redundant 52
Fitness: max 0(78), min 0(78), ave 0
Test execution time: sum 6600 ms, max 264 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:28:44 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-05 15:29:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 39 seconds
Variants: generated 200, build-succeeded 88, build-failed 54, syntax-invalid 14, redundant 44
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 7818 ms, max 288 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:29:04 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-05 15:29:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 56 seconds
Variants: generated 200, build-succeeded 81, build-failed 63, syntax-invalid 8, redundant 48
Fitness: max 0(81), min 0(81), ave 0
Test execution time: sum 6694 ms, max 279 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:29:21 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-05 15:29:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 17 seconds
Variants: generated 200, build-succeeded 97, build-failed 56, syntax-invalid 7, redundant 40
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 8146 ms, max 259 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:29:43 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-05 15:30:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 35 seconds
Variants: generated 200, build-succeeded 102, build-failed 66, syntax-invalid 5, redundant 27
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 7711 ms, max 204 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:30:01 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-05 15:30:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 56 seconds
Variants: generated 200, build-succeeded 104, build-failed 62, syntax-invalid 9, redundant 25
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 8027 ms, max 252 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:30:21 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-05 15:30:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 16 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 8, redundant 17
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8489 ms, max 262 ms, min 62 ms
----------------------------------------------------------------

2023-08-05 15:30:41 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-05 15:31:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 36 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 5, redundant 14
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 8563 ms, max 169 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:31:01 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-05 15:31:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 55 seconds
Variants: generated 200, build-succeeded 107, build-failed 64, syntax-invalid 11, redundant 18
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 8305 ms, max 274 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:31:21 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-05 15:31:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 13 seconds
Variants: generated 200, build-succeeded 108, build-failed 53, syntax-invalid 17, redundant 22
Fitness: max 1(3), min 0(105), ave 0.028
Test execution time: sum 8143 ms, max 210 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:31:39 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-05 15:31:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 32 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 16, redundant 16
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 8374 ms, max 183 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:31:57 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-05 15:32:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 51 seconds
Variants: generated 200, build-succeeded 115, build-failed 66, syntax-invalid 8, redundant 11
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 8500 ms, max 167 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:32:16 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-05 15:32:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 10 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 12, redundant 17
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 8243 ms, max 190 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:32:36 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-05 15:32:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 30 seconds
Variants: generated 200, build-succeeded 107, build-failed 70, syntax-invalid 9, redundant 14
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7714 ms, max 160 ms, min 62 ms
----------------------------------------------------------------

2023-08-05 15:32:55 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-05 15:33:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 49 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 19, redundant 11
Fitness: max 1(1), min 0(108), ave 0.009
Test execution time: sum 8679 ms, max 197 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:33:14 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-05 15:33:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 9 seconds
Variants: generated 200, build-succeeded 109, build-failed 64, syntax-invalid 12, redundant 15
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 8544 ms, max 279 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:33:34 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-05 15:33:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 28 seconds
Variants: generated 200, build-succeeded 121, build-failed 64, syntax-invalid 9, redundant 6
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 9353 ms, max 276 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:33:54 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-05 15:34:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 48 seconds
Variants: generated 200, build-succeeded 109, build-failed 67, syntax-invalid 18, redundant 6
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 8387 ms, max 338 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:34:13 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-05 15:34:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 12 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 15, redundant 13
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 11456 ms, max 942 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:34:38 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-05 15:34:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 34 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 14, redundant 14
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8952 ms, max 328 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:34:59 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-05 15:35:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 55 seconds
Variants: generated 200, build-succeeded 106, build-failed 62, syntax-invalid 19, redundant 13
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 8239 ms, max 281 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:35:20 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-05 15:35:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 15 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 22, redundant 14
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 8585 ms, max 244 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:35:40 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-05 15:36:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 35 seconds
Variants: generated 200, build-succeeded 105, build-failed 61, syntax-invalid 26, redundant 8
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 7525 ms, max 261 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:36:00 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-05 15:36:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 56 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 21, redundant 7
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8669 ms, max 186 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:36:21 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-05 15:36:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 21, redundant 8
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 8582 ms, max 256 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:36:43 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-05 15:37:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 38 seconds
Variants: generated 200, build-succeeded 106, build-failed 53, syntax-invalid 27, redundant 14
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 7758 ms, max 159 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:37:04 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-05 15:37:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 2 seconds
Variants: generated 200, build-succeeded 121, build-failed 53, syntax-invalid 18, redundant 8
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 8998 ms, max 162 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:37:27 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-05 15:37:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 22 seconds
Variants: generated 200, build-succeeded 97, build-failed 65, syntax-invalid 31, redundant 7
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 7265 ms, max 160 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:37:47 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-05 15:38:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 42 seconds
Variants: generated 200, build-succeeded 101, build-failed 59, syntax-invalid 28, redundant 12
Fitness: max 1(1), min 0(100), ave 0.01
Test execution time: sum 7311 ms, max 144 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:38:07 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-05 15:41:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 4 seconds
Variants: generated 200, build-succeeded 99, build-failed 66, syntax-invalid 25, redundant 10
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 187424 ms, max 180085 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:41:30 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-05 15:41:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 25 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 25, redundant 10
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 7397 ms, max 161 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:41:50 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-05 15:42:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 47 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 22, redundant 11
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 8085 ms, max 163 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:42:12 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-05 15:42:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 13 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 20, redundant 8
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8999 ms, max 325 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:42:38 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-05 15:42:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 34 seconds
Variants: generated 200, build-succeeded 106, build-failed 62, syntax-invalid 23, redundant 9
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 7673 ms, max 143 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:42:59 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-05 15:43:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 57 seconds
Variants: generated 200, build-succeeded 114, build-failed 56, syntax-invalid 19, redundant 11
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 8347 ms, max 173 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:43:22 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-05 15:43:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 18 seconds
Variants: generated 200, build-succeeded 106, build-failed 52, syntax-invalid 16, redundant 26
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 7926 ms, max 178 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:43:44 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-05 15:44:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 41 seconds
Variants: generated 200, build-succeeded 106, build-failed 69, syntax-invalid 20, redundant 5
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 7889 ms, max 166 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:44:06 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-05 15:44:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 3 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 18, redundant 17
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7816 ms, max 114 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:44:29 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-05 15:44:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 24 seconds
Variants: generated 200, build-succeeded 100, build-failed 62, syntax-invalid 30, redundant 8
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 7181 ms, max 161 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:44:50 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-05 15:45:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 46 seconds
Variants: generated 200, build-succeeded 87, build-failed 61, syntax-invalid 35, redundant 17
Fitness: max 0(87), min 0(87), ave 0
Test execution time: sum 6735 ms, max 245 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:45:12 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-05 15:45:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 6 seconds
Variants: generated 200, build-succeeded 87, build-failed 61, syntax-invalid 42, redundant 10
Fitness: max 1(2), min 0(85), ave 0.023
Test execution time: sum 6262 ms, max 107 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:45:31 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-05 15:45:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 28 seconds
Variants: generated 200, build-succeeded 95, build-failed 68, syntax-invalid 33, redundant 4
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 6990 ms, max 167 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:45:53 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-05 15:46:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 49 seconds
Variants: generated 200, build-succeeded 91, build-failed 63, syntax-invalid 34, redundant 12
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 6773 ms, max 205 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:46:14 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-05 15:46:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 11 seconds
Variants: generated 200, build-succeeded 109, build-failed 62, syntax-invalid 15, redundant 14
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7667 ms, max 97 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:46:36 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-05 15:47:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 35 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 19, redundant 7
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7913 ms, max 143 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 15:47:00 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-05 15:47:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 58 seconds
Variants: generated 200, build-succeeded 112, build-failed 56, syntax-invalid 20, redundant 12
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8169 ms, max 156 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:47:24 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-05 15:47:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 21 seconds
Variants: generated 200, build-succeeded 105, build-failed 61, syntax-invalid 25, redundant 9
Fitness: max 1(1), min 0(104), ave 0.01
Test execution time: sum 7871 ms, max 249 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:47:47 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-05 15:48:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 44 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 19, redundant 9
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 8058 ms, max 115 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:48:09 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-05 15:48:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 8 seconds
Variants: generated 200, build-succeeded 100, build-failed 70, syntax-invalid 21, redundant 9
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 7184 ms, max 227 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:48:33 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-05 15:48:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 33 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 20, redundant 8
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8340 ms, max 264 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:48:58 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-05 15:49:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 57 seconds
Variants: generated 200, build-succeeded 102, build-failed 64, syntax-invalid 21, redundant 13
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 7861 ms, max 291 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:49:22 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-05 15:49:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 21 seconds
Variants: generated 200, build-succeeded 110, build-failed 69, syntax-invalid 14, redundant 7
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 8031 ms, max 112 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:49:46 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-05 15:50:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 47 seconds
Variants: generated 200, build-succeeded 98, build-failed 66, syntax-invalid 27, redundant 9
Fitness: max 1(1), min 0(97), ave 0.01
Test execution time: sum 8025 ms, max 198 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:50:13 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-05 15:50:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 11 seconds
Variants: generated 200, build-succeeded 106, build-failed 66, syntax-invalid 15, redundant 13
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 7882 ms, max 132 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:50:36 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-05 15:51:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 37 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 21, redundant 12
Fitness: max 1(4), min 0(106), ave 0.036
Test execution time: sum 8306 ms, max 168 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:51:02 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-05 15:51:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 5 seconds
Variants: generated 200, build-succeeded 110, build-failed 64, syntax-invalid 20, redundant 6
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 8928 ms, max 275 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:51:30 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-05 15:51:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 31 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 18, redundant 10
Fitness: max 1(3), min 0(113), ave 0.026
Test execution time: sum 9233 ms, max 161 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:51:56 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-05 15:52:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 59 seconds
Variants: generated 200, build-succeeded 119, build-failed 57, syntax-invalid 10, redundant 14
Fitness: max 1(1), min 0(118), ave 0.008
Test execution time: sum 9440 ms, max 203 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:52:24 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-05 15:52:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 29 seconds
Variants: generated 200, build-succeeded 122, build-failed 64, syntax-invalid 8, redundant 6
Fitness: max 1(1), min 0(121), ave 0.008
Test execution time: sum 10794 ms, max 388 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:52:55 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-05 15:53:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 0 seconds
Variants: generated 200, build-succeeded 125, build-failed 58, syntax-invalid 10, redundant 7
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 10694 ms, max 233 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:53:25 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-05 15:53:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 27 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 21, redundant 10
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 8897 ms, max 188 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:53:53 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-05 15:54:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 51 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 16, redundant 12
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7665 ms, max 102 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:54:16 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-05 15:54:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 16 seconds
Variants: generated 200, build-succeeded 112, build-failed 66, syntax-invalid 8, redundant 14
Fitness: max 1(2), min 0(110), ave 0.018
Test execution time: sum 8589 ms, max 180 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:54:42 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-05 15:55:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 40 seconds
Variants: generated 200, build-succeeded 117, build-failed 63, syntax-invalid 12, redundant 8
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 8176 ms, max 125 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:55:06 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-05 15:55:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 6 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 11, redundant 15
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 8613 ms, max 162 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:55:31 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-05 15:55:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 30 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 15, redundant 7
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 8277 ms, max 92 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:55:56 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-05 15:56:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 56 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 11, redundant 17
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 8152 ms, max 160 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:56:21 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-05 15:56:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 23 seconds
Variants: generated 200, build-succeeded 125, build-failed 53, syntax-invalid 6, redundant 16
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 8976 ms, max 167 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:56:48 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-05 15:57:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 50 seconds
Variants: generated 200, build-succeeded 117, build-failed 65, syntax-invalid 12, redundant 6
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 9181 ms, max 301 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:57:16 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-05 15:57:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 17 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 13, redundant 11
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 8087 ms, max 154 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:57:42 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-05 15:58:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 46 seconds
Variants: generated 200, build-succeeded 115, build-failed 50, syntax-invalid 22, redundant 13
Fitness: max 1(2), min 0(113), ave 0.017
Test execution time: sum 9484 ms, max 320 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:58:11 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-05 15:58:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 13 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 15, redundant 7
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 8338 ms, max 135 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 15:58:38 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-05 15:59:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 43 seconds
Variants: generated 200, build-succeeded 114, build-failed 59, syntax-invalid 21, redundant 6
Fitness: max 1(2), min 0(112), ave 0.018
Test execution time: sum 9049 ms, max 280 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 15:59:08 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-05 15:59:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 11 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 22, redundant 8
Fitness: max 1(1), min 0(104), ave 0.01
Test execution time: sum 7736 ms, max 100 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 15:59:36 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-05 16:00:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 39 seconds
Variants: generated 200, build-succeeded 119, build-failed 55, syntax-invalid 15, redundant 11
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 8694 ms, max 156 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:00:05 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-05 16:00:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 6 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 17, redundant 5
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 8363 ms, max 132 ms, min 63 ms
----------------------------------------------------------------

2023-08-05 16:00:32 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-05 16:00:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 34 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 25, redundant 8
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 8610 ms, max 285 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:00:59 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-05 16:01:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 2 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 18, redundant 15
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 7900 ms, max 132 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:01:27 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-05 16:01:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 29 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 23, redundant 9
Fitness: max 1(3), min 0(108), ave 0.027
Test execution time: sum 8198 ms, max 172 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:01:54 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-05 16:02:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 56 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 21, redundant 7
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 8386 ms, max 100 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:02:21 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-05 16:02:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 25 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 12, redundant 16
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 8043 ms, max 156 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:02:50 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-05 16:03:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 53 seconds
Variants: generated 200, build-succeeded 113, build-failed 62, syntax-invalid 14, redundant 11
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 8027 ms, max 121 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:03:18 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-05 16:03:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 22 seconds
Variants: generated 200, build-succeeded 118, build-failed 60, syntax-invalid 10, redundant 12
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 9361 ms, max 155 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:03:47 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-05 16:04:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 49 seconds
Variants: generated 200, build-succeeded 111, build-failed 70, syntax-invalid 13, redundant 6
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 7929 ms, max 154 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:04:14 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-05 16:04:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 19 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 15, redundant 9
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 8757 ms, max 283 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:04:44 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-05 16:05:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 48 seconds
Variants: generated 200, build-succeeded 114, build-failed 66, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 8029 ms, max 100 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:05:13 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-05 16:05:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 17 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 26, redundant 7
Fitness: max 1(1), min 0(105), ave 0.009
Test execution time: sum 8576 ms, max 265 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:05:42 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-05 16:06:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 44 seconds
Variants: generated 200, build-succeeded 106, build-failed 62, syntax-invalid 23, redundant 9
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 7772 ms, max 132 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:06:09 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-05 16:06:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 13 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 23, redundant 8
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 8666 ms, max 272 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 16:06:38 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-05 16:07:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 40 seconds
Variants: generated 200, build-succeeded 105, build-failed 68, syntax-invalid 20, redundant 7
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 7431 ms, max 127 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:07:05 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-05 16:07:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 9 seconds
Variants: generated 200, build-succeeded 101, build-failed 68, syntax-invalid 22, redundant 9
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 7750 ms, max 147 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:07:34 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-05 16:08:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 37 seconds
Variants: generated 200, build-succeeded 107, build-failed 59, syntax-invalid 27, redundant 7
Fitness: max 1(2), min 0(105), ave 0.019
Test execution time: sum 7988 ms, max 149 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:08:02 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-05 16:08:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 7 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 16, redundant 10
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 8473 ms, max 243 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:08:32 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-05 16:09:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 36 seconds
Variants: generated 200, build-succeeded 110, build-failed 67, syntax-invalid 19, redundant 4
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 7957 ms, max 103 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:09:01 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-05 16:09:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 8 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 19, redundant 9
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 8476 ms, max 169 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:09:33 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-05 16:10:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 38 seconds
Variants: generated 200, build-succeeded 112, build-failed 62, syntax-invalid 18, redundant 8
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8181 ms, max 167 ms, min 64 ms
----------------------------------------------------------------

2023-08-05 16:10:04 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-05 16:10:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 13 seconds
Variants: generated 200, build-succeeded 126, build-failed 63, syntax-invalid 4, redundant 7
Fitness: max 0(126), min 0(126), ave 0
Test execution time: sum 9808 ms, max 153 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:10:38 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-05 16:11:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 44 seconds
Variants: generated 200, build-succeeded 113, build-failed 59, syntax-invalid 16, redundant 12
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 8270 ms, max 165 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:11:09 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-05 16:11:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 19 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 15, redundant 11
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 9002 ms, max 151 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:11:44 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-05 16:12:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 52 seconds
Variants: generated 200, build-succeeded 107, build-failed 67, syntax-invalid 13, redundant 13
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 8099 ms, max 113 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:12:17 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-05 16:12:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 26 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 15, redundant 13
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 8931 ms, max 167 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:12:51 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-05 16:13:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 1 seconds
Variants: generated 200, build-succeeded 112, build-failed 71, syntax-invalid 9, redundant 8
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 8725 ms, max 172 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:13:26 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-05 16:13:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 33 seconds
Variants: generated 200, build-succeeded 108, build-failed 66, syntax-invalid 23, redundant 3
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 8342 ms, max 141 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:13:59 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-05 16:14:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 5 seconds
Variants: generated 200, build-succeeded 112, build-failed 45, syntax-invalid 25, redundant 18
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 8493 ms, max 111 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:14:30 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-05 16:15:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 39 seconds
Variants: generated 200, build-succeeded 115, build-failed 61, syntax-invalid 11, redundant 13
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 9339 ms, max 183 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:15:04 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-05 16:15:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 11 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 13, redundant 13
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 8560 ms, max 162 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 16:15:36 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-05 16:16:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 45 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 21, redundant 8
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 8613 ms, max 152 ms, min 65 ms
----------------------------------------------------------------

2023-08-05 16:16:10 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-05 16:16:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 16 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 25, redundant 9
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 7988 ms, max 149 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:16:41 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-05 16:17:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 48 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 22, redundant 9
Fitness: max 1(1), min 0(108), ave 0.009
Test execution time: sum 8298 ms, max 188 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 16:17:13 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-05 16:17:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 20 seconds
Variants: generated 200, build-succeeded 116, build-failed 62, syntax-invalid 15, redundant 7
Fitness: max 1(2), min 0(114), ave 0.017
Test execution time: sum 8462 ms, max 98 ms, min 66 ms
----------------------------------------------------------------

2023-08-05 16:17:45 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-05 16:18:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 53 seconds
Variants: generated 200, build-succeeded 111, build-failed 65, syntax-invalid 15, redundant 9
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 8572 ms, max 237 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 16:18:18 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-05 16:18:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 24 seconds
Variants: generated 200, build-succeeded 108, build-failed 65, syntax-invalid 23, redundant 4
Fitness: max 1(4), min 0(104), ave 0.037
Test execution time: sum 8110 ms, max 129 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 16:18:49 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-05 16:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 57 seconds
Variants: generated 200, build-succeeded 109, build-failed 59, syntax-invalid 20, redundant 12
Fitness: max 1(4), min 0(105), ave 0.037
Test execution time: sum 8302 ms, max 254 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 16:19:22 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-05 16:19:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 28 seconds
Variants: generated 200, build-succeeded 103, build-failed 71, syntax-invalid 20, redundant 6
Fitness: max 1(1), min 0(102), ave 0.01
Test execution time: sum 7460 ms, max 104 ms, min 67 ms
----------------------------------------------------------------

2023-08-05 16:19:54 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-05 16:20:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 2 seconds
Variants: generated 200, build-succeeded 98, build-failed 70, syntax-invalid 23, redundant 9
Fitness: max 1(3), min 0(95), ave 0.031
Test execution time: sum 7766 ms, max 263 ms, min 68 ms
----------------------------------------------------------------

2023-08-05 16:20:27 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-05 16:20:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 28 seconds
Variants: generated 200, build-succeeded 93, build-failed 59, syntax-invalid 35, redundant 13
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5706 ms, max 97 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:20:54 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-05 16:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 55 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 24, redundant 7
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6776 ms, max 161 ms, min 52 ms
----------------------------------------------------------------

2023-08-05 16:21:21 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-05 16:21:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 22 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 17, redundant 8
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7027 ms, max 92 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:21:47 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-05 16:22:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 50 seconds
Variants: generated 200, build-succeeded 112, build-failed 54, syntax-invalid 25, redundant 9
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 7191 ms, max 129 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:22:15 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-05 16:22:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 17 seconds
Variants: generated 200, build-succeeded 102, build-failed 51, syntax-invalid 33, redundant 14
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6466 ms, max 124 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:22:43 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-05 16:23:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 44 seconds
Variants: generated 200, build-succeeded 104, build-failed 65, syntax-invalid 25, redundant 6
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6316 ms, max 138 ms, min 52 ms
----------------------------------------------------------------

2023-08-05 16:23:10 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-05 16:23:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 9 seconds
Variants: generated 200, build-succeeded 95, build-failed 63, syntax-invalid 30, redundant 12
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5442 ms, max 79 ms, min 52 ms
----------------------------------------------------------------

2023-08-05 16:23:35 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-05 16:24:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 36 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 23, redundant 7
Fitness: max 1(1), min 0(108), ave 0.009
Test execution time: sum 6416 ms, max 113 ms, min 52 ms
----------------------------------------------------------------

2023-08-05 16:24:01 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-05 16:24:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 3 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 21, redundant 6
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 6633 ms, max 93 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:24:28 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-05 16:24:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 31 seconds
Variants: generated 200, build-succeeded 107, build-failed 60, syntax-invalid 27, redundant 6
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6630 ms, max 135 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:24:56 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-05 16:25:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 56 seconds
Variants: generated 200, build-succeeded 99, build-failed 59, syntax-invalid 38, redundant 4
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 5931 ms, max 119 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:25:21 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-05 16:25:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 24 seconds
Variants: generated 200, build-succeeded 108, build-failed 58, syntax-invalid 28, redundant 6
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 6613 ms, max 179 ms, min 52 ms
----------------------------------------------------------------

2023-08-05 16:25:50 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-05 16:26:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 51 seconds
Variants: generated 200, build-succeeded 110, build-failed 52, syntax-invalid 27, redundant 11
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6366 ms, max 82 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:26:16 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-05 16:26:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 20 seconds
Variants: generated 200, build-succeeded 107, build-failed 55, syntax-invalid 30, redundant 8
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7012 ms, max 166 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:26:45 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-05 16:27:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 48 seconds
Variants: generated 200, build-succeeded 94, build-failed 60, syntax-invalid 32, redundant 14
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 6001 ms, max 115 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:27:13 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-05 16:27:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 seconds
Variants: generated 200, build-succeeded 99, build-failed 64, syntax-invalid 27, redundant 10
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 7021 ms, max 367 ms, min 57 ms
----------------------------------------------------------------

2023-08-05 16:27:45 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-05 16:28:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 seconds
Variants: generated 200, build-succeeded 109, build-failed 59, syntax-invalid 22, redundant 10
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7334 ms, max 132 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 16:28:16 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-05 16:28:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 22 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 31, redundant 6
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 7326 ms, max 156 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 16:28:47 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-05 16:29:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 53 seconds
Variants: generated 200, build-succeeded 113, build-failed 50, syntax-invalid 27, redundant 10
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7610 ms, max 140 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 16:29:18 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-05 16:29:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 22 seconds
Variants: generated 200, build-succeeded 102, build-failed 73, syntax-invalid 16, redundant 9
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6475 ms, max 164 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:29:48 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-05 16:30:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 50 seconds
Variants: generated 200, build-succeeded 102, build-failed 64, syntax-invalid 23, redundant 11
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6280 ms, max 139 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:30:15 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-05 16:30:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 20 seconds
Variants: generated 200, build-succeeded 103, build-failed 64, syntax-invalid 24, redundant 9
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6615 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:30:45 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-05 16:31:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 48 seconds
Variants: generated 200, build-succeeded 100, build-failed 54, syntax-invalid 36, redundant 10
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6400 ms, max 140 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:31:13 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-05 16:34:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 19 seconds
Variants: generated 200, build-succeeded 100, build-failed 62, syntax-invalid 27, redundant 11
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 187121 ms, max 180070 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:34:44 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-05 16:35:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 45 seconds
Variants: generated 200, build-succeeded 92, build-failed 71, syntax-invalid 33, redundant 4
Fitness: max 1(3), min 0(89), ave 0.033
Test execution time: sum 5700 ms, max 135 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:35:10 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-05 16:35:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 13 seconds
Variants: generated 200, build-succeeded 103, build-failed 58, syntax-invalid 31, redundant 8
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6633 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:35:38 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-05 16:36:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 41 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 24, redundant 12
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6883 ms, max 94 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 16:36:07 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-05 16:36:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 9 seconds
Variants: generated 200, build-succeeded 100, build-failed 58, syntax-invalid 32, redundant 10
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6371 ms, max 143 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:36:34 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-05 16:37:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 37 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 25, redundant 10
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6244 ms, max 77 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:37:02 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-05 16:37:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 7 seconds
Variants: generated 200, build-succeeded 105, build-failed 57, syntax-invalid 26, redundant 12
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6752 ms, max 146 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:37:32 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-05 16:38:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 35 seconds
Variants: generated 200, build-succeeded 96, build-failed 65, syntax-invalid 27, redundant 12
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 6104 ms, max 150 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:38:00 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-05 16:38:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 6 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 20, redundant 9
Fitness: max 1(2), min 0(111), ave 0.018
Test execution time: sum 7227 ms, max 144 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:38:32 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-05 16:39:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 38 seconds
Variants: generated 200, build-succeeded 107, build-failed 56, syntax-invalid 27, redundant 10
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7346 ms, max 253 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:39:03 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-05 16:39:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 10 seconds
Variants: generated 200, build-succeeded 108, build-failed 63, syntax-invalid 16, redundant 13
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 7391 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:39:35 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-05 16:40:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 22, redundant 14
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6801 ms, max 112 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:40:07 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-05 16:40:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 11 seconds
Variants: generated 200, build-succeeded 115, build-failed 52, syntax-invalid 20, redundant 13
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6947 ms, max 93 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:40:36 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-05 16:41:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 43 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 18, redundant 11
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7233 ms, max 150 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:41:08 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-05 16:41:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 13 seconds
Variants: generated 200, build-succeeded 109, build-failed 61, syntax-invalid 21, redundant 9
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 6441 ms, max 81 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:41:38 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-05 16:42:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 44 seconds
Variants: generated 200, build-succeeded 109, build-failed 55, syntax-invalid 31, redundant 5
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 6947 ms, max 145 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:42:09 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-05 16:42:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 18 seconds
Variants: generated 200, build-succeeded 127, build-failed 51, syntax-invalid 7, redundant 15
Fitness: max 0(127), min 0(127), ave 0
Test execution time: sum 7911 ms, max 116 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:42:43 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-05 16:43:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 51 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 14, redundant 11
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7123 ms, max 221 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:43:16 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-05 16:43:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 22 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 21, redundant 7
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6744 ms, max 102 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:43:47 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-05 16:44:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 53 seconds
Variants: generated 200, build-succeeded 106, build-failed 53, syntax-invalid 31, redundant 10
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6602 ms, max 117 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:44:18 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-05 16:44:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 22 seconds
Variants: generated 200, build-succeeded 102, build-failed 62, syntax-invalid 25, redundant 11
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6103 ms, max 101 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:44:47 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-05 16:45:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 53 seconds
Variants: generated 200, build-succeeded 93, build-failed 60, syntax-invalid 31, redundant 16
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 5906 ms, max 215 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:45:18 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-05 16:45:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 24 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 21, redundant 7
Fitness: max 1(2), min 0(110), ave 0.018
Test execution time: sum 6923 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:45:49 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-05 16:46:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 59 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 15, redundant 5
Fitness: max 1(3), min 0(115), ave 0.025
Test execution time: sum 7784 ms, max 139 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:46:24 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-05 16:46:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 30 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 14, redundant 17
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7233 ms, max 84 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:46:55 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-05 16:47:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 3 seconds
Variants: generated 200, build-succeeded 118, build-failed 58, syntax-invalid 18, redundant 6
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7306 ms, max 133 ms, min 52 ms
----------------------------------------------------------------

2023-08-05 16:47:29 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-05 16:48:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 35 seconds
Variants: generated 200, build-succeeded 106, build-failed 71, syntax-invalid 12, redundant 11
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6322 ms, max 80 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:48:00 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-05 16:48:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 8 seconds
Variants: generated 200, build-succeeded 114, build-failed 63, syntax-invalid 15, redundant 8
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6943 ms, max 160 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:48:33 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-05 16:49:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 39 seconds
Variants: generated 200, build-succeeded 116, build-failed 56, syntax-invalid 15, redundant 13
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 6883 ms, max 83 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:49:05 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-05 16:49:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 13 seconds
Variants: generated 200, build-succeeded 125, build-failed 61, syntax-invalid 10, redundant 4
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 7590 ms, max 130 ms, min 52 ms
----------------------------------------------------------------

2023-08-05 16:49:38 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-05 16:50:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 45 seconds
Variants: generated 200, build-succeeded 110, build-failed 65, syntax-invalid 20, redundant 5
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6651 ms, max 83 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:50:10 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-05 16:50:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 17 seconds
Variants: generated 200, build-succeeded 104, build-failed 69, syntax-invalid 17, redundant 10
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6144 ms, max 119 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:50:42 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-05 16:51:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 50 seconds
Variants: generated 200, build-succeeded 111, build-failed 58, syntax-invalid 12, redundant 19
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6817 ms, max 109 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:51:15 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-05 16:51:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 24 seconds
Variants: generated 200, build-succeeded 106, build-failed 63, syntax-invalid 17, redundant 14
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6666 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:51:49 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-05 16:52:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 57 seconds
Variants: generated 200, build-succeeded 110, build-failed 62, syntax-invalid 13, redundant 15
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6882 ms, max 101 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:52:22 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-05 16:52:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 34 seconds
Variants: generated 200, build-succeeded 120, build-failed 66, syntax-invalid 5, redundant 9
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7416 ms, max 137 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:52:59 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-05 16:53:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 9 seconds
Variants: generated 200, build-succeeded 119, build-failed 62, syntax-invalid 8, redundant 11
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7170 ms, max 93 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:53:34 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-05 16:54:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 45 seconds
Variants: generated 200, build-succeeded 124, build-failed 50, syntax-invalid 8, redundant 18
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 7594 ms, max 120 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:54:11 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-05 16:54:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 20 seconds
Variants: generated 200, build-succeeded 128, build-failed 56, syntax-invalid 6, redundant 10
Fitness: max 0(128), min 0(128), ave 0
Test execution time: sum 7651 ms, max 89 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:54:46 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-05 16:55:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 58 seconds
Variants: generated 200, build-succeeded 120, build-failed 67, syntax-invalid 7, redundant 6
Fitness: max 1(1), min 0(119), ave 0.008
Test execution time: sum 7578 ms, max 180 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:55:23 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-05 16:56:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 36 seconds
Variants: generated 200, build-succeeded 125, build-failed 51, syntax-invalid 6, redundant 18
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 7883 ms, max 154 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:56:01 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-05 16:56:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 12 seconds
Variants: generated 200, build-succeeded 118, build-failed 61, syntax-invalid 11, redundant 10
Fitness: max 1(3), min 0(115), ave 0.025
Test execution time: sum 7831 ms, max 127 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:56:37 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-05 16:57:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 48 seconds
Variants: generated 200, build-succeeded 110, build-failed 65, syntax-invalid 12, redundant 13
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 7341 ms, max 156 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:57:13 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-05 16:57:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 24 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 11, redundant 15
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7435 ms, max 94 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 16:57:49 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-05 16:58:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 2 seconds
Variants: generated 200, build-succeeded 125, build-failed 50, syntax-invalid 8, redundant 17
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 8219 ms, max 140 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:58:27 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-05 16:59:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 39 seconds
Variants: generated 200, build-succeeded 120, build-failed 59, syntax-invalid 10, redundant 11
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 7375 ms, max 85 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:59:04 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-05 16:59:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 16 seconds
Variants: generated 200, build-succeeded 113, build-failed 66, syntax-invalid 9, redundant 12
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6984 ms, max 131 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 16:59:41 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-05 17:00:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 51 seconds
Variants: generated 200, build-succeeded 111, build-failed 57, syntax-invalid 13, redundant 19
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6769 ms, max 134 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:00:16 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-05 17:00:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 31 seconds
Variants: generated 200, build-succeeded 124, build-failed 53, syntax-invalid 8, redundant 15
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 8545 ms, max 147 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:00:57 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-05 17:01:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 10 seconds
Variants: generated 200, build-succeeded 119, build-failed 56, syntax-invalid 9, redundant 16
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7399 ms, max 132 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 17:01:35 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-05 17:02:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 49 seconds
Variants: generated 200, build-succeeded 124, build-failed 58, syntax-invalid 8, redundant 10
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 7917 ms, max 145 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 17:02:14 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-05 17:02:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 27 seconds
Variants: generated 200, build-succeeded 117, build-failed 68, syntax-invalid 8, redundant 7
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7295 ms, max 93 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:02:52 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-05 17:03:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 5 seconds
Variants: generated 200, build-succeeded 118, build-failed 57, syntax-invalid 14, redundant 11
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 7119 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:03:30 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-05 17:04:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 42 seconds
Variants: generated 200, build-succeeded 112, build-failed 70, syntax-invalid 12, redundant 6
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 6858 ms, max 104 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:04:07 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-05 17:04:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 22 seconds
Variants: generated 200, build-succeeded 116, build-failed 61, syntax-invalid 8, redundant 15
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7386 ms, max 225 ms, min 53 ms
----------------------------------------------------------------

2023-08-05 17:04:48 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-05 17:05:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 0 seconds
Variants: generated 200, build-succeeded 115, build-failed 57, syntax-invalid 16, redundant 12
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 7105 ms, max 292 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:05:25 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-05 17:06:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 38 seconds
Variants: generated 200, build-succeeded 107, build-failed 64, syntax-invalid 19, redundant 10
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6363 ms, max 126 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:06:03 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-05 17:06:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 17 seconds
Variants: generated 200, build-succeeded 112, build-failed 63, syntax-invalid 16, redundant 9
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6803 ms, max 116 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:06:42 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-05 17:07:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 56 seconds
Variants: generated 200, build-succeeded 111, build-failed 64, syntax-invalid 14, redundant 11
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6830 ms, max 119 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:07:21 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-05 17:08:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 37 seconds
Variants: generated 200, build-succeeded 108, build-failed 60, syntax-invalid 16, redundant 16
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 7422 ms, max 326 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:08:03 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-05 17:08:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 18 seconds
Variants: generated 200, build-succeeded 115, build-failed 55, syntax-invalid 13, redundant 17
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 7194 ms, max 124 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:08:43 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-05 17:09:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 56 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 29, redundant 15
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6069 ms, max 135 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:09:21 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-05 17:10:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 36 seconds
Variants: generated 200, build-succeeded 103, build-failed 58, syntax-invalid 26, redundant 13
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6615 ms, max 146 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:10:01 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-05 17:10:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 15 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 20, redundant 8
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 6612 ms, max 81 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:10:40 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-05 17:11:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 56 seconds
Variants: generated 200, build-succeeded 113, build-failed 60, syntax-invalid 16, redundant 11
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7555 ms, max 273 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:11:21 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-05 17:12:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 36 seconds
Variants: generated 200, build-succeeded 109, build-failed 65, syntax-invalid 14, redundant 12
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6720 ms, max 97 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:12:01 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-05 17:12:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 20 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 14, redundant 15
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7440 ms, max 153 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:12:45 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-05 17:13:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 0 seconds
Variants: generated 200, build-succeeded 124, build-failed 53, syntax-invalid 12, redundant 11
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 7860 ms, max 94 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:13:26 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-05 17:14:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 41 seconds
Variants: generated 200, build-succeeded 99, build-failed 69, syntax-invalid 23, redundant 9
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6379 ms, max 138 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:14:06 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-05 17:14:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 22 seconds
Variants: generated 200, build-succeeded 124, build-failed 54, syntax-invalid 15, redundant 7
Fitness: max 0(124), min 0(124), ave 0
Test execution time: sum 7886 ms, max 102 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:14:47 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-05 17:15:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 6 seconds
Variants: generated 200, build-succeeded 116, build-failed 57, syntax-invalid 18, redundant 9
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 8303 ms, max 222 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:15:31 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-05 17:16:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 46 seconds
Variants: generated 200, build-succeeded 109, build-failed 65, syntax-invalid 17, redundant 9
Fitness: max 1(1), min 0(108), ave 0.009
Test execution time: sum 7154 ms, max 93 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:16:11 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-05 17:16:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 32 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 16, redundant 4
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 9774 ms, max 1025 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:16:58 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-05 17:17:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 12 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 17, redundant 12
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 7574 ms, max 136 ms, min 54 ms
----------------------------------------------------------------

2023-08-05 17:17:37 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-05 17:18:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 57 seconds
Variants: generated 200, build-succeeded 113, build-failed 63, syntax-invalid 14, redundant 10
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7486 ms, max 167 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:18:22 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-05 17:19:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 37 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 21, redundant 8
Fitness: max 1(1), min 0(115), ave 0.009
Test execution time: sum 7742 ms, max 145 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:19:02 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-05 17:19:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 17 seconds
Variants: generated 200, build-succeeded 113, build-failed 66, syntax-invalid 13, redundant 8
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7542 ms, max 234 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:19:42 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-05 17:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 57 seconds
Variants: generated 200, build-succeeded 121, build-failed 59, syntax-invalid 16, redundant 4
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7655 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:20:22 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-05 17:21:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 36 seconds
Variants: generated 200, build-succeeded 112, build-failed 57, syntax-invalid 20, redundant 11
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7254 ms, max 146 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:21:01 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-05 17:21:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 17 seconds
Variants: generated 200, build-succeeded 112, build-failed 61, syntax-invalid 23, redundant 4
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7926 ms, max 121 ms, min 57 ms
----------------------------------------------------------------

2023-08-05 17:21:42 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-05 17:22:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 0 seconds
Variants: generated 200, build-succeeded 113, build-failed 64, syntax-invalid 14, redundant 9
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 7660 ms, max 121 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:22:25 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-05 17:23:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 42 seconds
Variants: generated 200, build-succeeded 116, build-failed 59, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0(115), ave 0.009
Test execution time: sum 7906 ms, max 124 ms, min 57 ms
----------------------------------------------------------------

2023-08-05 17:23:07 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-05 17:23:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 25 seconds
Variants: generated 200, build-succeeded 125, build-failed 53, syntax-invalid 11, redundant 11
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 8477 ms, max 89 ms, min 57 ms
----------------------------------------------------------------

2023-08-05 17:23:50 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-05 17:24:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 8 seconds
Variants: generated 200, build-succeeded 116, build-failed 58, syntax-invalid 17, redundant 9
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7919 ms, max 162 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:24:33 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-05 17:25:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 51 seconds
Variants: generated 200, build-succeeded 114, build-failed 61, syntax-invalid 9, redundant 16
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 7824 ms, max 144 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:25:16 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-05 17:25:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 33 seconds
Variants: generated 200, build-succeeded 116, build-failed 53, syntax-invalid 11, redundant 20
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 8034 ms, max 122 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:25:58 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-05 17:26:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 17 seconds
Variants: generated 200, build-succeeded 119, build-failed 64, syntax-invalid 5, redundant 12
Fitness: max 0(119), min 0(119), ave 0
Test execution time: sum 7826 ms, max 136 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:26:42 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-05 17:27:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 57 seconds
Variants: generated 200, build-succeeded 116, build-failed 59, syntax-invalid 14, redundant 11
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7609 ms, max 89 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:27:22 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-05 17:28:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 16, redundant 10
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6909 ms, max 152 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:28:03 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-05 17:28:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 69, syntax-invalid 14, redundant 6
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 7451 ms, max 90 ms, min 57 ms
----------------------------------------------------------------

2023-08-05 17:28:43 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-05 17:29:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 2 seconds
Variants: generated 200, build-succeeded 116, build-failed 65, syntax-invalid 15, redundant 4
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 7765 ms, max 132 ms, min 55 ms
----------------------------------------------------------------

2023-08-05 17:29:27 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-05 17:30:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 52 seconds
Variants: generated 200, build-succeeded 117, build-failed 61, syntax-invalid 14, redundant 8
Fitness: max 1(2), min 0(115), ave 0.017
Test execution time: sum 9806 ms, max 336 ms, min 56 ms
----------------------------------------------------------------

2023-08-05 17:30:17 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-05 17:31:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 48 seconds
Variants: generated 200, build-succeeded 133, build-failed 52, syntax-invalid 11, redundant 4
Fitness: max 0(133), min 0(133), ave 0
Test execution time: sum 11127 ms, max 186 ms, min 70 ms
----------------------------------------------------------------

2023-08-05 17:31:13 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-05 17:32:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 40 seconds
Variants: generated 200, build-succeeded 111, build-failed 71, syntax-invalid 9, redundant 9
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 9032 ms, max 164 ms, min 70 ms
----------------------------------------------------------------

2023-08-05 17:32:05 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-05 17:32:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 33 seconds
Variants: generated 200, build-succeeded 113, build-failed 67, syntax-invalid 14, redundant 6
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 9284 ms, max 105 ms, min 71 ms
----------------------------------------------------------------

2023-08-05 17:32:58 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-05 17:33:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 29 seconds
Variants: generated 200, build-succeeded 120, build-failed 63, syntax-invalid 10, redundant 7
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 10149 ms, max 181 ms, min 70 ms
----------------------------------------------------------------

2023-08-05 17:33:54 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-05 17:34:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 23 seconds
Variants: generated 200, build-succeeded 117, build-failed 58, syntax-invalid 19, redundant 6
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 9786 ms, max 164 ms, min 70 ms
----------------------------------------------------------------

2023-08-05 17:34:48 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-05 17:35:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 17 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 17, redundant 11
Fitness: max 1(2), min 0(115), ave 0.017
Test execution time: sum 9815 ms, max 109 ms, min 71 ms
----------------------------------------------------------------

2023-08-05 17:35:42 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-05 17:35:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 32 seconds
Variants: generated 57, build-succeeded 9, build-failed 41, syntax-invalid 3, redundant 4
Fitness: max 1(1), min 0(8), ave 0.111
Test execution time: sum 995 ms, max 286 ms, min 82 ms
----------------------------------------------------------------

2023-08-05 17:35:57 [main] [INFO]  KGenProgMain - GA stopped
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v124)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v124)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,7 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v124)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v124)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v124)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,13 +232,8 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
-            }
+            if (Math.abs(y1) <= functionValueAccuracy)
+				this.iterationCount = iterationCount;
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v176)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v176)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v176)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v176)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v176)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,13 +232,8 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
-            }
+            if (Math.abs(y1) <= functionValueAccuracy)
+				this.iterationCount = iterationCount;
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v445)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -283,8 +283,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v445)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v445)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,13 +232,8 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
-            }
+            if (Math.abs(y1) <= functionValueAccuracy)
+				this.iterationCount = iterationCount;
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
@@ -276,10 +271,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v2280)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v2280)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v2280)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v2280)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v2280)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:01 [main] [INFO]  PatchLogExporter - patch (v2280)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    int numIterations = 0;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2415)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,7 +110,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,7 +217,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2415)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2415)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -179,7 +179,8 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+                ta = tb;
+				// evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
@@ -223,7 +224,8 @@
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
+                        tb += h;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2415)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2415)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2419)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,7 +110,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,7 +217,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2419)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -223,7 +223,8 @@
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
+                        tb += h;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2419)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				setResult(x1, i);
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,7 +110,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,7 +217,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -223,7 +223,8 @@
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
+                        tb += h;
+						pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v3454)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v3454)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v3454)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,12 +281,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        double ta = t0;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v3454)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v3454)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v6320)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,7 +110,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -217,7 +216,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v6320)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v6320)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        double ga = g0;
+		pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -175,7 +175,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            g0Positive = increasing;
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v6320)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v6320)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -171,8 +168,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -217,7 +212,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        final BrentSolver solver = new BrentSolver();
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8604)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8624)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -171,8 +168,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -217,7 +212,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8624)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8624)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        final BrentSolver solver = new BrentSolver();
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8624)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8624)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v8624)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v9884)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,8 +107,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -171,8 +167,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v9884)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v9884)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v9884)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v9884)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v9884)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v9884)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11094)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -109,8 +107,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -272,8 +268,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedState;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11094)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11094)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,15 +217,12 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
+                         (Math.abs(root - previousEventTime) <= convergence))
+						solver.setMaximalIterationCount(maxIterationCount);
+					else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11094)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11094)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11439)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,11 +108,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	currentState = null;
 
     finalized         = false;
     this.forward      = forward;
@@ -217,7 +215,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,9 +269,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedState;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11439)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11439)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -217,11 +219,9 @@
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
+                         (Math.abs(root - previousEventTime) <= convergence))
+						solver.setMaximalIterationCount(maxIterationCount);
+					else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
@@ -282,7 +282,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        handler.resetState(t, y);
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11439)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11439)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11445)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,11 +108,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	currentState = null;
 
     finalized         = false;
     this.forward      = forward;
@@ -217,7 +215,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,9 +269,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedState;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11445)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11445)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -217,11 +219,9 @@
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
+                         (Math.abs(root - previousEventTime) <= convergence))
+						solver.setMaximalIterationCount(maxIterationCount);
+					else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11445)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,11 +108,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	currentState = null;
 
     finalized         = false;
     this.forward      = forward;
@@ -217,7 +215,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,9 +269,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedState;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -217,11 +219,9 @@
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
+                         (Math.abs(root - previousEventTime) <= convergence))
+						solver.setMaximalIterationCount(maxIterationCount);
+					else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11455)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,11 +108,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	currentState = null;
 
     finalized         = false;
     this.forward      = forward;
@@ -217,7 +215,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,9 +269,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedState;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,15 +215,12 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
+                         (Math.abs(root - previousEventTime) <= convergence))
+						solver.setMaximalIterationCount(maxIterationCount);
+					else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11605)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11605)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11605)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,15 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11605)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11605)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11605)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11605)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11827)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -272,7 +269,10 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          {
+			doFinalize();
+			finalized = true;
+		}
           dirtyState = false;
       }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11827)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11827)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        final BrentSolver solver = new BrentSolver();
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -240,7 +244,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    forward = interpolator.isForward();
                 }
 
             }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11827)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11827)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11827)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        resultComputed = true;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (dx > 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11831)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -272,7 +269,10 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          {
+			doFinalize();
+			finalized = true;
+		}
           dirtyState = false;
       }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11831)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11831)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        final BrentSolver solver = new BrentSolver();
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -240,7 +244,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    forward = interpolator.isForward();
                 }
 
             }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11831)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11831)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11831)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        resultComputed = true;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11841)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -272,7 +269,10 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          {
+			doFinalize();
+			finalized = true;
+		}
           dirtyState = false;
       }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11841)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11841)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        final BrentSolver solver = new BrentSolver();
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -240,7 +244,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    forward = interpolator.isForward();
                 }
 
             }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11841)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11841)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v11841)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        resultComputed = true;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12042)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12042)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12042)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,15 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -283,8 +291,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12042)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12042)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12042)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12042)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12232)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12232)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12232)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,15 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12232)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12232)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12232)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v12232)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13129)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -272,8 +273,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedState;
@@ -288,7 +296,11 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedDerivatives;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13129)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13129)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13129)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -283,8 +286,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13129)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13150)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,7 +110,8 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,7 +217,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    this.forward = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13150)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13150)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13150)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13150)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13150)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13557)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,8 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    finalized = true;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,12 +110,13 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedTime = Double.NaN;
     this.dirtyState   = true;
 
   }
@@ -272,8 +272,15 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          {
+			doFinalize();
+			finalized = true;
+		}
+          {
+			currentState = null;
+			interpolatedState = null;
+			interpolatedDerivatives = null;
+		}
       }
 
       return interpolatedState;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13557)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13557)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13557)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +215,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = increasing;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13557)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13557)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13557)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,7 +161,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13639)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,14 +108,12 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedTime = Double.NaN;
     this.dirtyState   = true;
 
   }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13639)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13639)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,14 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -283,8 +290,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13639)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13639)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v13639)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (f == null) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -217,9 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14626)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,9 +212,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14626)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14626)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +173,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -282,7 +287,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14626)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14626)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14665)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,9 +212,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14665)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14665)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +173,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14665)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14665)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v14665)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    y0 = y1;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15006)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +107,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,9 +211,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15006)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15006)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +173,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15006)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15006)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15071)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +107,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,9 +211,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15071)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15071)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +173,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15071)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15071)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:02 [main] [INFO]  PatchLogExporter - patch (v15071)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (delta / oldDelta > 1) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v15209)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +107,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,9 +211,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v15209)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v15209)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +173,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -234,7 +239,8 @@
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
-                        return true;
+                        previousEventTime = Double.NaN;
+						return true;
                     }
 
                 } else {
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v15209)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v15209)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v15209)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -240,7 +240,11 @@
                 return result;
             }
             double dx = x2 - x1;
-            double tolerance =
+            {
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
+			double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16168)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,10 +109,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,8 +216,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16168)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16168)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,7 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        double ga = g0;
 
     }
 
@@ -148,7 +148,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -234,7 +238,8 @@
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
-                        return true;
+                        previousEventTime = Double.NaN;
+						return true;
                     }
 
                 } else {
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16168)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16168)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16221)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,10 +110,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16221)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16221)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +175,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16221)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16221)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16221)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,7 +170,7 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
+            } else if (f.value(max) == 0.0) {
                 setResult(max, 0);
                 ret = max;
             } else {
@@ -275,14 +275,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					this.resultComputed = true;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,10 +110,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +175,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -282,7 +289,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        double ga = g0;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16294)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,7 +170,7 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
+            } else if (f.value(max) == 0.0) {
                 setResult(max, 0);
                 ret = max;
             } else {
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16297)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,10 +110,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16297)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16297)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +175,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16297)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16297)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v16297)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,7 +170,7 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
+            } else if (f.value(max) == 0.0) {
                 setResult(max, 0);
                 ret = max;
             } else {
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    currentTime = Double.NaN;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,7 +109,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17785)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17851)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +107,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,8 +212,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17851)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17851)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17851)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +175,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -283,8 +290,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17851)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v17851)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18325)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -106,15 +104,13 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18325)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18325)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +175,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18325)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18325)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18325)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18333)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +106,9 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18333)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18333)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -283,8 +289,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18333)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18333)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18872)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,14 +107,14 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    final int n = (currentState == null) ? -1 : currentState.length;
     this.dirtyState   = true;
 
   }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18872)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18872)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +175,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -200,7 +207,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    pendingEventTime = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18872)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18872)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18872)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18895)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,14 +107,14 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    final int n = (currentState == null) ? -1 : currentState.length;
     this.dirtyState   = true;
 
   }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18895)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18895)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +175,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            pendingEvent = true;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -200,7 +207,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    pendingEventTime = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18895)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18895)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v18895)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(x1 - x0) <= absoluteAccuracy) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20080)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,7 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -248,7 +244,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    previousTime = Double.NaN;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20080)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20080)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20080)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,8 +105,10 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		double ga = g0;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20080)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20080)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,7 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -248,7 +244,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    previousTime = Double.NaN;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
@@ -273,7 +270,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          dirtyState = true;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,8 +105,10 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		double ga = g0;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +221,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20602)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +107,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
+	interpolatedState = new double[y.length];
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -171,8 +167,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -248,7 +242,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    previousTime = Double.NaN;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20602)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20602)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20602)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20602)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20602)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +107,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
+	interpolatedState = new double[y.length];
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -171,8 +167,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -248,7 +242,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    previousTime = Double.NaN;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20623)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20963)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,11 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +106,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -218,8 +216,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20963)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20963)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,8 +105,11 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		double ga = g0;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +151,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +222,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20963)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v20963)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22269)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +108,12 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22269)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22269)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22269)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22269)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22269)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,9 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                i++;
                 return result;
             }
             double dx = x2 - x1;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22533)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,9 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -218,8 +217,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22533)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22533)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22533)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,15 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -203,7 +213,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22533)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22533)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22533)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -111,10 +110,11 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,8 +218,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -242,7 +240,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      finalized = false;
       dirtyState       = true;
   }
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                i++;
                 return result;
             }
             double dx = x2 - x1;
@@ -250,7 +247,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22846)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +107,11 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22846)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22846)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22846)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22846)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22846)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22846)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22862)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +107,11 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22862)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22862)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -170,6 +176,7 @@
         try {
 
             forward = interpolator.isForward();
+			final double t0 = interpolator.getPreviousTime();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22862)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22862)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22862)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22910)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +109,13 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22910)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22910)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -231,9 +236,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22910)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22910)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22910)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -159,6 +159,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		verifyBracketing(min, max, f);
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -250,7 +251,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,10 +111,14 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -283,7 +289,7 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
+        increasing = true;
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                i++;
                 return result;
             }
             double dx = x2 - x1;
@@ -250,7 +247,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23115)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,15 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,8 +220,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23115)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23115)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23115)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23115)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23115)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23115)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -159,6 +159,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		verifyBracketing(min, max, f);
 
         double yMin = f.value(min);
         double yMax = f.value(max);
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23161)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,13 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23161)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23161)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23161)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +147,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23161)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23161)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23161)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -159,6 +159,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		verifyBracketing(min, max, f);
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -250,7 +251,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23170)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +107,9 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23170)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23170)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,16 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23170)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23170)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23170)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23174)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23174)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23174)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,16 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23174)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23174)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23174)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23381)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,7 +109,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -218,8 +219,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23381)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23381)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,10 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +151,14 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23381)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23381)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23381)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23426)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +107,13 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -171,12 +170,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
@@ -218,8 +213,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23426)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23426)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,8 +216,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					boolean resetDerivatives = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,9 +234,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23426)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23426)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23426)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -159,6 +159,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		verifyBracketing(min, max, f);
 
         double yMin = f.value(min);
         double yMax = f.value(max);
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23486)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +107,13 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -171,12 +170,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
@@ -218,8 +213,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23486)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23486)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -215,6 +218,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					boolean resetDerivatives = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,9 +235,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23486)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23486)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23486)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -159,6 +159,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		verifyBracketing(min, max, f);
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -223,15 +224,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23560)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +107,13 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23560)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23560)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23560)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -215,6 +220,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					boolean resetDerivatives = false;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,9 +237,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23560)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:03 [main] [INFO]  PatchLogExporter - patch (v23560)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v24310)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,15 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v24310)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v24310)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v24310)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v24310)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v24310)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25108)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +107,9 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -171,12 +166,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
@@ -429,8 +420,7 @@
         }
     }
 
-    // we do NOT handle the interpolated time and state here
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     interpolatedState       = (dimension < 0) ? null : new double[dimension];
     interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25108)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25108)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25108)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25108)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25108)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -159,6 +159,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		verifyBracketing(min, max, f);
 
         double yMin = f.value(min);
         double yMax = f.value(max);
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25310)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,13 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25310)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25310)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -283,7 +286,7 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
+        increasing = true;
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25310)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25310)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25991)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +107,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -171,8 +165,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25991)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25991)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,12 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +153,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +221,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25991)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v25991)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28426)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,9 +110,15 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28426)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28426)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28426)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28426)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28426)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28426)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,9 +110,15 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,14 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,9 +110,15 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +150,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v28499)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +108,17 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,12 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +153,8 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -283,8 +289,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29844)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                i++;
                 return result;
             }
             double dx = x2 - x1;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +108,17 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,12 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +153,8 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -283,8 +288,6 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
-
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v29898)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                i++;
                 return result;
             }
             double dx = x2 - x1;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31160)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,17 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31160)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31160)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,7 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		t0 = Double.NaN;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -106,7 +107,11 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		pendingEvent = true;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31160)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31160)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31160)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                i++;
                 return result;
             }
             double dx = x2 - x1;
@@ -250,7 +247,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31181)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,11 +110,21 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31181)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31181)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31181)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -231,9 +234,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31181)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31181)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31237)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +107,20 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31237)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31237)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31237)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31237)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31237)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31237)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31269)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,9 +107,20 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31269)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31269)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31269)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31269)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v31269)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32606)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32606)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32606)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -212,6 +215,7 @@
                             }
                         }
                     };
+					g0 = Double.NaN;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32606)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32606)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32606)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32606)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32651)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32651)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32651)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -212,6 +215,7 @@
                             }
                         }
                     };
+					g0 = Double.NaN;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32651)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32651)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32651)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32651)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32807)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32807)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -212,6 +215,7 @@
                             }
                         }
                     };
+					g0 = Double.NaN;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32807)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32807)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32807)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32808)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32808)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32808)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -212,6 +215,7 @@
                             }
                         }
                     };
+					g0 = Double.NaN;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32808)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32808)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32808)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32808)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -212,6 +215,7 @@
                             }
                         }
                     };
+					g0 = Double.NaN;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v32818)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36092)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,21 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -243,7 +251,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36092)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36092)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +149,10 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36092)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36092)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36092)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36425)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,14 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +176,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36425)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36425)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36425)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36425)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36425)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36485)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,14 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +176,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36485)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36485)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36485)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36485)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36485)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36491)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,12 +108,14 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +176,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36491)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36491)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -282,7 +288,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36491)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v36491)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v38826)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v38826)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v38826)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,15 +98,14 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +147,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v38826)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v38826)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v38826)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40965)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,14 +107,25 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedDerivatives = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40965)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40965)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -148,7 +147,8 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +169,7 @@
 
         try {
 
-            forward = interpolator.isForward();
+            final double t0 = interpolator.getPreviousTime();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40965)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40965)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40976)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,8 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -107,14 +106,16 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -171,8 +172,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40976)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40976)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -169,7 +173,7 @@
 
         try {
 
-            forward = interpolator.isForward();
+            final double t0 = interpolator.getPreviousTime();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40976)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v40976)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42490)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,8 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	interpolatedDerivatives = null;
+	currentState = null;
+	interpolatedDerivatives = null;
+	currentState = null;
+	interpolatedDerivatives = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42490)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42490)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -181,7 +183,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42490)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42490)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42490)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -267,6 +267,7 @@
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+					p = -p;
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42868)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,24 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	dirtyState = true;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -171,7 +185,7 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
@@ -429,8 +443,6 @@
         }
     }
 
-    // we do NOT handle the interpolated time and state here
-    interpolatedTime        = Double.NaN;
     interpolatedState       = (dimension < 0) ? null : new double[dimension];
     interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42868)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42868)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42868)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42868)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v42868)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v43234)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,25 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	dirtyState = true;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	this.dirtyState = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -171,7 +186,7 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
@@ -429,8 +444,6 @@
         }
     }
 
-    // we do NOT handle the interpolated time and state here
-    interpolatedTime        = Double.NaN;
     interpolatedState       = (dimension < 0) ? null : new double[dimension];
     interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v43234)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v43234)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v43234)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v43234)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v43234)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44221)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,9 +108,24 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44221)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44221)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -148,7 +147,8 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44221)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44221)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44221)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44549)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,7 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +109,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44549)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44549)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,7 +148,12 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44549)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v44549)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v46409)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,9 +107,27 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedDerivatives = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedDerivatives = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v46409)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v46409)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -148,7 +147,8 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v46409)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v46409)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:04 [main] [INFO]  PatchLogExporter - patch (v46409)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v46499)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,9 +107,27 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedDerivatives = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedDerivatives = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v46499)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v46499)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -148,7 +147,8 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v46499)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v46499)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v46499)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47405)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,15 +107,31 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    currentState = null;
+	interpolatedDerivatives = null;
+	currentState = null;
+	interpolatedDerivatives = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47405)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,8 +148,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEvent = false;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47405)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47405)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47660)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,22 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -208,7 +220,7 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
   }
 
   /** Store the current step time.
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47660)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47660)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -148,8 +146,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEvent = false;
         g0Positive = g0 >= 0;
     }
 
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47660)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47660)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47660)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -246,8 +246,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if (y0 * y1 >= 0) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47690)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,9 +108,22 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
+    currentState = null;
 
-    currentState            = y;
+    currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -208,7 +220,7 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
   }
 
   /** Store the current step time.
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47690)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47690)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,7 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -148,8 +146,11 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEvent = false;
         g0Positive = g0 >= 0;
     }
 
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47690)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47690)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47690)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47857)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    currentState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,9 +108,22 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    interpolatedDerivatives = null;
+	currentState = null;
+	interpolatedDerivatives = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedDerivatives = null;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedDerivatives = null;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47857)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47857)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,8 +148,13 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEvent = false;
+		pendingEvent = false;
         g0Positive = g0 >= 0;
     }
 
@@ -170,7 +175,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            final double t0 = interpolator.getPreviousTime();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47857)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-05 17:36:05 [main] [INFO]  PatchLogExporter - patch (v47857)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-05 17:36:05 [main] [INFO]  KGenProgMain - Summary
Reached generation = 241
Generated variants = 47857
Syntax valid variants = 43581
Build succeeded variants = 26218
Time elapsed = 2 hours 8 minutes 39 seconds
Exit status = SUCCESS
