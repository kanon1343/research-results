2023-08-07 10:56:36 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-07 10:56:36 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-07 10:56:36 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-07 10:56:36 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 8 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-07 10:56:55 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-07 10:56:55 [main] [INFO]  KGenProgMain - GA started
2023-08-07 10:56:55 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-07 10:57:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, build-succeeded 22, build-failed 68, syntax-invalid 5, redundant 5
Fitness: max 1(1), min 0(21), ave 0.045
Test execution time: sum 2733 ms, max 244 ms, min 65 ms
----------------------------------------------------------------

2023-08-07 10:57:06 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-07 10:57:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, build-succeeded 25, build-failed 61, syntax-invalid 4, redundant 10
Fitness: max 0(25), min 0(25), ave 0
Test execution time: sum 1792 ms, max 150 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 10:57:12 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-07 10:57:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 seconds
Variants: generated 100, build-succeeded 28, build-failed 60, syntax-invalid 3, redundant 9
Fitness: max 0(28), min 0(28), ave 0
Test execution time: sum 2013 ms, max 165 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 10:57:19 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-07 10:57:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 seconds
Variants: generated 200, build-succeeded 45, build-failed 59, syntax-invalid 7, redundant 89
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2790 ms, max 111 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 10:57:27 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-07 10:57:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 seconds
Variants: generated 200, build-succeeded 69, build-failed 52, syntax-invalid 9, redundant 70
Fitness: max 1(1), min 0(68), ave 0.014
Test execution time: sum 4497 ms, max 192 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 10:57:38 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-07 10:57:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 seconds
Variants: generated 200, build-succeeded 68, build-failed 53, syntax-invalid 8, redundant 71
Fitness: max 1(2), min 0(66), ave 0.029
Test execution time: sum 4166 ms, max 176 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 10:57:48 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-07 10:57:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 3 seconds
Variants: generated 200, build-succeeded 67, build-failed 61, syntax-invalid 5, redundant 67
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 3937 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 10:57:58 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-07 10:58:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 13 seconds
Variants: generated 200, build-succeeded 74, build-failed 60, syntax-invalid 6, redundant 60
Fitness: max 0(74), min 0(74), ave 0
Test execution time: sum 4058 ms, max 118 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:58:09 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-07 10:58:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 24 seconds
Variants: generated 200, build-succeeded 86, build-failed 52, syntax-invalid 10, redundant 52
Fitness: max 0(86), min 0(86), ave 0
Test execution time: sum 4733 ms, max 140 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:58:20 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-07 10:58:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 36 seconds
Variants: generated 200, build-succeeded 85, build-failed 62, syntax-invalid 25, redundant 28
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 4823 ms, max 209 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:58:31 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-07 10:58:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 48 seconds
Variants: generated 200, build-succeeded 100, build-failed 58, syntax-invalid 17, redundant 25
Fitness: max 1(1), min 0(99), ave 0.01
Test execution time: sum 5793 ms, max 221 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:58:44 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-07 10:58:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 1 seconds
Variants: generated 200, build-succeeded 90, build-failed 64, syntax-invalid 16, redundant 30
Fitness: max 1(2), min 0(88), ave 0.022
Test execution time: sum 5222 ms, max 136 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:58:57 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-07 10:59:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 17 seconds
Variants: generated 200, build-succeeded 107, build-failed 57, syntax-invalid 13, redundant 23
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 7130 ms, max 205 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:59:13 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-07 10:59:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 31 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 25, redundant 11
Fitness: max 1(1), min 0(107), ave 0.009
Test execution time: sum 6072 ms, max 137 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:59:26 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-07 10:59:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 44 seconds
Variants: generated 200, build-succeeded 104, build-failed 63, syntax-invalid 13, redundant 20
Fitness: max 1(1), min 0(103), ave 0.01
Test execution time: sum 5760 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 10:59:40 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-07 10:59:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 58 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 14, redundant 19
Fitness: max 1(3), min 0(108), ave 0.027
Test execution time: sum 6332 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 10:59:54 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-07 11:00:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 16 seconds
Variants: generated 200, build-succeeded 114, build-failed 60, syntax-invalid 11, redundant 15
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 7388 ms, max 203 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:00:12 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-07 11:00:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 30 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 10, redundant 18
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 6412 ms, max 203 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 11:00:26 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-07 11:00:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 43 seconds
Variants: generated 200, build-succeeded 117, build-failed 42, syntax-invalid 17, redundant 24
Fitness: max 1(6), min 0(111), ave 0.051
Test execution time: sum 6447 ms, max 82 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 11:00:39 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-07 11:00:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 57 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 12, redundant 16
Fitness: max 1(1), min 0(108), ave 0.009
Test execution time: sum 6151 ms, max 143 ms, min 48 ms
----------------------------------------------------------------

2023-08-07 11:00:53 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-07 11:04:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 11 seconds
Variants: generated 200, build-succeeded 104, build-failed 56, syntax-invalid 17, redundant 23
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 186041 ms, max 180079 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:04:07 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-07 11:04:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 26 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 17, redundant 18
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6114 ms, max 186 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:04:22 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-07 11:04:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 40 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 20, redundant 16
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 5994 ms, max 192 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 11:04:36 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-07 11:04:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 53 seconds
Variants: generated 200, build-succeeded 110, build-failed 52, syntax-invalid 25, redundant 13
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6394 ms, max 198 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 11:04:49 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-07 11:05:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 6 seconds
Variants: generated 200, build-succeeded 105, build-failed 68, syntax-invalid 13, redundant 14
Fitness: max 1(1), min 0(104), ave 0.01
Test execution time: sum 5944 ms, max 89 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:05:02 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-07 11:05:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 21 seconds
Variants: generated 200, build-succeeded 115, build-failed 51, syntax-invalid 10, redundant 24
Fitness: max 1(3), min 0(112), ave 0.026
Test execution time: sum 6528 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:05:17 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-07 11:08:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 35 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 17, redundant 8
Fitness: max 1(1), min 0(114), ave 0.009
Test execution time: sum 186781 ms, max 180065 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:08:31 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-07 11:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 51 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 15, redundant 15
Fitness: max 1(2), min 0(109), ave 0.018
Test execution time: sum 6423 ms, max 131 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:08:46 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-07 11:09:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 5 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 15, redundant 18
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 6076 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:09:01 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-07 11:09:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 20 seconds
Variants: generated 200, build-succeeded 114, build-failed 58, syntax-invalid 16, redundant 12
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6596 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:09:16 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-07 11:09:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 35 seconds
Variants: generated 200, build-succeeded 105, build-failed 64, syntax-invalid 23, redundant 8
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6180 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:09:30 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-07 11:09:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 52 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 15, redundant 11
Fitness: max 1(2), min 0(113), ave 0.017
Test execution time: sum 6981 ms, max 193 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:09:48 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-07 11:10:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 11 seconds
Variants: generated 200, build-succeeded 109, build-failed 55, syntax-invalid 19, redundant 17
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 6985 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:10:07 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-07 11:10:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 26 seconds
Variants: generated 200, build-succeeded 110, build-failed 67, syntax-invalid 12, redundant 11
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6216 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:10:22 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-07 11:10:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 41 seconds
Variants: generated 200, build-succeeded 103, build-failed 68, syntax-invalid 23, redundant 6
Fitness: max 1(3), min 0(100), ave 0.029
Test execution time: sum 5870 ms, max 139 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 11:10:37 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-07 11:10:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 57 seconds
Variants: generated 200, build-succeeded 112, build-failed 64, syntax-invalid 12, redundant 12
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6380 ms, max 191 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:10:53 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-07 11:11:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 14 seconds
Variants: generated 200, build-succeeded 121, build-failed 63, syntax-invalid 11, redundant 5
Fitness: max 1(1), min 0(120), ave 0.008
Test execution time: sum 6943 ms, max 184 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:11:09 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-07 11:11:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 29 seconds
Variants: generated 200, build-succeeded 108, build-failed 63, syntax-invalid 18, redundant 11
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6106 ms, max 142 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:11:25 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-07 11:11:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 45 seconds
Variants: generated 200, build-succeeded 111, build-failed 70, syntax-invalid 14, redundant 5
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6544 ms, max 184 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:11:41 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-07 11:11:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 2 seconds
Variants: generated 200, build-succeeded 120, build-failed 49, syntax-invalid 18, redundant 13
Fitness: max 0(120), min 0(120), ave 0
Test execution time: sum 6940 ms, max 177 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:11:57 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-07 11:12:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 19 seconds
Variants: generated 200, build-succeeded 115, build-failed 58, syntax-invalid 20, redundant 7
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 6969 ms, max 190 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:12:15 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-07 11:12:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 39 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 17, redundant 13
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7249 ms, max 179 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 11:12:35 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-07 11:12:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 56 seconds
Variants: generated 200, build-succeeded 114, build-failed 62, syntax-invalid 18, redundant 6
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6705 ms, max 134 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:12:52 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-07 11:13:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 12 seconds
Variants: generated 200, build-succeeded 108, build-failed 61, syntax-invalid 23, redundant 8
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6224 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:13:08 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-07 11:13:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 28 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 25, redundant 11
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 6403 ms, max 164 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:13:23 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-07 11:13:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 44 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 20, redundant 7
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6248 ms, max 83 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:13:40 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-07 11:13:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 1 seconds
Variants: generated 200, build-succeeded 119, build-failed 57, syntax-invalid 15, redundant 9
Fitness: max 1(2), min 0(117), ave 0.017
Test execution time: sum 6631 ms, max 130 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:13:57 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-07 11:14:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 18 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 22, redundant 10
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6555 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:14:14 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-07 11:14:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 35 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 21, redundant 8
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6514 ms, max 166 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:14:31 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-07 11:14:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 53 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 28, redundant 8
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6500 ms, max 194 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 11:14:49 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-07 11:15:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 9 seconds
Variants: generated 200, build-succeeded 91, build-failed 60, syntax-invalid 41, redundant 8
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5231 ms, max 214 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:15:04 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-07 11:15:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 26 seconds
Variants: generated 200, build-succeeded 96, build-failed 58, syntax-invalid 35, redundant 11
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5676 ms, max 158 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:15:21 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-07 11:15:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 43 seconds
Variants: generated 200, build-succeeded 95, build-failed 60, syntax-invalid 36, redundant 9
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5590 ms, max 112 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:15:39 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-07 11:15:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 0 seconds
Variants: generated 200, build-succeeded 91, build-failed 65, syntax-invalid 34, redundant 10
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5282 ms, max 113 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:15:56 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-07 11:16:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 16 seconds
Variants: generated 200, build-succeeded 85, build-failed 56, syntax-invalid 48, redundant 11
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 4764 ms, max 107 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:16:12 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-07 11:16:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 34 seconds
Variants: generated 200, build-succeeded 92, build-failed 70, syntax-invalid 34, redundant 4
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5403 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:16:30 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-07 11:16:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 50 seconds
Variants: generated 200, build-succeeded 99, build-failed 55, syntax-invalid 35, redundant 11
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 5587 ms, max 79 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:16:46 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-07 11:17:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 8 seconds
Variants: generated 200, build-succeeded 86, build-failed 63, syntax-invalid 41, redundant 10
Fitness: max 0(86), min 0(86), ave 0
Test execution time: sum 4885 ms, max 118 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:17:03 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-07 11:17:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 24 seconds
Variants: generated 200, build-succeeded 85, build-failed 62, syntax-invalid 46, redundant 7
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 4957 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:17:20 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-07 11:17:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 41 seconds
Variants: generated 200, build-succeeded 85, build-failed 62, syntax-invalid 43, redundant 10
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 4608 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:17:37 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-07 11:17:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 58 seconds
Variants: generated 200, build-succeeded 82, build-failed 60, syntax-invalid 50, redundant 8
Fitness: max 0(82), min 0(82), ave 0
Test execution time: sum 4571 ms, max 113 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:17:54 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-07 11:18:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 13 seconds
Variants: generated 200, build-succeeded 62, build-failed 75, syntax-invalid 52, redundant 11
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3477 ms, max 79 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:18:08 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-07 11:18:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 30 seconds
Variants: generated 200, build-succeeded 83, build-failed 63, syntax-invalid 45, redundant 9
Fitness: max 0(83), min 0(83), ave 0
Test execution time: sum 4676 ms, max 193 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:18:26 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-07 11:18:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 45 seconds
Variants: generated 200, build-succeeded 77, build-failed 64, syntax-invalid 51, redundant 8
Fitness: max 0(77), min 0(77), ave 0
Test execution time: sum 4340 ms, max 83 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:18:40 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-07 11:18:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 3 seconds
Variants: generated 200, build-succeeded 94, build-failed 59, syntax-invalid 38, redundant 9
Fitness: max 0(94), min 0(94), ave 0
Test execution time: sum 5356 ms, max 130 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:18:58 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-07 11:19:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 21 seconds
Variants: generated 200, build-succeeded 85, build-failed 69, syntax-invalid 40, redundant 6
Fitness: max 0(85), min 0(85), ave 0
Test execution time: sum 4920 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:19:17 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-07 11:19:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 36 seconds
Variants: generated 200, build-succeeded 75, build-failed 64, syntax-invalid 54, redundant 7
Fitness: max 0(75), min 0(75), ave 0
Test execution time: sum 4201 ms, max 79 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:19:32 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-07 11:19:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 54 seconds
Variants: generated 200, build-succeeded 75, build-failed 65, syntax-invalid 47, redundant 13
Fitness: max 0(75), min 0(75), ave 0
Test execution time: sum 4162 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:19:50 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-07 11:20:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 9 seconds
Variants: generated 200, build-succeeded 65, build-failed 51, syntax-invalid 74, redundant 10
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3603 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:20:05 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-07 11:20:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 25 seconds
Variants: generated 200, build-succeeded 63, build-failed 67, syntax-invalid 61, redundant 9
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3528 ms, max 106 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:20:21 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-07 11:20:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 40 seconds
Variants: generated 200, build-succeeded 63, build-failed 64, syntax-invalid 65, redundant 8
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3542 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:20:36 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-07 11:20:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 58 seconds
Variants: generated 200, build-succeeded 84, build-failed 55, syntax-invalid 47, redundant 14
Fitness: max 0(84), min 0(84), ave 0
Test execution time: sum 4968 ms, max 180 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:20:54 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-07 11:21:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 16 seconds
Variants: generated 200, build-succeeded 74, build-failed 61, syntax-invalid 55, redundant 10
Fitness: max 0(74), min 0(74), ave 0
Test execution time: sum 4525 ms, max 173 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:21:12 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-07 11:21:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 34 seconds
Variants: generated 200, build-succeeded 81, build-failed 59, syntax-invalid 53, redundant 7
Fitness: max 0(81), min 0(81), ave 0
Test execution time: sum 4525 ms, max 84 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:21:29 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-07 11:21:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 51 seconds
Variants: generated 200, build-succeeded 64, build-failed 56, syntax-invalid 64, redundant 16
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3673 ms, max 106 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:21:47 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-07 11:22:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 7 seconds
Variants: generated 200, build-succeeded 66, build-failed 60, syntax-invalid 62, redundant 12
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3644 ms, max 71 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:22:03 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-07 11:22:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 25 seconds
Variants: generated 200, build-succeeded 68, build-failed 63, syntax-invalid 63, redundant 6
Fitness: max 0(68), min 0(68), ave 0
Test execution time: sum 3905 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:22:20 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-07 11:22:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 43 seconds
Variants: generated 200, build-succeeded 89, build-failed 57, syntax-invalid 46, redundant 8
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 4974 ms, max 83 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:22:39 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-07 11:22:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 2 seconds
Variants: generated 200, build-succeeded 90, build-failed 63, syntax-invalid 38, redundant 9
Fitness: max 0(90), min 0(90), ave 0
Test execution time: sum 5038 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:22:58 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-07 11:23:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 20 seconds
Variants: generated 200, build-succeeded 74, build-failed 56, syntax-invalid 59, redundant 11
Fitness: max 0(74), min 0(74), ave 0
Test execution time: sum 4337 ms, max 114 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:23:16 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-07 11:23:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 38 seconds
Variants: generated 200, build-succeeded 79, build-failed 57, syntax-invalid 51, redundant 13
Fitness: max 0(79), min 0(79), ave 0
Test execution time: sum 4459 ms, max 92 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:23:33 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-07 11:23:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 57 seconds
Variants: generated 200, build-succeeded 92, build-failed 51, syntax-invalid 44, redundant 13
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5174 ms, max 105 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:23:53 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-07 11:24:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 15 seconds
Variants: generated 200, build-succeeded 74, build-failed 71, syntax-invalid 48, redundant 7
Fitness: max 0(74), min 0(74), ave 0
Test execution time: sum 4103 ms, max 75 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:24:11 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-07 11:24:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 33 seconds
Variants: generated 200, build-succeeded 74, build-failed 58, syntax-invalid 58, redundant 10
Fitness: max 0(74), min 0(74), ave 0
Test execution time: sum 4128 ms, max 107 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:24:29 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-07 11:27:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 50 seconds
Variants: generated 200, build-succeeded 79, build-failed 63, syntax-invalid 42, redundant 16
Fitness: max 0(79), min 0(79), ave 0
Test execution time: sum 184545 ms, max 180065 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:27:46 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-07 11:28:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 8 seconds
Variants: generated 200, build-succeeded 64, build-failed 62, syntax-invalid 59, redundant 15
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3672 ms, max 122 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:28:04 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-07 11:28:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 25 seconds
Variants: generated 200, build-succeeded 68, build-failed 61, syntax-invalid 60, redundant 11
Fitness: max 0(68), min 0(68), ave 0
Test execution time: sum 3817 ms, max 78 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:28:21 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-07 11:28:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 43 seconds
Variants: generated 200, build-succeeded 70, build-failed 66, syntax-invalid 59, redundant 5
Fitness: max 0(70), min 0(70), ave 0
Test execution time: sum 4036 ms, max 122 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:28:39 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-07 11:28:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 0 seconds
Variants: generated 200, build-succeeded 67, build-failed 69, syntax-invalid 56, redundant 8
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 3834 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 11:28:56 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-07 11:29:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 19 seconds
Variants: generated 200, build-succeeded 76, build-failed 58, syntax-invalid 53, redundant 13
Fitness: max 0(76), min 0(76), ave 0
Test execution time: sum 4379 ms, max 123 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:29:14 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-07 11:29:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 37 seconds
Variants: generated 200, build-succeeded 79, build-failed 62, syntax-invalid 54, redundant 5
Fitness: max 0(79), min 0(79), ave 0
Test execution time: sum 4461 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:29:33 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-07 11:29:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 56 seconds
Variants: generated 200, build-succeeded 63, build-failed 68, syntax-invalid 66, redundant 3
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3501 ms, max 121 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:29:52 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-07 11:30:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 15 seconds
Variants: generated 200, build-succeeded 82, build-failed 62, syntax-invalid 53, redundant 3
Fitness: max 0(82), min 0(82), ave 0
Test execution time: sum 4635 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:30:10 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-07 11:30:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 33 seconds
Variants: generated 200, build-succeeded 72, build-failed 58, syntax-invalid 60, redundant 10
Fitness: max 0(72), min 0(72), ave 0
Test execution time: sum 3929 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 11:30:29 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-07 11:30:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 52 seconds
Variants: generated 200, build-succeeded 77, build-failed 60, syntax-invalid 57, redundant 6
Fitness: max 0(77), min 0(77), ave 0
Test execution time: sum 4208 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:30:47 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-07 11:34:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 10 seconds
Variants: generated 200, build-succeeded 68, build-failed 64, syntax-invalid 59, redundant 9
Fitness: max 0(68), min 0(68), ave 0
Test execution time: sum 183802 ms, max 180066 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:34:06 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-07 11:34:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 29 seconds
Variants: generated 200, build-succeeded 74, build-failed 59, syntax-invalid 56, redundant 11
Fitness: max 0(74), min 0(74), ave 0
Test execution time: sum 4122 ms, max 71 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:34:25 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-07 11:34:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 50 seconds
Variants: generated 200, build-succeeded 78, build-failed 65, syntax-invalid 50, redundant 7
Fitness: max 0(78), min 0(78), ave 0
Test execution time: sum 4403 ms, max 128 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:34:45 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-07 11:35:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 9 seconds
Variants: generated 200, build-succeeded 72, build-failed 61, syntax-invalid 55, redundant 12
Fitness: max 0(72), min 0(72), ave 0
Test execution time: sum 4186 ms, max 79 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 11:35:04 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-07 11:35:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 28 seconds
Variants: generated 200, build-succeeded 72, build-failed 54, syntax-invalid 64, redundant 10
Fitness: max 0(72), min 0(72), ave 0
Test execution time: sum 4006 ms, max 103 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:35:24 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-07 11:35:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 48 seconds
Variants: generated 200, build-succeeded 69, build-failed 64, syntax-invalid 62, redundant 5
Fitness: max 0(69), min 0(69), ave 0
Test execution time: sum 3797 ms, max 66 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 11:35:43 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-07 11:36:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 9 seconds
Variants: generated 200, build-succeeded 73, build-failed 65, syntax-invalid 52, redundant 10
Fitness: max 0(73), min 0(73), ave 0
Test execution time: sum 4094 ms, max 128 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 11:36:04 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-07 11:36:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 30 seconds
Variants: generated 200, build-succeeded 82, build-failed 58, syntax-invalid 50, redundant 10
Fitness: max 0(82), min 0(82), ave 0
Test execution time: sum 4597 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 11:36:26 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-07 11:48:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 52 seconds
Variants: generated 200, build-succeeded 79, build-failed 63, syntax-invalid 50, redundant 8
Fitness: max 0(79), min 0(79), ave 0
Test execution time: sum 724650 ms, max 180088 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 11:48:47 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-07 11:55:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 12 seconds
Variants: generated 200, build-succeeded 66, build-failed 55, syntax-invalid 63, redundant 16
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 363923 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 11:55:07 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-07 12:01:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 32 seconds
Variants: generated 200, build-succeeded 73, build-failed 60, syntax-invalid 59, redundant 8
Fitness: max 0(73), min 0(73), ave 0
Test execution time: sum 364085 ms, max 180055 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 12:01:27 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-07 12:07:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 54 seconds
Variants: generated 200, build-succeeded 91, build-failed 60, syntax-invalid 35, redundant 14
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 365264 ms, max 180064 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 12:07:50 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-07 12:17:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 18 seconds
Variants: generated 200, build-succeeded 88, build-failed 68, syntax-invalid 34, redundant 10
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 545269 ms, max 180072 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 12:17:13 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-07 12:29:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 40 seconds
Variants: generated 200, build-succeeded 83, build-failed 68, syntax-invalid 43, redundant 6
Fitness: max 0(83), min 0(83), ave 0
Test execution time: sum 724797 ms, max 180090 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 12:29:36 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-07 12:38:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 3 seconds
Variants: generated 200, build-succeeded 88, build-failed 62, syntax-invalid 40, redundant 10
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 545085 ms, max 180065 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 12:38:58 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-07 13:00:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 27 seconds
Variants: generated 200, build-succeeded 98, build-failed 53, syntax-invalid 42, redundant 7
Fitness: max 1(1), min 0(97), ave 0.01
Test execution time: sum 1265954 ms, max 180117 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 13:00:23 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-07 13:18:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 49 seconds
Variants: generated 200, build-succeeded 88, build-failed 68, syntax-invalid 36, redundant 8
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 1084921 ms, max 180072 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 13:18:45 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-07 14:28:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 31 minutes 13 seconds
Variants: generated 200, build-succeeded 75, build-failed 66, syntax-invalid 48, redundant 11
Fitness: max 0(75), min 0(75), ave 0
Test execution time: sum 4145121 ms, max 180137 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 14:28:09 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-07 15:55:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 58 minutes 39 seconds
Variants: generated 200, build-succeeded 91, build-failed 61, syntax-invalid 35, redundant 13
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5226250 ms, max 180113 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 15:55:35 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-07 17:35:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 38 minutes 5 seconds
Variants: generated 200, build-succeeded 96, build-failed 54, syntax-invalid 39, redundant 11
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 5946540 ms, max 180221 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 17:35:01 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-07 19:26:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 29 minutes 37 seconds
Variants: generated 200, build-succeeded 96, build-failed 53, syntax-invalid 45, redundant 6
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 6667513 ms, max 180200 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 19:26:33 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-07 20:00:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 3 minutes 9 seconds
Variants: generated 200, build-succeeded 75, build-failed 66, syntax-invalid 46, redundant 13
Fitness: max 0(75), min 0(75), ave 0
Test execution time: sum 1986504 ms, max 180144 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 20:00:05 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-07 21:12:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 15 minutes 42 seconds
Variants: generated 200, build-succeeded 76, build-failed 56, syntax-invalid 48, redundant 20
Fitness: max 0(76), min 0(76), ave 0
Test execution time: sum 4327276 ms, max 180249 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 21:12:38 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-07 21:34:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 37 minutes 15 seconds
Variants: generated 200, build-succeeded 88, build-failed 61, syntax-invalid 42, redundant 9
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 1267652 ms, max 180147 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 21:34:11 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-07 21:56:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 59 minutes 4 seconds
Variants: generated 200, build-succeeded 92, build-failed 51, syntax-invalid 38, redundant 19
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 1275579 ms, max 181060 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 21:56:00 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-07 22:05:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 8 minutes 40 seconds
Variants: generated 200, build-succeeded 93, build-failed 53, syntax-invalid 34, redundant 20
Fitness: max 0(93), min 0(93), ave 0
Test execution time: sum 547822 ms, max 180106 ms, min 49 ms
----------------------------------------------------------------

2023-08-07 22:05:36 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-07 22:09:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 12 minutes 16 seconds
Variants: generated 200, build-succeeded 91, build-failed 53, syntax-invalid 35, redundant 21
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 187189 ms, max 180077 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 22:09:12 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-07 22:09:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 12 minutes 48 seconds
Variants: generated 200, build-succeeded 95, build-failed 62, syntax-invalid 35, redundant 8
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 6779 ms, max 205 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:09:44 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-07 22:10:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 13 minutes 20 seconds
Variants: generated 200, build-succeeded 103, build-failed 55, syntax-invalid 28, redundant 14
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6634 ms, max 198 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 22:10:16 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-07 22:10:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 13 minutes 52 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 33, redundant 11
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 6404 ms, max 177 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 22:10:48 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-07 22:14:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 17 minutes 24 seconds
Variants: generated 200, build-succeeded 107, build-failed 52, syntax-invalid 30, redundant 11
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 187191 ms, max 180069 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:14:20 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-07 22:14:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 17 minutes 59 seconds
Variants: generated 200, build-succeeded 115, build-failed 64, syntax-invalid 12, redundant 9
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 7676 ms, max 219 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:14:55 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-07 22:15:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 18 minutes 30 seconds
Variants: generated 200, build-succeeded 101, build-failed 64, syntax-invalid 26, redundant 9
Fitness: max 1(1), min 0(100), ave 0.01
Test execution time: sum 6238 ms, max 152 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:15:26 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-07 22:15:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 19 minutes 3 seconds
Variants: generated 200, build-succeeded 113, build-failed 53, syntax-invalid 16, redundant 18
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7187 ms, max 156 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:15:59 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-07 22:16:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 19 minutes 36 seconds
Variants: generated 200, build-succeeded 105, build-failed 63, syntax-invalid 23, redundant 9
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 7067 ms, max 198 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:16:31 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-07 22:17:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 20 minutes 8 seconds
Variants: generated 200, build-succeeded 102, build-failed 66, syntax-invalid 23, redundant 9
Fitness: max 1(2), min 0(100), ave 0.02
Test execution time: sum 6751 ms, max 243 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:17:04 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-07 22:17:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 20 minutes 42 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 19, redundant 10
Fitness: max 1(1), min 0(113), ave 0.009
Test execution time: sum 7613 ms, max 197 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:17:38 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-07 22:18:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 21 minutes 16 seconds
Variants: generated 200, build-succeeded 114, build-failed 64, syntax-invalid 13, redundant 9
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 7134 ms, max 177 ms, min 50 ms
----------------------------------------------------------------

2023-08-07 22:18:12 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-07 22:18:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 21 minutes 46 seconds
Variants: generated 200, build-succeeded 100, build-failed 63, syntax-invalid 25, redundant 12
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6299 ms, max 147 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:18:42 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-07 22:19:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 22 minutes 19 seconds
Variants: generated 200, build-succeeded 107, build-failed 66, syntax-invalid 16, redundant 11
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6720 ms, max 178 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:19:15 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-07 22:19:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 22 minutes 49 seconds
Variants: generated 200, build-succeeded 94, build-failed 60, syntax-invalid 35, redundant 11
Fitness: max 1(1), min 0(93), ave 0.011
Test execution time: sum 6006 ms, max 174 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:19:45 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-07 22:20:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 23 minutes 21 seconds
Variants: generated 200, build-succeeded 99, build-failed 57, syntax-invalid 31, redundant 13
Fitness: max 1(1), min 0(98), ave 0.01
Test execution time: sum 6129 ms, max 161 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:20:17 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-07 22:20:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 23 minutes 53 seconds
Variants: generated 200, build-succeeded 101, build-failed 65, syntax-invalid 25, redundant 9
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6176 ms, max 163 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:20:49 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-07 22:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 24 minutes 25 seconds
Variants: generated 200, build-succeeded 91, build-failed 66, syntax-invalid 32, redundant 11
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5567 ms, max 175 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:21:21 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-07 22:21:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 24 minutes 58 seconds
Variants: generated 200, build-succeeded 92, build-failed 52, syntax-invalid 33, redundant 23
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5920 ms, max 151 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:21:54 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-07 22:22:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 25 minutes 28 seconds
Variants: generated 200, build-succeeded 73, build-failed 74, syntax-invalid 41, redundant 12
Fitness: max 0(73), min 0(73), ave 0
Test execution time: sum 4710 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:22:24 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-07 22:22:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 26 minutes 1 seconds
Variants: generated 200, build-succeeded 91, build-failed 68, syntax-invalid 25, redundant 16
Fitness: max 0(91), min 0(91), ave 0
Test execution time: sum 5837 ms, max 189 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:22:57 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-07 22:23:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 26 minutes 33 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 33, redundant 11
Fitness: max 1(2), min 0(94), ave 0.021
Test execution time: sum 6060 ms, max 184 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:23:29 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-07 22:24:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 27 minutes 6 seconds
Variants: generated 200, build-succeeded 96, build-failed 73, syntax-invalid 23, redundant 8
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 6221 ms, max 215 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:24:02 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-07 22:24:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 27 minutes 39 seconds
Variants: generated 200, build-succeeded 98, build-failed 63, syntax-invalid 29, redundant 10
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6353 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:24:35 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-07 22:25:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 28 minutes 12 seconds
Variants: generated 200, build-succeeded 90, build-failed 70, syntax-invalid 33, redundant 7
Fitness: max 1(1), min 0(89), ave 0.011
Test execution time: sum 5867 ms, max 208 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:25:08 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-07 22:25:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 28 minutes 43 seconds
Variants: generated 200, build-succeeded 97, build-failed 55, syntax-invalid 37, redundant 11
Fitness: max 1(1), min 0(96), ave 0.01
Test execution time: sum 6143 ms, max 231 ms, min 51 ms
----------------------------------------------------------------

2023-08-07 22:25:38 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-07 22:26:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 29 minutes 16 seconds
Variants: generated 200, build-succeeded 114, build-failed 53, syntax-invalid 20, redundant 13
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 7047 ms, max 135 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:26:12 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-07 22:26:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 29 minutes 50 seconds
Variants: generated 200, build-succeeded 99, build-failed 60, syntax-invalid 30, redundant 11
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6878 ms, max 165 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:26:45 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-07 22:27:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 30 minutes 22 seconds
Variants: generated 200, build-succeeded 105, build-failed 65, syntax-invalid 24, redundant 6
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6660 ms, max 212 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:27:18 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-07 22:27:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 30 minutes 57 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 22, redundant 6
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 7049 ms, max 132 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:27:52 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-07 22:28:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 31 minutes 30 seconds
Variants: generated 200, build-succeeded 107, build-failed 70, syntax-invalid 14, redundant 9
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6806 ms, max 144 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:28:25 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-07 22:29:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 32 minutes 4 seconds
Variants: generated 200, build-succeeded 113, build-failed 56, syntax-invalid 21, redundant 10
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 7283 ms, max 191 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:29:00 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-07 22:29:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 32 minutes 38 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 22, redundant 6
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 7222 ms, max 147 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:29:34 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-07 22:30:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 33 minutes 13 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 22, redundant 13
Fitness: max 1(1), min 0(106), ave 0.009
Test execution time: sum 6962 ms, max 205 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:30:09 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-07 22:30:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 33 minutes 47 seconds
Variants: generated 200, build-succeeded 104, build-failed 78, syntax-invalid 13, redundant 5
Fitness: max 1(2), min 0(102), ave 0.019
Test execution time: sum 6996 ms, max 232 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:30:43 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-07 22:31:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 34 minutes 22 seconds
Variants: generated 200, build-succeeded 114, build-failed 66, syntax-invalid 9, redundant 11
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 7392 ms, max 228 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:31:18 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-07 22:31:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 34 minutes 55 seconds
Variants: generated 200, build-succeeded 117, build-failed 53, syntax-invalid 8, redundant 22
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7098 ms, max 106 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:31:51 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-07 22:32:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 35 minutes 30 seconds
Variants: generated 200, build-succeeded 117, build-failed 62, syntax-invalid 10, redundant 11
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7430 ms, max 234 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:32:26 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-07 22:33:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 36 minutes 5 seconds
Variants: generated 200, build-succeeded 121, build-failed 43, syntax-invalid 20, redundant 16
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7535 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:33:00 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-07 22:33:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 36 minutes 40 seconds
Variants: generated 200, build-succeeded 125, build-failed 52, syntax-invalid 9, redundant 14
Fitness: max 0(125), min 0(125), ave 0
Test execution time: sum 7745 ms, max 232 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:33:36 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-07 22:34:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 37 minutes 15 seconds
Variants: generated 200, build-succeeded 121, build-failed 60, syntax-invalid 10, redundant 9
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7380 ms, max 147 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:34:11 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-07 22:34:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 37 minutes 49 seconds
Variants: generated 200, build-succeeded 112, build-failed 66, syntax-invalid 10, redundant 12
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 7002 ms, max 136 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:34:45 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-07 22:35:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 38 minutes 23 seconds
Variants: generated 200, build-succeeded 106, build-failed 56, syntax-invalid 22, redundant 16
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6776 ms, max 150 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:35:19 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-07 22:35:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 38 minutes 55 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 35, redundant 7
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5953 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:35:51 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-07 22:36:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 39 minutes 28 seconds
Variants: generated 200, build-succeeded 96, build-failed 69, syntax-invalid 20, redundant 15
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 6197 ms, max 141 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:36:24 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-07 22:36:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 40 minutes 2 seconds
Variants: generated 200, build-succeeded 104, build-failed 66, syntax-invalid 19, redundant 11
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 7050 ms, max 268 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:36:58 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-07 22:37:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 40 minutes 34 seconds
Variants: generated 200, build-succeeded 98, build-failed 59, syntax-invalid 29, redundant 14
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 5716 ms, max 112 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:37:30 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-07 22:38:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 41 minutes 7 seconds
Variants: generated 200, build-succeeded 101, build-failed 60, syntax-invalid 23, redundant 16
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6193 ms, max 159 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:38:03 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-07 22:38:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 41 minutes 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 64, syntax-invalid 23, redundant 6
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 7009 ms, max 177 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:38:37 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-07 22:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 42 minutes 17 seconds
Variants: generated 200, build-succeeded 111, build-failed 62, syntax-invalid 21, redundant 6
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 7511 ms, max 303 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:39:13 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-07 22:39:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 42 minutes 55 seconds
Variants: generated 200, build-succeeded 108, build-failed 63, syntax-invalid 21, redundant 8
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6981 ms, max 224 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:39:50 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-07 22:40:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 43 minutes 30 seconds
Variants: generated 200, build-succeeded 105, build-failed 54, syntax-invalid 28, redundant 13
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6802 ms, max 188 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:40:26 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-07 22:41:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 44 minutes 6 seconds
Variants: generated 200, build-succeeded 115, build-failed 59, syntax-invalid 12, redundant 14
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 7192 ms, max 225 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:41:02 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-07 22:47:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 50 minutes 43 seconds
Variants: generated 200, build-succeeded 115, build-failed 63, syntax-invalid 18, redundant 4
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 367452 ms, max 180067 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:47:39 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-07 22:48:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 51 minutes 15 seconds
Variants: generated 200, build-succeeded 97, build-failed 62, syntax-invalid 29, redundant 12
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 5785 ms, max 81 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:48:11 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-07 22:48:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 51 minutes 50 seconds
Variants: generated 200, build-succeeded 113, build-failed 54, syntax-invalid 25, redundant 8
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 6559 ms, max 111 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:48:46 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-07 22:49:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 52 minutes 26 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 12, redundant 13
Fitness: max 1(2), min 0(113), ave 0.017
Test execution time: sum 7071 ms, max 187 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:49:22 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-07 22:49:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 53 minutes 1 seconds
Variants: generated 200, build-succeeded 117, build-failed 49, syntax-invalid 17, redundant 17
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 6942 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:49:57 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-07 22:50:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 53 minutes 36 seconds
Variants: generated 200, build-succeeded 108, build-failed 54, syntax-invalid 25, redundant 13
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6647 ms, max 113 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 22:50:32 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-07 22:51:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 54 minutes 12 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 24, redundant 14
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6347 ms, max 215 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:51:08 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-07 22:51:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 54 minutes 47 seconds
Variants: generated 200, build-succeeded 107, build-failed 62, syntax-invalid 21, redundant 10
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6337 ms, max 81 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:51:43 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-07 22:52:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 55 minutes 23 seconds
Variants: generated 200, build-succeeded 104, build-failed 55, syntax-invalid 24, redundant 17
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6328 ms, max 108 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 22:52:18 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-07 22:52:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 55 minutes 54 seconds
Variants: generated 200, build-succeeded 87, build-failed 46, syntax-invalid 49, redundant 18
Fitness: max 0(87), min 0(87), ave 0
Test execution time: sum 5190 ms, max 77 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 22:52:50 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-07 22:53:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 56 minutes 26 seconds
Variants: generated 200, build-succeeded 80, build-failed 54, syntax-invalid 56, redundant 10
Fitness: max 1(2), min 0(78), ave 0.025
Test execution time: sum 4758 ms, max 134 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:53:22 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-07 22:53:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 56 minutes 59 seconds
Variants: generated 200, build-succeeded 83, build-failed 54, syntax-invalid 45, redundant 18
Fitness: max 0(83), min 0(83), ave 0
Test execution time: sum 4823 ms, max 76 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:53:54 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-07 22:54:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 57 minutes 31 seconds
Variants: generated 200, build-succeeded 78, build-failed 55, syntax-invalid 56, redundant 11
Fitness: max 1(1), min 0(77), ave 0.013
Test execution time: sum 4818 ms, max 212 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:54:26 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-07 22:54:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 58 minutes 3 seconds
Variants: generated 200, build-succeeded 88, build-failed 60, syntax-invalid 41, redundant 11
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 4970 ms, max 69 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 22:54:59 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-07 22:55:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 58 minutes 36 seconds
Variants: generated 200, build-succeeded 89, build-failed 57, syntax-invalid 36, redundant 18
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 5072 ms, max 108 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:55:32 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-07 22:56:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 59 minutes 9 seconds
Variants: generated 200, build-succeeded 89, build-failed 63, syntax-invalid 34, redundant 14
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 5138 ms, max 82 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:56:05 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-07 22:56:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 59 minutes 43 seconds
Variants: generated 200, build-succeeded 102, build-failed 61, syntax-invalid 27, redundant 10
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6076 ms, max 128 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:56:39 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-07 22:57:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 21 seconds
Variants: generated 200, build-succeeded 116, build-failed 53, syntax-invalid 16, redundant 15
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 6829 ms, max 111 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:57:17 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-07 22:57:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 56 seconds
Variants: generated 200, build-succeeded 100, build-failed 58, syntax-invalid 27, redundant 15
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 5702 ms, max 84 ms, min 52 ms
----------------------------------------------------------------

2023-08-07 22:57:52 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-07 22:58:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 1 minutes 32 seconds
Variants: generated 200, build-succeeded 101, build-failed 56, syntax-invalid 26, redundant 17
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 5793 ms, max 122 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:58:27 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-07 22:59:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 2 minutes 8 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 19, redundant 14
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6071 ms, max 79 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:59:04 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-07 22:59:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 2 minutes 46 seconds
Variants: generated 200, build-succeeded 114, build-failed 57, syntax-invalid 15, redundant 14
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6620 ms, max 121 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 22:59:42 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-07 23:00:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 3 minutes 26 seconds
Variants: generated 200, build-succeeded 110, build-failed 52, syntax-invalid 21, redundant 17
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6710 ms, max 201 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:00:21 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-07 23:00:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 4 minutes 2 seconds
Variants: generated 200, build-succeeded 92, build-failed 66, syntax-invalid 38, redundant 4
Fitness: max 1(2), min 0(90), ave 0.022
Test execution time: sum 5431 ms, max 97 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:00:58 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-07 23:01:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 4 minutes 42 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 17, redundant 9
Fitness: max 1(1), min 0(112), ave 0.009
Test execution time: sum 6928 ms, max 113 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:01:38 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-07 23:02:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 5 minutes 23 seconds
Variants: generated 200, build-succeeded 115, build-failed 63, syntax-invalid 12, redundant 10
Fitness: max 1(1), min 0(114), ave 0.009
Test execution time: sum 7396 ms, max 119 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:02:19 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-07 23:02:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 6 minutes 3 seconds
Variants: generated 200, build-succeeded 117, build-failed 59, syntax-invalid 10, redundant 14
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7320 ms, max 214 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:02:59 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-07 23:03:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 6 minutes 43 seconds
Variants: generated 200, build-succeeded 117, build-failed 64, syntax-invalid 9, redundant 10
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 6948 ms, max 74 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:03:39 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-07 23:04:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 7 minutes 25 seconds
Variants: generated 200, build-succeeded 123, build-failed 58, syntax-invalid 10, redundant 9
Fitness: max 1(2), min 0(121), ave 0.016
Test execution time: sum 7550 ms, max 109 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:04:21 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-07 23:05:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 8 minutes 5 seconds
Variants: generated 200, build-succeeded 113, build-failed 68, syntax-invalid 11, redundant 8
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7033 ms, max 184 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:05:00 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-07 23:05:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 8 minutes 45 seconds
Variants: generated 200, build-succeeded 121, build-failed 51, syntax-invalid 12, redundant 16
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7440 ms, max 122 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:05:41 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-07 23:09:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 12 minutes 26 seconds
Variants: generated 200, build-succeeded 124, build-failed 58, syntax-invalid 10, redundant 8
Fitness: max 1(1), min 0(123), ave 0.008
Test execution time: sum 187921 ms, max 180085 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:09:22 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-07 23:10:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 13 minutes 6 seconds
Variants: generated 200, build-succeeded 117, build-failed 60, syntax-invalid 8, redundant 15
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 6926 ms, max 82 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:10:02 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-07 23:10:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 13 minutes 47 seconds
Variants: generated 200, build-succeeded 127, build-failed 57, syntax-invalid 6, redundant 10
Fitness: max 0(127), min 0(127), ave 0
Test execution time: sum 7740 ms, max 186 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:10:43 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-07 23:11:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 14 minutes 28 seconds
Variants: generated 200, build-succeeded 123, build-failed 57, syntax-invalid 5, redundant 15
Fitness: max 0(123), min 0(123), ave 0
Test execution time: sum 7454 ms, max 182 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:11:24 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-07 23:12:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 15 minutes 9 seconds
Variants: generated 200, build-succeeded 117, build-failed 63, syntax-invalid 9, redundant 11
Fitness: max 1(1), min 0(116), ave 0.009
Test execution time: sum 7202 ms, max 131 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:12:05 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-07 23:12:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 15 minutes 47 seconds
Variants: generated 200, build-succeeded 111, build-failed 60, syntax-invalid 15, redundant 14
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6658 ms, max 84 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:12:43 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-07 23:16:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 19 minutes 28 seconds
Variants: generated 200, build-succeeded 129, build-failed 50, syntax-invalid 16, redundant 5
Fitness: max 1(1), min 0(128), ave 0.008
Test execution time: sum 187846 ms, max 180065 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:16:24 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-07 23:17:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 20 minutes 9 seconds
Variants: generated 200, build-succeeded 117, build-failed 57, syntax-invalid 11, redundant 15
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 7087 ms, max 114 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:17:05 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-07 23:17:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 20 minutes 48 seconds
Variants: generated 200, build-succeeded 109, build-failed 56, syntax-invalid 20, redundant 15
Fitness: max 1(2), min 0(107), ave 0.018
Test execution time: sum 6568 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:17:44 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-07 23:18:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 21 minutes 29 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 21, redundant 10
Fitness: max 0(110), min 0(110), ave 0
Test execution time: sum 6522 ms, max 129 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:18:25 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-07 23:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 22 minutes 11 seconds
Variants: generated 200, build-succeeded 111, build-failed 54, syntax-invalid 25, redundant 10
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 7070 ms, max 134 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:19:07 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-07 23:19:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 22 minutes 51 seconds
Variants: generated 200, build-succeeded 106, build-failed 53, syntax-invalid 24, redundant 17
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6298 ms, max 80 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:19:47 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-07 23:20:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 23 minutes 33 seconds
Variants: generated 200, build-succeeded 108, build-failed 56, syntax-invalid 18, redundant 18
Fitness: max 0(108), min 0(108), ave 0
Test execution time: sum 6559 ms, max 121 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:20:29 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-07 23:21:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 24 minutes 14 seconds
Variants: generated 200, build-succeeded 98, build-failed 68, syntax-invalid 22, redundant 12
Fitness: max 0(98), min 0(98), ave 0
Test execution time: sum 6120 ms, max 226 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:21:09 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-07 23:21:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 24 minutes 54 seconds
Variants: generated 200, build-succeeded 111, build-failed 59, syntax-invalid 16, redundant 14
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 6543 ms, max 84 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:21:49 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-07 23:22:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 25 minutes 34 seconds
Variants: generated 200, build-succeeded 107, build-failed 61, syntax-invalid 16, redundant 16
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6353 ms, max 115 ms, min 53 ms
----------------------------------------------------------------

2023-08-07 23:22:30 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-07 23:23:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 26 minutes 15 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 20, redundant 16
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 6880 ms, max 121 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:23:11 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-07 23:23:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 26 minutes 55 seconds
Variants: generated 200, build-succeeded 106, build-failed 60, syntax-invalid 22, redundant 12
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6285 ms, max 81 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:23:51 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-07 23:24:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 27 minutes 36 seconds
Variants: generated 200, build-succeeded 99, build-failed 62, syntax-invalid 25, redundant 14
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6050 ms, max 148 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:24:32 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-07 23:25:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 28 minutes 18 seconds
Variants: generated 200, build-succeeded 103, build-failed 61, syntax-invalid 22, redundant 14
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6218 ms, max 128 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:25:13 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-07 23:25:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 28 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 48, syntax-invalid 19, redundant 19
Fitness: max 0(114), min 0(114), ave 0
Test execution time: sum 6637 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:25:55 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-07 23:26:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 29 minutes 41 seconds
Variants: generated 200, build-succeeded 104, build-failed 70, syntax-invalid 12, redundant 14
Fitness: max 0(104), min 0(104), ave 0
Test execution time: sum 6295 ms, max 109 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:26:37 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-07 23:27:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 30 minutes 23 seconds
Variants: generated 200, build-succeeded 106, build-failed 62, syntax-invalid 13, redundant 19
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6583 ms, max 113 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:27:19 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-07 23:28:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 31 minutes 4 seconds
Variants: generated 200, build-succeeded 105, build-failed 70, syntax-invalid 14, redundant 11
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6327 ms, max 73 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:28:00 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-07 23:28:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 31 minutes 47 seconds
Variants: generated 200, build-succeeded 105, build-failed 64, syntax-invalid 19, redundant 12
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6396 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:28:42 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-07 23:29:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 32 minutes 28 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 20, redundant 15
Fitness: max 0(107), min 0(107), ave 0
Test execution time: sum 6702 ms, max 119 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:29:24 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-07 23:30:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 33 minutes 11 seconds
Variants: generated 200, build-succeeded 121, build-failed 56, syntax-invalid 10, redundant 13
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 7194 ms, max 81 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:30:07 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-07 23:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 33 minutes 53 seconds
Variants: generated 200, build-succeeded 103, build-failed 54, syntax-invalid 34, redundant 9
Fitness: max 0(103), min 0(103), ave 0
Test execution time: sum 6479 ms, max 137 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:30:49 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-07 23:31:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 34 minutes 36 seconds
Variants: generated 200, build-succeeded 101, build-failed 69, syntax-invalid 21, redundant 9
Fitness: max 0(101), min 0(101), ave 0
Test execution time: sum 6398 ms, max 179 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:31:31 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-07 23:32:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 35 minutes 19 seconds
Variants: generated 200, build-succeeded 112, build-failed 57, syntax-invalid 24, redundant 7
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6918 ms, max 87 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:32:14 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-07 23:32:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 36 minutes 1 seconds
Variants: generated 200, build-succeeded 105, build-failed 51, syntax-invalid 27, redundant 17
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6270 ms, max 116 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:32:57 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-07 23:33:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 36 minutes 44 seconds
Variants: generated 200, build-succeeded 102, build-failed 61, syntax-invalid 22, redundant 15
Fitness: max 0(102), min 0(102), ave 0
Test execution time: sum 6290 ms, max 151 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:33:40 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-07 23:34:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 37 minutes 27 seconds
Variants: generated 200, build-succeeded 95, build-failed 60, syntax-invalid 32, redundant 13
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5708 ms, max 75 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:34:22 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-07 23:35:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 38 minutes 11 seconds
Variants: generated 200, build-succeeded 106, build-failed 55, syntax-invalid 28, redundant 11
Fitness: max 0(106), min 0(106), ave 0
Test execution time: sum 6457 ms, max 124 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:35:06 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-07 23:35:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 38 minutes 56 seconds
Variants: generated 200, build-succeeded 105, build-failed 57, syntax-invalid 23, redundant 15
Fitness: max 0(105), min 0(105), ave 0
Test execution time: sum 6626 ms, max 140 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:35:51 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-07 23:36:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 39 minutes 39 seconds
Variants: generated 200, build-succeeded 92, build-failed 64, syntax-invalid 31, redundant 13
Fitness: max 0(92), min 0(92), ave 0
Test execution time: sum 5572 ms, max 89 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:36:35 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-07 23:37:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 40 minutes 25 seconds
Variants: generated 200, build-succeeded 100, build-failed 63, syntax-invalid 25, redundant 12
Fitness: max 1(1), min 0(99), ave 0.01
Test execution time: sum 6088 ms, max 137 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:37:21 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-07 23:38:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 41 minutes 12 seconds
Variants: generated 200, build-succeeded 95, build-failed 64, syntax-invalid 27, redundant 14
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 5895 ms, max 135 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:38:08 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-07 23:38:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 41 minutes 58 seconds
Variants: generated 200, build-succeeded 88, build-failed 59, syntax-invalid 40, redundant 13
Fitness: max 0(88), min 0(88), ave 0
Test execution time: sum 5464 ms, max 129 ms, min 54 ms
----------------------------------------------------------------

2023-08-07 23:38:53 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-07 23:39:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 42 minutes 40 seconds
Variants: generated 200, build-succeeded 66, build-failed 63, syntax-invalid 52, redundant 19
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 4416 ms, max 279 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:39:36 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-08-07 23:40:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 43 minutes 27 seconds
Variants: generated 200, build-succeeded 100, build-failed 69, syntax-invalid 20, redundant 11
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6193 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:40:23 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-08-07 23:41:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 44 minutes 13 seconds
Variants: generated 200, build-succeeded 100, build-failed 57, syntax-invalid 31, redundant 12
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6179 ms, max 109 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:41:09 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-08-07 23:41:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 44 minutes 58 seconds
Variants: generated 200, build-succeeded 89, build-failed 58, syntax-invalid 33, redundant 20
Fitness: max 0(89), min 0(89), ave 0
Test execution time: sum 5489 ms, max 102 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:41:54 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-08-07 23:42:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 45 minutes 45 seconds
Variants: generated 200, build-succeeded 99, build-failed 49, syntax-invalid 34, redundant 18
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6108 ms, max 130 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:42:41 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-08-07 23:43:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 46 minutes 31 seconds
Variants: generated 200, build-succeeded 100, build-failed 61, syntax-invalid 23, redundant 16
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6258 ms, max 84 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:43:27 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-08-07 23:44:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 47 minutes 20 seconds
Variants: generated 200, build-succeeded 99, build-failed 59, syntax-invalid 28, redundant 14
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6434 ms, max 170 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:44:15 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-08-07 23:45:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 48 minutes 8 seconds
Variants: generated 200, build-succeeded 91, build-failed 65, syntax-invalid 39, redundant 5
Fitness: max 1(1), min 0(90), ave 0.011
Test execution time: sum 6079 ms, max 137 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:45:04 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-08-07 23:45:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 48 minutes 55 seconds
Variants: generated 200, build-succeeded 96, build-failed 66, syntax-invalid 27, redundant 11
Fitness: max 0(96), min 0(96), ave 0
Test execution time: sum 6198 ms, max 114 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:45:51 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-08-07 23:46:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 49 minutes 43 seconds
Variants: generated 200, build-succeeded 98, build-failed 64, syntax-invalid 31, redundant 7
Fitness: max 1(1), min 0(97), ave 0.01
Test execution time: sum 6453 ms, max 142 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:46:39 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-08-07 23:47:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 50 minutes 31 seconds
Variants: generated 200, build-succeeded 101, build-failed 67, syntax-invalid 28, redundant 4
Fitness: max 1(2), min 0(99), ave 0.02
Test execution time: sum 6510 ms, max 97 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:47:27 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-08-07 23:48:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 51 minutes 20 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 18, redundant 18
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7274 ms, max 117 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:48:16 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-08-07 23:49:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 52 minutes 8 seconds
Variants: generated 200, build-succeeded 97, build-failed 62, syntax-invalid 29, redundant 12
Fitness: max 0(97), min 0(97), ave 0
Test execution time: sum 6502 ms, max 129 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:49:04 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-08-07 23:49:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 52 minutes 59 seconds
Variants: generated 200, build-succeeded 102, build-failed 65, syntax-invalid 20, redundant 13
Fitness: max 1(2), min 0(100), ave 0.02
Test execution time: sum 7158 ms, max 119 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:49:54 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-08-07 23:50:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 53 minutes 51 seconds
Variants: generated 200, build-succeeded 110, build-failed 73, syntax-invalid 8, redundant 9
Fitness: max 1(1), min 0(109), ave 0.009
Test execution time: sum 7847 ms, max 120 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:50:47 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-08-07 23:51:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 54 minutes 40 seconds
Variants: generated 200, build-succeeded 99, build-failed 55, syntax-invalid 21, redundant 25
Fitness: max 0(99), min 0(99), ave 0
Test execution time: sum 6492 ms, max 131 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:51:36 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-08-07 23:52:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 55 minutes 32 seconds
Variants: generated 200, build-succeeded 113, build-failed 61, syntax-invalid 11, redundant 15
Fitness: max 0(113), min 0(113), ave 0
Test execution time: sum 7735 ms, max 175 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:52:28 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-08-07 23:53:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 56 minutes 24 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 11, redundant 17
Fitness: max 0(111), min 0(111), ave 0
Test execution time: sum 7370 ms, max 157 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:53:20 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-08-07 23:54:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 57 minutes 13 seconds
Variants: generated 200, build-succeeded 100, build-failed 62, syntax-invalid 26, redundant 12
Fitness: max 0(100), min 0(100), ave 0
Test execution time: sum 6554 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:54:09 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-08-07 23:54:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 58 minutes 3 seconds
Variants: generated 200, build-succeeded 102, build-failed 56, syntax-invalid 33, redundant 9
Fitness: max 1(2), min 0(100), ave 0.02
Test execution time: sum 6777 ms, max 140 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:54:59 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-08-07 23:55:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 58 minutes 54 seconds
Variants: generated 200, build-succeeded 108, build-failed 50, syntax-invalid 28, redundant 14
Fitness: max 1(3), min 0(105), ave 0.028
Test execution time: sum 7654 ms, max 140 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:55:50 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-08-07 23:56:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 59 minutes 47 seconds
Variants: generated 200, build-succeeded 117, build-failed 55, syntax-invalid 16, redundant 12
Fitness: max 0(117), min 0(117), ave 0
Test execution time: sum 8279 ms, max 154 ms, min 56 ms
----------------------------------------------------------------

2023-08-07 23:56:43 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-08-07 23:57:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 40 seconds
Variants: generated 200, build-succeeded 121, build-failed 51, syntax-invalid 15, redundant 13
Fitness: max 0(121), min 0(121), ave 0
Test execution time: sum 8506 ms, max 168 ms, min 57 ms
----------------------------------------------------------------

2023-08-07 23:57:36 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-08-07 23:58:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 1 minutes 33 seconds
Variants: generated 200, build-succeeded 118, build-failed 62, syntax-invalid 13, redundant 7
Fitness: max 0(118), min 0(118), ave 0
Test execution time: sum 8046 ms, max 140 ms, min 55 ms
----------------------------------------------------------------

2023-08-07 23:58:29 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-08-07 23:59:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 2 minutes 25 seconds
Variants: generated 200, build-succeeded 111, build-failed 61, syntax-invalid 18, redundant 10
Fitness: max 1(1), min 0(110), ave 0.009
Test execution time: sum 7871 ms, max 229 ms, min 57 ms
----------------------------------------------------------------

2023-08-07 23:59:21 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-08-08 00:00:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 3 minutes 18 seconds
Variants: generated 200, build-succeeded 112, build-failed 65, syntax-invalid 16, redundant 7
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 8035 ms, max 219 ms, min 57 ms
----------------------------------------------------------------

2023-08-08 00:00:14 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-08-08 00:01:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 4 minutes 11 seconds
Variants: generated 200, build-succeeded 109, build-failed 68, syntax-invalid 8, redundant 15
Fitness: max 0(109), min 0(109), ave 0
Test execution time: sum 7705 ms, max 164 ms, min 56 ms
----------------------------------------------------------------

2023-08-08 00:01:07 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-08-08 00:02:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 5 minutes 4 seconds
Variants: generated 200, build-succeeded 119, build-failed 54, syntax-invalid 16, redundant 11
Fitness: max 1(2), min 0(117), ave 0.017
Test execution time: sum 8270 ms, max 149 ms, min 56 ms
----------------------------------------------------------------

2023-08-08 00:02:00 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-08-08 00:02:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 5 minutes 59 seconds
Variants: generated 200, build-succeeded 106, build-failed 62, syntax-invalid 23, redundant 9
Fitness: max 1(1), min 0(105), ave 0.009
Test execution time: sum 7889 ms, max 228 ms, min 58 ms
----------------------------------------------------------------

2023-08-08 00:02:55 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-08-08 00:03:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 6 minutes 51 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 15, redundant 13
Fitness: max 1(1), min 0(111), ave 0.009
Test execution time: sum 7874 ms, max 92 ms, min 58 ms
----------------------------------------------------------------

2023-08-08 00:03:47 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-08-08 00:04:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 7 minutes 43 seconds
Variants: generated 200, build-succeeded 101, build-failed 65, syntax-invalid 24, redundant 10
Fitness: max 1(1), min 0(100), ave 0.01
Test execution time: sum 6964 ms, max 162 ms, min 57 ms
----------------------------------------------------------------

2023-08-08 00:04:39 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-08-08 00:05:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 8 minutes 38 seconds
Variants: generated 200, build-succeeded 115, build-failed 62, syntax-invalid 13, redundant 10
Fitness: max 0(115), min 0(115), ave 0
Test execution time: sum 8408 ms, max 146 ms, min 58 ms
----------------------------------------------------------------

2023-08-08 00:05:34 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-08-08 00:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 9 minutes 32 seconds
Variants: generated 200, build-succeeded 123, build-failed 53, syntax-invalid 12, redundant 12
Fitness: max 1(2), min 0(121), ave 0.016
Test execution time: sum 8586 ms, max 167 ms, min 59 ms
----------------------------------------------------------------

2023-08-08 00:06:28 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-08-08 00:07:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 10 minutes 24 seconds
Variants: generated 200, build-succeeded 98, build-failed 64, syntax-invalid 26, redundant 12
Fitness: max 1(1), min 0(97), ave 0.01
Test execution time: sum 7248 ms, max 263 ms, min 57 ms
----------------------------------------------------------------

2023-08-08 00:07:20 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-08-08 00:07:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 10 minutes 34 seconds
Variants: generated 36, build-succeeded 11, build-failed 24, syntax-invalid 1, redundant 0
Fitness: max 1(1), min 0(10), ave 0.091
Test execution time: sum 753 ms, max 84 ms, min 63 ms
----------------------------------------------------------------

2023-08-08 00:07:30 [main] [INFO]  KGenProgMain - GA stopped
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v569)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v569)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		nextAction = EventHandler.CONTINUE;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v569)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v569)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v569)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -275,14 +275,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v712)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,7 +218,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v712)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v712)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		nextAction = EventHandler.CONTINUE;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v712)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v712)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v712)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -294,6 +294,7 @@
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
+				x0 = x1;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v789)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,7 +218,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v789)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v789)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		nextAction = EventHandler.CONTINUE;
         g0Positive = g0 >= 0;
     }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v789)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v789)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v789)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1883)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1883)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1883)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -216,6 +216,8 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1883)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1883)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1883)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -276,7 +276,8 @@
           dirtyState = false;
       }
 
-      return interpolatedState;
+      finalized = false;
+	return interpolatedState;
 
   }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -216,6 +216,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -272,7 +273,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1978)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -276,7 +276,8 @@
           dirtyState = false;
       }
 
-      return interpolatedState;
+      finalized = false;
+	return interpolatedState;
 
   }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1978)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1978)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -216,6 +216,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
@@ -282,7 +283,11 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        {
+			previousEventTime = t;
+			g0Positive = increasing;
+			nextAction = handler.eventOccurred(t, y, !(increasing ^ forward));
+		}
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1978)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1978)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v1978)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -272,7 +273,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2152)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2152)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2152)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2152)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2152)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2152)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,8 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -216,6 +214,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2622)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -242,7 +241,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2622)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2622)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2622)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2622)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:33 [main] [INFO]  PatchLogExporter - patch (v2622)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,9 +213,10 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2750)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2750)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2750)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -216,6 +216,8 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2750)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2750)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    final double q = (x2 - x1) / (x1 - x0);
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2765)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2765)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2765)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2765)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -216,6 +216,8 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2765)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2765)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2982)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2982)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -103,6 +104,7 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
+		double ga = g0;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2982)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2982)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v2982)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3305)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3305)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3305)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3305)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3305)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3305)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3305)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3371)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3371)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3371)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3371)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3371)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3371)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3371)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3379)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3379)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3379)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3379)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3379)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3379)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3379)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y1 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3407)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -276,7 +276,8 @@
           dirtyState = false;
       }
 
-      return interpolatedState;
+      finalized = false;
+	return interpolatedState;
 
   }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3407)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3407)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    ga = gb;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3407)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3407)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3407)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3456)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -276,7 +275,8 @@
           dirtyState = false;
       }
 
-      return interpolatedState;
+      finalized = false;
+	return interpolatedState;
 
   }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3456)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3456)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,9 +213,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3456)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3456)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3456)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3649)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -273,10 +272,10 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
-      return interpolatedState;
+      finalized = false;
+	return interpolatedState;
 
   }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3649)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3649)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3649)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3649)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v3649)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4554)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4554)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4554)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4554)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4554)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4761)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -273,7 +272,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4761)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4761)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -231,9 +231,7 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
+                        pendingEvent = false;
                         return true;
                     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4761)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4761)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4761)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4833)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -208,7 +207,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -218,7 +216,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4833)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -213,7 +214,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(tb);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4833)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4893)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4893)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4893)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4893)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,9 +213,10 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(tb);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4893)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4893)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v4893)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5068)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5068)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5068)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(tb);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5068)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5068)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5068)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5139)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5139)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5139)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -231,9 +232,7 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
+                        pendingEvent = false;
                         return true;
                     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5139)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5139)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5139)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,13 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5161)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5161)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5161)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -231,9 +232,7 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
+                        pendingEvent = false;
                         return true;
                     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5161)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5161)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5161)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if ((y1 > 0) == (y2 > 0)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -272,7 +272,10 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5473)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    previousTime = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5473)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5473)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,9 +213,10 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(tb);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					pendingEvent = true;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5473)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5473)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5473)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5473)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5914)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -117,6 +116,7 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5914)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5914)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5914)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5914)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5914)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v5914)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6046)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -117,6 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6046)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6046)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6046)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6046)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6046)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6046)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6202)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -117,6 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -208,7 +209,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6202)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6202)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6202)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6202)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6202)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6202)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6215)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +207,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6215)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6215)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,12 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6501)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -117,6 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6501)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6501)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6501)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6501)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6501)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6501)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -272,7 +263,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6547)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -117,6 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6547)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6547)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6547)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6547)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6547)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6547)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,14 +223,12 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
+            if (f == null) {
+                setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
@@ -250,7 +248,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -272,7 +269,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6919)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6919)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6919)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6919)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,13 +93,12 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -231,9 +230,7 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
+                        pendingEvent = false;
                         return true;
                     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6919)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6919)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v6919)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,7 +93,8 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8594)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -272,7 +271,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8971)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -232,7 +231,8 @@
 
   /** {@inheritDoc} */
   public double getCurrentTime() {
-    return currentTime;
+    forward = true;
+	return currentTime;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8971)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8971)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8971)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,13 +93,12 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -231,9 +229,7 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
+                        pendingEvent = false;
                         return true;
                     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8971)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8971)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8973)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -232,7 +231,8 @@
 
   /** {@inheritDoc} */
   public double getCurrentTime() {
-    return currentTime;
+    forward = true;
+	return currentTime;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8973)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8973)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8973)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,13 +93,12 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -203,7 +202,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -231,9 +229,7 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
+                        pendingEvent = false;
                         return true;
                     }
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8973)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8973)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v8973)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    functionValueAccuracy = defaultFunctionValueAccuracy;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v21753)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,8 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -115,8 +113,10 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +177,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -243,7 +242,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v21753)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v21753)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v21753)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,8 +103,7 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        pendingEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -177,7 +176,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
-            for (int i = 0; i < n; ++i) {
+            for (int i = 0; interpolator.isForward(); ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
@@ -248,7 +247,8 @@
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
-            return false;
+            g0Positive = increasing;
+			return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v21753)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v21753)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v21753)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,14 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
+                {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -272,7 +279,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25181)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,8 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,12 +109,26 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25181)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25181)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25181)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25181)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25724)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,12 +108,21 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +183,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -217,7 +222,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25724)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25724)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25724)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -282,7 +280,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25724)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25724)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25727)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,12 +108,21 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +183,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -217,7 +222,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25727)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25727)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25727)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25727)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25727)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25727)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -301,7 +301,7 @@
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
-                delta = x1 - x0;
+                delta = 0.5 * oldDelta;
                 oldDelta = delta;
             }
             i++;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25992)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -111,12 +109,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +253,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25992)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25992)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
@@ -90,7 +89,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25992)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25992)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v25992)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,12 +110,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.MathRuntimeException
+++ org.apache.commons.math.MathRuntimeException
@@ -212,7 +212,8 @@
             /** {@inheritDoc} */
             @Override
             public String getLocalizedMessage() {
-                return buildMessage(Locale.getDefault(), pattern, arguments);
+                final String argument = "https://issues.apache.org/jira/browse/MATH";
+				return buildMessage(Locale.getDefault(), pattern, arguments);
             }
 
         };
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26797)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,9 +280,7 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26925)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -109,14 +108,21 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +183,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26925)
--- org.apache.commons.math.MathRuntimeException
+++ org.apache.commons.math.MathRuntimeException
@@ -212,7 +212,8 @@
             /** {@inheritDoc} */
             @Override
             public String getLocalizedMessage() {
-                return buildMessage(Locale.getDefault(), pattern, arguments);
+                final String argument = "https://issues.apache.org/jira/browse/MATH";
+				return buildMessage(Locale.getDefault(), pattern, arguments);
             }
 
         };
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26925)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26925)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -179,8 +178,6 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
-                tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
@@ -245,8 +242,44 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
             pendingEventTime = Double.NaN;
             return false;
 
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26925)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26925)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v26925)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -109,14 +107,23 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +184,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -217,7 +223,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28129)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -109,14 +107,23 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +184,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -217,7 +223,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28129)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28129)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28129)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28129)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -109,14 +109,19 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.h = Math.abs(h);
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.MathRuntimeException
+++ org.apache.commons.math.MathRuntimeException
@@ -212,7 +212,8 @@
             /** {@inheritDoc} */
             @Override
             public String getLocalizedMessage() {
-                return buildMessage(Locale.getDefault(), pattern, arguments);
+                final String argument = "https://issues.apache.org/jira/browse/MATH";
+				return buildMessage(Locale.getDefault(), pattern, arguments);
             }
 
         };
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,9 +59,7 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,8 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
-        increasing        = true;
+		increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:34 [main] [INFO]  PatchLogExporter - patch (v28772)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,13 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    double fa;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v28930)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,12 +110,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +258,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v28930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v28930)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    previousEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v28930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v28930)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v28930)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v29708)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,12 +110,28 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +258,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v29708)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v29708)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v29708)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v29708)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v29708)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v29708)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30200)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -106,17 +104,28 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.h = Math.abs(h);
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30200)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30200)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,8 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30200)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30200)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30200)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30317)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -111,12 +111,26 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	this.h = Math.abs(h);
+	this.forward = true;
+	this.forward = true;
+	this.h = Math.abs(h);
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30317)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30317)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30317)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30317)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30317)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30549)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,12 +109,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +256,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,8 +430,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30549)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30549)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30549)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30549)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30549)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30549)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30703)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,11 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,12 +108,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30703)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30703)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30703)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30703)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30703)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,10 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +307,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            y0 = y1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30704)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,11 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,12 +108,24 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30704)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30704)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30704)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30704)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v30704)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,10 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35249)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.h = Math.abs(h);
     this.dirtyState         = true;
   }
 
@@ -111,12 +109,29 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.h = Math.abs(h);
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35249)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35249)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35249)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        pendingEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35249)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35249)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35249)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35294)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,12 +108,27 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35294)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35294)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35294)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        pendingEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35294)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35294)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35294)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35456)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,7 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    dirtyState = true;
     this.dirtyState         = true;
   }
 
@@ -111,12 +111,33 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -208,7 +229,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35456)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35456)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        pendingEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35456)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35456)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v35456)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,10 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 * y1 >= 0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36502)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -106,17 +106,26 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +177,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -208,7 +216,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36502)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36502)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36502)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36502)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36502)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,10 +272,13 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 * y1 >= 0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36584)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -106,17 +106,26 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +177,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -208,7 +216,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36584)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36584)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36584)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36584)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36584)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36910)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -106,17 +106,26 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +177,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -208,7 +216,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36910)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36910)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36910)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36910)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36910)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v36910)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39162)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -109,14 +112,27 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -171,8 +187,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -243,7 +257,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      finalized = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39162)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39162)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39162)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    final double[] y = interpolator.getInterpolatedState();
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39162)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39162)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39162)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,10 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39165)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -109,14 +112,27 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -171,8 +187,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -243,7 +257,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      finalized = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39165)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39165)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39165)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39165)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39165)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39165)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,10 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39317)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,15 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+	finalized = true;
     this.dirtyState         = true;
   }
 
@@ -117,6 +120,23 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +263,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39317)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39317)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39317)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39317)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39317)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,10 +272,14 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39534)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,14 +106,31 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
-    currentState            = y;
+    previousTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39534)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39534)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39534)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39534)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y1 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -272,7 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39950)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.forward            = true;
+	finalized = true;
     this.dirtyState         = true;
   }
 
@@ -115,8 +114,23 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39950)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39950)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39950)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39950)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v39950)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,19 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					}
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40154)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.forward            = true;
+	finalized = true;
     this.dirtyState         = true;
   }
 
@@ -115,8 +114,23 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40154)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40154)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40154)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40154)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40154)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40154)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,6 +229,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
                 y1 = y2;
                 y2 = y0;
             }
@@ -272,7 +273,16 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40173)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,14 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	this.forward            = true;
+	finalized = true;
     this.dirtyState         = true;
   }
 
@@ -115,8 +114,23 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40173)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40173)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40173)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40173)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40173)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,6 +229,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
                 y1 = y2;
                 y2 = y0;
             }
@@ -272,7 +273,16 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40772)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,15 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -117,6 +125,22 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +267,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40772)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40772)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,6 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		g0Positive = g0 >= 0;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40772)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40772)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v40772)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,12 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41589)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,20 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -106,7 +111,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,6 +121,22 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41589)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41589)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41589)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,6 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		g0Positive = g0 >= 0;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -181,7 +182,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -197,9 +197,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41589)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41589)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41589)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41911)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,21 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -106,7 +112,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,6 +122,20 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +187,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -242,8 +260,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41911)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41911)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,8 +103,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		g0Positive = g0 >= 0;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -324,8 +323,6 @@
             handler.resetState(t, y);
         }
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-
         return (nextAction == EventHandler.RESET_STATE) ||
                (nextAction == EventHandler.RESET_DERIVATIVES);
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41911)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41911)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v41911)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42342)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,16 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,17 +106,30 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +181,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +255,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +430,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    interpolatedTime = Double.NaN;
 
     if (dimension < 0) {
         currentState = null;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42342)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42342)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42342)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42342)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42342)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42342)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42345)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,16 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,17 +106,30 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +181,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +255,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +430,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    interpolatedTime = Double.NaN;
 
     if (dimension < 0) {
         currentState = null;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42345)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42345)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42345)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42345)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42345)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v42345)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v43909)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,19 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+	finalized = true;
     this.dirtyState         = true;
   }
 
@@ -109,14 +116,26 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -171,8 +190,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -243,7 +260,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -429,8 +445,6 @@
         }
     }
 
-    // we do NOT handle the interpolated time and state here
-    interpolatedTime        = Double.NaN;
     interpolatedState       = (dimension < 0) ? null : new double[dimension];
     interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v43909)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v43909)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,6 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		g0Positive = g0 >= 0;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v43909)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v43909)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v43909)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v48083)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,19 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -115,9 +125,25 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	finalized = true;
+	finalized = true;
+	this.forward = true;
+	finalized = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
@@ -177,7 +203,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v48083)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v48083)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -173,6 +173,7 @@
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
+			final double t0 = interpolator.getPreviousTime();
 
             double ta = t0;
             double ga = g0;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v48083)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v48083)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v48083)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v49919)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,24 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -115,9 +123,27 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
@@ -177,9 +203,8 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    h = currentTime - previousTime;
 
   }
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v49919)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v49919)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v49919)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v49919)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v49919)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50317)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,23 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -117,7 +124,26 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
@@ -179,7 +205,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    finalized = true;
 
   }
 
@@ -243,7 +269,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50317)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50317)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50317)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50317)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50317)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50535)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,19 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -115,8 +121,30 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +205,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,9 +247,6 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
-
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50535)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50535)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50535)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50535)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50535)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50535)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50553)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,19 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -115,8 +121,30 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -177,7 +205,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,9 +247,6 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
-
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50553)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50553)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +214,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50553)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50553)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v50553)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51212)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,23 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -106,7 +113,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -115,9 +121,26 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    finalized = true;
 
   }
 
@@ -179,7 +202,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    finalized = true;
 
   }
 
@@ -243,7 +266,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51212)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51212)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51212)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51212)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51212)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51224)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,19 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -106,7 +109,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +119,32 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
@@ -243,7 +270,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51224)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51224)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51224)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51336)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -107,7 +108,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -115,8 +115,31 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51336)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51336)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51336)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -323,7 +324,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51336)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51336)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v51336)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,6 +229,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
                 y1 = y2;
                 y2 = y0;
             }
@@ -272,7 +273,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52316)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,20 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -106,7 +110,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -115,8 +118,29 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +192,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52316)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52316)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52316)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52316)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52316)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52350)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,20 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -106,7 +110,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -115,8 +118,29 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +192,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52350)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52350)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52350)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52350)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,10 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(x1 - x0) <= absoluteAccuracy) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52509)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,18 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -109,15 +114,38 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52509)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52509)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,16 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        g0Positive = g0 >= 0;
+		g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52509)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:35 [main] [INFO]  PatchLogExporter - patch (v52509)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52518)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,18 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -109,15 +114,38 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52518)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52518)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52518)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,16 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        g0Positive = g0 >= 0;
+		g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52518)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52518)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52518)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,10 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52546)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,18 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -109,15 +114,38 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52546)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52546)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52546)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,16 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        g0Positive = g0 >= 0;
+		g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +285,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52546)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52546)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v52546)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53341)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,23 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -117,6 +124,27 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -243,7 +271,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53341)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53341)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53341)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,15 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        g0Positive = g0 >= 0;
+		g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53341)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53341)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53341)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,9 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53568)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,21 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -106,7 +111,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +121,31 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    finalized = true;
 
   }
 
@@ -243,7 +271,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53568)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53568)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53568)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53568)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53568)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,6 +229,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
                 y1 = y2;
                 y2 = y0;
             }
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53914)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -106,7 +108,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +118,28 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    finalized = true;
 
   }
 
@@ -179,7 +201,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    finalized = true;
 
   }
 
@@ -243,7 +265,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53914)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53914)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,12 +101,12 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -323,7 +322,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53914)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53914)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53914)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,6 +229,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
                 y1 = y2;
                 y2 = y0;
             }
@@ -252,7 +253,8 @@
                 delta = 0.5 * dx;
                 oldDelta = delta;
             } else {
-                double r3 = y1 / y0;
+                x2 = x0;
+				double r3 = y1 / y0;
                 double p;
                 double p1;
                 // the equality test (x0 == x2) is intentional,
@@ -272,7 +274,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53920)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -106,7 +108,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +118,28 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    finalized = true;
 
   }
 
@@ -179,7 +201,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    finalized = true;
 
   }
 
@@ -243,7 +265,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53920)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53920)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,12 +101,12 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -282,7 +281,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = handler.eventOccurred(t, y, !(increasing ^ forward));
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -323,7 +322,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53920)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53920)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v53920)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,6 +229,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
                 y1 = y2;
                 y2 = y0;
             }
@@ -272,7 +273,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54185)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,21 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    h = currentTime - previousTime;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -117,7 +123,31 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+    h = currentTime - previousTime;
 
   }
 
@@ -243,7 +273,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54185)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54185)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54185)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        g0Positive = g0 >= 0;
+		g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -169,7 +170,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            nextAction = EventHandler.CONTINUE;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54185)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54185)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54185)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -272,7 +271,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54367)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,17 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -106,7 +108,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,6 +118,32 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +195,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +269,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54367)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54367)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54367)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,13 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +205,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54367)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54367)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54589)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,15 +87,24 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -117,6 +126,28 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -217,9 +248,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -243,7 +271,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54589)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54589)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54589)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54589)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54931)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,21 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -117,6 +126,31 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -218,8 +252,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -243,7 +275,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54931)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54931)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54931)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54931)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54931)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,11 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54995)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,21 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -117,6 +126,31 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -218,8 +252,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -243,7 +275,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54995)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54995)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54995)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54995)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v54995)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -272,7 +264,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55179)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,21 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -106,7 +111,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,6 +121,34 @@
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -168,7 +200,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +274,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55179)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55179)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55179)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -203,7 +204,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55179)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55179)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55336)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,17 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	finalized = true;
+	this.forward            = true;
+    h = currentTime - previousTime;
   }
 
   /** Simple constructor.
@@ -112,11 +120,35 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
+	currentState = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
     this.dirtyState   = true;
 
   }
@@ -217,9 +249,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -243,7 +272,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55336)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55336)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        nextAction = EventHandler.CONTINUE;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -169,7 +169,8 @@
 
         try {
 
-            forward = interpolator.isForward();
+            nextAction = EventHandler.CONTINUE;
+			forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55336)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55336)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-08 00:07:36 [main] [INFO]  PatchLogExporter - patch (v55336)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -272,7 +271,8 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    y0 = y1;
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-08 00:07:36 [main] [INFO]  KGenProgMain - Summary
Reached generation = 279
Generated variants = 55336
Syntax valid variants = 47516
Build succeeded variants = 27164
Time elapsed = 13 hours 10 minutes 40 seconds
Exit status = SUCCESS
