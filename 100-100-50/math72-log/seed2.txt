2023-08-06 03:30:54 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 03:30:54 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 03:30:54 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 03:30:54 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 2 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-08-06 03:31:14 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-08-06 03:31:14 [main] [INFO]  KGenProgMain - GA started
2023-08-06 03:31:14 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 03:31:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 seconds
Variants: generated 100, build-succeeded 20, build-failed 47, syntax-invalid 12, redundant 21
Fitness: max 0.833(13), min 0.167(3), ave 0.7
Test execution time: sum 2812 ms, max 398 ms, min 71 ms
----------------------------------------------------------------

2023-08-06 03:31:23 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 03:31:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, build-succeeded 34, build-failed 55, syntax-invalid 4, redundant 7
Fitness: max 0.833(21), min 0.167(4), ave 0.711
Test execution time: sum 2512 ms, max 150 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 03:31:30 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 03:31:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 200, build-succeeded 68, build-failed 55, syntax-invalid 19, redundant 58
Fitness: max 1(2), min 0.167(8), ave 0.706
Test execution time: sum 4684 ms, max 220 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 03:31:41 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 03:31:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 seconds
Variants: generated 200, build-succeeded 68, build-failed 51, syntax-invalid 26, redundant 55
Fitness: max 1(1), min 0.167(5), ave 0.765
Test execution time: sum 4267 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:31:51 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 03:32:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 seconds
Variants: generated 200, build-succeeded 74, build-failed 62, syntax-invalid 15, redundant 49
Fitness: max 1(1), min 0.167(3), ave 0.797
Test execution time: sum 4567 ms, max 201 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:32:01 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 03:32:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 seconds
Variants: generated 200, build-succeeded 71, build-failed 66, syntax-invalid 22, redundant 41
Fitness: max 1(2), min 0.167(3), ave 0.796
Test execution time: sum 4395 ms, max 116 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 03:32:12 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 03:32:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 7 seconds
Variants: generated 200, build-succeeded 59, build-failed 64, syntax-invalid 30, redundant 47
Fitness: max 0.833(58), min 0.667(1), ave 0.831
Test execution time: sum 3729 ms, max 200 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 03:32:21 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 03:32:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 18 seconds
Variants: generated 200, build-succeeded 81, build-failed 55, syntax-invalid 30, redundant 34
Fitness: max 0.833(77), min 0.167(3), ave 0.807
Test execution time: sum 4957 ms, max 135 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:32:32 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 03:32:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 29 seconds
Variants: generated 200, build-succeeded 90, build-failed 59, syntax-invalid 22, redundant 29
Fitness: max 0.833(82), min 0.167(4), ave 0.796
Test execution time: sum 5569 ms, max 193 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:32:44 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 03:32:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 41 seconds
Variants: generated 200, build-succeeded 79, build-failed 51, syntax-invalid 35, redundant 35
Fitness: max 0.833(70), min 0.167(7), ave 0.77
Test execution time: sum 4878 ms, max 140 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:32:55 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 03:33:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 52 seconds
Variants: generated 200, build-succeeded 81, build-failed 56, syntax-invalid 35, redundant 28
Fitness: max 1(1), min 0(1), ave 0.778
Test execution time: sum 5012 ms, max 127 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:33:06 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 03:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 4 seconds
Variants: generated 200, build-succeeded 92, build-failed 63, syntax-invalid 27, redundant 18
Fitness: max 1(2), min 0.167(3), ave 0.808
Test execution time: sum 5613 ms, max 133 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:33:18 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 03:33:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 15 seconds
Variants: generated 200, build-succeeded 74, build-failed 65, syntax-invalid 32, redundant 29
Fitness: max 1(1), min 0.167(1), ave 0.82
Test execution time: sum 4580 ms, max 196 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:33:30 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 03:33:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 27 seconds
Variants: generated 200, build-succeeded 85, build-failed 54, syntax-invalid 39, redundant 22
Fitness: max 1(1), min 0.167(6), ave 0.784
Test execution time: sum 5160 ms, max 132 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:33:41 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 03:48:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 40 seconds
Variants: generated 200, build-succeeded 97, build-failed 49, syntax-invalid 29, redundant 25
Fitness: max 1(2), min 0.167(9), ave 0.761
Test execution time: sum 906018 ms, max 900129 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:48:55 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 03:49:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 53 seconds
Variants: generated 200, build-succeeded 85, build-failed 63, syntax-invalid 28, redundant 24
Fitness: max 0.833(73), min 0.167(7), ave 0.769
Test execution time: sum 5237 ms, max 163 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:49:07 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 03:49:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 6 seconds
Variants: generated 200, build-succeeded 103, build-failed 52, syntax-invalid 25, redundant 20
Fitness: max 0.833(91), min 0.167(8), ave 0.775
Test execution time: sum 6178 ms, max 114 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:49:20 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 03:49:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 20 seconds
Variants: generated 200, build-succeeded 112, build-failed 47, syntax-invalid 25, redundant 16
Fitness: max 1(1), min 0.167(12), ave 0.753
Test execution time: sum 6818 ms, max 165 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:49:35 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 03:49:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 35 seconds
Variants: generated 200, build-succeeded 115, build-failed 47, syntax-invalid 19, redundant 19
Fitness: max 1(1), min 0.167(7), ave 0.78
Test execution time: sum 6966 ms, max 159 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 03:49:50 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 03:50:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 51 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 12, redundant 22
Fitness: max 1(1), min 0.167(11), ave 0.76
Test execution time: sum 6787 ms, max 202 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 03:50:05 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 04:05:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 5 seconds
Variants: generated 200, build-succeeded 112, build-failed 48, syntax-invalid 23, redundant 17
Fitness: max 0.833(98), min 0.167(12), ave 0.759
Test execution time: sum 906792 ms, max 900088 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:05:20 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 04:05:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 20 seconds
Variants: generated 200, build-succeeded 108, build-failed 57, syntax-invalid 19, redundant 16
Fitness: max 0.833(91), min 0.167(12), ave 0.752
Test execution time: sum 6525 ms, max 114 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:05:34 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-06 04:20:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 35 seconds
Variants: generated 200, build-succeeded 113, build-failed 54, syntax-invalid 26, redundant 7
Fitness: max 1(3), min 0.167(5), ave 0.804
Test execution time: sum 906901 ms, max 900106 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:20:49 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-06 04:21:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 49 seconds
Variants: generated 200, build-succeeded 92, build-failed 63, syntax-invalid 33, redundant 12
Fitness: max 0.833(81), min 0.167(5), ave 0.786
Test execution time: sum 5702 ms, max 192 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:21:03 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-06 04:36:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 3 seconds
Variants: generated 200, build-succeeded 97, build-failed 47, syntax-invalid 44, redundant 12
Fitness: max 1(1), min 0.167(8), ave 0.766
Test execution time: sum 906060 ms, max 900128 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:36:18 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-06 04:36:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 18 seconds
Variants: generated 200, build-succeeded 98, build-failed 54, syntax-invalid 37, redundant 11
Fitness: max 1(3), min 0.167(2), ave 0.811
Test execution time: sum 6246 ms, max 166 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:36:32 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-06 04:36:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 33 seconds
Variants: generated 200, build-succeeded 109, build-failed 55, syntax-invalid 21, redundant 15
Fitness: max 1(1), min 0.167(8), ave 0.783
Test execution time: sum 6494 ms, max 78 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:36:47 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-06 04:37:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 48 seconds
Variants: generated 200, build-succeeded 100, build-failed 56, syntax-invalid 35, redundant 9
Fitness: max 1(1), min 0.167(6), ave 0.787
Test execution time: sum 5995 ms, max 132 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:37:02 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-06 04:37:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 3 seconds
Variants: generated 200, build-succeeded 98, build-failed 55, syntax-invalid 39, redundant 8
Fitness: max 1(1), min 0.167(2), ave 0.811
Test execution time: sum 6110 ms, max 118 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:37:17 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-06 04:37:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 17 seconds
Variants: generated 200, build-succeeded 96, build-failed 57, syntax-invalid 37, redundant 10
Fitness: max 1(1), min 0.167(4), ave 0.79
Test execution time: sum 5725 ms, max 84 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:37:31 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-06 04:37:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 32 seconds
Variants: generated 200, build-succeeded 94, build-failed 65, syntax-invalid 34, redundant 7
Fitness: max 0.833(83), min 0.167(7), ave 0.777
Test execution time: sum 5709 ms, max 133 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:37:46 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-06 04:38:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 47 seconds
Variants: generated 200, build-succeeded 95, build-failed 51, syntax-invalid 42, redundant 12
Fitness: max 0.833(83), min 0.167(7), ave 0.772
Test execution time: sum 5913 ms, max 126 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:38:01 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-06 04:38:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 2 seconds
Variants: generated 200, build-succeeded 104, build-failed 50, syntax-invalid 39, redundant 7
Fitness: max 1(2), min 0.167(12), ave 0.748
Test execution time: sum 6134 ms, max 80 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:38:16 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-06 04:38:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 17 seconds
Variants: generated 200, build-succeeded 89, build-failed 61, syntax-invalid 39, redundant 11
Fitness: max 1(3), min 0.167(8), ave 0.77
Test execution time: sum 5469 ms, max 183 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:38:31 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-06 04:38:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 32 seconds
Variants: generated 200, build-succeeded 92, build-failed 54, syntax-invalid 41, redundant 13
Fitness: max 0.833(73), min 0.167(5), ave 0.761
Test execution time: sum 6023 ms, max 479 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:38:46 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-06 04:39:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 47 seconds
Variants: generated 200, build-succeeded 90, build-failed 53, syntax-invalid 46, redundant 11
Fitness: max 1(1), min 0.167(10), ave 0.756
Test execution time: sum 5533 ms, max 188 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:39:02 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-06 04:39:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 4 seconds
Variants: generated 200, build-succeeded 102, build-failed 43, syntax-invalid 45, redundant 10
Fitness: max 1(2), min 0.167(11), ave 0.75
Test execution time: sum 6148 ms, max 131 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:39:18 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-06 04:39:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 19 seconds
Variants: generated 200, build-succeeded 95, build-failed 51, syntax-invalid 43, redundant 11
Fitness: max 1(1), min 0.167(9), ave 0.763
Test execution time: sum 5751 ms, max 87 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:39:33 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-06 04:39:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 34 seconds
Variants: generated 200, build-succeeded 95, build-failed 57, syntax-invalid 40, redundant 8
Fitness: max 1(1), min 0.167(6), ave 0.793
Test execution time: sum 5623 ms, max 125 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:39:48 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-06 04:46:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 51 seconds
Variants: generated 200, build-succeeded 95, build-failed 57, syntax-invalid 42, redundant 6
Fitness: max 0.833(76), min 0.167(14), ave 0.725
Test execution time: sum 366188 ms, max 360086 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:46:05 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-06 04:46:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 7 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 33, redundant 11
Fitness: max 0.833(88), min 0.167(5), ave 0.793
Test execution time: sum 5950 ms, max 102 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:46:21 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-06 04:46:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 23 seconds
Variants: generated 200, build-succeeded 96, build-failed 55, syntax-invalid 42, redundant 7
Fitness: max 0.833(84), min 0.167(7), ave 0.776
Test execution time: sum 6024 ms, max 138 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:46:37 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-06 04:46:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 38 seconds
Variants: generated 200, build-succeeded 93, build-failed 56, syntax-invalid 37, redundant 14
Fitness: max 0.833(80), min 0.167(10), ave 0.756
Test execution time: sum 5550 ms, max 90 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:46:52 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-06 04:47:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 55 seconds
Variants: generated 200, build-succeeded 96, build-failed 64, syntax-invalid 34, redundant 6
Fitness: max 1(3), min 0.167(3), ave 0.804
Test execution time: sum 5864 ms, max 125 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:47:09 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-06 04:47:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 12 seconds
Variants: generated 200, build-succeeded 111, build-failed 50, syntax-invalid 35, redundant 4
Fitness: max 1(1), min 0.167(4), ave 0.797
Test execution time: sum 6730 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:47:26 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-06 04:47:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 29 seconds
Variants: generated 200, build-succeeded 95, build-failed 54, syntax-invalid 45, redundant 6
Fitness: max 1(3), min 0.167(4), ave 0.795
Test execution time: sum 5852 ms, max 131 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:47:43 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-06 04:47:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 45 seconds
Variants: generated 200, build-succeeded 90, build-failed 45, syntax-invalid 50, redundant 15
Fitness: max 0.833(80), min 0.167(4), ave 0.793
Test execution time: sum 5491 ms, max 87 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:47:59 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-06 04:48:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 2 seconds
Variants: generated 200, build-succeeded 93, build-failed 62, syntax-invalid 38, redundant 7
Fitness: max 0.833(84), min 0.167(5), ave 0.789
Test execution time: sum 5760 ms, max 130 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:48:16 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-06 04:48:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 19 seconds
Variants: generated 200, build-succeeded 100, build-failed 52, syntax-invalid 40, redundant 8
Fitness: max 1(3), min 0.167(6), ave 0.795
Test execution time: sum 6120 ms, max 85 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:48:33 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-06 04:48:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 36 seconds
Variants: generated 200, build-succeeded 96, build-failed 43, syntax-invalid 54, redundant 7
Fitness: max 0.833(83), min 0.167(7), ave 0.773
Test execution time: sum 5851 ms, max 115 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:48:50 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-06 04:49:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 51 seconds
Variants: generated 200, build-succeeded 92, build-failed 50, syntax-invalid 46, redundant 12
Fitness: max 1(2), min 0.167(5), ave 0.79
Test execution time: sum 5561 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:49:06 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-06 04:49:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 8 seconds
Variants: generated 200, build-succeeded 87, build-failed 60, syntax-invalid 42, redundant 11
Fitness: max 0.833(78), min 0.167(3), ave 0.795
Test execution time: sum 5253 ms, max 108 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:49:22 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-06 04:49:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 25 seconds
Variants: generated 200, build-succeeded 100, build-failed 52, syntax-invalid 34, redundant 14
Fitness: max 0.833(91), min 0.167(5), ave 0.793
Test execution time: sum 6074 ms, max 80 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:49:39 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-06 04:49:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 42 seconds
Variants: generated 200, build-succeeded 85, build-failed 59, syntax-invalid 42, redundant 14
Fitness: max 0.833(79), min 0.167(2), ave 0.808
Test execution time: sum 5291 ms, max 141 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:49:56 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-06 04:50:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 58 seconds
Variants: generated 200, build-succeeded 103, build-failed 54, syntax-invalid 34, redundant 9
Fitness: max 1(1), min 0.167(5), ave 0.788
Test execution time: sum 6160 ms, max 73 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:50:13 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-06 04:50:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 16 seconds
Variants: generated 200, build-succeeded 102, build-failed 54, syntax-invalid 32, redundant 12
Fitness: max 1(1), min 0.167(3), ave 0.804
Test execution time: sum 6325 ms, max 163 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:50:30 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-06 04:50:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 32 seconds
Variants: generated 200, build-succeeded 90, build-failed 54, syntax-invalid 44, redundant 12
Fitness: max 1(2), min 0.167(2), ave 0.811
Test execution time: sum 5477 ms, max 82 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:50:46 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-06 04:51:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 50 seconds
Variants: generated 200, build-succeeded 100, build-failed 52, syntax-invalid 40, redundant 8
Fitness: max 0.833(96), min 0.167(4), ave 0.807
Test execution time: sum 6266 ms, max 211 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:51:04 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-06 04:51:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 7 seconds
Variants: generated 200, build-succeeded 90, build-failed 56, syntax-invalid 46, redundant 8
Fitness: max 1(1), min 0.167(4), ave 0.791
Test execution time: sum 5386 ms, max 74 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 04:51:21 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-06 04:51:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 24 seconds
Variants: generated 200, build-succeeded 95, build-failed 49, syntax-invalid 46, redundant 10
Fitness: max 1(1), min 0.167(10), ave 0.747
Test execution time: sum 5915 ms, max 127 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:51:39 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-06 04:51:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 41 seconds
Variants: generated 200, build-succeeded 89, build-failed 61, syntax-invalid 43, redundant 7
Fitness: max 0.833(78), min 0.167(2), ave 0.798
Test execution time: sum 5489 ms, max 94 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:51:56 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-06 04:52:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 59 seconds
Variants: generated 200, build-succeeded 80, build-failed 65, syntax-invalid 50, redundant 5
Fitness: max 0.833(74), min 0.167(4), ave 0.794
Test execution time: sum 4957 ms, max 133 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:52:13 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-06 04:52:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 16 seconds
Variants: generated 200, build-succeeded 92, build-failed 54, syntax-invalid 52, redundant 2
Fitness: max 1(1), min 0.167(2), ave 0.808
Test execution time: sum 5620 ms, max 87 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:52:30 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-06 04:52:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 33 seconds
Variants: generated 200, build-succeeded 85, build-failed 55, syntax-invalid 50, redundant 10
Fitness: max 0.833(78), min 0.167(3), ave 0.8
Test execution time: sum 5243 ms, max 117 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:52:48 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-06 04:53:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 50 seconds
Variants: generated 200, build-succeeded 82, build-failed 55, syntax-invalid 49, redundant 14
Fitness: max 0.833(75), min 0.167(4), ave 0.791
Test execution time: sum 4949 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:53:04 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-06 04:53:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 7 seconds
Variants: generated 200, build-succeeded 78, build-failed 57, syntax-invalid 57, redundant 8
Fitness: max 0.833(69), min 0.167(4), ave 0.782
Test execution time: sum 4862 ms, max 115 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:53:21 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-06 04:53:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 24 seconds
Variants: generated 200, build-succeeded 78, build-failed 51, syntax-invalid 62, redundant 9
Fitness: max 0.833(72), min 0.167(2), ave 0.799
Test execution time: sum 4782 ms, max 83 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:53:38 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-06 04:53:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 42 seconds
Variants: generated 200, build-succeeded 88, build-failed 49, syntax-invalid 54, redundant 9
Fitness: max 1(2), min 0.167(5), ave 0.79
Test execution time: sum 5509 ms, max 131 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:53:56 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-06 04:54:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 59 seconds
Variants: generated 200, build-succeeded 84, build-failed 55, syntax-invalid 52, redundant 9
Fitness: max 0.833(71), min 0.167(10), ave 0.746
Test execution time: sum 5100 ms, max 81 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:54:13 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-06 04:54:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 18 seconds
Variants: generated 200, build-succeeded 93, build-failed 57, syntax-invalid 45, redundant 5
Fitness: max 0.833(87), min 0.167(3), ave 0.806
Test execution time: sum 5784 ms, max 125 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:54:32 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-06 04:54:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 35 seconds
Variants: generated 200, build-succeeded 87, build-failed 55, syntax-invalid 53, redundant 5
Fitness: max 0.833(79), min 0(1), ave 0.795
Test execution time: sum 5433 ms, max 86 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:54:49 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-06 04:55:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 55 seconds
Variants: generated 200, build-succeeded 103, build-failed 55, syntax-invalid 33, redundant 9
Fitness: max 0.833(98), min 0.167(3), ave 0.811
Test execution time: sum 6413 ms, max 141 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:55:09 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-06 04:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 13 seconds
Variants: generated 200, build-succeeded 92, build-failed 54, syntax-invalid 49, redundant 5
Fitness: max 0.833(84), min 0.167(3), ave 0.803
Test execution time: sum 5610 ms, max 77 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:55:27 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-06 04:55:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 33 seconds
Variants: generated 200, build-succeeded 110, build-failed 50, syntax-invalid 33, redundant 7
Fitness: max 0.833(98), min 0.167(8), ave 0.776
Test execution time: sum 6796 ms, max 127 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:55:47 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-06 04:56:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 53 seconds
Variants: generated 200, build-succeeded 114, build-failed 40, syntax-invalid 37, redundant 9
Fitness: max 0.833(102), min 0.167(6), ave 0.787
Test execution time: sum 7263 ms, max 90 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:56:08 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-06 04:56:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 13 seconds
Variants: generated 200, build-succeeded 100, build-failed 53, syntax-invalid 38, redundant 9
Fitness: max 0.833(87), min 0.167(6), ave 0.777
Test execution time: sum 6105 ms, max 119 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:56:28 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-06 04:56:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 33 seconds
Variants: generated 200, build-succeeded 104, build-failed 51, syntax-invalid 35, redundant 10
Fitness: max 0.833(85), min 0.167(11), ave 0.748
Test execution time: sum 6492 ms, max 87 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:56:48 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-06 04:57:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 54 seconds
Variants: generated 200, build-succeeded 105, build-failed 54, syntax-invalid 27, redundant 14
Fitness: max 0.833(98), min 0.167(4), ave 0.803
Test execution time: sum 6589 ms, max 153 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:57:08 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-06 04:57:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 12 seconds
Variants: generated 200, build-succeeded 90, build-failed 53, syntax-invalid 48, redundant 9
Fitness: max 1(1), min 0.167(11), ave 0.75
Test execution time: sum 5627 ms, max 82 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 04:57:27 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-06 04:57:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 33 seconds
Variants: generated 200, build-succeeded 100, build-failed 56, syntax-invalid 32, redundant 12
Fitness: max 1(2), min 0.167(6), ave 0.788
Test execution time: sum 6234 ms, max 107 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:57:47 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-06 04:58:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 51 seconds
Variants: generated 200, build-succeeded 88, build-failed 63, syntax-invalid 40, redundant 9
Fitness: max 1(2), min 0.167(3), ave 0.805
Test execution time: sum 5368 ms, max 80 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:58:05 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-06 04:58:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 11 seconds
Variants: generated 200, build-succeeded 104, build-failed 51, syntax-invalid 38, redundant 7
Fitness: max 1(1), min 0.167(3), ave 0.79
Test execution time: sum 6410 ms, max 124 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:58:25 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-06 04:58:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 30 seconds
Variants: generated 200, build-succeeded 98, build-failed 68, syntax-invalid 26, redundant 8
Fitness: max 0.833(89), min 0.167(3), ave 0.796
Test execution time: sum 6202 ms, max 122 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:58:45 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-06 04:59:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 51 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 25, redundant 11
Fitness: max 1(1), min 0.167(5), ave 0.784
Test execution time: sum 6323 ms, max 92 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 04:59:05 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-06 04:59:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 11 seconds
Variants: generated 200, build-succeeded 103, build-failed 61, syntax-invalid 28, redundant 8
Fitness: max 0.833(94), min 0.167(4), ave 0.799
Test execution time: sum 6383 ms, max 197 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:59:25 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-06 04:59:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 30 seconds
Variants: generated 200, build-succeeded 98, build-failed 67, syntax-invalid 28, redundant 7
Fitness: max 1(1), min 0.167(7), ave 0.779
Test execution time: sum 6018 ms, max 82 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 04:59:44 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-06 05:00:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 50 seconds
Variants: generated 200, build-succeeded 92, build-failed 63, syntax-invalid 38, redundant 7
Fitness: max 0.833(78), min 0.167(9), ave 0.754
Test execution time: sum 5674 ms, max 180 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 05:00:04 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-06 05:00:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 8 seconds
Variants: generated 200, build-succeeded 92, build-failed 54, syntax-invalid 44, redundant 10
Fitness: max 0.833(83), min 0.167(5), ave 0.788
Test execution time: sum 5643 ms, max 89 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:00:22 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-06 05:00:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 27 seconds
Variants: generated 200, build-succeeded 85, build-failed 63, syntax-invalid 43, redundant 9
Fitness: max 1(1), min 0.167(4), ave 0.798
Test execution time: sum 5314 ms, max 125 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:00:41 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-06 05:01:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 47 seconds
Variants: generated 200, build-succeeded 107, build-failed 49, syntax-invalid 32, redundant 12
Fitness: max 0.833(97), min 0.167(5), ave 0.793
Test execution time: sum 6674 ms, max 82 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:01:02 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-06 05:01:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 7 seconds
Variants: generated 200, build-succeeded 85, build-failed 57, syntax-invalid 45, redundant 13
Fitness: max 1(1), min 0.167(3), ave 0.8
Test execution time: sum 5241 ms, max 125 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:01:21 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-06 05:16:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 25 seconds
Variants: generated 200, build-succeeded 84, build-failed 63, syntax-invalid 44, redundant 9
Fitness: max 0.833(73), min 0.167(7), ave 0.766
Test execution time: sum 905209 ms, max 900108 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:16:39 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-06 05:16:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 45 seconds
Variants: generated 200, build-succeeded 97, build-failed 44, syntax-invalid 44, redundant 15
Fitness: max 0.833(89), min 0.167(5), ave 0.794
Test execution time: sum 6047 ms, max 152 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:16:59 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-06 05:17:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 4 seconds
Variants: generated 200, build-succeeded 90, build-failed 60, syntax-invalid 44, redundant 6
Fitness: max 0.833(83), min 0.167(4), ave 0.798
Test execution time: sum 5537 ms, max 83 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:17:18 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-06 05:17:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 24 seconds
Variants: generated 200, build-succeeded 98, build-failed 45, syntax-invalid 41, redundant 16
Fitness: max 0.833(86), min 0.167(8), ave 0.77
Test execution time: sum 6007 ms, max 179 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 05:17:38 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-06 05:18:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 46 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 27, redundant 9
Fitness: max 0.833(98), min 0.167(7), ave 0.776
Test execution time: sum 7007 ms, max 78 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:18:00 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-06 05:33:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 8 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 31, redundant 9
Fitness: max 0.833(92), min 0.167(7), ave 0.782
Test execution time: sum 906506 ms, max 900112 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:33:22 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-06 05:33:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 28 seconds
Variants: generated 200, build-succeeded 88, build-failed 67, syntax-invalid 39, redundant 6
Fitness: max 1(1), min 0.167(3), ave 0.803
Test execution time: sum 5528 ms, max 81 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:33:42 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-06 05:34:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 49 seconds
Variants: generated 200, build-succeeded 101, build-failed 66, syntax-invalid 28, redundant 5
Fitness: max 1(1), min 0.167(4), ave 0.802
Test execution time: sum 6267 ms, max 143 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:34:03 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-06 05:34:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 10 seconds
Variants: generated 200, build-succeeded 97, build-failed 64, syntax-invalid 32, redundant 7
Fitness: max 0.833(90), min 0.167(3), ave 0.804
Test execution time: sum 6251 ms, max 168 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 05:34:25 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-06 05:34:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 32 seconds
Variants: generated 200, build-succeeded 104, build-failed 62, syntax-invalid 26, redundant 8
Fitness: max 0.833(95), min 0.167(3), ave 0.804
Test execution time: sum 6227 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 05:34:46 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-06 05:35:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 53 seconds
Variants: generated 200, build-succeeded 96, build-failed 56, syntax-invalid 42, redundant 6
Fitness: max 0.833(91), min 0.167(1), ave 0.814
Test execution time: sum 6001 ms, max 122 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:35:07 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-06 05:35:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 14 seconds
Variants: generated 200, build-succeeded 100, build-failed 53, syntax-invalid 37, redundant 10
Fitness: max 0.833(86), min 0.167(6), ave 0.775
Test execution time: sum 6179 ms, max 84 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:35:28 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-06 05:35:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 37 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 31, redundant 2
Fitness: max 0.833(97), min 0.167(3), ave 0.802
Test execution time: sum 6583 ms, max 112 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:35:51 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-06 05:36:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 0 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 25, redundant 8
Fitness: max 0.833(103), min 0.167(1), ave 0.814
Test execution time: sum 6933 ms, max 129 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:36:15 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-06 05:36:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 22 seconds
Variants: generated 200, build-succeeded 105, build-failed 50, syntax-invalid 35, redundant 10
Fitness: max 0.833(97), min 0.167(6), ave 0.792
Test execution time: sum 6514 ms, max 94 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:36:37 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-06 05:36:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 45 seconds
Variants: generated 200, build-succeeded 97, build-failed 59, syntax-invalid 33, redundant 11
Fitness: max 0.833(92), min 0.167(2), ave 0.814
Test execution time: sum 6088 ms, max 128 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:36:59 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-06 05:37:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 6 seconds
Variants: generated 200, build-succeeded 92, build-failed 56, syntax-invalid 41, redundant 11
Fitness: max 0.833(86), min 0.167(3), ave 0.803
Test execution time: sum 5668 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 05:37:20 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-06 05:37:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 28 seconds
Variants: generated 200, build-succeeded 85, build-failed 60, syntax-invalid 47, redundant 8
Fitness: max 0.833(79), min 0.167(3), ave 0.804
Test execution time: sum 5222 ms, max 120 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:37:42 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-06 05:38:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 48 seconds
Variants: generated 200, build-succeeded 87, build-failed 60, syntax-invalid 45, redundant 8
Fitness: max 0.833(80), min 0.167(4), ave 0.797
Test execution time: sum 5405 ms, max 85 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:38:03 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-06 05:38:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 13 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 26, redundant 7
Fitness: max 0.833(101), min 0.167(6), ave 0.79
Test execution time: sum 6986 ms, max 130 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:38:27 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-06 05:38:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 36 seconds
Variants: generated 200, build-succeeded 100, build-failed 58, syntax-invalid 32, redundant 10
Fitness: max 0.833(94), min 0.167(2), ave 0.812
Test execution time: sum 6489 ms, max 182 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:38:50 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-06 05:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 59 seconds
Variants: generated 200, build-succeeded 109, build-failed 53, syntax-invalid 33, redundant 5
Fitness: max 0.833(106), min 0.667(3), ave 0.829
Test execution time: sum 6778 ms, max 99 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:39:13 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-06 05:39:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 22 seconds
Variants: generated 200, build-succeeded 100, build-failed 57, syntax-invalid 35, redundant 8
Fitness: max 0.833(92), min 0.167(4), ave 0.798
Test execution time: sum 6231 ms, max 123 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:39:36 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-06 05:40:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 46 seconds
Variants: generated 200, build-succeeded 106, build-failed 57, syntax-invalid 29, redundant 8
Fitness: max 0.833(99), min 0.167(4), ave 0.803
Test execution time: sum 6780 ms, max 123 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 05:40:00 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-06 05:40:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 10 seconds
Variants: generated 200, build-succeeded 110, build-failed 51, syntax-invalid 35, redundant 4
Fitness: max 0.833(100), min 0.167(5), ave 0.794
Test execution time: sum 6815 ms, max 125 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:40:24 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-06 05:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 30 seconds
Variants: generated 200, build-succeeded 81, build-failed 51, syntax-invalid 57, redundant 11
Fitness: max 0.833(67), min 0.167(5), ave 0.772
Test execution time: sum 5090 ms, max 79 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:40:45 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-06 05:41:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 53 seconds
Variants: generated 200, build-succeeded 89, build-failed 58, syntax-invalid 47, redundant 6
Fitness: max 0.833(83), min 0.167(1), ave 0.816
Test execution time: sum 5595 ms, max 122 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:41:07 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-06 05:41:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 16 seconds
Variants: generated 200, build-succeeded 97, build-failed 60, syntax-invalid 35, redundant 8
Fitness: max 0.833(91), min 0.167(3), ave 0.808
Test execution time: sum 6234 ms, max 80 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:41:30 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-06 05:41:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 40 seconds
Variants: generated 200, build-succeeded 108, build-failed 40, syntax-invalid 40, redundant 12
Fitness: max 1(1), min 0.167(2), ave 0.81
Test execution time: sum 6811 ms, max 129 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:41:55 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-06 05:42:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 4 seconds
Variants: generated 200, build-succeeded 106, build-failed 50, syntax-invalid 36, redundant 8
Fitness: max 0.833(93), min 0.167(4), ave 0.794
Test execution time: sum 6829 ms, max 98 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:42:18 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-06 05:42:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 27 seconds
Variants: generated 200, build-succeeded 90, build-failed 63, syntax-invalid 40, redundant 7
Fitness: max 1(1), min 0.167(7), ave 0.776
Test execution time: sum 5517 ms, max 133 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:42:42 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-06 05:43:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 51 seconds
Variants: generated 200, build-succeeded 99, build-failed 61, syntax-invalid 35, redundant 5
Fitness: max 0.833(88), min 0.167(7), ave 0.776
Test execution time: sum 6263 ms, max 125 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:43:06 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-06 05:43:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 16 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 30, redundant 6
Fitness: max 1(1), min 0.167(3), ave 0.805
Test execution time: sum 6884 ms, max 86 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:43:30 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-06 05:43:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 40 seconds
Variants: generated 200, build-succeeded 96, build-failed 63, syntax-invalid 25, redundant 16
Fitness: max 1(2), min 0.167(2), ave 0.811
Test execution time: sum 6003 ms, max 111 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:43:55 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-06 05:44:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 6 seconds
Variants: generated 200, build-succeeded 108, build-failed 68, syntax-invalid 15, redundant 9
Fitness: max 0.833(101), min 0.167(4), ave 0.804
Test execution time: sum 6995 ms, max 164 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:44:20 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-06 05:44:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 32 seconds
Variants: generated 200, build-succeeded 116, build-failed 55, syntax-invalid 20, redundant 9
Fitness: max 1(1), min 0.167(6), ave 0.792
Test execution time: sum 7250 ms, max 97 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 05:44:46 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-06 05:45:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 57 seconds
Variants: generated 200, build-succeeded 110, build-failed 59, syntax-invalid 19, redundant 12
Fitness: max 1(1), min 0.167(1), ave 0.823
Test execution time: sum 7075 ms, max 174 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:45:12 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-06 05:45:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 23 seconds
Variants: generated 200, build-succeeded 112, build-failed 60, syntax-invalid 22, redundant 6
Fitness: max 1(1), min 0.167(3), ave 0.801
Test execution time: sum 7207 ms, max 129 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:45:37 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-06 05:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 48 seconds
Variants: generated 200, build-succeeded 108, build-failed 52, syntax-invalid 21, redundant 19
Fitness: max 0.833(101), min 0.667(7), ave 0.823
Test execution time: sum 6798 ms, max 86 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 05:46:02 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-06 05:46:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 14 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 31, redundant 8
Fitness: max 0.833(94), min 0.167(4), ave 0.801
Test execution time: sum 6402 ms, max 115 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:46:28 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-06 05:46:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 37 seconds
Variants: generated 200, build-succeeded 96, build-failed 57, syntax-invalid 24, redundant 23
Fitness: max 1(1), min 0.167(1), ave 0.818
Test execution time: sum 6123 ms, max 86 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:46:52 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-06 05:47:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 2 seconds
Variants: generated 200, build-succeeded 99, build-failed 62, syntax-invalid 27, redundant 12
Fitness: max 0.833(92), min 0.167(3), ave 0.806
Test execution time: sum 6361 ms, max 187 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:47:17 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-06 05:47:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 28 seconds
Variants: generated 200, build-succeeded 106, build-failed 50, syntax-invalid 25, redundant 19
Fitness: max 1(2), min 0.167(4), ave 0.799
Test execution time: sum 7024 ms, max 137 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 05:47:42 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-06 05:48:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 52 seconds
Variants: generated 200, build-succeeded 100, build-failed 55, syntax-invalid 27, redundant 18
Fitness: max 1(1), min 0.167(1), ave 0.815
Test execution time: sum 6210 ms, max 88 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 05:48:06 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-06 05:48:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 18 seconds
Variants: generated 200, build-succeeded 111, build-failed 53, syntax-invalid 24, redundant 12
Fitness: max 0.833(101), min 0.167(4), ave 0.797
Test execution time: sum 7096 ms, max 131 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 05:48:33 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-06 06:03:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 45 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 17, redundant 13
Fitness: max 0.833(102), min 0.167(7), ave 0.782
Test execution time: sum 907251 ms, max 900111 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:03:59 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-06 06:04:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 11 seconds
Variants: generated 200, build-succeeded 107, build-failed 63, syntax-invalid 17, redundant 13
Fitness: max 0.833(97), min 0.167(6), ave 0.79
Test execution time: sum 6717 ms, max 109 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:04:26 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-06 06:04:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 38 seconds
Variants: generated 200, build-succeeded 117, build-failed 51, syntax-invalid 20, redundant 12
Fitness: max 0.833(111), min 0.167(2), ave 0.815
Test execution time: sum 7497 ms, max 128 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:04:53 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-06 06:05:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 6 seconds
Variants: generated 200, build-succeeded 107, build-failed 59, syntax-invalid 21, redundant 13
Fitness: max 0.833(99), min 0.167(2), ave 0.812
Test execution time: sum 7009 ms, max 124 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:05:20 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-06 06:05:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 33 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 13, redundant 13
Fitness: max 1(1), min 0.167(5), ave 0.797
Test execution time: sum 7008 ms, max 86 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:05:47 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-06 06:06:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 1 seconds
Variants: generated 200, build-succeeded 107, build-failed 65, syntax-invalid 19, redundant 9
Fitness: max 0.833(101), min 0.167(2), ave 0.813
Test execution time: sum 6874 ms, max 188 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:06:15 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-06 06:06:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 29 seconds
Variants: generated 200, build-succeeded 114, build-failed 54, syntax-invalid 21, redundant 11
Fitness: max 0.833(105), min 0.167(5), ave 0.797
Test execution time: sum 7414 ms, max 125 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:06:43 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-06 06:07:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 54 seconds
Variants: generated 200, build-succeeded 98, build-failed 58, syntax-invalid 24, redundant 20
Fitness: max 1(2), min 0.167(3), ave 0.81
Test execution time: sum 6071 ms, max 84 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:07:09 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-06 06:07:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 22 seconds
Variants: generated 200, build-succeeded 108, build-failed 52, syntax-invalid 29, redundant 11
Fitness: max 0.833(101), min 0.667(7), ave 0.823
Test execution time: sum 6873 ms, max 139 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:07:36 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-06 06:08:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 48 seconds
Variants: generated 200, build-succeeded 93, build-failed 60, syntax-invalid 24, redundant 23
Fitness: max 0.833(86), min 0.167(3), ave 0.805
Test execution time: sum 6028 ms, max 89 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:08:02 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-06 06:08:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 15 seconds
Variants: generated 200, build-succeeded 108, build-failed 51, syntax-invalid 25, redundant 16
Fitness: max 0.833(99), min 0.167(6), ave 0.792
Test execution time: sum 6833 ms, max 110 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:08:29 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-06 06:08:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 43 seconds
Variants: generated 200, build-succeeded 104, build-failed 67, syntax-invalid 21, redundant 8
Fitness: max 1(2), min 0.167(2), ave 0.809
Test execution time: sum 6747 ms, max 131 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:08:58 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-06 06:09:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 11 seconds
Variants: generated 200, build-succeeded 114, build-failed 50, syntax-invalid 20, redundant 16
Fitness: max 0.833(105), min 0.167(4), ave 0.8
Test execution time: sum 7207 ms, max 85 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:09:26 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-06 06:09:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 40 seconds
Variants: generated 200, build-succeeded 116, build-failed 59, syntax-invalid 21, redundant 4
Fitness: max 0.833(107), min 0.167(6), ave 0.793
Test execution time: sum 7484 ms, max 119 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:09:55 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-06 06:10:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 10 seconds
Variants: generated 200, build-succeeded 115, build-failed 47, syntax-invalid 24, redundant 14
Fitness: max 1(1), min 0.167(7), ave 0.786
Test execution time: sum 7604 ms, max 113 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:10:24 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-06 06:10:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 39 seconds
Variants: generated 200, build-succeeded 122, build-failed 46, syntax-invalid 20, redundant 12
Fitness: max 1(1), min 0.167(7), ave 0.79
Test execution time: sum 7742 ms, max 83 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:10:53 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-06 06:11:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 8 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 25, redundant 8
Fitness: max 0.833(104), min 0.167(3), ave 0.813
Test execution time: sum 6912 ms, max 124 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:11:22 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-06 06:11:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 38 seconds
Variants: generated 200, build-succeeded 115, build-failed 60, syntax-invalid 15, redundant 10
Fitness: max 1(1), min 0.167(4), ave 0.801
Test execution time: sum 7592 ms, max 119 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 06:11:53 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-06 06:12:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 8 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 26, redundant 11
Fitness: max 1(2), min 0.167(7), ave 0.778
Test execution time: sum 6884 ms, max 85 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:12:22 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-06 06:12:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 37 seconds
Variants: generated 200, build-succeeded 102, build-failed 58, syntax-invalid 26, redundant 14
Fitness: max 0.833(87), min 0.167(5), ave 0.784
Test execution time: sum 6551 ms, max 124 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:12:51 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-06 06:13:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 7 seconds
Variants: generated 200, build-succeeded 112, build-failed 51, syntax-invalid 28, redundant 9
Fitness: max 0.833(104), min 0.167(3), ave 0.805
Test execution time: sum 7492 ms, max 122 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:13:21 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-06 06:13:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 36 seconds
Variants: generated 200, build-succeeded 101, build-failed 61, syntax-invalid 29, redundant 9
Fitness: max 0.833(88), min 0(1), ave 0.787
Test execution time: sum 6520 ms, max 82 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:13:50 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-06 06:14:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 6 seconds
Variants: generated 200, build-succeeded 108, build-failed 51, syntax-invalid 24, redundant 17
Fitness: max 0.833(97), min 0.167(5), ave 0.785
Test execution time: sum 7100 ms, max 131 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 06:14:20 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-06 06:14:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 37 seconds
Variants: generated 200, build-succeeded 113, build-failed 54, syntax-invalid 22, redundant 11
Fitness: max 0.833(103), min 0.167(3), ave 0.801
Test execution time: sum 7529 ms, max 126 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:14:51 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-06 06:15:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 7 seconds
Variants: generated 200, build-succeeded 118, build-failed 51, syntax-invalid 19, redundant 12
Fitness: max 0.833(105), min 0.167(4), ave 0.797
Test execution time: sum 7523 ms, max 90 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:15:21 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-06 06:15:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 38 seconds
Variants: generated 200, build-succeeded 104, build-failed 55, syntax-invalid 23, redundant 18
Fitness: max 0.833(92), min 0.167(5), ave 0.788
Test execution time: sum 6799 ms, max 120 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:15:53 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-06 06:16:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 10 seconds
Variants: generated 200, build-succeeded 111, build-failed 55, syntax-invalid 17, redundant 17
Fitness: max 0.833(102), min 0.167(3), ave 0.805
Test execution time: sum 7318 ms, max 114 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:16:24 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-06 06:16:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 40 seconds
Variants: generated 200, build-succeeded 114, build-failed 52, syntax-invalid 21, redundant 13
Fitness: max 0.833(104), min 0.167(6), ave 0.791
Test execution time: sum 7435 ms, max 84 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:16:55 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-06 06:17:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 12 seconds
Variants: generated 200, build-succeeded 112, build-failed 58, syntax-invalid 21, redundant 9
Fitness: max 1(1), min 0.167(6), ave 0.792
Test execution time: sum 7336 ms, max 123 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:17:26 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-06 06:17:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 43 seconds
Variants: generated 200, build-succeeded 100, build-failed 61, syntax-invalid 21, redundant 18
Fitness: max 1(1), min 0.167(4), ave 0.802
Test execution time: sum 6904 ms, max 196 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 06:17:57 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-06 06:18:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 13 seconds
Variants: generated 200, build-succeeded 113, build-failed 56, syntax-invalid 17, redundant 14
Fitness: max 0.833(103), min 0.167(6), ave 0.792
Test execution time: sum 7422 ms, max 109 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:18:28 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-06 06:18:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 44 seconds
Variants: generated 200, build-succeeded 99, build-failed 61, syntax-invalid 18, redundant 22
Fitness: max 0.833(87), min 0.167(5), ave 0.788
Test execution time: sum 6430 ms, max 138 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:18:58 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-06 06:19:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 14 seconds
Variants: generated 200, build-succeeded 93, build-failed 61, syntax-invalid 26, redundant 20
Fitness: max 0.833(85), min 0.167(4), ave 0.792
Test execution time: sum 6317 ms, max 124 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:19:29 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-06 06:19:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 44 seconds
Variants: generated 200, build-succeeded 96, build-failed 62, syntax-invalid 28, redundant 14
Fitness: max 1(1), min 0.167(6), ave 0.792
Test execution time: sum 6124 ms, max 76 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:19:58 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-06 06:20:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 49 minutes 16 seconds
Variants: generated 200, build-succeeded 106, build-failed 52, syntax-invalid 21, redundant 21
Fitness: max 1(2), min 0.167(5), ave 0.794
Test execution time: sum 6927 ms, max 136 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:20:30 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-06 06:21:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 49 minutes 46 seconds
Variants: generated 200, build-succeeded 99, build-failed 49, syntax-invalid 35, redundant 17
Fitness: max 0.833(92), min 0.5(3), ave 0.816
Test execution time: sum 6669 ms, max 83 ms, min 62 ms
----------------------------------------------------------------

2023-08-06 06:21:00 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-06 06:21:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 17 seconds
Variants: generated 200, build-succeeded 99, build-failed 56, syntax-invalid 25, redundant 20
Fitness: max 0.833(88), min 0.167(3), ave 0.8
Test execution time: sum 6454 ms, max 108 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:21:32 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-06 06:22:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 49 seconds
Variants: generated 200, build-succeeded 101, build-failed 60, syntax-invalid 25, redundant 14
Fitness: max 1(2), min 0.167(4), ave 0.802
Test execution time: sum 6794 ms, max 134 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 06:22:04 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-06 06:22:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 20 seconds
Variants: generated 200, build-succeeded 98, build-failed 62, syntax-invalid 26, redundant 14
Fitness: max 0.833(88), min 0.167(4), ave 0.793
Test execution time: sum 6403 ms, max 92 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:22:34 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-06 06:23:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 minutes 51 seconds
Variants: generated 200, build-succeeded 99, build-failed 48, syntax-invalid 31, redundant 22
Fitness: max 0.833(87), min 0.167(9), ave 0.766
Test execution time: sum 6592 ms, max 118 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:23:05 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-06 06:23:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 2 seconds
Variants: generated 75, build-succeeded 21, build-failed 38, syntax-invalid 8, redundant 8
Fitness: max 1(1), min 0.167(4), ave 0.683
Test execution time: sum 1360 ms, max 84 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 06:23:17 [main] [INFO]  KGenProgMain - GA stopped
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v251)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v251)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v251)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v251)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v251)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v276)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v276)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v276)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v276)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v465)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v465)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v465)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v465)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v465)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v606)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v606)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v606)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v606)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v606)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v867)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v867)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v867)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v867)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v867)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v1861)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v1861)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v1861)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v1861)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				checkResultComputed();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +244,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2096)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2096)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2096)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2096)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2096)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,10 +122,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return solve(f, initial, max);
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -182,7 +179,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2279)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2279)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2279)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2279)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2279)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2279)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2465)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2465)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2465)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2465)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2465)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2621)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2648)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2648)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2648)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2648)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v2648)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +225,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3488)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -72,11 +72,13 @@
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+		int i = 0;
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3488)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3488)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3488)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3488)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3488)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3670)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3670)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3670)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3670)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3670)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v3670)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.iterationCount = iterationCount;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4209)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4209)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4209)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4209)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4209)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4209)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4220)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4220)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4220)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4220)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4220)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.iterationCount = iterationCount;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +225,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4249)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -246,10 +249,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4249)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4249)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4249)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4249)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double m;
+			double delta;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -166,7 +166,8 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
+        double fa;
+		verifyInterval(min, max);
 
         double ret = Double.NaN;
 
@@ -181,7 +182,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4624)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +165,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4624)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4624)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4624)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4624)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -166,7 +164,8 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
+        double fa;
+		verifyInterval(min, max);
 
         double ret = Double.NaN;
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4845)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +164,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4845)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4845)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4845)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4845)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +243,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,10 +60,8 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4886)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                {
+					return result;
+				}
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4897)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4897)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4897)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4897)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,10 +60,8 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4897)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v4897)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                {
+					return result;
+				}
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5070)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -91,7 +92,8 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +165,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5070)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5070)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5070)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5070)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5070)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5207)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5207)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5207)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5207)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5207)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5207)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5498)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5498)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5498)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5498)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,9 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5498)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5498)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +226,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5657)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -246,10 +248,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5657)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5657)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5657)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5657)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v5657)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +226,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6205)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +166,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6205)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6205)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6205)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,10 +60,8 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6205)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6205)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,11 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:20 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6444)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,12 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6444)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6444)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6444)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6444)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6445)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -246,10 +247,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6445)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6445)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6445)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6489)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +165,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -244,12 +245,7 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6489)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6489)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6489)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6489)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6489)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +165,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -180,6 +181,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v6825)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					return result;
+				}
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7054)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,11 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -163,7 +166,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -180,6 +182,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7054)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7054)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7054)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7054)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +243,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7061)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -91,7 +91,9 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +141,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -246,10 +247,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7061)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7061)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7061)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,9 +60,8 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7061)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7061)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7258)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7258)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7258)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7258)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,12 +60,10 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7258)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7258)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -232,14 +230,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7464)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,11 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -163,7 +166,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7464)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7464)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7464)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7464)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v7464)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +226,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8425)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +165,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -180,6 +181,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8425)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8425)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8425)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8425)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8425)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,18 +226,76 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8428)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +166,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8428)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8428)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8428)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8428)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            checkResultComputed();
             return result;
         }
 
@@ -228,6 +227,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -240,13 +240,8 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
-            }
+            if (Math.abs(y1) <= functionValueAccuracy)
+				resultComputed = true;
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,10 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -246,10 +248,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				double p1;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -232,14 +231,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,8 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.defaultRelativeAccuracy = 1.0e-14;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -232,20 +231,76 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8816)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,10 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +182,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,12 +247,7 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8816)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8816)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8816)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8816)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8816)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,10 +122,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return max;
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8818)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -91,7 +91,8 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +164,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8818)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8818)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8818)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8818)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8818)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,18 +225,77 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8861)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,10 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +182,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,7 +247,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8861)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8861)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8861)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8861)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v8861)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -228,18 +227,76 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9450)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
     }
 
     /**
@@ -163,7 +164,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9450)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9450)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9450)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9450)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -232,14 +231,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9468)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,10 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +165,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -246,10 +247,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9468)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9468)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9468)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9468)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -232,14 +230,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9474)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,11 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +184,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9474)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9474)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9474)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9474)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9474)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -232,19 +230,72 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9824)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -91,7 +91,9 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +182,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9824)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9824)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9824)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9824)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -232,19 +229,72 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9845)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +166,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9845)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9845)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9845)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9845)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v9845)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -167,6 +166,7 @@
 
         clearResult();
         verifyInterval(min, max);
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
 
         double ret = Double.NaN;
 
@@ -232,14 +232,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10638)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -180,6 +185,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10638)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10638)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10638)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10638)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10832)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10832)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10832)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10832)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v10832)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,11 +238,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11055)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -244,7 +250,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11055)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11055)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11055)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11055)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11098)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -180,6 +185,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11098)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11098)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11098)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11098)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,12 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -138,7 +143,8 @@
      * @param iterationCount the iteration count to set
      */
     protected final void setResult(final double newResult, final int iterationCount) {
-        this.result         = newResult;
+        this.f = f;
+		this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
@@ -244,7 +250,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11469)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,18 +224,75 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11654)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -138,7 +139,8 @@
      * @param iterationCount the iteration count to set
      */
     protected final void setResult(final double newResult, final int iterationCount) {
-        this.result         = newResult;
+        int i = 0;
+		this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
@@ -246,10 +248,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11654)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11654)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11654)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v11654)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +225,12 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		{
+			x2 = x0;
+			y2 = y0;
+			delta = x1 - x0;
+			oldDelta = delta;
+		}
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -245,7 +248,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v12235)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,11 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -180,6 +183,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v12235)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v12235)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v12235)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v12235)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v12235)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            int i = 0;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +182,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,12 +247,7 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        int i = 0;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -167,6 +165,7 @@
 
         clearResult();
         verifyInterval(min, max);
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
 
         double ret = Double.NaN;
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13293)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,10 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -244,7 +246,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13293)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13293)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13293)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13293)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v13293)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -167,6 +165,8 @@
 
         clearResult();
         verifyInterval(min, max);
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
 
         double ret = Double.NaN;
 
@@ -177,7 +177,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (Math.abs(max - min) <= absoluteAccuracy) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
@@ -232,14 +232,70 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15435)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -246,10 +251,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15435)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15435)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15435)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15435)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15435)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.iterationCount = iterationCount;
             return result;
         }
 
@@ -182,6 +181,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -232,14 +232,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15615)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -246,10 +251,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15615)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15615)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15615)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.resultComputed = true;
+                double x2 = max;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -232,14 +232,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15688)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +186,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15688)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15688)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15688)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15688)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15688)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -232,14 +229,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,12 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -180,6 +184,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -246,10 +251,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15875)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,12 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -246,10 +250,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15875)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15875)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15875)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v15875)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1 = max;
             return result;
         }
 
@@ -181,7 +180,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -232,14 +231,71 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16091)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,13 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +186,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16091)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16091)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16091)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16091)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,13 +180,15 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
-        } else if (sign < 0){
+        } else if (!resultComputed){
             // solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
@@ -245,7 +245,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16448)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,15 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +171,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -180,7 +187,8 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
-        final double f2 = function.value(upper);
+        double x1;
+		final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16448)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16448)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16448)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16448)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16886)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,14 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16886)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16886)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16886)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v16886)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -232,20 +230,76 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -302,6 +356,7 @@
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
+				int iterationCount = 0;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17454)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,16 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		double fb;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -246,10 +255,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17454)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17454)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17454)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17454)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -232,27 +231,82 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
-                return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17815)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,12 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -91,7 +95,11 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +188,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -246,10 +255,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17815)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17815)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17815)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:21 [main] [INFO]  PatchLogExporter - patch (v17815)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19201)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,14 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -180,6 +186,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,7 +251,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19201)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19201)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19201)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19201)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -232,27 +230,84 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+				if (Math.abs(y2) < Math.abs(y1)) {
+					x0 = x1;
+					x1 = x2;
+					x2 = x0;
+					y0 = y1;
+					y1 = y2;
+					y2 = y0;
+				}
+				if (Math.abs(y1) <= functionValueAccuracy) {
+					setResult(x1, i);
+					return result;
+				}
+				double dx = x2 - x1;
+				double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x0 = x1;
+				y0 = y1;
+				if (Math.abs(delta) > tolerance) {
+					x1 = x1 + delta;
+				} else if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+				y1 = f.value(x1);
+				if ((y1 > 0) == (y2 > 0)) {
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+				i++;
+			}
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19468)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,9 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
     }
 
     /**
@@ -91,7 +92,12 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +186,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19468)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19468)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19468)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v19468)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -302,6 +299,7 @@
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
+				int iterationCount = 0;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v23605)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,16 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -128,7 +136,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v23605)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v23605)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v23605)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v23605)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v23605)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,18 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -128,7 +139,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -163,7 +173,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -180,6 +189,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,7 +254,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24431)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,19 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -180,6 +191,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,7 +256,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24431)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24431)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24431)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,7 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24431)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24431)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +243,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24619)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,18 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -128,7 +138,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -244,7 +253,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24619)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24619)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24619)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,7 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24619)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24619)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.functionValueAccuracy = defaultFunctionValueAccuracy;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -288,7 +286,6 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24633)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,18 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -128,7 +138,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -180,6 +189,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,7 +254,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24633)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24633)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24633)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,7 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24633)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v24633)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +243,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25051)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,19 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -180,6 +191,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
@@ -244,7 +256,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25051)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25051)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25051)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25051)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +243,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25251)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,20 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +152,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -244,7 +256,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25251)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25251)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25251)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25251)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +241,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25444)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,17 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -162,7 +171,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -180,6 +188,9 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25444)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25444)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25444)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v25444)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +243,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26030)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,19 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +192,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26030)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26030)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26030)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26030)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        double delta;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +177,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -238,6 +233,7 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				y2 = y0;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
@@ -245,7 +241,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,20 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,7 +175,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -180,6 +192,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +243,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26427)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,19 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +192,8 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26427)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26427)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,7 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26427)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26651)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,21 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +153,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +167,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26651)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26651)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26651)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26651)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v26651)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v27893)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,19 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -128,7 +140,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +150,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -180,6 +190,7 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v27893)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v27893)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v27893)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v27893)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -234,10 +232,12 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                setResult(x1, i);
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				y2 = y0;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
@@ -245,7 +245,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28433)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,25 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28433)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28433)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28433)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28433)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -238,6 +236,7 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				y2 = y0;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28472)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,23 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +196,8 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28472)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28472)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28472)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28472)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v28472)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29228)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,22 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -128,7 +143,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +153,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +175,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29228)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29228)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29272)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,21 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +153,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -180,6 +193,9 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29272)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29272)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29272)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29272)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                iterationCount += this.iterationCount;
+				setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29839)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -91,7 +91,20 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,6 +193,9 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29839)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29839)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29839)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29839)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v29839)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,8 +122,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +244,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30084)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,24 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -180,6 +196,8 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30084)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30084)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30084)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,7 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30084)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30084)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,8 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            double x;
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30434)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,24 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -139,7 +155,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30434)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30434)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30434)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30434)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30614)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,23 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +155,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -180,6 +195,9 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30614)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30614)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30614)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30614)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int numIterations = 0;
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +243,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30657)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,25 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -128,7 +145,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +155,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30657)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30657)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30657)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v30657)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32680)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,16 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -91,7 +99,19 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32680)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32680)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32680)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,12 +60,11 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32680)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32680)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32851)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,28 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -128,7 +148,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32851)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32851)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32851)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v32851)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33676)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,24 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -139,7 +155,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33676)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33676)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33676)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33676)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,8 +122,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,11 +240,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33810)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,23 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33810)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33810)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33810)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33810)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33810)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,11 +239,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
+                clearResult();
                 setResult(x1, i);
-                return result;
+				setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -281,6 +278,7 @@
                     p1 = -p1;
                 } else {
                     p = -p;
+					double fmin;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33834)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,26 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +158,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +172,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33834)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33834)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33834)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v33834)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -281,6 +278,7 @@
                     p1 = -p1;
                 } else {
                     p = -p;
+					double fmin;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34449)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,25 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +157,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +171,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34449)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34449)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34449)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34449)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +243,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -281,6 +282,7 @@
                     p1 = -p1;
                 } else {
                     p = -p;
+					double fmin;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34470)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,26 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34470)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34470)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34470)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v34470)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +242,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v35075)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,23 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /**
@@ -139,7 +154,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -163,7 +177,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v35075)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v35075)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v35075)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,7 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v35075)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 06:23:22 [main] [INFO]  PatchLogExporter - patch (v35075)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,8 +122,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		functionValueAccuracy = defaultFunctionValueAccuracy;
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +243,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                setResult(x1, i);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 06:23:22 [main] [INFO]  KGenProgMain - Summary
Reached generation = 177
Generated variants = 35075
Syntax valid variants = 29369
Build succeeded variants = 17230
Time elapsed = 2 hours 52 minutes 8 seconds
Exit status = SUCCESS
