2023-08-06 15:41:02 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 15:41:02 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 15:41:02 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 15:41:02 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 100 (set in config file)
crossoverGeneratingCount = 100 (set in config file)
headcount = 50
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 4 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-08-06 15:41:20 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-08-06 15:41:21 [main] [INFO]  KGenProgMain - GA started
2023-08-06 15:41:21 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 15:41:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 100, build-succeeded 16, build-failed 51, syntax-invalid 5, redundant 28
Fitness: max 0.833(12), min 0.167(1), ave 0.76
Test execution time: sum 2377 ms, max 325 ms, min 75 ms
----------------------------------------------------------------

2023-08-06 15:41:29 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 15:56:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 16 seconds
Variants: generated 100, build-succeeded 30, build-failed 49, syntax-invalid 8, redundant 13
Fitness: max 0.833(15), min 0.167(4), ave 0.678
Test execution time: sum 902542 ms, max 900133 ms, min 66 ms
----------------------------------------------------------------

2023-08-06 15:56:37 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 15:56:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 29 seconds
Variants: generated 200, build-succeeded 76, build-failed 62, syntax-invalid 20, redundant 42
Fitness: max 0.833(44), min 0(2), ave 0.693
Test execution time: sum 5229 ms, max 151 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:56:50 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 15:57:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 40 seconds
Variants: generated 200, build-succeeded 69, build-failed 55, syntax-invalid 15, redundant 61
Fitness: max 1(1), min 0.167(4), ave 0.79
Test execution time: sum 4356 ms, max 132 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:57:01 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 15:57:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 50 seconds
Variants: generated 200, build-succeeded 62, build-failed 56, syntax-invalid 14, redundant 68
Fitness: max 1(1), min 0.167(3), ave 0.793
Test execution time: sum 3975 ms, max 144 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 15:57:11 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 15:57:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 1 seconds
Variants: generated 200, build-succeeded 71, build-failed 62, syntax-invalid 14, redundant 53
Fitness: max 0.833(65), min 0.167(2), ave 0.805
Test execution time: sum 4540 ms, max 155 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:57:22 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 15:57:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 11 seconds
Variants: generated 200, build-succeeded 66, build-failed 60, syntax-invalid 16, redundant 58
Fitness: max 1(1), min 0.167(3), ave 0.793
Test execution time: sum 4098 ms, max 121 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:57:32 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 15:57:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 23 seconds
Variants: generated 200, build-succeeded 84, build-failed 55, syntax-invalid 20, redundant 41
Fitness: max 1(1), min 0.167(7), ave 0.772
Test execution time: sum 5266 ms, max 206 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 15:57:44 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 15:57:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 35 seconds
Variants: generated 200, build-succeeded 83, build-failed 62, syntax-invalid 15, redundant 40
Fitness: max 1(1), min 0.167(6), ave 0.779
Test execution time: sum 5099 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 15:57:56 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 15:58:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 46 seconds
Variants: generated 200, build-succeeded 78, build-failed 58, syntax-invalid 18, redundant 46
Fitness: max 0.833(72), min 0.167(5), ave 0.788
Test execution time: sum 4893 ms, max 198 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:58:08 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 15:58:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 58 seconds
Variants: generated 200, build-succeeded 77, build-failed 60, syntax-invalid 24, redundant 39
Fitness: max 1(1), min 0.167(10), ave 0.745
Test execution time: sum 4877 ms, max 200 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:58:19 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 15:58:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 10 seconds
Variants: generated 200, build-succeeded 76, build-failed 63, syntax-invalid 37, redundant 24
Fitness: max 0.833(71), min 0.167(4), ave 0.796
Test execution time: sum 4893 ms, max 171 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:58:31 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 15:58:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 21 seconds
Variants: generated 200, build-succeeded 83, build-failed 57, syntax-invalid 30, redundant 30
Fitness: max 1(1), min 0.5(2), ave 0.817
Test execution time: sum 5215 ms, max 219 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 15:58:43 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 15:58:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 34 seconds
Variants: generated 200, build-succeeded 85, build-failed 59, syntax-invalid 31, redundant 25
Fitness: max 0.833(77), min 0.167(4), ave 0.794
Test execution time: sum 5222 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:58:55 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 15:59:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 46 seconds
Variants: generated 200, build-succeeded 85, build-failed 52, syntax-invalid 33, redundant 30
Fitness: max 0.833(76), min 0.167(5), ave 0.786
Test execution time: sum 5201 ms, max 201 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 15:59:07 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 15:59:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 58 seconds
Variants: generated 200, build-succeeded 84, build-failed 51, syntax-invalid 36, redundant 29
Fitness: max 0.833(77), min 0.167(4), ave 0.794
Test execution time: sum 5227 ms, max 196 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 15:59:19 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 15:59:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 12 seconds
Variants: generated 200, build-succeeded 106, build-failed 51, syntax-invalid 29, redundant 14
Fitness: max 0.833(94), min 0.167(8), ave 0.774
Test execution time: sum 6637 ms, max 191 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 15:59:33 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 15:59:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 24 seconds
Variants: generated 200, build-succeeded 85, build-failed 64, syntax-invalid 35, redundant 16
Fitness: max 0.833(77), min 0.167(5), ave 0.786
Test execution time: sum 5028 ms, max 99 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 15:59:45 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 15:59:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 38 seconds
Variants: generated 200, build-succeeded 95, build-failed 51, syntax-invalid 34, redundant 20
Fitness: max 1(1), min 0.167(7), ave 0.775
Test execution time: sum 5751 ms, max 162 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 15:59:59 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 16:00:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 51 seconds
Variants: generated 200, build-succeeded 95, build-failed 66, syntax-invalid 24, redundant 15
Fitness: max 0.833(85), min 0.167(3), ave 0.798
Test execution time: sum 5752 ms, max 97 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:00:12 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 16:00:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 4 seconds
Variants: generated 200, build-succeeded 95, build-failed 64, syntax-invalid 29, redundant 12
Fitness: max 1(1), min 0.667(6), ave 0.825
Test execution time: sum 5530 ms, max 122 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:00:26 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 16:00:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 18 seconds
Variants: generated 200, build-succeeded 92, build-failed 55, syntax-invalid 42, redundant 11
Fitness: max 1(1), min 0.167(4), ave 0.788
Test execution time: sum 5710 ms, max 194 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:00:39 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-06 16:00:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 31 seconds
Variants: generated 200, build-succeeded 87, build-failed 57, syntax-invalid 39, redundant 17
Fitness: max 0.833(80), min 0.167(3), ave 0.803
Test execution time: sum 5056 ms, max 78 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:00:52 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-06 16:01:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 44 seconds
Variants: generated 200, build-succeeded 93, build-failed 61, syntax-invalid 33, redundant 13
Fitness: max 1(3), min 0.167(4), ave 0.799
Test execution time: sum 5528 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:01:06 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-06 16:01:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 58 seconds
Variants: generated 200, build-succeeded 92, build-failed 58, syntax-invalid 34, redundant 16
Fitness: max 0.833(82), min 0.167(6), ave 0.779
Test execution time: sum 5679 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:01:19 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-06 16:01:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 12 seconds
Variants: generated 200, build-succeeded 95, build-failed 68, syntax-invalid 28, redundant 9
Fitness: max 1(1), min 0(1), ave 0.772
Test execution time: sum 5622 ms, max 85 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 16:01:33 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-06 16:01:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 26 seconds
Variants: generated 200, build-succeeded 98, build-failed 61, syntax-invalid 28, redundant 13
Fitness: max 0.833(84), min 0.167(8), ave 0.769
Test execution time: sum 5936 ms, max 130 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:01:48 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-06 16:02:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 42 seconds
Variants: generated 200, build-succeeded 99, build-failed 65, syntax-invalid 27, redundant 9
Fitness: max 0.833(90), min 0.167(7), ave 0.781
Test execution time: sum 6168 ms, max 125 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:02:03 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-06 16:02:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 56 seconds
Variants: generated 200, build-succeeded 103, build-failed 54, syntax-invalid 27, redundant 16
Fitness: max 0.833(91), min 0.167(7), ave 0.778
Test execution time: sum 6114 ms, max 82 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:02:17 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-06 16:02:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 12 seconds
Variants: generated 200, build-succeeded 115, build-failed 44, syntax-invalid 23, redundant 18
Fitness: max 1(1), min 0.167(10), ave 0.767
Test execution time: sum 6979 ms, max 192 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:02:33 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-06 16:02:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 28 seconds
Variants: generated 200, build-succeeded 106, build-failed 60, syntax-invalid 26, redundant 8
Fitness: max 1(1), min 0.167(6), ave 0.788
Test execution time: sum 6584 ms, max 187 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:02:49 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-06 16:03:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 43 seconds
Variants: generated 200, build-succeeded 88, build-failed 61, syntax-invalid 38, redundant 13
Fitness: max 0.833(81), min 0.167(4), ave 0.797
Test execution time: sum 5478 ms, max 119 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:03:04 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-06 16:18:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 58 seconds
Variants: generated 200, build-succeeded 106, build-failed 60, syntax-invalid 25, redundant 9
Fitness: max 1(1), min 0.167(9), ave 0.767
Test execution time: sum 906445 ms, max 900140 ms, min 53 ms
----------------------------------------------------------------

2023-08-06 16:18:19 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-06 16:18:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 13 seconds
Variants: generated 200, build-succeeded 95, build-failed 63, syntax-invalid 32, redundant 10
Fitness: max 0.833(86), min 0.167(5), ave 0.791
Test execution time: sum 5775 ms, max 130 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:18:35 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-06 16:18:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 30 seconds
Variants: generated 200, build-succeeded 103, build-failed 68, syntax-invalid 20, redundant 9
Fitness: max 0.833(94), min 0.167(5), ave 0.793
Test execution time: sum 6240 ms, max 127 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:18:51 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-06 16:34:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 46 seconds
Variants: generated 200, build-succeeded 99, build-failed 59, syntax-invalid 26, redundant 16
Fitness: max 1(1), min 0.167(4), ave 0.806
Test execution time: sum 906423 ms, max 900104 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:34:07 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-06 16:34:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 2 seconds
Variants: generated 200, build-succeeded 97, build-failed 67, syntax-invalid 26, redundant 10
Fitness: max 0.833(89), min 0.167(6), ave 0.789
Test execution time: sum 5826 ms, max 101 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:34:23 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-06 16:34:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 19 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 25, redundant 5
Fitness: max 0.833(100), min 0.167(6), ave 0.788
Test execution time: sum 6845 ms, max 184 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:34:40 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-06 16:34:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 34 seconds
Variants: generated 200, build-succeeded 95, build-failed 62, syntax-invalid 31, redundant 12
Fitness: max 1(1), min 0.167(3), ave 0.807
Test execution time: sum 5559 ms, max 89 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:34:55 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-06 16:35:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 51 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 25, redundant 8
Fitness: max 0.833(96), min 0.167(8), ave 0.777
Test execution time: sum 6618 ms, max 123 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:35:12 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-06 16:35:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 6 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 29, redundant 11
Fitness: max 1(1), min 0.167(3), ave 0.801
Test execution time: sum 6135 ms, max 94 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:35:27 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-06 16:35:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 23 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 29, redundant 7
Fitness: max 0.833(99), min 0.167(5), ave 0.798
Test execution time: sum 6450 ms, max 187 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:35:44 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-06 16:36:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 40 seconds
Variants: generated 200, build-succeeded 118, build-failed 54, syntax-invalid 20, redundant 8
Fitness: max 1(2), min 0.167(7), ave 0.788
Test execution time: sum 6872 ms, max 87 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:36:01 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-06 16:36:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 58 seconds
Variants: generated 200, build-succeeded 106, build-failed 61, syntax-invalid 28, redundant 5
Fitness: max 0.833(92), min 0.167(7), ave 0.778
Test execution time: sum 6499 ms, max 189 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:36:19 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-06 16:36:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 13 seconds
Variants: generated 200, build-succeeded 97, build-failed 60, syntax-invalid 31, redundant 12
Fitness: max 0.833(84), min 0(1), ave 0.777
Test execution time: sum 5762 ms, max 93 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:36:34 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-06 16:36:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 29 seconds
Variants: generated 200, build-succeeded 96, build-failed 58, syntax-invalid 32, redundant 14
Fitness: max 1(2), min 0.167(6), ave 0.786
Test execution time: sum 5803 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:36:50 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-06 16:37:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 45 seconds
Variants: generated 200, build-succeeded 105, build-failed 58, syntax-invalid 31, redundant 6
Fitness: max 0.833(93), min 0.167(6), ave 0.783
Test execution time: sum 6236 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:37:06 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-06 16:37:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 2 seconds
Variants: generated 200, build-succeeded 100, build-failed 59, syntax-invalid 29, redundant 12
Fitness: max 1(1), min 0.167(11), ave 0.757
Test execution time: sum 6183 ms, max 120 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:37:23 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-06 16:37:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 18 seconds
Variants: generated 200, build-succeeded 109, build-failed 58, syntax-invalid 20, redundant 13
Fitness: max 0.833(90), min 0.167(9), ave 0.761
Test execution time: sum 6478 ms, max 90 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:37:39 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-06 16:37:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 36 seconds
Variants: generated 200, build-succeeded 106, build-failed 71, syntax-invalid 15, redundant 8
Fitness: max 1(1), min 0.167(8), ave 0.78
Test execution time: sum 6602 ms, max 125 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:37:57 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-06 16:38:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 53 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 22, redundant 7
Fitness: max 1(1), min 0.167(8), ave 0.779
Test execution time: sum 6700 ms, max 87 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:38:14 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-06 16:38:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 10 seconds
Variants: generated 200, build-succeeded 105, build-failed 67, syntax-invalid 20, redundant 8
Fitness: max 0.833(93), min 0.167(5), ave 0.789
Test execution time: sum 6416 ms, max 125 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:38:32 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-06 16:38:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 25 seconds
Variants: generated 200, build-succeeded 87, build-failed 71, syntax-invalid 35, redundant 7
Fitness: max 0.833(82), min 0.167(2), ave 0.812
Test execution time: sum 5193 ms, max 98 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:38:46 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-06 16:39:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 43 seconds
Variants: generated 200, build-succeeded 108, build-failed 61, syntax-invalid 22, redundant 9
Fitness: max 0.833(99), min 0.167(4), ave 0.799
Test execution time: sum 6760 ms, max 199 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:39:04 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-06 16:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 0 seconds
Variants: generated 200, build-succeeded 99, build-failed 62, syntax-invalid 27, redundant 12
Fitness: max 0.833(86), min 0.167(8), ave 0.769
Test execution time: sum 5866 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:39:21 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-06 16:39:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 18 seconds
Variants: generated 200, build-succeeded 104, build-failed 59, syntax-invalid 27, redundant 10
Fitness: max 0.833(91), min 0.167(4), ave 0.788
Test execution time: sum 6569 ms, max 202 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 16:39:39 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-06 16:39:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 34 seconds
Variants: generated 200, build-succeeded 96, build-failed 73, syntax-invalid 23, redundant 8
Fitness: max 0.833(88), min 0.167(2), ave 0.806
Test execution time: sum 5710 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:39:55 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-06 16:40:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 51 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 20, redundant 13
Fitness: max 1(2), min 0(1), ave 0.804
Test execution time: sum 6856 ms, max 127 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:40:13 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-06 16:40:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 8 seconds
Variants: generated 200, build-succeeded 103, build-failed 62, syntax-invalid 29, redundant 6
Fitness: max 0.833(92), min 0.167(5), ave 0.791
Test execution time: sum 6039 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:40:29 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-06 16:40:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 25 seconds
Variants: generated 200, build-succeeded 102, build-failed 52, syntax-invalid 36, redundant 10
Fitness: max 1(1), min 0.167(7), ave 0.778
Test execution time: sum 6281 ms, max 123 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:40:46 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-06 16:41:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 43 seconds
Variants: generated 200, build-succeeded 111, build-failed 63, syntax-invalid 19, redundant 7
Fitness: max 0.833(94), min 0.167(8), ave 0.77
Test execution time: sum 6591 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:41:04 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-06 16:41:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 0 seconds
Variants: generated 200, build-succeeded 102, build-failed 59, syntax-invalid 26, redundant 13
Fitness: max 1(1), min 0.167(4), ave 0.792
Test execution time: sum 6603 ms, max 211 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 16:41:21 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-06 16:41:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 seconds
Variants: generated 200, build-succeeded 109, build-failed 63, syntax-invalid 19, redundant 9
Fitness: max 1(1), min 0.167(10), ave 0.755
Test execution time: sum 6433 ms, max 95 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:41:38 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-06 16:41:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 seconds
Variants: generated 200, build-succeeded 109, build-failed 53, syntax-invalid 30, redundant 8
Fitness: max 0.833(94), min 0.167(5), ave 0.787
Test execution time: sum 6822 ms, max 191 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:41:56 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-06 16:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 seconds
Variants: generated 200, build-succeeded 117, build-failed 52, syntax-invalid 24, redundant 7
Fitness: max 0.833(98), min 0.167(12), ave 0.755
Test execution time: sum 7020 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:42:14 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-06 16:57:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 10 seconds
Variants: generated 200, build-succeeded 104, build-failed 62, syntax-invalid 26, redundant 8
Fitness: max 0.833(86), min 0.167(6), ave 0.771
Test execution time: sum 906695 ms, max 900126 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:57:31 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-06 16:57:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 27 seconds
Variants: generated 200, build-succeeded 110, build-failed 60, syntax-invalid 21, redundant 9
Fitness: max 0.833(96), min 0.167(8), ave 0.776
Test execution time: sum 6388 ms, max 81 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:57:48 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-06 16:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 46 seconds
Variants: generated 200, build-succeeded 112, build-failed 59, syntax-invalid 21, redundant 8
Fitness: max 0.833(100), min 0.167(6), ave 0.787
Test execution time: sum 6993 ms, max 114 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:58:07 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-06 16:58:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 3 seconds
Variants: generated 200, build-succeeded 115, build-failed 53, syntax-invalid 22, redundant 10
Fitness: max 0.833(107), min 0.167(4), ave 0.804
Test execution time: sum 6715 ms, max 85 ms, min 54 ms
----------------------------------------------------------------

2023-08-06 16:58:24 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-06 16:58:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 22 seconds
Variants: generated 200, build-succeeded 109, build-failed 54, syntax-invalid 24, redundant 13
Fitness: max 0.833(103), min 0.167(4), ave 0.804
Test execution time: sum 6908 ms, max 193 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 16:58:43 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-06 16:59:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 40 seconds
Variants: generated 200, build-succeeded 106, build-failed 58, syntax-invalid 27, redundant 9
Fitness: max 0.833(97), min 0.167(6), ave 0.791
Test execution time: sum 6384 ms, max 94 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 16:59:01 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-06 16:59:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 59 seconds
Variants: generated 200, build-succeeded 110, build-failed 56, syntax-invalid 19, redundant 15
Fitness: max 1(1), min 0.333(1), ave 0.826
Test execution time: sum 6934 ms, max 128 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 16:59:20 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-06 16:59:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 17 seconds
Variants: generated 200, build-succeeded 116, build-failed 48, syntax-invalid 17, redundant 19
Fitness: max 1(1), min 0.667(5), ave 0.828
Test execution time: sum 6878 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 16:59:38 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-06 16:59:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 36 seconds
Variants: generated 200, build-succeeded 110, build-failed 54, syntax-invalid 22, redundant 14
Fitness: max 0.833(103), min 0.167(1), ave 0.817
Test execution time: sum 6934 ms, max 128 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 16:59:57 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-06 17:00:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 53 seconds
Variants: generated 200, build-succeeded 99, build-failed 67, syntax-invalid 20, redundant 14
Fitness: max 0.833(92), min 0.167(1), ave 0.816
Test execution time: sum 5932 ms, max 94 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:00:14 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-06 17:00:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 12 seconds
Variants: generated 200, build-succeeded 110, build-failed 63, syntax-invalid 21, redundant 6
Fitness: max 0.833(104), min 0.167(1), ave 0.82
Test execution time: sum 6958 ms, max 131 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 17:00:33 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-06 17:00:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 30 seconds
Variants: generated 200, build-succeeded 101, build-failed 62, syntax-invalid 24, redundant 13
Fitness: max 0.833(97), min 0.167(1), ave 0.822
Test execution time: sum 5986 ms, max 85 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:00:51 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-06 17:01:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 48 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 34, redundant 10
Fitness: max 1(2), min 0.167(1), ave 0.822
Test execution time: sum 6463 ms, max 166 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:01:09 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-06 17:01:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 7 seconds
Variants: generated 200, build-succeeded 112, build-failed 55, syntax-invalid 23, redundant 10
Fitness: max 1(3), min 0(1), ave 0.793
Test execution time: sum 6736 ms, max 111 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 17:01:28 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-06 17:01:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 27 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 25, redundant 11
Fitness: max 1(2), min 0.167(5), ave 0.802
Test execution time: sum 6738 ms, max 126 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:01:48 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-06 17:02:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 45 seconds
Variants: generated 200, build-succeeded 94, build-failed 61, syntax-invalid 35, redundant 10
Fitness: max 0.833(89), min 0.167(1), ave 0.819
Test execution time: sum 5758 ms, max 90 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:02:06 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-06 17:02:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 4 seconds
Variants: generated 200, build-succeeded 97, build-failed 66, syntax-invalid 28, redundant 9
Fitness: max 1(2), min 0.167(2), ave 0.816
Test execution time: sum 6302 ms, max 122 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:02:26 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-06 17:02:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 23 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 35, redundant 9
Fitness: max 1(1), min 0.167(6), ave 0.785
Test execution time: sum 6078 ms, max 90 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:02:44 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-06 17:18:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 42 seconds
Variants: generated 200, build-succeeded 101, build-failed 55, syntax-invalid 34, redundant 10
Fitness: max 1(4), min 0.167(1), ave 0.827
Test execution time: sum 906355 ms, max 900105 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:18:03 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-06 17:18:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 2 seconds
Variants: generated 200, build-succeeded 109, build-failed 50, syntax-invalid 33, redundant 8
Fitness: max 1(2), min 0.167(3), ave 0.807
Test execution time: sum 7072 ms, max 229 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:18:23 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-06 17:18:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 21 seconds
Variants: generated 200, build-succeeded 95, build-failed 56, syntax-invalid 45, redundant 4
Fitness: max 1(1), min 0.167(4), ave 0.8
Test execution time: sum 5970 ms, max 83 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:18:42 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-06 17:19:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 41 seconds
Variants: generated 200, build-succeeded 107, build-failed 49, syntax-invalid 33, redundant 11
Fitness: max 0.833(98), min 0.167(1), ave 0.813
Test execution time: sum 6795 ms, max 210 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:19:02 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-06 17:19:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 59 seconds
Variants: generated 200, build-succeeded 93, build-failed 60, syntax-invalid 42, redundant 5
Fitness: max 0.833(83), min 0.167(5), ave 0.789
Test execution time: sum 5781 ms, max 93 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:19:21 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-06 17:19:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 19 seconds
Variants: generated 200, build-succeeded 94, build-failed 55, syntax-invalid 35, redundant 16
Fitness: max 1(1), min 0.167(3), ave 0.807
Test execution time: sum 6021 ms, max 196 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:19:40 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-06 17:20:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 40 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 21, redundant 14
Fitness: max 1(3), min 0.167(3), ave 0.814
Test execution time: sum 6777 ms, max 93 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 17:20:01 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-06 17:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 1 seconds
Variants: generated 200, build-succeeded 102, build-failed 56, syntax-invalid 26, redundant 16
Fitness: max 1(1), min 0.167(2), ave 0.812
Test execution time: sum 6552 ms, max 130 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:20:22 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-06 17:20:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 20 seconds
Variants: generated 200, build-succeeded 97, build-failed 63, syntax-invalid 32, redundant 8
Fitness: max 0.833(91), min 0.167(3), ave 0.808
Test execution time: sum 6055 ms, max 95 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:20:42 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-06 17:21:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 42 seconds
Variants: generated 200, build-succeeded 110, build-failed 52, syntax-invalid 25, redundant 13
Fitness: max 0.833(97), min 0.167(4), ave 0.794
Test execution time: sum 7163 ms, max 190 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:21:04 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-06 17:21:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 2 seconds
Variants: generated 200, build-succeeded 97, build-failed 58, syntax-invalid 32, redundant 13
Fitness: max 0.833(92), min 0.167(3), ave 0.809
Test execution time: sum 5956 ms, max 91 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 17:21:23 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-06 17:21:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 25 seconds
Variants: generated 200, build-succeeded 113, build-failed 53, syntax-invalid 25, redundant 9
Fitness: max 1(1), min 0.167(2), ave 0.808
Test execution time: sum 7150 ms, max 121 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:21:46 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-06 17:22:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 45 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 36, redundant 6
Fitness: max 1(1), min 0.167(2), ave 0.814
Test execution time: sum 5940 ms, max 90 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:22:06 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-06 17:22:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 6 seconds
Variants: generated 200, build-succeeded 99, build-failed 52, syntax-invalid 41, redundant 8
Fitness: max 0.833(90), min 0.167(5), ave 0.793
Test execution time: sum 6410 ms, max 122 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:22:27 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-06 17:22:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 27 seconds
Variants: generated 200, build-succeeded 100, build-failed 68, syntax-invalid 27, redundant 5
Fitness: max 0.833(91), min 0.167(3), ave 0.802
Test execution time: sum 6032 ms, max 86 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:22:48 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-06 17:23:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 50 seconds
Variants: generated 200, build-succeeded 110, build-failed 55, syntax-invalid 22, redundant 13
Fitness: max 1(1), min 0.167(2), ave 0.815
Test execution time: sum 7090 ms, max 127 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:23:11 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-06 17:23:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 11 seconds
Variants: generated 200, build-succeeded 101, build-failed 54, syntax-invalid 30, redundant 15
Fitness: max 0.833(93), min 0.667(8), ave 0.82
Test execution time: sum 6177 ms, max 93 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:23:32 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-06 17:23:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 34 seconds
Variants: generated 200, build-succeeded 112, build-failed 51, syntax-invalid 28, redundant 9
Fitness: max 0.833(109), min 0.167(1), ave 0.824
Test execution time: sum 7270 ms, max 183 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:23:55 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-06 17:24:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 57 seconds
Variants: generated 200, build-succeeded 113, build-failed 55, syntax-invalid 20, redundant 12
Fitness: max 1(1), min 0.167(2), ave 0.819
Test execution time: sum 6913 ms, max 92 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:24:18 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-06 17:24:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 21 seconds
Variants: generated 200, build-succeeded 113, build-failed 48, syntax-invalid 31, redundant 8
Fitness: max 1(1), min 0.167(1), ave 0.823
Test execution time: sum 7384 ms, max 160 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:24:42 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-06 17:25:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 42 seconds
Variants: generated 200, build-succeeded 101, build-failed 58, syntax-invalid 32, redundant 9
Fitness: max 1(1), min 0.167(1), ave 0.822
Test execution time: sum 6070 ms, max 79 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:25:03 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-06 17:25:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 5 seconds
Variants: generated 200, build-succeeded 98, build-failed 56, syntax-invalid 32, redundant 14
Fitness: max 1(1), min 0.667(3), ave 0.83
Test execution time: sum 6379 ms, max 130 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:25:26 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-06 17:25:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 27 seconds
Variants: generated 200, build-succeeded 106, build-failed 53, syntax-invalid 27, redundant 14
Fitness: max 0.833(96), min 0.167(1), ave 0.813
Test execution time: sum 6419 ms, max 85 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:25:48 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-06 17:26:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 50 seconds
Variants: generated 200, build-succeeded 106, build-failed 51, syntax-invalid 27, redundant 16
Fitness: max 1(1), min 0.167(2), ave 0.821
Test execution time: sum 6900 ms, max 124 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:26:11 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-06 17:26:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 13 seconds
Variants: generated 200, build-succeeded 97, build-failed 61, syntax-invalid 28, redundant 14
Fitness: max 1(3), min 0.167(3), ave 0.813
Test execution time: sum 6075 ms, max 91 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:26:34 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-06 17:26:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 35 seconds
Variants: generated 200, build-succeeded 94, build-failed 65, syntax-invalid 32, redundant 9
Fitness: max 1(2), min 0.167(2), ave 0.823
Test execution time: sum 5975 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:26:56 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-06 17:27:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 59 seconds
Variants: generated 200, build-succeeded 105, build-failed 47, syntax-invalid 30, redundant 18
Fitness: max 1(2), min 0.167(3), ave 0.803
Test execution time: sum 6577 ms, max 144 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:27:20 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-06 17:27:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 21 seconds
Variants: generated 200, build-succeeded 88, build-failed 60, syntax-invalid 41, redundant 11
Fitness: max 1(2), min 0.167(1), ave 0.824
Test execution time: sum 5458 ms, max 87 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:27:42 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-06 17:28:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 46 seconds
Variants: generated 200, build-succeeded 106, build-failed 59, syntax-invalid 29, redundant 6
Fitness: max 1(2), min 0(1), ave 0.813
Test execution time: sum 6735 ms, max 186 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:28:07 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-06 17:28:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 8 seconds
Variants: generated 200, build-succeeded 88, build-failed 59, syntax-invalid 44, redundant 9
Fitness: max 1(2), min 0.167(4), ave 0.801
Test execution time: sum 5455 ms, max 81 ms, min 55 ms
----------------------------------------------------------------

2023-08-06 17:28:30 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-06 17:28:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 34 seconds
Variants: generated 200, build-succeeded 107, build-failed 58, syntax-invalid 29, redundant 6
Fitness: max 1(1), min 0.667(4), ave 0.829
Test execution time: sum 6971 ms, max 180 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:28:55 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-06 17:29:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 58 seconds
Variants: generated 200, build-succeeded 100, build-failed 67, syntax-invalid 25, redundant 8
Fitness: max 1(1), min 0.167(2), ave 0.815
Test execution time: sum 6179 ms, max 82 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:29:20 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-06 17:29:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 23 seconds
Variants: generated 200, build-succeeded 95, build-failed 70, syntax-invalid 26, redundant 9
Fitness: max 1(3), min 0.167(1), ave 0.826
Test execution time: sum 6287 ms, max 200 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:29:45 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-06 17:30:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 49 seconds
Variants: generated 200, build-succeeded 108, build-failed 59, syntax-invalid 26, redundant 7
Fitness: max 0.833(100), min 0.167(1), ave 0.816
Test execution time: sum 6745 ms, max 90 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:30:10 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-06 17:30:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 13 seconds
Variants: generated 200, build-succeeded 95, build-failed 58, syntax-invalid 30, redundant 17
Fitness: max 1(1), min 0.667(7), ave 0.823
Test execution time: sum 6205 ms, max 139 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:30:35 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-06 17:31:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 38 seconds
Variants: generated 200, build-succeeded 103, build-failed 63, syntax-invalid 21, redundant 13
Fitness: max 1(1), min 0.167(2), ave 0.811
Test execution time: sum 6439 ms, max 88 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:31:00 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-06 17:31:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 5 seconds
Variants: generated 200, build-succeeded 115, build-failed 56, syntax-invalid 20, redundant 9
Fitness: max 1(2), min 0.167(2), ave 0.81
Test execution time: sum 7343 ms, max 199 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:31:26 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-06 17:31:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 29 seconds
Variants: generated 200, build-succeeded 96, build-failed 53, syntax-invalid 29, redundant 22
Fitness: max 0.833(87), min 0.167(2), ave 0.8
Test execution time: sum 5934 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:31:51 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-06 17:32:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 56 seconds
Variants: generated 200, build-succeeded 102, build-failed 66, syntax-invalid 22, redundant 10
Fitness: max 1(1), min 0.167(5), ave 0.797
Test execution time: sum 6744 ms, max 211 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:32:17 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-06 17:32:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 21 seconds
Variants: generated 200, build-succeeded 106, build-failed 54, syntax-invalid 25, redundant 15
Fitness: max 0.833(95), min 0.167(1), ave 0.811
Test execution time: sum 6750 ms, max 89 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:32:42 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-06 17:33:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 48 seconds
Variants: generated 200, build-succeeded 113, build-failed 58, syntax-invalid 19, redundant 10
Fitness: max 1(1), min 0.167(2), ave 0.801
Test execution time: sum 7251 ms, max 138 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:33:10 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-06 17:33:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 14 seconds
Variants: generated 200, build-succeeded 109, build-failed 55, syntax-invalid 29, redundant 7
Fitness: max 0.833(103), min 0.167(1), ave 0.82
Test execution time: sum 6747 ms, max 85 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:33:35 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-06 17:34:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 40 seconds
Variants: generated 200, build-succeeded 110, build-failed 45, syntax-invalid 35, redundant 10
Fitness: max 1(1), min 0(1), ave 0.789
Test execution time: sum 7122 ms, max 194 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:34:01 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-06 17:34:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 4 seconds
Variants: generated 200, build-succeeded 104, build-failed 48, syntax-invalid 38, redundant 10
Fitness: max 0.833(92), min 0.167(4), ave 0.795
Test execution time: sum 6511 ms, max 87 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:34:25 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-06 17:34:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 29 seconds
Variants: generated 200, build-succeeded 98, build-failed 53, syntax-invalid 39, redundant 10
Fitness: max 0.833(88), min 0.167(5), ave 0.791
Test execution time: sum 6369 ms, max 195 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:34:50 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-06 17:35:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 55 seconds
Variants: generated 200, build-succeeded 113, build-failed 57, syntax-invalid 20, redundant 10
Fitness: max 0.833(106), min 0.167(3), ave 0.81
Test execution time: sum 7031 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:35:16 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-06 17:35:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 22 seconds
Variants: generated 200, build-succeeded 114, build-failed 51, syntax-invalid 26, redundant 9
Fitness: max 0.833(105), min 0.167(3), ave 0.807
Test execution time: sum 7300 ms, max 132 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:35:43 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-06 17:36:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 47 seconds
Variants: generated 200, build-succeeded 105, build-failed 54, syntax-invalid 38, redundant 3
Fitness: max 0.833(100), min 0.167(1), ave 0.817
Test execution time: sum 6579 ms, max 84 ms, min 56 ms
----------------------------------------------------------------

2023-08-06 17:36:08 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-06 17:36:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 12 seconds
Variants: generated 200, build-succeeded 96, build-failed 60, syntax-invalid 32, redundant 12
Fitness: max 1(1), min 0.167(2), ave 0.809
Test execution time: sum 6208 ms, max 119 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 17:36:33 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-06 17:36:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 38 seconds
Variants: generated 200, build-succeeded 104, build-failed 54, syntax-invalid 32, redundant 10
Fitness: max 0.833(92), min 0.5(1), ave 0.812
Test execution time: sum 6645 ms, max 88 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 17:36:59 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-06 17:37:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 4 seconds
Variants: generated 200, build-succeeded 102, build-failed 60, syntax-invalid 28, redundant 10
Fitness: max 0.833(94), min 0.167(2), ave 0.81
Test execution time: sum 6539 ms, max 139 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:37:26 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-06 17:37:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 31 seconds
Variants: generated 200, build-succeeded 109, build-failed 60, syntax-invalid 26, redundant 5
Fitness: max 0.833(101), min 0.167(2), ave 0.81
Test execution time: sum 6998 ms, max 92 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:37:52 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-06 17:38:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 59 seconds
Variants: generated 200, build-succeeded 114, build-failed 50, syntax-invalid 23, redundant 13
Fitness: max 0.833(102), min 0.167(1), ave 0.81
Test execution time: sum 7506 ms, max 136 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 17:38:20 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-06 17:38:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 25 seconds
Variants: generated 200, build-succeeded 111, build-failed 56, syntax-invalid 25, redundant 8
Fitness: max 0.833(103), min 0.167(2), ave 0.812
Test execution time: sum 7070 ms, max 91 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:38:47 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-06 17:39:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 53 seconds
Variants: generated 200, build-succeeded 110, build-failed 57, syntax-invalid 26, redundant 7
Fitness: max 1(2), min 0.167(1), ave 0.814
Test execution time: sum 7207 ms, max 160 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 17:39:14 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-06 17:39:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 19 seconds
Variants: generated 200, build-succeeded 102, build-failed 57, syntax-invalid 33, redundant 8
Fitness: max 0.833(93), min 0.167(3), ave 0.802
Test execution time: sum 6527 ms, max 90 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:39:41 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-06 17:40:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 48 seconds
Variants: generated 200, build-succeeded 114, build-failed 50, syntax-invalid 31, redundant 5
Fitness: max 0.833(103), min 0.167(3), ave 0.803
Test execution time: sum 7431 ms, max 122 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:40:09 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-06 17:40:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 15 seconds
Variants: generated 200, build-succeeded 113, build-failed 51, syntax-invalid 27, redundant 9
Fitness: max 1(2), min 0.167(5), ave 0.794
Test execution time: sum 7261 ms, max 90 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:40:36 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-06 17:41:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 43 seconds
Variants: generated 200, build-succeeded 102, build-failed 61, syntax-invalid 29, redundant 8
Fitness: max 0.833(94), min 0.167(3), ave 0.804
Test execution time: sum 6703 ms, max 120 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:41:04 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-06 17:41:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 seconds
Variants: generated 200, build-succeeded 103, build-failed 54, syntax-invalid 35, redundant 8
Fitness: max 1(1), min 0.167(3), ave 0.801
Test execution time: sum 6646 ms, max 87 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:41:31 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-06 17:41:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 seconds
Variants: generated 200, build-succeeded 97, build-failed 64, syntax-invalid 33, redundant 6
Fitness: max 1(1), min 0.167(1), ave 0.825
Test execution time: sum 6435 ms, max 203 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 17:41:58 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-06 17:42:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 5 seconds
Variants: generated 200, build-succeeded 112, build-failed 53, syntax-invalid 28, redundant 7
Fitness: max 0.833(104), min 0.167(2), ave 0.811
Test execution time: sum 7236 ms, max 90 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:42:26 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-06 17:42:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 33 seconds
Variants: generated 200, build-succeeded 99, build-failed 58, syntax-invalid 33, redundant 10
Fitness: max 1(1), min 0.167(2), ave 0.811
Test execution time: sum 6316 ms, max 121 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:42:54 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-06 17:43:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 0 seconds
Variants: generated 200, build-succeeded 106, build-failed 55, syntax-invalid 35, redundant 4
Fitness: max 0.833(92), min 0.167(5), ave 0.781
Test execution time: sum 6803 ms, max 95 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:43:22 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-06 17:43:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 28 seconds
Variants: generated 200, build-succeeded 103, build-failed 49, syntax-invalid 40, redundant 8
Fitness: max 1(1), min 0.167(6), ave 0.786
Test execution time: sum 6805 ms, max 148 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:43:49 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-06 17:44:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 55 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 30, redundant 6
Fitness: max 0.833(100), min 0.167(3), ave 0.811
Test execution time: sum 6809 ms, max 86 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:44:16 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-06 17:44:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 23 seconds
Variants: generated 200, build-succeeded 95, build-failed 62, syntax-invalid 34, redundant 9
Fitness: max 0.833(90), min 0.167(2), ave 0.814
Test execution time: sum 6269 ms, max 122 ms, min 61 ms
----------------------------------------------------------------

2023-08-06 17:44:44 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-06 17:45:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 51 seconds
Variants: generated 200, build-succeeded 105, build-failed 59, syntax-invalid 28, redundant 8
Fitness: max 0.833(98), min 0.167(6), ave 0.794
Test execution time: sum 6730 ms, max 93 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:45:12 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-06 17:45:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 19 seconds
Variants: generated 200, build-succeeded 95, build-failed 55, syntax-invalid 41, redundant 9
Fitness: max 0.833(85), min 0.167(5), ave 0.789
Test execution time: sum 6177 ms, max 137 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:45:40 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-06 17:46:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 47 seconds
Variants: generated 200, build-succeeded 103, build-failed 57, syntax-invalid 34, redundant 6
Fitness: max 0.833(99), min 0.167(1), ave 0.822
Test execution time: sum 6628 ms, max 91 ms, min 60 ms
----------------------------------------------------------------

2023-08-06 17:46:08 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-06 17:46:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 16 seconds
Variants: generated 200, build-succeeded 98, build-failed 67, syntax-invalid 31, redundant 4
Fitness: max 0.833(92), min 0.167(2), ave 0.811
Test execution time: sum 6449 ms, max 120 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:46:37 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-06 17:47:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 43 seconds
Variants: generated 200, build-succeeded 94, build-failed 54, syntax-invalid 42, redundant 10
Fitness: max 0.833(89), min 0.167(1), ave 0.819
Test execution time: sum 6115 ms, max 86 ms, min 61 ms
----------------------------------------------------------------

2023-08-06 17:47:04 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-06 17:47:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 10 seconds
Variants: generated 200, build-succeeded 92, build-failed 55, syntax-invalid 45, redundant 8
Fitness: max 0.833(84), min 0.167(3), ave 0.799
Test execution time: sum 6085 ms, max 136 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:47:31 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-06 17:47:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 36 seconds
Variants: generated 200, build-succeeded 86, build-failed 55, syntax-invalid 55, redundant 4
Fitness: max 0.833(77), min 0.333(1), ave 0.808
Test execution time: sum 5560 ms, max 91 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:47:57 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-06 17:48:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 4 seconds
Variants: generated 200, build-succeeded 92, build-failed 52, syntax-invalid 45, redundant 11
Fitness: max 0.833(78), min 0.167(4), ave 0.783
Test execution time: sum 6327 ms, max 206 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:48:25 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-06 17:48:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 32 seconds
Variants: generated 200, build-succeeded 92, build-failed 63, syntax-invalid 38, redundant 7
Fitness: max 0.833(84), min 0.167(2), ave 0.808
Test execution time: sum 6004 ms, max 97 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:48:53 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-06 17:49:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 1 seconds
Variants: generated 200, build-succeeded 98, build-failed 61, syntax-invalid 29, redundant 12
Fitness: max 0.833(85), min 0.167(1), ave 0.799
Test execution time: sum 6638 ms, max 131 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:49:22 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-06 17:49:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 29 seconds
Variants: generated 200, build-succeeded 110, build-failed 47, syntax-invalid 35, redundant 8
Fitness: max 0.833(96), min 0.167(7), ave 0.779
Test execution time: sum 7098 ms, max 92 ms, min 57 ms
----------------------------------------------------------------

2023-08-06 17:49:50 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-06 17:50:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 59 seconds
Variants: generated 200, build-succeeded 111, build-failed 51, syntax-invalid 28, redundant 10
Fitness: max 0.833(102), min 0.167(1), ave 0.815
Test execution time: sum 7306 ms, max 133 ms, min 61 ms
----------------------------------------------------------------

2023-08-06 17:50:20 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-06 17:50:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 28 seconds
Variants: generated 200, build-succeeded 105, build-failed 62, syntax-invalid 25, redundant 8
Fitness: max 0.833(98), min 0.167(4), ave 0.803
Test execution time: sum 6774 ms, max 87 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:50:50 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-06 17:51:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 58 seconds
Variants: generated 200, build-succeeded 104, build-failed 50, syntax-invalid 38, redundant 8
Fitness: max 0.833(98), min 0.167(4), ave 0.804
Test execution time: sum 6907 ms, max 137 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:51:19 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-06 17:51:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 25 seconds
Variants: generated 200, build-succeeded 84, build-failed 66, syntax-invalid 43, redundant 7
Fitness: max 1(1), min 0.167(2), ave 0.804
Test execution time: sum 5583 ms, max 93 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:51:46 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-06 17:52:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 52 seconds
Variants: generated 200, build-succeeded 90, build-failed 54, syntax-invalid 47, redundant 9
Fitness: max 0.833(80), min 0.167(2), ave 0.804
Test execution time: sum 6103 ms, max 192 ms, min 61 ms
----------------------------------------------------------------

2023-08-06 17:52:14 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-06 17:52:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 20 seconds
Variants: generated 200, build-succeeded 94, build-failed 53, syntax-invalid 41, redundant 12
Fitness: max 0.833(85), min 0.167(4), ave 0.796
Test execution time: sum 6130 ms, max 87 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:52:41 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-06 17:53:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 48 seconds
Variants: generated 200, build-succeeded 98, build-failed 50, syntax-invalid 43, redundant 9
Fitness: max 0.833(90), min 0.167(2), ave 0.806
Test execution time: sum 6557 ms, max 217 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:53:10 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-06 17:53:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 17 seconds
Variants: generated 200, build-succeeded 97, build-failed 62, syntax-invalid 35, redundant 6
Fitness: max 0.833(91), min 0.167(3), ave 0.806
Test execution time: sum 6216 ms, max 85 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:53:38 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-06 17:54:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 48 seconds
Variants: generated 200, build-succeeded 106, build-failed 58, syntax-invalid 29, redundant 7
Fitness: max 0.833(99), min 0.167(3), ave 0.807
Test execution time: sum 6921 ms, max 127 ms, min 59 ms
----------------------------------------------------------------

2023-08-06 17:54:09 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-06 17:54:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 1 seconds
Variants: generated 95, build-succeeded 27, build-failed 51, syntax-invalid 9, redundant 8
Fitness: max 1(1), min 0.167(4), ave 0.716
Test execution time: sum 1755 ms, max 91 ms, min 58 ms
----------------------------------------------------------------

2023-08-06 17:54:22 [main] [INFO]  KGenProgMain - GA stopped
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v476)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v476)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v476)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v476)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +181,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				this.resultComputed = false;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +179,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				this.resultComputed = false;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1094)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1094)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1094)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1094)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +179,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				this.resultComputed = false;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1245)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1245)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1245)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1245)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1470)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1470)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1470)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1470)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1820)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1820)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1820)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1820)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v1820)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -181,8 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v2273)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v2273)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v2273)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v2273)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v2273)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3475)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3475)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3475)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3475)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double fm;
             return result;
         }
 
@@ -182,7 +182,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
+				this.resultComputed = false;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3821)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -244,7 +242,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3821)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3821)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3821)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v3821)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                resultComputed = true;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -301,7 +300,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,12 +244,7 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                verifyBracketing(min, max, f);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4467)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4467)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4467)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4467)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4467)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,11 +175,10 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(max) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -269,6 +266,7 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
+					double r1 = y0 / y2;
                     p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
@@ -301,7 +299,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4476)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4476)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4476)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4476)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4476)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +300,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4851)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4851)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4851)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4851)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v4851)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -182,6 +182,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				verifyBracketing(min, max, f);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +246,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5683)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5683)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5683)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5683)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5683)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -269,6 +266,7 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
+					double r1 = y0 / y2;
                     p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
@@ -301,7 +299,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5819)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5819)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5819)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5819)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v5819)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                resultComputed = true;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -269,6 +269,7 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
+					double r1 = y0 / y2;
                     p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
@@ -301,7 +302,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6255)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6255)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6255)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6255)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6255)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +246,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6900)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6900)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6900)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6900)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v6900)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,19 +112,19 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -182,7 +182,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +302,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7498)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7498)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7498)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7498)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7498)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
+				double x;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +304,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7895)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7895)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7895)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7895)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v7895)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fa;
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +178,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(max) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
@@ -269,6 +270,7 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
+					double r1 = y0 / y2;
                     p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
@@ -301,7 +303,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8234)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -244,7 +242,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8234)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8234)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8234)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8234)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +110,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -301,7 +300,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8275)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8275)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8275)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8275)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,21 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +183,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8811)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8811)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8811)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8811)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8811)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8811)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -244,12 +242,7 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v8888)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -239,6 +239,7 @@
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
+				this.f = f;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9247)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9247)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9247)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9247)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,19 +111,18 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +163,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,10 +178,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                ret = min;
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                verifyBracketing(min, max, f);
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -301,7 +299,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                int i = 0;
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,11 +243,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                functionValueAccuracy = defaultFunctionValueAccuracy;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -301,7 +299,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9837)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9837)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9837)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9837)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9837)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v9837)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,10 +179,12 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
+				setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                verifyBracketing(min, max, f);
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -301,7 +301,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11202)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11202)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11202)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11202)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11202)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                double p1;
+				int i = 0;
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11244)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -245,11 +244,7 @@
         throws FunctionEvaluationException {
 
         verifyInterval(lower, upper);
-        if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
+        if (f == null) {
         }
     }
 }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11244)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11244)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11244)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11244)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,11 +241,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                functionValueAccuracy = defaultFunctionValueAccuracy;
+                y1 = f.value(x1);
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11607)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -244,7 +242,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11607)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11607)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11607)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v11607)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,12 +176,14 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(max) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                int i = 0;
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12010)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +160,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -180,7 +177,8 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
-        final double f2 = function.value(upper);
+        double oldx = Double.POSITIVE_INFINITY;
+		final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12010)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12010)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12010)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12010)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12231)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12231)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12231)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12231)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v12231)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -301,7 +300,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14017)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14017)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14017)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14017)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14017)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                double p1;
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +302,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14246)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14246)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14246)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14246)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v14246)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
@@ -182,7 +182,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15215)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -180,7 +180,8 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
-        final double f2 = function.value(upper);
+        double oldx = Double.POSITIVE_INFINITY;
+		final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15215)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15215)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,19 +112,17 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +301,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15286)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15286)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15286)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15286)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15286)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,19 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                verifyInterval(min, max);
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +304,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15419)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +179,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +301,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15423)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15423)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15423)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:26 [main] [INFO]  PatchLogExporter - patch (v15423)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x0 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +183,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +306,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -180,7 +179,8 @@
                                    final UnivariateRealFunction function)
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
-        final double f2 = function.value(upper);
+        double oldx = Double.POSITIVE_INFINITY;
+		final double f2 = function.value(upper);
         return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
 
@@ -245,7 +245,7 @@
         throws FunctionEvaluationException {
 
         verifyInterval(lower, upper);
-        if (!isBracketing(lower, upper, function)) {
+        if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
                     "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +300,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15635)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x0 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +183,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +305,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15637)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15637)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15637)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v15637)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
+				double x;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +304,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,21 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,14 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +308,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16042)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16042)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16042)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16042)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16042)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x2 = max;
             return result;
         }
 
@@ -182,7 +183,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +306,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16283)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16283)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16283)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16283)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16283)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +179,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +299,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16424)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16424)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16424)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16424)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +183,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16434)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16434)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16434)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16434)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16434)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double fm;
             return result;
         }
 
@@ -181,8 +181,14 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					ret = max;
+				}
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
+				double x;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +307,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16470)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16470)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16470)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16470)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16470)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,13 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                double p1;
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +307,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +183,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16653)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16653)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16653)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16653)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16653)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x0 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +305,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16654)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16654)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16654)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16654)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16654)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -301,7 +299,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16882)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16882)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16882)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16882)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v16882)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x0 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -182,7 +183,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -259,6 +266,7 @@
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
+				this.iterationCount = 0;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -301,7 +309,8 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17453)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17453)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17453)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17453)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -301,7 +299,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17663)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17663)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17663)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17663)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,12 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double fmin;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -259,6 +262,7 @@
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
+				this.iterationCount = 0;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -301,7 +305,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17697)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17697)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17697)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17697)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17697)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                setResult(max, 0);
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +302,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17698)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17698)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17698)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17698)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17698)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -181,8 +181,17 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				{
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
                 ret = max;
+				double x;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +310,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17875)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17875)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17875)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v17875)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double fmin;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +306,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18691)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18691)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18691)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18691)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18691)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +110,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +301,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18890)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18890)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18890)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v18890)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,19 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +302,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v19494)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v19494)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v19494)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v19494)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v19494)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +179,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +304,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20029)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20029)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20029)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20029)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20029)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,20 +112,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +183,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +305,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20295)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20295)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20295)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20295)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20295)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,19 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                double fmin;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +304,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,8 +124,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -181,7 +181,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                {
+					ret = max;
+				}
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -301,7 +304,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20615)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v20615)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,8 +125,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -182,7 +183,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +304,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21012)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21012)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21012)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21012)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21012)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21225)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21225)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +248,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -301,7 +303,15 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21233)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21233)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21233)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21233)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					ret = max;
+				}
+				setResult(max, 0);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +302,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21256)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21256)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21256)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21256)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (f.value(min) == 0.0) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +128,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -182,7 +186,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +307,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21429)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21429)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21429)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21429)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +178,16 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +306,14 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21443)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21443)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21443)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21443)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                double oldx = Double.POSITIVE_INFINITY;
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +248,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -301,7 +303,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21635)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21635)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21635)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21635)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
@@ -181,8 +181,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					ret = max;
+				}
+				setResult(max, 0);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21657)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21657)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21657)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21657)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21657)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					ret = max;
+				}
+				setResult(max, 0);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +302,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21814)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21814)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21814)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21814)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,12 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +305,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21881)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21881)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21881)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v21881)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,12 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            resultComputed = true;
             return result;
         }
 
@@ -181,8 +183,14 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +309,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22040)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22040)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22040)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22040)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                double oldx = Double.POSITIVE_INFINITY;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +247,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -301,7 +302,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22060)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22060)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22060)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22060)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,8 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -181,8 +180,12 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +304,14 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22261)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22261)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22261)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22261)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22261)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +178,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double m;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22265)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22265)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22265)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:27 [main] [INFO]  PatchLogExporter - patch (v22265)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -182,7 +184,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +306,15 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22430)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +179,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +301,14 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22639)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22639)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22639)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22639)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		double x0 = min;
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +301,17 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22805)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,17 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+				this.iterationCount = 0;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +254,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -301,7 +309,9 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22830)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22830)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22830)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22830)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22830)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +129,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -182,7 +187,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +308,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22851)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22851)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22851)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v22851)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,10 +112,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		double x0 = min;
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +247,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -301,7 +302,15 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23233)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23233)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23233)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23233)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,12 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -182,7 +184,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +306,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23417)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23417)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23417)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23417)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,8 +124,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -182,7 +182,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +303,16 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23608)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -244,7 +244,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23608)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23608)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23608)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23608)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,8 +112,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +130,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double m;
             return result;
         }
 
@@ -182,7 +188,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +309,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23678)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23678)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23678)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v23678)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,14 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +130,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +187,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +307,14 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24063)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24063)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24063)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24063)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,12 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -182,7 +184,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +307,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24499)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24499)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24499)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24499)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,13 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +307,18 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24888)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24888)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24888)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v24888)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		clearResult();
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +183,15 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +310,12 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v26068)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -244,7 +242,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v26068)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v26068)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v26068)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v26068)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,21 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,17 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+                double x2 = max;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +311,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27255)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -244,7 +243,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27255)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27255)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27255)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27255)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,15 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +131,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +188,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +310,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27294)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27294)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27294)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27294)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27294)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,8 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		verifySequence(min, initial, max);
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,8 +113,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +131,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +188,12 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double x2 = max;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +312,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27851)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27851)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27851)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27851)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +183,16 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +311,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27875)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27875)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27875)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27875)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v27875)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,21 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +183,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +308,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28241)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28241)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28241)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28241)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28241)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,14 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +308,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28491)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28491)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28491)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28491)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28491)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,25 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +186,16 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +314,11 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28804)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28804)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28804)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28804)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v28804)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,12 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		clearResult();
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            iterationCount += this.iterationCount;
             return result;
         }
 
@@ -182,7 +186,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				this.iterationCount = 0;
+                double x;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +309,14 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v29289)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v29289)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v29289)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v29289)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v29289)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,12 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +185,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -230,6 +237,7 @@
         double oldDelta = delta;
 
         int i = 0;
+		x0 = x1;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -301,7 +309,15 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v32621)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v32621)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v32621)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v32621)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v32621)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,10 +112,14 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +129,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -301,7 +305,13 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v33895)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v33895)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v33895)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 17:54:28 [main] [INFO]  PatchLogExporter - patch (v33895)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +184,14 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double x;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -301,7 +310,16 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-08-06 17:54:28 [main] [INFO]  KGenProgMain - Summary
Reached generation = 171
Generated variants = 33895
Syntax valid variants = 28988
Build succeeded variants = 16946
Time elapsed = 2 hours 13 minutes 7 seconds
Exit status = SUCCESS
