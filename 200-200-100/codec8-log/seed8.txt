2023-11-20 16:53:48 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-20 16:53:48 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-20 16:53:48 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-20 16:53:48 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/kgenprog-8.toml (set by command line)
rootDir = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8 (set in config file)
productPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/java] (set in config file)
testPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64InputStreamTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 8 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /home/fse-pluto/Desktop/research
version = 1.8.2
================================================================
2023-11-20 16:53:51 [main] [INFO]  KGenProgMain - initial failed tests (1/12)
org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105: null

2023-11-20 16:53:51 [main] [INFO]  KGenProgMain - GA started
2023-11-20 16:53:51 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-20 17:10:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 45 seconds
Variants: generated 200, build-succeeded 26, build-failed 98, syntax-invalid 15, redundant 61
Fitness: max 1(1), min 0.5(1), ave 0.83
Test execution time: sum 1001639 ms, max 900032 ms, min 25 ms
----------------------------------------------------------------

2023-11-20 17:10:37 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-20 17:11:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 44 seconds
Variants: generated 200, build-succeeded 45, build-failed 112, syntax-invalid 14, redundant 29
Fitness: max 1(2), min 0(1), ave 0.833
Test execution time: sum 55466 ms, max 52784 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 17:11:36 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-20 17:23:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 54 seconds
Variants: generated 400, build-succeeded 116, build-failed 111, syntax-invalid 71, redundant 102
Fitness: max 1(1), min 0.5(8), ave 0.794
Test execution time: sum 723772 ms, max 115072 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 17:23:46 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-20 17:47:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 8 seconds
Variants: generated 400, build-succeeded 117, build-failed 111, syntax-invalid 61, redundant 111
Fitness: max 0.917(62), min 0.333(1), ave 0.853
Test execution time: sum 1446481 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 17:47:59 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-20 18:21:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 22 seconds
Variants: generated 400, build-succeeded 108, build-failed 113, syntax-invalid 72, redundant 107
Fitness: max 1(3), min 0.333(1), ave 0.88
Test execution time: sum 1987843 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 18:21:14 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-20 18:21:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 37 seconds
Variants: generated 400, build-succeeded 107, build-failed 105, syntax-invalid 78, redundant 110
Fitness: max 1(2), min 0.583(1), ave 0.894
Test execution time: sum 8142 ms, max 131 ms, min 20 ms
----------------------------------------------------------------

2023-11-20 18:21:29 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-20 19:12:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 53 seconds
Variants: generated 400, build-succeeded 122, build-failed 104, syntax-invalid 71, redundant 103
Fitness: max 1(2), min 0(1), ave 0.877
Test execution time: sum 3068912 ms, max 1440022 ms, min 20 ms
----------------------------------------------------------------

2023-11-20 19:12:45 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-20 20:13:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 10 seconds
Variants: generated 400, build-succeeded 129, build-failed 98, syntax-invalid 76, redundant 97
Fitness: max 1(1), min 0.333(4), ave 0.885
Test execution time: sum 3609878 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 20:13:02 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-20 21:13:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 28 seconds
Variants: generated 400, build-succeeded 128, build-failed 112, syntax-invalid 60, redundant 100
Fitness: max 1(1), min 0.333(5), ave 0.867
Test execution time: sum 3609695 ms, max 720022 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 21:13:20 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-20 22:07:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 13 minutes 47 seconds
Variants: generated 400, build-succeeded 147, build-failed 108, syntax-invalid 84, redundant 61
Fitness: max 1(1), min 0.333(2), ave 0.893
Test execution time: sum 3251373 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 22:07:39 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-20 22:55:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 2 minutes 6 seconds
Variants: generated 400, build-succeeded 138, build-failed 126, syntax-invalid 96, redundant 40
Fitness: max 0.917(130), min 0.333(4), ave 0.895
Test execution time: sum 2890654 ms, max 720022 ms, min 22 ms
----------------------------------------------------------------

2023-11-20 22:55:58 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-20 23:20:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 26 minutes 27 seconds
Variants: generated 400, build-succeeded 145, build-failed 114, syntax-invalid 106, redundant 35
Fitness: max 1(1), min 0.333(2), ave 0.903
Test execution time: sum 1451471 ms, max 720022 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 23:20:18 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-20 23:20:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 26 minutes 47 seconds
Variants: generated 400, build-succeeded 146, build-failed 119, syntax-invalid 87, redundant 48
Fitness: max 0.917(133), min 0.5(5), ave 0.893
Test execution time: sum 11416 ms, max 148 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 23:20:39 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-20 23:36:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 42 minutes 9 seconds
Variants: generated 400, build-succeeded 156, build-failed 118, syntax-invalid 86, redundant 40
Fitness: max 1(1), min 0.5(2), ave 0.908
Test execution time: sum 912671 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 23:36:01 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-20 23:36:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 42 minutes 33 seconds
Variants: generated 400, build-succeeded 177, build-failed 115, syntax-invalid 70, redundant 38
Fitness: max 1(1), min 0.5(5), ave 0.895
Test execution time: sum 14511 ms, max 404 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 23:36:25 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-20 23:36:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 42 minutes 58 seconds
Variants: generated 400, build-succeeded 188, build-failed 103, syntax-invalid 61, redundant 48
Fitness: max 1(1), min 0.5(7), ave 0.895
Test execution time: sum 15186 ms, max 158 ms, min 21 ms
----------------------------------------------------------------

2023-11-20 23:36:50 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-21 00:01:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 7 minutes 24 seconds
Variants: generated 400, build-succeeded 196, build-failed 112, syntax-invalid 60, redundant 32
Fitness: max 0.917(183), min 0.333(2), ave 0.896
Test execution time: sum 1456094 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:01:16 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-21 00:01:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 7 minutes 48 seconds
Variants: generated 400, build-succeeded 171, build-failed 126, syntax-invalid 69, redundant 34
Fitness: max 0.917(159), min 0.333(3), ave 0.893
Test execution time: sum 14099 ms, max 152 ms, min 20 ms
----------------------------------------------------------------

2023-11-21 00:01:40 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-21 00:26:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 32 minutes 15 seconds
Variants: generated 400, build-succeeded 188, build-failed 119, syntax-invalid 60, redundant 33
Fitness: max 1(1), min 0.333(4), ave 0.895
Test execution time: sum 1455786 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:26:07 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-21 00:26:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 32 minutes 42 seconds
Variants: generated 400, build-succeeded 190, build-failed 112, syntax-invalid 74, redundant 24
Fitness: max 1(2), min 0.583(1), ave 0.906
Test execution time: sum 15996 ms, max 161 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:26:34 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-21 00:27:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 33 minutes 10 seconds
Variants: generated 400, build-succeeded 191, build-failed 118, syntax-invalid 68, redundant 23
Fitness: max 1(1), min 0.667(2), ave 0.912
Test execution time: sum 16887 ms, max 162 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 00:27:02 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-21 00:27:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 33 minutes 37 seconds
Variants: generated 400, build-succeeded 194, build-failed 113, syntax-invalid 72, redundant 21
Fitness: max 0.917(180), min 0.5(3), ave 0.9
Test execution time: sum 16378 ms, max 153 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:27:29 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-21 00:42:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 49 minutes 4 seconds
Variants: generated 400, build-succeeded 178, build-failed 114, syntax-invalid 78, redundant 30
Fitness: max 0.917(171), min 0.333(1), ave 0.906
Test execution time: sum 915200 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:42:55 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-21 00:43:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 49 minutes 30 seconds
Variants: generated 400, build-succeeded 171, build-failed 123, syntax-invalid 84, redundant 22
Fitness: max 0.917(163), min 0(1), ave 0.903
Test execution time: sum 14688 ms, max 170 ms, min 20 ms
----------------------------------------------------------------

2023-11-21 00:43:22 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-21 00:43:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 49 minutes 57 seconds
Variants: generated 400, build-succeeded 184, build-failed 111, syntax-invalid 88, redundant 17
Fitness: max 0.917(172), min 0.333(2), ave 0.896
Test execution time: sum 15575 ms, max 153 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:43:49 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-21 00:44:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 50 minutes 23 seconds
Variants: generated 400, build-succeeded 168, build-failed 122, syntax-invalid 88, redundant 22
Fitness: max 0.917(159), min 0.333(3), ave 0.895
Test execution time: sum 14534 ms, max 163 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:44:15 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-21 00:44:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 50 minutes 52 seconds
Variants: generated 400, build-succeeded 193, build-failed 127, syntax-invalid 70, redundant 10
Fitness: max 0.917(173), min 0.333(3), ave 0.886
Test execution time: sum 15813 ms, max 160 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 00:44:43 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-21 01:33:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 15 seconds
Variants: generated 400, build-succeeded 192, build-failed 112, syntax-invalid 76, redundant 20
Fitness: max 1(1), min 0.333(1), ave 0.895
Test execution time: sum 2891468 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 01:33:07 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-21 01:33:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 45 seconds
Variants: generated 400, build-succeeded 196, build-failed 113, syntax-invalid 66, redundant 25
Fitness: max 0.917(187), min 0.333(2), ave 0.902
Test execution time: sum 17014 ms, max 186 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 01:33:37 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-21 01:34:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 40 minutes 15 seconds
Variants: generated 400, build-succeeded 197, build-failed 119, syntax-invalid 68, redundant 16
Fitness: max 0.917(188), min 0.333(2), ave 0.903
Test execution time: sum 17531 ms, max 163 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 01:34:07 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-21 01:51:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 26 seconds
Variants: generated 400, build-succeeded 215, build-failed 107, syntax-invalid 63, redundant 15
Fitness: max 0.917(192), min 0.333(5), ave 0.881
Test execution time: sum 1016905 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 01:51:18 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-21 02:24:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 30 minutes 57 seconds
Variants: generated 400, build-succeeded 213, build-failed 112, syntax-invalid 53, redundant 22
Fitness: max 1(2), min 0.333(4), ave 0.896
Test execution time: sum 1997977 ms, max 1080022 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 02:24:49 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-21 02:37:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 43 minutes 28 seconds
Variants: generated 400, build-succeeded 203, build-failed 127, syntax-invalid 52, redundant 18
Fitness: max 0.917(184), min 0.333(5), ave 0.881
Test execution time: sum 736566 ms, max 720022 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 02:37:20 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-21 03:01:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 7 minutes 59 seconds
Variants: generated 400, build-succeeded 214, build-failed 95, syntax-invalid 69, redundant 22
Fitness: max 1(1), min 0.333(4), ave 0.882
Test execution time: sum 1457927 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 03:01:51 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-21 03:02:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 8 minutes 32 seconds
Variants: generated 400, build-succeeded 215, build-failed 115, syntax-invalid 56, redundant 14
Fitness: max 1(2), min 0.333(3), ave 0.891
Test execution time: sum 18170 ms, max 163 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 03:02:23 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-21 03:02:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 9 minutes 5 seconds
Variants: generated 400, build-succeeded 221, build-failed 114, syntax-invalid 56, redundant 9
Fitness: max 1(3), min 0.5(2), ave 0.898
Test execution time: sum 18797 ms, max 211 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 03:02:57 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-21 03:03:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 9 minutes 37 seconds
Variants: generated 400, build-succeeded 203, build-failed 118, syntax-invalid 67, redundant 12
Fitness: max 1(1), min 0.333(1), ave 0.902
Test execution time: sum 17685 ms, max 170 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 03:03:28 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-21 03:04:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 10 minutes 9 seconds
Variants: generated 400, build-succeeded 205, build-failed 103, syntax-invalid 75, redundant 17
Fitness: max 0.917(192), min 0.5(3), ave 0.902
Test execution time: sum 17856 ms, max 173 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 03:04:00 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-21 03:04:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 10 minutes 39 seconds
Variants: generated 400, build-succeeded 187, build-failed 110, syntax-invalid 86, redundant 17
Fitness: max 0.917(170), min 0.5(2), ave 0.895
Test execution time: sum 16156 ms, max 155 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 03:04:31 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-21 03:05:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 11 minutes 11 seconds
Variants: generated 400, build-succeeded 196, build-failed 108, syntax-invalid 75, redundant 21
Fitness: max 0.917(180), min 0.333(2), ave 0.889
Test execution time: sum 17049 ms, max 180 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 03:05:02 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-21 03:05:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 11 minutes 42 seconds
Variants: generated 400, build-succeeded 197, build-failed 126, syntax-invalid 63, redundant 14
Fitness: max 0.917(180), min 0.333(3), ave 0.888
Test execution time: sum 16887 ms, max 157 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 03:05:34 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-21 03:30:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 36 minutes 16 seconds
Variants: generated 400, build-succeeded 215, build-failed 112, syntax-invalid 60, redundant 13
Fitness: max 1(1), min 0.333(3), ave 0.891
Test execution time: sum 1458646 ms, max 1440021 ms, min 20 ms
----------------------------------------------------------------

2023-11-21 03:30:08 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-21 03:30:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 36 minutes 49 seconds
Variants: generated 400, build-succeeded 210, build-failed 100, syntax-invalid 67, redundant 23
Fitness: max 0.917(195), min 0.333(4), ave 0.89
Test execution time: sum 18155 ms, max 163 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 03:30:41 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-21 03:31:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 37 minutes 21 seconds
Variants: generated 400, build-succeeded 202, build-failed 115, syntax-invalid 65, redundant 18
Fitness: max 1(1), min 0.333(1), ave 0.873
Test execution time: sum 16445 ms, max 198 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 03:31:13 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-21 03:55:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 1 minutes 53 seconds
Variants: generated 400, build-succeeded 195, build-failed 110, syntax-invalid 76, redundant 19
Fitness: max 0.917(179), min 0.333(6), ave 0.881
Test execution time: sum 1456738 ms, max 1440021 ms, min 20 ms
----------------------------------------------------------------

2023-11-21 03:55:45 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-21 03:56:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 2 minutes 25 seconds
Variants: generated 400, build-succeeded 195, build-failed 116, syntax-invalid 73, redundant 16
Fitness: max 0.917(181), min 0.5(9), ave 0.893
Test execution time: sum 16330 ms, max 149 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 03:56:17 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-21 04:20:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 26 minutes 59 seconds
Variants: generated 400, build-succeeded 216, build-failed 109, syntax-invalid 63, redundant 12
Fitness: max 0.917(194), min 0.333(4), ave 0.883
Test execution time: sum 1457791 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 04:20:51 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-21 04:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 27 minutes 30 seconds
Variants: generated 400, build-succeeded 192, build-failed 109, syntax-invalid 83, redundant 16
Fitness: max 1(4), min 0.5(7), ave 0.893
Test execution time: sum 14935 ms, max 153 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 04:21:21 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-21 04:21:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 28 minutes 3 seconds
Variants: generated 400, build-succeeded 208, build-failed 98, syntax-invalid 77, redundant 17
Fitness: max 1(1), min 0.333(1), ave 0.907
Test execution time: sum 17218 ms, max 149 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 04:21:54 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-21 04:22:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 28 minutes 35 seconds
Variants: generated 400, build-succeeded 196, build-failed 116, syntax-invalid 73, redundant 15
Fitness: max 0.917(178), min 0.5(4), ave 0.892
Test execution time: sum 15699 ms, max 153 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 04:22:26 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-21 04:22:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 29 minutes 7 seconds
Variants: generated 400, build-succeeded 214, build-failed 97, syntax-invalid 72, redundant 17
Fitness: max 0.917(189), min 0.5(2), ave 0.887
Test execution time: sum 16341 ms, max 139 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 04:22:59 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-21 04:38:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 44 minutes 31 seconds
Variants: generated 400, build-succeeded 181, build-failed 119, syntax-invalid 84, redundant 16
Fitness: max 1(3), min 0.333(2), ave 0.886
Test execution time: sum 907641 ms, max 893715 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 04:38:23 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-21 04:38:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 45 minutes 3 seconds
Variants: generated 400, build-succeeded 196, build-failed 115, syntax-invalid 73, redundant 16
Fitness: max 1(1), min 0.5(9), ave 0.886
Test execution time: sum 15011 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 04:38:55 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-21 05:24:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 30 minutes 24 seconds
Variants: generated 400, build-succeeded 203, build-failed 118, syntax-invalid 68, redundant 11
Fitness: max 1(3), min 0.333(4), ave 0.872
Test execution time: sum 2704204 ms, max 897416 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:24:16 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-21 05:24:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 30 minutes 56 seconds
Variants: generated 400, build-succeeded 204, build-failed 98, syntax-invalid 75, redundant 23
Fitness: max 1(2), min 0.333(1), ave 0.88
Test execution time: sum 14686 ms, max 148 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 05:24:48 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-21 05:25:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 31 minutes 28 seconds
Variants: generated 400, build-succeeded 200, build-failed 104, syntax-invalid 77, redundant 19
Fitness: max 0.917(173), min 0.333(3), ave 0.868
Test execution time: sum 14759 ms, max 153 ms, min 20 ms
----------------------------------------------------------------

2023-11-21 05:25:20 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-21 05:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 32 minutes 2 seconds
Variants: generated 400, build-succeeded 206, build-failed 113, syntax-invalid 65, redundant 16
Fitness: max 1(1), min 0.333(1), ave 0.883
Test execution time: sum 15218 ms, max 151 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:25:54 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-21 05:26:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 32 minutes 34 seconds
Variants: generated 400, build-succeeded 196, build-failed 116, syntax-invalid 74, redundant 14
Fitness: max 1(3), min 0.5(6), ave 0.886
Test execution time: sum 14764 ms, max 154 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:26:26 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-21 05:26:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 33 minutes 7 seconds
Variants: generated 400, build-succeeded 191, build-failed 115, syntax-invalid 81, redundant 13
Fitness: max 1(1), min 0.5(1), ave 0.895
Test execution time: sum 14656 ms, max 155 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:26:58 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-21 05:27:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 33 minutes 41 seconds
Variants: generated 400, build-succeeded 191, build-failed 117, syntax-invalid 79, redundant 13
Fitness: max 0.917(182), min 0.5(3), ave 0.903
Test execution time: sum 15754 ms, max 164 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:27:32 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-21 05:28:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 34 minutes 13 seconds
Variants: generated 400, build-succeeded 185, build-failed 118, syntax-invalid 86, redundant 11
Fitness: max 1(2), min 0.5(2), ave 0.91
Test execution time: sum 14939 ms, max 132 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:28:05 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-21 05:28:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 34 minutes 48 seconds
Variants: generated 400, build-succeeded 203, build-failed 120, syntax-invalid 66, redundant 11
Fitness: max 0.917(193), min 0.5(2), ave 0.903
Test execution time: sum 16467 ms, max 198 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:28:40 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-21 05:29:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 35 minutes 24 seconds
Variants: generated 400, build-succeeded 207, build-failed 119, syntax-invalid 62, redundant 12
Fitness: max 0.917(197), min 0.333(1), ave 0.9
Test execution time: sum 16779 ms, max 155 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:29:16 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-21 05:29:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 35 minutes 59 seconds
Variants: generated 400, build-succeeded 203, build-failed 108, syntax-invalid 76, redundant 13
Fitness: max 1(1), min 0.5(3), ave 0.906
Test execution time: sum 16392 ms, max 158 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 05:29:51 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-21 05:30:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 36 minutes 36 seconds
Variants: generated 400, build-succeeded 213, build-failed 106, syntax-invalid 61, redundant 20
Fitness: max 0.917(202), min 0.5(4), ave 0.901
Test execution time: sum 17475 ms, max 155 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:30:28 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-21 05:31:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 37 minutes 14 seconds
Variants: generated 400, build-succeeded 217, build-failed 114, syntax-invalid 55, redundant 14
Fitness: max 0.917(198), min 0.5(6), ave 0.891
Test execution time: sum 17088 ms, max 587 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:31:05 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-21 05:31:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 37 minutes 51 seconds
Variants: generated 400, build-succeeded 215, build-failed 98, syntax-invalid 55, redundant 32
Fitness: max 0.917(209), min 0.333(2), ave 0.904
Test execution time: sum 17476 ms, max 178 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 05:31:43 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-21 06:05:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 11 minutes 23 seconds
Variants: generated 400, build-succeeded 215, build-failed 104, syntax-invalid 60, redundant 21
Fitness: max 0.917(202), min 0.333(2), ave 0.898
Test execution time: sum 1991459 ms, max 904844 ms, min 21 ms
----------------------------------------------------------------

2023-11-21 06:05:15 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-21 06:05:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 11 minutes 59 seconds
Variants: generated 400, build-succeeded 205, build-failed 113, syntax-invalid 70, redundant 12
Fitness: max 1(2), min 0.5(5), ave 0.898
Test execution time: sum 16131 ms, max 163 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:05:51 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-21 06:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 12 minutes 36 seconds
Variants: generated 400, build-succeeded 208, build-failed 112, syntax-invalid 60, redundant 20
Fitness: max 0.917(196), min 0.5(5), ave 0.898
Test execution time: sum 16420 ms, max 159 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:06:28 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-21 06:31:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 14 seconds
Variants: generated 400, build-succeeded 216, build-failed 112, syntax-invalid 59, redundant 13
Fitness: max 1(1), min 0.333(1), ave 0.891
Test execution time: sum 1456596 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:31:06 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-21 06:31:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 52 seconds
Variants: generated 400, build-succeeded 215, build-failed 110, syntax-invalid 58, redundant 17
Fitness: max 0.917(204), min 0.5(5), ave 0.901
Test execution time: sum 17349 ms, max 182 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:31:44 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-21 06:32:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 38 minutes 29 seconds
Variants: generated 400, build-succeeded 198, build-failed 118, syntax-invalid 72, redundant 12
Fitness: max 1(2), min 0.5(5), ave 0.897
Test execution time: sum 15824 ms, max 168 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:32:21 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-21 06:32:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 39 minutes 6 seconds
Variants: generated 400, build-succeeded 205, build-failed 116, syntax-invalid 64, redundant 15
Fitness: max 1(1), min 0.5(2), ave 0.9
Test execution time: sum 16554 ms, max 146 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 06:32:58 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-21 06:33:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 39 minutes 44 seconds
Variants: generated 400, build-succeeded 216, build-failed 110, syntax-invalid 61, redundant 13
Fitness: max 0.917(202), min 0.333(4), ave 0.89
Test execution time: sum 16909 ms, max 165 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:33:36 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-21 06:58:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 4 minutes 23 seconds
Variants: generated 400, build-succeeded 214, build-failed 106, syntax-invalid 67, redundant 13
Fitness: max 0.917(201), min 0.333(5), ave 0.893
Test execution time: sum 1456935 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:58:14 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-21 06:58:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 5 minutes 1 seconds
Variants: generated 400, build-succeeded 216, build-failed 101, syntax-invalid 67, redundant 16
Fitness: max 1(2), min 0.333(5), ave 0.889
Test execution time: sum 16975 ms, max 150 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:58:53 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-21 06:59:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 5 minutes 39 seconds
Variants: generated 400, build-succeeded 200, build-failed 114, syntax-invalid 69, redundant 17
Fitness: max 1(4), min 0.333(5), ave 0.883
Test execution time: sum 15268 ms, max 147 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 06:59:30 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-21 07:00:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 6 minutes 14 seconds
Variants: generated 400, build-succeeded 173, build-failed 128, syntax-invalid 92, redundant 7
Fitness: max 1(1), min 0.5(4), ave 0.899
Test execution time: sum 14057 ms, max 165 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 07:00:06 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-21 07:00:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 6 minutes 51 seconds
Variants: generated 400, build-succeeded 193, build-failed 122, syntax-invalid 73, redundant 12
Fitness: max 1(1), min 0.333(8), ave 0.877
Test execution time: sum 14634 ms, max 154 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:00:42 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-21 07:25:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 31 minutes 29 seconds
Variants: generated 400, build-succeeded 205, build-failed 105, syntax-invalid 69, redundant 21
Fitness: max 0.917(191), min 0.333(4), ave 0.891
Test execution time: sum 1455556 ms, max 720024 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:25:20 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-21 07:37:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 44 minutes 5 seconds
Variants: generated 400, build-succeeded 193, build-failed 107, syntax-invalid 80, redundant 20
Fitness: max 1(1), min 0.333(7), ave 0.877
Test execution time: sum 734654 ms, max 720024 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:37:57 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-21 07:38:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 44 minutes 43 seconds
Variants: generated 400, build-succeeded 202, build-failed 108, syntax-invalid 71, redundant 19
Fitness: max 0.917(190), min 0.5(7), ave 0.896
Test execution time: sum 15494 ms, max 155 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 07:38:35 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-21 07:51:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 57 minutes 21 seconds
Variants: generated 400, build-succeeded 188, build-failed 123, syntax-invalid 75, redundant 14
Fitness: max 0.917(179), min 0.333(1), ave 0.901
Test execution time: sum 734643 ms, max 720024 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 07:51:12 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-21 07:51:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 58 minutes 0 seconds
Variants: generated 400, build-succeeded 214, build-failed 95, syntax-invalid 74, redundant 17
Fitness: max 0.917(201), min 0.25(1), ave 0.896
Test execution time: sum 16295 ms, max 130 ms, min 14 ms
----------------------------------------------------------------

2023-11-21 07:51:52 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-21 07:52:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 58 minutes 39 seconds
Variants: generated 400, build-succeeded 203, build-failed 109, syntax-invalid 71, redundant 17
Fitness: max 1(1), min 0.333(3), ave 0.898
Test execution time: sum 15972 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:52:30 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-21 07:53:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 59 minutes 17 seconds
Variants: generated 400, build-succeeded 197, build-failed 121, syntax-invalid 70, redundant 12
Fitness: max 1(2), min 0.333(6), ave 0.887
Test execution time: sum 15549 ms, max 166 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:53:09 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-21 07:53:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 59 minutes 57 seconds
Variants: generated 400, build-succeeded 211, build-failed 105, syntax-invalid 71, redundant 13
Fitness: max 0.917(199), min 0.333(2), ave 0.898
Test execution time: sum 16693 ms, max 159 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:53:49 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-21 07:54:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 38 seconds
Variants: generated 400, build-succeeded 213, build-failed 114, syntax-invalid 58, redundant 15
Fitness: max 0.917(196), min 0.333(1), ave 0.896
Test execution time: sum 16603 ms, max 154 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:54:30 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-21 07:55:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 1 minutes 20 seconds
Variants: generated 400, build-succeeded 210, build-failed 118, syntax-invalid 56, redundant 16
Fitness: max 1(1), min 0.333(5), ave 0.883
Test execution time: sum 17026 ms, max 168 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:55:12 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-21 07:55:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 2 minutes 0 seconds
Variants: generated 400, build-succeeded 195, build-failed 131, syntax-invalid 64, redundant 10
Fitness: max 0.917(184), min 0.5(4), ave 0.899
Test execution time: sum 15390 ms, max 154 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 07:55:51 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-21 08:20:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 26 minutes 39 seconds
Variants: generated 400, build-succeeded 202, build-failed 103, syntax-invalid 74, redundant 21
Fitness: max 1(2), min 0.333(1), ave 0.903
Test execution time: sum 1455690 ms, max 1440022 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 08:20:31 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-21 08:21:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 27 minutes 19 seconds
Variants: generated 400, build-succeeded 198, build-failed 122, syntax-invalid 67, redundant 13
Fitness: max 1(2), min 0.5(3), ave 0.904
Test execution time: sum 16172 ms, max 173 ms, min 22 ms
----------------------------------------------------------------

2023-11-21 08:21:11 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-21 08:21:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 28 minutes 1 seconds
Variants: generated 400, build-succeeded 211, build-failed 103, syntax-invalid 61, redundant 25
Fitness: max 1(1), min 0.667(2), ave 0.915
Test execution time: sum 16950 ms, max 166 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 08:21:53 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-21 08:22:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 28 minutes 44 seconds
Variants: generated 400, build-succeeded 215, build-failed 113, syntax-invalid 54, redundant 18
Fitness: max 0.917(203), min 0.5(3), ave 0.901
Test execution time: sum 16874 ms, max 153 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 08:22:35 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-21 08:23:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 29 minutes 25 seconds
Variants: generated 400, build-succeeded 202, build-failed 126, syntax-invalid 59, redundant 13
Fitness: max 0.917(191), min 0.333(1), ave 0.901
Test execution time: sum 15870 ms, max 163 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 08:23:17 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-21 08:23:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 30 minutes 6 seconds
Variants: generated 400, build-succeeded 193, build-failed 111, syntax-invalid 77, redundant 19
Fitness: max 0.917(183), min 0.5(2), ave 0.902
Test execution time: sum 15484 ms, max 145 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 08:23:57 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-21 08:24:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 30 minutes 49 seconds
Variants: generated 400, build-succeeded 212, build-failed 114, syntax-invalid 63, redundant 11
Fitness: max 0.917(201), min 0.667(11), ave 0.904
Test execution time: sum 16749 ms, max 142 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 08:24:40 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-21 08:25:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 31 minutes 29 seconds
Variants: generated 400, build-succeeded 201, build-failed 106, syntax-invalid 76, redundant 17
Fitness: max 0.917(182), min 0.5(1), ave 0.892
Test execution time: sum 15573 ms, max 153 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 08:25:21 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-21 09:10:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 17 minutes 3 seconds
Variants: generated 400, build-succeeded 202, build-failed 110, syntax-invalid 65, redundant 23
Fitness: max 1(1), min 0.333(3), ave 0.892
Test execution time: sum 2708099 ms, max 900021 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 09:10:55 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-21 09:11:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 17 minutes 43 seconds
Variants: generated 400, build-succeeded 193, build-failed 115, syntax-invalid 74, redundant 18
Fitness: max 1(1), min 0.5(2), ave 0.891
Test execution time: sum 14528 ms, max 138 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:11:35 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-21 09:12:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 18 minutes 23 seconds
Variants: generated 400, build-succeeded 182, build-failed 121, syntax-invalid 73, redundant 24
Fitness: max 0.917(169), min 0.5(3), ave 0.896
Test execution time: sum 14225 ms, max 155 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:12:15 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-21 09:12:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 19 minutes 4 seconds
Variants: generated 400, build-succeeded 194, build-failed 126, syntax-invalid 64, redundant 16
Fitness: max 1(3), min 0.333(3), ave 0.88
Test execution time: sum 14661 ms, max 158 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:12:56 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-21 09:13:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 19 minutes 45 seconds
Variants: generated 400, build-succeeded 193, build-failed 114, syntax-invalid 74, redundant 19
Fitness: max 0.917(178), min 0.333(1), ave 0.893
Test execution time: sum 14688 ms, max 160 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:13:37 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-21 09:53:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 59 minutes 29 seconds
Variants: generated 400, build-succeeded 217, build-failed 107, syntax-invalid 49, redundant 27
Fitness: max 1(2), min 0.333(1), ave 0.901
Test execution time: sum 2356738 ms, max 1440022 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:53:21 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-21 09:54:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 15 seconds
Variants: generated 400, build-succeeded 218, build-failed 110, syntax-invalid 49, redundant 23
Fitness: max 0.917(205), min 0.5(3), ave 0.9
Test execution time: sum 17411 ms, max 164 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:54:07 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-21 09:54:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 1 minutes 0 seconds
Variants: generated 400, build-succeeded 218, build-failed 115, syntax-invalid 56, redundant 11
Fitness: max 0.917(206), min 0.333(1), ave 0.899
Test execution time: sum 17378 ms, max 159 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:54:52 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-21 09:55:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 1 minutes 46 seconds
Variants: generated 400, build-succeeded 223, build-failed 107, syntax-invalid 55, redundant 15
Fitness: max 0.917(206), min 0.5(4), ave 0.895
Test execution time: sum 17442 ms, max 141 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 09:55:38 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-21 10:20:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 26 minutes 33 seconds
Variants: generated 400, build-succeeded 229, build-failed 119, syntax-invalid 42, redundant 10
Fitness: max 0.917(215), min 0.333(2), ave 0.896
Test execution time: sum 1458032 ms, max 1440022 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 10:20:25 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-21 10:21:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 27 minutes 19 seconds
Variants: generated 400, build-succeeded 217, build-failed 112, syntax-invalid 52, redundant 19
Fitness: max 0.917(207), min 0.333(2), ave 0.9
Test execution time: sum 17803 ms, max 216 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 10:21:11 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-21 10:51:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 57 minutes 56 seconds
Variants: generated 400, build-succeeded 216, build-failed 115, syntax-invalid 52, redundant 17
Fitness: max 1(1), min 0.333(3), ave 0.895
Test execution time: sum 1807707 ms, max 899144 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 10:51:48 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-21 10:52:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 58 minutes 41 seconds
Variants: generated 400, build-succeeded 208, build-failed 120, syntax-invalid 52, redundant 20
Fitness: max 1(1), min 0.5(4), ave 0.908
Test execution time: sum 16580 ms, max 155 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 10:52:33 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-21 11:08:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 14 minutes 24 seconds
Variants: generated 400, build-succeeded 226, build-failed 107, syntax-invalid 46, redundant 21
Fitness: max 0.917(219), min 0.333(1), ave 0.904
Test execution time: sum 913039 ms, max 895165 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 11:08:16 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-21 11:09:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 15 minutes 10 seconds
Variants: generated 400, build-succeeded 216, build-failed 99, syntax-invalid 65, redundant 20
Fitness: max 0.917(214), min 0.5(1), ave 0.914
Test execution time: sum 16951 ms, max 138 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:09:02 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-21 11:09:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 15 minutes 57 seconds
Variants: generated 400, build-succeeded 217, build-failed 125, syntax-invalid 45, redundant 13
Fitness: max 0.917(209), min 0.5(2), ave 0.906
Test execution time: sum 17127 ms, max 161 ms, min 23 ms
----------------------------------------------------------------

2023-11-21 11:09:49 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-21 11:10:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 16 minutes 45 seconds
Variants: generated 400, build-succeeded 220, build-failed 111, syntax-invalid 47, redundant 22
Fitness: max 0.917(217), min 0.667(2), ave 0.914
Test execution time: sum 17620 ms, max 153 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:10:37 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-21 11:11:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 17 minutes 32 seconds
Variants: generated 400, build-succeeded 216, build-failed 111, syntax-invalid 58, redundant 15
Fitness: max 1(1), min 0.5(1), ave 0.91
Test execution time: sum 17243 ms, max 156 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:11:24 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-21 11:12:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 18 minutes 17 seconds
Variants: generated 400, build-succeeded 198, build-failed 114, syntax-invalid 63, redundant 25
Fitness: max 1(2), min 0.5(2), ave 0.905
Test execution time: sum 15928 ms, max 162 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:12:09 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-21 11:12:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 19 minutes 4 seconds
Variants: generated 400, build-succeeded 217, build-failed 111, syntax-invalid 55, redundant 17
Fitness: max 0.917(206), min 0.5(3), ave 0.902
Test execution time: sum 17142 ms, max 146 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:12:56 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-21 11:13:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 19 minutes 52 seconds
Variants: generated 400, build-succeeded 209, build-failed 127, syntax-invalid 53, redundant 11
Fitness: max 0.917(205), min 0.5(1), ave 0.911
Test execution time: sum 17139 ms, max 171 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:13:44 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-21 11:14:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 20 minutes 39 seconds
Variants: generated 400, build-succeeded 218, build-failed 111, syntax-invalid 55, redundant 16
Fitness: max 1(1), min 0.5(2), ave 0.903
Test execution time: sum 17044 ms, max 158 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:14:31 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-21 11:15:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 21 minutes 28 seconds
Variants: generated 400, build-succeeded 222, build-failed 116, syntax-invalid 50, redundant 12
Fitness: max 0.917(216), min 0.667(6), ave 0.91
Test execution time: sum 17963 ms, max 160 ms, min 25 ms
----------------------------------------------------------------

2023-11-21 11:15:20 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-21 11:16:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 22 minutes 15 seconds
Variants: generated 400, build-succeeded 201, build-failed 123, syntax-invalid 63, redundant 13
Fitness: max 0.917(195), min 0.5(1), ave 0.909
Test execution time: sum 16690 ms, max 160 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 11:16:07 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-21 11:16:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 23 minutes 1 seconds
Variants: generated 400, build-succeeded 190, build-failed 132, syntax-invalid 64, redundant 14
Fitness: max 0.917(186), min 0.667(4), ave 0.911
Test execution time: sum 15534 ms, max 150 ms, min 25 ms
----------------------------------------------------------------

2023-11-21 11:16:53 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-21 11:41:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 47 minutes 48 seconds
Variants: generated 400, build-succeeded 207, build-failed 117, syntax-invalid 62, redundant 14
Fitness: max 0.917(204), min 0.333(2), ave 0.91
Test execution time: sum 1456317 ms, max 720027 ms, min 25 ms
----------------------------------------------------------------

2023-11-21 11:41:40 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-21 11:54:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 36 seconds
Variants: generated 400, build-succeeded 199, build-failed 130, syntax-invalid 57, redundant 14
Fitness: max 0.917(193), min 0.333(1), ave 0.907
Test execution time: sum 735994 ms, max 720026 ms, min 25 ms
----------------------------------------------------------------

2023-11-21 11:54:27 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-21 12:19:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 25 minutes 24 seconds
Variants: generated 400, build-succeeded 218, build-failed 107, syntax-invalid 55, redundant 20
Fitness: max 0.917(210), min 0.333(2), ave 0.903
Test execution time: sum 1457356 ms, max 720026 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 12:19:16 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-21 12:32:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 38 minutes 12 seconds
Variants: generated 400, build-succeeded 211, build-failed 113, syntax-invalid 57, redundant 19
Fitness: max 0.917(197), min 0.333(4), ave 0.89
Test execution time: sum 736642 ms, max 720025 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 12:32:04 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-21 12:56:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 3 minutes 0 seconds
Variants: generated 400, build-succeeded 211, build-failed 110, syntax-invalid 67, redundant 12
Fitness: max 0.917(204), min 0.333(3), ave 0.903
Test execution time: sum 1456718 ms, max 720026 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 12:56:52 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-21 12:57:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 3 minutes 51 seconds
Variants: generated 400, build-succeeded 233, build-failed 102, syntax-invalid 51, redundant 14
Fitness: max 1(1), min 0.333(3), ave 0.897
Test execution time: sum 18790 ms, max 164 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 12:57:43 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-21 13:10:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 16 minutes 38 seconds
Variants: generated 400, build-succeeded 202, build-failed 119, syntax-invalid 67, redundant 12
Fitness: max 1(1), min 0.333(2), ave 0.894
Test execution time: sum 735926 ms, max 720026 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 13:10:30 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-21 13:11:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 17 minutes 27 seconds
Variants: generated 400, build-succeeded 218, build-failed 97, syntax-invalid 64, redundant 21
Fitness: max 0.917(203), min 0.333(3), ave 0.892
Test execution time: sum 17781 ms, max 162 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 13:11:19 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-21 13:12:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 18 minutes 17 seconds
Variants: generated 400, build-succeeded 210, build-failed 111, syntax-invalid 63, redundant 16
Fitness: max 0.917(197), min 0.333(1), ave 0.899
Test execution time: sum 17067 ms, max 154 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 13:12:08 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-21 13:12:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 19 minutes 6 seconds
Variants: generated 400, build-succeeded 212, build-failed 113, syntax-invalid 53, redundant 22
Fitness: max 0.917(197), min 0.333(2), ave 0.895
Test execution time: sum 17096 ms, max 156 ms, min 25 ms
----------------------------------------------------------------

2023-11-21 13:12:58 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-21 13:13:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 19 minutes 58 seconds
Variants: generated 400, build-succeeded 222, build-failed 108, syntax-invalid 54, redundant 16
Fitness: max 1(2), min 0.5(3), ave 0.905
Test execution time: sum 18134 ms, max 162 ms, min 25 ms
----------------------------------------------------------------

2023-11-21 13:13:49 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-21 13:14:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 20 minutes 47 seconds
Variants: generated 400, build-succeeded 204, build-failed 110, syntax-invalid 71, redundant 15
Fitness: max 0.917(202), min 0.333(1), ave 0.913
Test execution time: sum 17562 ms, max 164 ms, min 26 ms
----------------------------------------------------------------

2023-11-21 13:14:39 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-21 13:15:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 21 minutes 39 seconds
Variants: generated 400, build-succeeded 217, build-failed 105, syntax-invalid 62, redundant 16
Fitness: max 1(2), min 0.333(1), ave 0.909
Test execution time: sum 18484 ms, max 148 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 13:15:30 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-21 13:16:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 22 minutes 25 seconds
Variants: generated 349, build-succeeded 189, build-failed 105, syntax-invalid 38, redundant 17
Fitness: max 1(1), min 0.5(4), ave 0.904
Test execution time: sum 15652 ms, max 166 ms, min 24 ms
----------------------------------------------------------------

2023-11-21 13:16:17 [main] [INFO]  KGenProgMain - GA stopped
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v258)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v258)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v258)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v258)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -387,7 +387,7 @@
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
-            buffer = b;
+            buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
         }
     }
 
@@ -418,7 +418,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v258)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v258)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v258)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v325)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v325)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v325)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v325)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -387,7 +387,6 @@
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
-            buffer = b;
         }
     }
 
@@ -418,7 +417,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v325)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v325)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v325)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v579)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v579)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v579)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v579)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v579)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v579)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v579)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,13 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1276)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1276)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1276)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1276)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			reset();
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1276)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1276)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1276)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1306)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1306)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1306)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1306)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1306)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1306)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1306)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1694)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1694)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1694)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1694)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			resizeBuffer();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -417,7 +422,7 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
+        if (eof && modulus != 0) {
             buffer = out;
             pos = outPos;
             readPos = outPos;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1694)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1694)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1694)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1880)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1880)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1880)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1880)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1880)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1880)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v1880)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2196)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2196)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2196)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2196)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            modulus = (++modulus) % 3;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2196)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2196)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2196)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            modulus = (++modulus) % 3;
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2704)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2704)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2704)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2704)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2704)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2704)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2704)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2848)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2848)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2848)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2848)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				eof = true;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2848)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2848)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v2848)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v3212)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v3212)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v3212)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v3212)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			byte[] buf = new byte[pos - readPos];
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v3212)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v3212)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v3212)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				pos = 0;
+				readPos = 0;
+			}
+			modulus = (++modulus) % 3;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4025)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4809)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4809)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4809)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4809)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer = null;
+			currentLinePos = 0;
+			readPos = 0;
+			eof = true;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4809)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4809)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v4809)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5365)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5365)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5365)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5365)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            byte[] buf = new byte[pos - readPos];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +345,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -417,11 +419,8 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
-            buffer = out;
-            pos = outPos;
-            readPos = outPos;
-        }
+        if (out != null && out.length == outAvail)
+			buffer = null;
     }
     /**
      * <p>
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5365)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5365)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5365)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,17 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -418,7 +428,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v5771)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +426,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v6890)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7375)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7375)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7375)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7375)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+			lineSeparator = CHUNK_SEPARATOR;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +420,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7375)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7375)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7375)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7501)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7501)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7501)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7501)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			modulus = (++modulus) % 3;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7501)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7501)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7501)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            eof = true;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -382,7 +390,8 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            int bytesCopied = 0;
+			pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -418,7 +427,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v7711)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v10570)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v10570)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v10570)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v10570)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			currentLinePos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -384,6 +388,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v10570)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v10570)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v10570)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12116)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12116)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12116)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12116)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +357,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -384,6 +398,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12116)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12116)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12116)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -384,6 +386,8 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -418,7 +422,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v12199)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +359,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13312)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13312)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13312)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13312)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -384,6 +396,8 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13312)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13312)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13312)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13493)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13493)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13493)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13493)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,28 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			resizeBuffer();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +364,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13493)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13493)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13493)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13619)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13619)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13619)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13619)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			pos = 0;
+			readPos = 0;
+			pos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +425,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13619)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13619)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13619)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,22 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+				reset();
+			}
+			lineLength = 0;  // disable chunk-separating
+            eof = true;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +358,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -384,6 +399,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13689)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13974)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13974)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13974)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13974)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,30 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1024,7 +1046,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13974)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13974)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v13974)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v14066)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v14066)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v14066)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v14066)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+				reset();
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +356,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -384,6 +397,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -1026,7 +1040,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v14066)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v14066)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v14066)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16170)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16170)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16170)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16170)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			resizeBuffer();
+			resizeBuffer();
+			{
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +356,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16170)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16170)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16170)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16987)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16987)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16987)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16987)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +351,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -384,6 +392,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16987)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16987)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v16987)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18415)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18415)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18415)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18415)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			currentLinePos = 0;
+			pos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -344,7 +353,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +428,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18415)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18415)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18415)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18490)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18490)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18490)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18490)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +354,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +429,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18490)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18490)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18490)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18613)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18613)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18613)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18613)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,26 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18613)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18613)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18613)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18723)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18723)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18723)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18723)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos = 0;
+			{
+				eof = true;
+				readPos = 0;
+			}
+			readPos = 0;
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -418,7 +436,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18723)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18723)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v18723)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v19081)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v19081)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v19081)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v19081)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,28 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			{
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v19081)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v19081)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v19081)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20141)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20141)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20141)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20141)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +354,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +429,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20141)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20141)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20141)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20281)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20281)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20281)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20281)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +357,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +432,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20281)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20281)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20281)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20356)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20356)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20356)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20356)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -384,6 +397,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20356)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20356)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20356)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20764)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20764)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20764)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20764)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +431,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20764)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20764)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20764)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20804)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20804)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20804)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20804)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			modulus = (++modulus) % 3;
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20804)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20804)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20804)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20853)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20853)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20853)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20853)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			modulus = (++modulus) % 3;
+			pos = 0;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+			readPos = 0;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +433,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20853)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20853)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20853)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			currentLinePos = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +355,9 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v20857)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21355)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21355)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21355)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21355)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,26 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			pos = 0;
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +436,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21355)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21355)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21355)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21413)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21413)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21413)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21413)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,27 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            modulus = (++modulus) % 3;
+			pos = 0;
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +437,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21413)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21413)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v21413)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22150)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22150)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22150)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22150)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,39 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			{
+				lineLength = 0;
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +449,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22150)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22150)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22150)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22476)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22476)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22476)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22476)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            modulus = (++modulus) % 3;
+			{
+				int readLen = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +356,9 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -384,6 +398,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -418,7 +433,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -484,6 +500,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22476)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22476)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22476)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22556)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22556)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22556)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22556)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,26 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			readPos = 0;
+			eof = true;
+			resizeBuffer();
+			modulus = (++modulus) % 3;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +362,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22556)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22556)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22556)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22598)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22598)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22598)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22598)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			readPos = 0;
+			modulus = (++modulus) % 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +359,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +434,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22598)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22598)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v22598)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23022)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23022)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23022)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23022)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +428,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23022)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23022)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23022)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23800)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23800)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23800)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23800)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,31 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			readPos = 0;
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +367,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23800)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23800)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23800)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23896)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23896)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23896)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23896)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,35 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			modulus = (++modulus) % 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -381,7 +409,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -418,7 +447,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23896)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23896)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v23896)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v24958)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v24958)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v24958)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v24958)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,20 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            modulus = (++modulus) % 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+			}
+			currentLinePos = 0;
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            eof = true;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -383,7 +395,10 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			readPos = 0;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v24958)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v24958)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v24958)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26858)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26858)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26858)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26858)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,44 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				int bytesCopied = 0;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +454,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26858)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26858)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26858)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26963)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26963)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26963)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26963)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,33 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +369,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +444,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26963)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26963)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v26963)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v27760)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v27760)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v27760)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v27760)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,28 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +364,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -381,7 +402,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -417,8 +439,10 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
-            buffer = out;
+        if (eof && modulus != 0) {
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v27760)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v27760)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v27760)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28414)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28414)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28414)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28414)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,21 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			{
+				modulus = (++modulus) % 4;
+				pos = 0;
+				readPos = 0;
+				eof = true;
+			}
+			readPos = 0;
+			readPos = 0;
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +357,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +432,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28414)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28414)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28414)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,31 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			modulus = (++modulus) % 3;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -381,7 +404,13 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
             pos = 0;
             readPos = 0;
         } else {
@@ -418,7 +447,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28474)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28978)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28978)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28978)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28978)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,29 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            modulus = (++modulus) % 3;
+			{
+				eof = true;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +439,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28978)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28978)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v28978)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30054)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30054)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30054)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30054)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,29 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			readPos = 0;
+			eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			currentLinePos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +439,12 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30054)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30054)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30054)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30351)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30351)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30351)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30351)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,37 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            modulus = (++modulus) % 3;
+			{
+				modulus = (++modulus) % 4;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +373,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30351)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30351)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30351)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,51 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+			}
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +461,10 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30409)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30505)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30505)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30505)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30505)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,35 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			modulus = (++modulus) % 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            byte[] buf = new byte[pos - readPos];
+			eof = true;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +371,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +446,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30505)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30505)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30505)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30567)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30567)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30567)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30567)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,34 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				int bytesCopied = 0;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			currentLinePos = 0;
+			currentLinePos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			buffer[pos++] = (byte) (x & MASK_8BITS);
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -382,6 +408,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			currentLinePos = 0;
             pos = 0;
             readPos = 0;
         } else {
@@ -418,8 +445,11 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
-            pos = outPos;
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			pos = outPos;
             readPos = outPos;
         }
     }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30567)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30567)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30567)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30644)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30644)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30644)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30644)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,35 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			{
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +445,10 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30644)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30644)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30644)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30876)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30876)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30876)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30876)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,43 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+            {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +379,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30876)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30876)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v30876)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v31591)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v31591)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v31591)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v31591)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,48 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			{
+				int bytesCopied = 0;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			{
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +384,9 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +460,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v31591)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v31591)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v31591)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v32234)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v32234)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v32234)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v32234)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,25 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			modulus = (++modulus) % 3;
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +361,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +436,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v32234)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v32234)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v32234)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v33936)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v33936)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v33936)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v33936)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,44 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +454,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v33936)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v33936)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v33936)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34021)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34021)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34021)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34021)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,36 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			resizeBuffer();
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +372,11 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +450,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34021)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34021)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34021)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34185)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34185)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34185)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34185)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,39 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			lineLength = 0;  // disable chunk-separating
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -384,6 +415,7 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -418,7 +450,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34185)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34185)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v34185)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v35278)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v35278)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v35278)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v35278)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,43 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +379,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -381,7 +417,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -418,7 +455,10 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v35278)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v35278)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v35278)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36169)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36169)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36169)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36169)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,31 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			readPos = 0;
+			resizeBuffer();
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36169)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36169)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36169)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36278)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36278)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36278)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36278)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,47 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +457,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36278)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36278)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36278)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36607)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36607)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36607)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36607)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,35 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			pos = 0;
+			lineLength = 0;  // disable chunk-separating
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +371,10 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +448,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36607)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36607)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36607)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36651)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36651)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36651)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36651)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,30 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            byte[] buf = new byte[pos - readPos];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +366,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +441,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36651)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36651)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v36651)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,38 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+				byte[] buf = new byte[pos - readPos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +374,11 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +452,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39478)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39478)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39478)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39478)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,35 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +371,10 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +448,10 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39478)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39478)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39478)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39861)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39861)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39861)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39861)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,43 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            int readLen = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +379,11 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +457,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39861)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39861)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v39861)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40419)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40419)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40419)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40419)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,43 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				int readLen = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			eof = true;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +379,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +454,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40419)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40419)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40419)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40468)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40468)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40468)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40468)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,47 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +383,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +458,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40468)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40468)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40468)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40757)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40757)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40757)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40757)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,44 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			modulus = (++modulus) % 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +380,9 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +456,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40757)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40757)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v40757)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,43 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				int bytesCopied = 0;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				modulus = (++modulus) % 4;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				lineSeparator = CHUNK_SEPARATOR;
+				pos = 0;
+				readPos = 0;
+			}
+			currentLinePos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +379,10 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +456,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41342)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,43 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				int readLen = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +379,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +454,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v41345)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v43601)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v43601)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v43601)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v43601)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,47 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+			}
+			readPos = 0;
+			{
+				pos = 0;
+				eof = true;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            int readLen = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +383,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +458,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v43601)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v43601)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v43601)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v44316)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v44316)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v44316)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v44316)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,50 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +386,10 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +463,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v44316)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v44316)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v44316)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46348)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46348)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46348)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46348)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,63 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +473,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46348)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46348)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46348)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46526)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46526)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46526)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46526)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,49 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			readPos = 0;
+			modulus = (++modulus) % 3;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +385,9 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +461,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46526)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46526)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46526)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46796)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46796)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46796)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46796)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,50 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            int readLen = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +386,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46796)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46796)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v46796)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v47685)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v47685)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v47685)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v47685)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,55 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			resizeBuffer();
+            pos = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +465,12 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v47685)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v47685)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v47685)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51575)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51575)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51575)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51575)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,69 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			{
+				int bytesCopied = 0;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				modulus = (++modulus) % 4;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				currentLinePos += 4;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +405,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +480,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51575)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51575)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51575)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51626)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51626)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51626)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51626)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,50 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
+			resizeBuffer();
+            int readLen = 0;
+			pos = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +386,9 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +462,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51626)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51626)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v51626)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53205)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53205)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53205)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53205)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,76 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				resizeBuffer();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +412,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -381,7 +450,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            int readLen = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -418,7 +488,9 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53205)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53205)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53205)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53393)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53393)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53393)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53393)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,72 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				int bytesCopied = 0;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +408,9 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +484,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53393)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53393)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v53393)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54059)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54059)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54059)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54059)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,67 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				modulus = (++modulus) % 4;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+			resizeBuffer();
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +403,10 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54059)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54059)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54059)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54235)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54235)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54235)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54235)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,89 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				byte[] result = new byte[pos];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +425,8 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -381,7 +463,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            int readLen = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -418,7 +501,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54235)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54235)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54235)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54749)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54749)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54749)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54749)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,78 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			{
+				eof = true;
+				modulus = (++modulus) % 4;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -344,7 +414,10 @@
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -418,7 +491,8 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            buffer = null;
+			buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54749)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54749)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  PatchLogExporter - patch (v54749)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-21 13:16:17 [main] [INFO]  KGenProgMain - Summary
Reached generation = 138
Generated variants = 54749
Syntax valid variants = 45655
Build succeeded variants = 26879
Time elapsed = 20 hours 22 minutes 25 seconds
Exit status = SUCCESS
