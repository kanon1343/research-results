2023-11-17 18:37:22 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-17 18:37:22 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-17 18:37:22 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-17 18:37:22 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/kgenprog-8.toml (set by command line)
rootDir = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8 (set in config file)
productPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/java] (set in config file)
testPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64InputStreamTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 5 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /home/fse-pluto/Desktop/research
version = 1.8.2
================================================================
2023-11-17 18:37:25 [main] [INFO]  KGenProgMain - initial failed tests (1/12)
org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105: null

2023-11-17 18:37:25 [main] [INFO]  KGenProgMain - GA started
2023-11-17 18:37:25 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-17 19:04:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 5 seconds
Variants: generated 200, build-succeeded 30, build-failed 105, syntax-invalid 13, redundant 52
Fitness: max 1(2), min 0.333(1), ave 0.819
Test execution time: sum 1622020 ms, max 900031 ms, min 25 ms
----------------------------------------------------------------

2023-11-17 19:04:31 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-17 20:46:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 11 seconds
Variants: generated 200, build-succeeded 40, build-failed 107, syntax-invalid 16, redundant 37
Fitness: max 0.917(16), min 0.333(2), ave 0.777
Test execution time: sum 6122277 ms, max 1440026 ms, min 23 ms
----------------------------------------------------------------

2023-11-17 20:46:37 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-18 02:16:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 39 minutes 9 seconds
Variants: generated 400, build-succeeded 112, build-failed 117, syntax-invalid 41, redundant 130
Fitness: max 0.917(13), min 0.333(7), ave 0.718
Test execution time: sum 19791814 ms, max 1440024 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 02:16:35 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-18 02:16:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 39 minutes 21 seconds
Variants: generated 400, build-succeeded 105, build-failed 117, syntax-invalid 34, redundant 144
Fitness: max 0.917(32), min 0.75(61), ave 0.81
Test execution time: sum 5397 ms, max 795 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 02:16:46 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-18 02:57:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 20 minutes 11 seconds
Variants: generated 400, build-succeeded 97, build-failed 122, syntax-invalid 52, redundant 129
Fitness: max 1(1), min 0.333(2), ave 0.831
Test execution time: sum 2443641 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 02:57:36 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-18 03:21:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 44 minutes 23 seconds
Variants: generated 400, build-succeeded 81, build-failed 134, syntax-invalid 60, redundant 125
Fitness: max 0.917(72), min 0.333(1), ave 0.893
Test execution time: sum 1446164 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 03:21:48 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-18 03:23:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 45 minutes 52 seconds
Variants: generated 400, build-succeeded 105, build-failed 130, syntax-invalid 57, redundant 108
Fitness: max 1(1), min 0.5(1), ave 0.909
Test execution time: sum 83023 ms, max 74653 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 03:23:18 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-18 04:23:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 46 minutes 8 seconds
Variants: generated 400, build-succeeded 123, build-failed 138, syntax-invalid 57, redundant 82
Fitness: max 1(1), min 0(2), ave 0.883
Test execution time: sum 3609205 ms, max 1440021 ms, min 20 ms
----------------------------------------------------------------

2023-11-18 04:23:34 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-18 04:35:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 58 minutes 26 seconds
Variants: generated 400, build-succeeded 136, build-failed 127, syntax-invalid 44, redundant 93
Fitness: max 0.917(127), min 0.5(1), ave 0.904
Test execution time: sum 730286 ms, max 720021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 04:35:52 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-18 04:36:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 58 minutes 45 seconds
Variants: generated 400, build-succeeded 142, build-failed 130, syntax-invalid 70, redundant 58
Fitness: max 1(2), min 0(1), ave 0.898
Test execution time: sum 10978 ms, max 155 ms, min 20 ms
----------------------------------------------------------------

2023-11-18 04:36:10 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-18 04:36:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 59 minutes 4 seconds
Variants: generated 400, build-succeeded 134, build-failed 140, syntax-invalid 67, redundant 59
Fitness: max 1(1), min 0.75(4), ave 0.912
Test execution time: sum 10982 ms, max 157 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 04:36:29 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-18 05:12:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 35 minutes 24 seconds
Variants: generated 400, build-succeeded 150, build-failed 128, syntax-invalid 76, redundant 46
Fitness: max 1(1), min 0.333(1), ave 0.902
Test execution time: sum 2171801 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 05:12:49 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-18 05:37:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 59 minutes 43 seconds
Variants: generated 400, build-succeeded 144, build-failed 117, syntax-invalid 76, redundant 63
Fitness: max 1(5), min 0.333(1), ave 0.902
Test execution time: sum 1451486 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 05:37:08 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-18 06:02:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 25 minutes 14 seconds
Variants: generated 400, build-succeeded 161, build-failed 143, syntax-invalid 62, redundant 34
Fitness: max 0.917(152), min 0.333(1), ave 0.902
Test execution time: sum 1522223 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 06:02:39 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-18 06:03:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 25 minutes 35 seconds
Variants: generated 400, build-succeeded 155, build-failed 125, syntax-invalid 76, redundant 44
Fitness: max 1(2), min 0.667(3), ave 0.9
Test execution time: sum 12653 ms, max 344 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 06:03:01 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-18 06:03:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 25 minutes 58 seconds
Variants: generated 400, build-succeeded 161, build-failed 121, syntax-invalid 73, redundant 45
Fitness: max 1(2), min 0.75(9), ave 0.907
Test execution time: sum 13586 ms, max 157 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 06:03:23 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-18 06:03:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 26 minutes 22 seconds
Variants: generated 400, build-succeeded 178, build-failed 128, syntax-invalid 59, redundant 35
Fitness: max 0.917(168), min 0(2), ave 0.896
Test execution time: sum 14457 ms, max 156 ms, min 20 ms
----------------------------------------------------------------

2023-11-18 06:03:47 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-18 06:04:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 26 minutes 43 seconds
Variants: generated 400, build-succeeded 155, build-failed 134, syntax-invalid 71, redundant 40
Fitness: max 1(1), min 0.5(1), ave 0.908
Test execution time: sum 12866 ms, max 162 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 06:04:09 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-18 06:28:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 51 minutes 4 seconds
Variants: generated 400, build-succeeded 146, build-failed 135, syntax-invalid 85, redundant 34
Fitness: max 0.917(134), min 0.333(1), ave 0.899
Test execution time: sum 1451552 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 06:28:30 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-18 06:43:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 6 minutes 24 seconds
Variants: generated 400, build-succeeded 136, build-failed 148, syntax-invalid 89, redundant 27
Fitness: max 0.917(126), min 0.583(1), ave 0.903
Test execution time: sum 910641 ms, max 900022 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 06:43:50 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-18 06:44:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 6 minutes 45 seconds
Variants: generated 400, build-succeeded 149, build-failed 134, syntax-invalid 84, redundant 33
Fitness: max 0.917(139), min 0.75(8), ave 0.907
Test execution time: sum 11941 ms, max 170 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 06:44:11 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-18 06:59:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 22 minutes 4 seconds
Variants: generated 400, build-succeeded 129, build-failed 130, syntax-invalid 101, redundant 40
Fitness: max 1(1), min 0.583(1), ave 0.909
Test execution time: sum 910159 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 06:59:30 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-18 06:59:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 22 minutes 24 seconds
Variants: generated 400, build-succeeded 133, build-failed 135, syntax-invalid 89, redundant 43
Fitness: max 0.917(128), min 0.667(1), ave 0.91
Test execution time: sum 10887 ms, max 182 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 06:59:50 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-18 08:09:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 31 minutes 46 seconds
Variants: generated 400, build-succeeded 153, build-failed 125, syntax-invalid 99, redundant 23
Fitness: max 0.917(143), min 0.333(3), ave 0.898
Test execution time: sum 4152116 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 08:09:11 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-18 08:09:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 32 minutes 7 seconds
Variants: generated 400, build-succeeded 136, build-failed 144, syntax-invalid 99, redundant 21
Fitness: max 0.917(132), min 0.667(1), ave 0.911
Test execution time: sum 11363 ms, max 572 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 08:09:32 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-18 08:09:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 32 minutes 26 seconds
Variants: generated 400, build-succeeded 131, build-failed 138, syntax-invalid 109, redundant 22
Fitness: max 0.917(125), min 0.75(6), ave 0.909
Test execution time: sum 10218 ms, max 143 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 08:09:52 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-18 08:10:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 32 minutes 46 seconds
Variants: generated 400, build-succeeded 131, build-failed 139, syntax-invalid 102, redundant 28
Fitness: max 0.917(123), min 0.333(2), ave 0.901
Test execution time: sum 10267 ms, max 129 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 08:10:11 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-18 08:49:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 12 minutes 7 seconds
Variants: generated 400, build-succeeded 146, build-failed 133, syntax-invalid 94, redundant 27
Fitness: max 0.917(132), min 0.333(2), ave 0.889
Test execution time: sum 2350955 ms, max 1440022 ms, min 20 ms
----------------------------------------------------------------

2023-11-18 08:49:32 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-18 08:49:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 12 minutes 27 seconds
Variants: generated 400, build-succeeded 141, build-failed 138, syntax-invalid 81, redundant 40
Fitness: max 1(1), min 0.667(7), ave 0.897
Test execution time: sum 10932 ms, max 166 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 08:49:53 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-18 08:50:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 12 minutes 50 seconds
Variants: generated 400, build-succeeded 158, build-failed 109, syntax-invalid 92, redundant 41
Fitness: max 1(1), min 0.667(7), ave 0.901
Test execution time: sum 12656 ms, max 158 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 08:50:15 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-18 09:11:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 34 minutes 11 seconds
Variants: generated 400, build-succeeded 144, build-failed 133, syntax-invalid 92, redundant 31
Fitness: max 1(1), min 0.333(1), ave 0.9
Test execution time: sum 1271224 ms, max 1260021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 09:11:36 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-18 09:11:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 34 minutes 32 seconds
Variants: generated 400, build-succeeded 142, build-failed 137, syntax-invalid 97, redundant 24
Fitness: max 1(2), min 0.667(3), ave 0.911
Test execution time: sum 11528 ms, max 157 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 09:11:58 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-18 09:12:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 34 minutes 55 seconds
Variants: generated 400, build-succeeded 152, build-failed 138, syntax-invalid 85, redundant 25
Fitness: max 0.917(144), min 0.667(5), ave 0.906
Test execution time: sum 12341 ms, max 158 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 09:12:21 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-18 09:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 35 minutes 17 seconds
Variants: generated 400, build-succeeded 141, build-failed 120, syntax-invalid 109, redundant 30
Fitness: max 1(6), min 0.667(2), ave 0.907
Test execution time: sum 11245 ms, max 148 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 09:12:42 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-18 09:28:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 50 minutes 39 seconds
Variants: generated 400, build-succeeded 150, build-failed 125, syntax-invalid 105, redundant 20
Fitness: max 1(3), min 0.583(1), ave 0.901
Test execution time: sum 911757 ms, max 900025 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 09:28:04 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-18 09:43:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 6 minutes 1 seconds
Variants: generated 400, build-succeeded 153, build-failed 119, syntax-invalid 101, redundant 27
Fitness: max 1(4), min 0(1), ave 0.891
Test execution time: sum 911587 ms, max 900023 ms, min 20 ms
----------------------------------------------------------------

2023-11-18 09:43:27 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-18 10:07:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 30 minutes 25 seconds
Variants: generated 400, build-succeeded 161, build-failed 118, syntax-invalid 85, redundant 36
Fitness: max 1(1), min 0.333(2), ave 0.895
Test execution time: sum 1453122 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:07:51 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-18 10:09:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 32 minutes 31 seconds
Variants: generated 400, build-succeeded 177, build-failed 114, syntax-invalid 88, redundant 21
Fitness: max 1(3), min 0.5(1), ave 0.886
Test execution time: sum 114365 ms, max 101207 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:09:56 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-18 10:11:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 34 minutes 6 seconds
Variants: generated 400, build-succeeded 171, build-failed 118, syntax-invalid 89, redundant 22
Fitness: max 1(1), min 0.333(2), ave 0.885
Test execution time: sum 83193 ms, max 69399 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:11:31 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-18 10:11:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 34 minutes 30 seconds
Variants: generated 400, build-succeeded 172, build-failed 121, syntax-invalid 80, redundant 27
Fitness: max 0.917(146), min 0.333(1), ave 0.883
Test execution time: sum 12971 ms, max 138 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:11:56 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-18 10:15:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 37 minutes 55 seconds
Variants: generated 400, build-succeeded 176, build-failed 119, syntax-invalid 79, redundant 26
Fitness: max 0.917(144), min 0.5(2), ave 0.877
Test execution time: sum 193226 ms, max 180074 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:15:20 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-18 10:15:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 38 minutes 22 seconds
Variants: generated 400, build-succeeded 198, build-failed 111, syntax-invalid 65, redundant 26
Fitness: max 1(1), min 0.333(2), ave 0.882
Test execution time: sum 15295 ms, max 154 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:15:47 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-18 10:31:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 53 minutes 48 seconds
Variants: generated 400, build-succeeded 182, build-failed 118, syntax-invalid 76, redundant 24
Fitness: max 1(1), min 0.583(1), ave 0.886
Test execution time: sum 914043 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 10:31:14 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-18 10:32:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 55 minutes 19 seconds
Variants: generated 400, build-succeeded 140, build-failed 142, syntax-invalid 99, redundant 19
Fitness: max 0.917(126), min 0.5(1), ave 0.894
Test execution time: sum 78747 ms, max 67691 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 10:32:44 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-18 10:48:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 10 minutes 44 seconds
Variants: generated 400, build-succeeded 180, build-failed 123, syntax-invalid 81, redundant 16
Fitness: max 0.917(151), min 0.5(1), ave 0.881
Test execution time: sum 913292 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:48:10 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-18 10:48:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 11 minutes 11 seconds
Variants: generated 400, build-succeeded 181, build-failed 121, syntax-invalid 72, redundant 26
Fitness: max 0.917(158), min 0.333(1), ave 0.884
Test execution time: sum 13842 ms, max 176 ms, min 20 ms
----------------------------------------------------------------

2023-11-18 10:48:37 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-18 10:49:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 11 minutes 35 seconds
Variants: generated 400, build-succeeded 152, build-failed 132, syntax-invalid 93, redundant 23
Fitness: max 0.917(136), min 0.5(2), ave 0.89
Test execution time: sum 11691 ms, max 167 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:49:01 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-18 10:49:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 12 minutes 1 seconds
Variants: generated 400, build-succeeded 166, build-failed 137, syntax-invalid 76, redundant 21
Fitness: max 0.917(145), min 0.5(3), ave 0.886
Test execution time: sum 12982 ms, max 567 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 10:49:27 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-18 10:55:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 18 minutes 28 seconds
Variants: generated 400, build-succeeded 170, build-failed 133, syntax-invalid 78, redundant 19
Fitness: max 1(1), min 0.333(1), ave 0.887
Test execution time: sum 372834 ms, max 360022 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:55:53 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-18 10:56:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 18 minutes 56 seconds
Variants: generated 400, build-succeeded 187, build-failed 129, syntax-invalid 64, redundant 20
Fitness: max 1(1), min 0.5(1), ave 0.897
Test execution time: sum 14628 ms, max 157 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 10:56:22 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-18 11:08:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 31 minutes 24 seconds
Variants: generated 400, build-succeeded 172, build-failed 141, syntax-invalid 66, redundant 21
Fitness: max 0.917(160), min 0.333(1), ave 0.898
Test execution time: sum 733706 ms, max 720024 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 11:08:49 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-18 11:21:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 43 minutes 54 seconds
Variants: generated 400, build-succeeded 194, build-failed 140, syntax-invalid 57, redundant 9
Fitness: max 0.917(175), min 0.333(1), ave 0.891
Test execution time: sum 735162 ms, max 720023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 11:21:19 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-18 11:21:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 44 minutes 23 seconds
Variants: generated 400, build-succeeded 189, build-failed 137, syntax-invalid 58, redundant 16
Fitness: max 0.917(164), min 0.5(4), ave 0.883
Test execution time: sum 14555 ms, max 161 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 11:21:48 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-18 11:34:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 56 minutes 52 seconds
Variants: generated 400, build-succeeded 187, build-failed 130, syntax-invalid 54, redundant 29
Fitness: max 0.917(162), min 0.5(1), ave 0.884
Test execution time: sum 734687 ms, max 720023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 11:34:17 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-18 11:49:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 12 minutes 20 seconds
Variants: generated 400, build-succeeded 174, build-failed 140, syntax-invalid 67, redundant 19
Fitness: max 1(1), min 0.5(2), ave 0.889
Test execution time: sum 913494 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 11:49:45 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-18 12:14:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 36 minutes 49 seconds
Variants: generated 400, build-succeeded 193, build-failed 129, syntax-invalid 63, redundant 15
Fitness: max 1(3), min 0.333(2), ave 0.873
Test execution time: sum 1454438 ms, max 720023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 12:14:14 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-18 12:26:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 49 minutes 17 seconds
Variants: generated 400, build-succeeded 180, build-failed 137, syntax-invalid 65, redundant 18
Fitness: max 0.917(154), min 0.333(1), ave 0.878
Test execution time: sum 733416 ms, max 720023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 12:26:43 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-18 12:51:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 13 minutes 47 seconds
Variants: generated 400, build-succeeded 186, build-failed 154, syntax-invalid 46, redundant 14
Fitness: max 1(1), min 0.333(1), ave 0.879
Test execution time: sum 1454369 ms, max 1440022 ms, min 20 ms
----------------------------------------------------------------

2023-11-18 12:51:13 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-18 13:22:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 45 minutes 27 seconds
Variants: generated 400, build-succeeded 181, build-failed 121, syntax-invalid 67, redundant 31
Fitness: max 0.917(159), min 0.333(3), ave 0.879
Test execution time: sum 1884915 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 13:22:52 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-18 13:23:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 45 minutes 57 seconds
Variants: generated 400, build-succeeded 188, build-failed 129, syntax-invalid 60, redundant 23
Fitness: max 1(3), min 0.5(1), ave 0.891
Test execution time: sum 14866 ms, max 152 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 13:23:22 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-18 13:23:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 46 minutes 28 seconds
Variants: generated 400, build-succeeded 190, build-failed 146, syntax-invalid 50, redundant 14
Fitness: max 0.917(169), min 0.5(1), ave 0.889
Test execution time: sum 15365 ms, max 173 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 13:23:53 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-18 13:24:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 46 minutes 59 seconds
Variants: generated 400, build-succeeded 186, build-failed 138, syntax-invalid 58, redundant 18
Fitness: max 0.917(173), min 0.667(10), ave 0.901
Test execution time: sum 15389 ms, max 165 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 13:24:24 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-18 14:27:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 50 minutes 29 seconds
Variants: generated 400, build-succeeded 196, build-failed 129, syntax-invalid 53, redundant 22
Fitness: max 0.917(162), min 0.333(2), ave 0.872
Test execution time: sum 3794504 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 14:27:55 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-18 14:40:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 2 minutes 59 seconds
Variants: generated 400, build-succeeded 174, build-failed 126, syntax-invalid 73, redundant 27
Fitness: max 0.917(157), min 0.333(1), ave 0.892
Test execution time: sum 733856 ms, max 720023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 14:40:24 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-18 14:40:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 3 minutes 29 seconds
Variants: generated 400, build-succeeded 184, build-failed 119, syntax-invalid 71, redundant 26
Fitness: max 0.917(161), min 0.667(18), ave 0.888
Test execution time: sum 14594 ms, max 146 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 14:40:54 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-18 14:56:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 19 minutes 1 seconds
Variants: generated 400, build-succeeded 192, build-failed 116, syntax-invalid 67, redundant 25
Fitness: max 0.917(173), min 0.583(1), ave 0.894
Test execution time: sum 915627 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 14:56:26 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-18 15:31:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 53 minutes 43 seconds
Variants: generated 400, build-succeeded 186, build-failed 130, syntax-invalid 66, redundant 18
Fitness: max 0.917(165), min 0.333(1), ave 0.885
Test execution time: sum 2065588 ms, max 1080021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 15:31:08 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-18 15:32:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 55 minutes 25 seconds
Variants: generated 400, build-succeeded 177, build-failed 152, syntax-invalid 52, redundant 19
Fitness: max 0.917(154), min 0.5(3), ave 0.882
Test execution time: sum 84678 ms, max 70609 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 15:32:50 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-18 15:33:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 56 minutes 0 seconds
Variants: generated 400, build-succeeded 213, build-failed 119, syntax-invalid 45, redundant 23
Fitness: max 1(2), min 0.5(1), ave 0.895
Test execution time: sum 17466 ms, max 145 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 15:33:25 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-18 15:57:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 20 minutes 33 seconds
Variants: generated 400, build-succeeded 198, build-failed 129, syntax-invalid 50, redundant 23
Fitness: max 0.917(175), min 0.333(1), ave 0.886
Test execution time: sum 1455939 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 15:57:59 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-18 16:22:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 45 minutes 8 seconds
Variants: generated 400, build-succeeded 220, build-failed 111, syntax-invalid 54, redundant 15
Fitness: max 1(2), min 0.333(1), ave 0.877
Test execution time: sum 1456954 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 16:22:33 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-18 16:23:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 45 minutes 41 seconds
Variants: generated 400, build-succeeded 196, build-failed 114, syntax-invalid 66, redundant 24
Fitness: max 1(2), min 0.333(2), ave 0.882
Test execution time: sum 15777 ms, max 163 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 16:23:06 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-18 17:26:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 49 minutes 13 seconds
Variants: generated 400, build-succeeded 199, build-failed 118, syntax-invalid 55, redundant 28
Fitness: max 1(3), min 0.333(4), ave 0.863
Test execution time: sum 3794856 ms, max 900023 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 17:26:39 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-18 17:51:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 13 minutes 47 seconds
Variants: generated 400, build-succeeded 203, build-failed 114, syntax-invalid 63, redundant 20
Fitness: max 1(3), min 0.333(1), ave 0.883
Test execution time: sum 1455720 ms, max 1440021 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 17:51:12 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-18 17:51:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 14 minutes 19 seconds
Variants: generated 400, build-succeeded 183, build-failed 123, syntax-invalid 72, redundant 22
Fitness: max 1(1), min 0(1), ave 0.881
Test execution time: sum 14937 ms, max 176 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 17:51:45 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-18 18:17:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 40 minutes 3 seconds
Variants: generated 400, build-succeeded 194, build-failed 133, syntax-invalid 58, redundant 15
Fitness: max 1(1), min 0.333(1), ave 0.878
Test execution time: sum 1524664 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 18:17:28 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-18 18:18:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 40 minutes 36 seconds
Variants: generated 400, build-succeeded 187, build-failed 129, syntax-invalid 66, redundant 18
Fitness: max 1(1), min 0.5(3), ave 0.878
Test execution time: sum 14824 ms, max 180 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 18:18:01 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-18 18:20:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 42 minutes 54 seconds
Variants: generated 400, build-succeeded 192, build-failed 132, syntax-invalid 61, redundant 15
Fitness: max 0.917(153), min 0.25(1), ave 0.862
Test execution time: sum 119830 ms, max 105780 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 18:20:20 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-18 18:29:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 52 minutes 28 seconds
Variants: generated 400, build-succeeded 187, build-failed 130, syntax-invalid 58, redundant 25
Fitness: max 1(1), min 0.5(4), ave 0.883
Test execution time: sum 554739 ms, max 540023 ms, min 22 ms
----------------------------------------------------------------

2023-11-18 18:29:54 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-18 18:45:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 hours 8 minutes 3 seconds
Variants: generated 400, build-succeeded 203, build-failed 118, syntax-invalid 57, redundant 22
Fitness: max 1(1), min 0(1), ave 0.861
Test execution time: sum 915083 ms, max 900024 ms, min 21 ms
----------------------------------------------------------------

2023-11-18 18:45:28 [main] [INFO]  KGenProgMain - GA stopped
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -418,7 +418,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -166,7 +166,7 @@
                 if (!base64.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
-                    if (c > 0 && b.length == len) {
+                    if (b == null) {
                         base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v62)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v1300)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v1300)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v1300)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v1300)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,6 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -385,7 +384,13 @@
             pos = 0;
             readPos = 0;
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            {
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v1300)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v1300)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v1300)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2043)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2043)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2043)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2043)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -386,6 +386,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -417,11 +418,8 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
-            buffer = out;
-            pos = outPos;
-            readPos = outPos;
-        }
+        if (out != null && out.length == outAvail)
+			x = x << 6;
     }
     /**
      * <p>
@@ -1026,7 +1024,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2043)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2043)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2043)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineLength = 0;
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +390,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v2505)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3316)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3316)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3316)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3316)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -340,7 +340,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -386,6 +387,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -417,7 +419,7 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
+        if (eof && modulus != 0) {
             buffer = out;
             pos = outPos;
             readPos = outPos;
@@ -1026,7 +1028,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3316)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3316)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3316)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3550)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3550)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3550)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3550)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            resizeBuffer();
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3550)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3550)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3550)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3952)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3952)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3952)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3952)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +342,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -490,7 +493,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3952)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3952)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v3952)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -490,7 +491,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1026,7 +1028,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4299)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,7 +1022,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4429)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4509)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4509)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4509)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4509)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +386,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4509)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4509)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4509)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -340,7 +341,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -386,6 +388,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4628)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -490,7 +491,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1025,7 +1027,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4796)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4797)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4797)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4797)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4797)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -386,6 +388,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1025,7 +1028,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4797)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4797)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v4797)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5439)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5439)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5439)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5439)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -490,7 +491,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1023,9 +1025,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5439)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5439)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5439)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineLength = 0;  // disable chunk-separating
+            readPos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,7 +1025,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5502)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1025,7 +1025,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5606)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5653)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5653)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5653)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5653)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			readPos = 0;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +343,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5653)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5653)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v5653)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			reset();
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1026,7 +1028,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v6781)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -464,7 +464,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1026,7 +1027,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v8167)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+			}
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +343,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -386,6 +390,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -486,6 +491,7 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
+				readPos = 0;
                 int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
@@ -1024,7 +1030,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v10959)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			readPos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +467,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -981,7 +985,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11343)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11806)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11806)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11806)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11806)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -464,7 +464,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -490,7 +491,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1021,10 +1023,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11806)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11806)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v11806)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -386,6 +386,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1021,7 +1022,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12160)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +465,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1022,9 +1024,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12362)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,8 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            int readLen = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -490,7 +490,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1022,7 +1023,7 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v12982)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13082)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13082)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13082)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13082)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            readPos = 0;
+			resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +342,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1021,10 +1024,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13082)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13082)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13082)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1021,7 +1024,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13106)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13159)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13159)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13159)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13159)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,11 +331,31 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				pos = 0;
+				eof = true;
+				{
+					buffer = new byte[DEFAULT_BUFFER_SIZE];
+					pos = 0;
+					readPos = 0;
+				}
+				readPos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			String sep = StringUtils.newStringUtf8(lineSeparator);
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        switch (modulus) {
+		case 2:
+			x = x << 6;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			break;
+		case 3:
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			break;
+		}
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
@@ -464,7 +484,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -981,7 +1002,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1026,7 +1046,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13159)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13159)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13159)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13168)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13168)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13168)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13168)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			readPos = 0;
+			readPos = 0;
+			resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +468,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1021,7 +1026,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13168)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13168)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13168)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            readPos = 0;
+			resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1024,7 +1026,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13170)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -1021,12 +1021,11 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13366)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +420,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -981,7 +982,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1021,10 +1021,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13389)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -340,7 +340,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -981,7 +982,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1021,10 +1021,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13477)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +341,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -981,7 +983,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1021,10 +1022,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13699)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,10 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -464,7 +467,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -981,7 +985,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1024,7 +1027,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13786)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +465,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1024,9 +1026,8 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:28 [main] [INFO]  PatchLogExporter - patch (v13899)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +466,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1021,12 +1024,10 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            String sep = StringUtils.newStringUtf8(lineSeparator);
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +342,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1021,7 +1024,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14395)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,9 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -981,7 +983,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1023,8 +1024,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14432)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,10 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -981,7 +984,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1021,7 +1023,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14453)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,7 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -386,6 +386,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -981,7 +982,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1024,8 +1024,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14540)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            byte[] result = new byte[pos];
+			eof = true;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1024,7 +1027,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v14826)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -333,6 +333,7 @@
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -490,7 +491,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1021,12 +1023,11 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16107)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,10 +332,21 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        switch (modulus) {
+		case 2:
+			x = x << 6;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			break;
+		case 3:
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			break;
+		}
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
@@ -490,7 +501,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1021,8 +1033,7 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +469,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1024,7 +1030,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v18958)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v19397)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v19397)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v19397)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v19397)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,13 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			eof = true;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +346,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1021,10 +1028,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v19397)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v19397)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v19397)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21316)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21316)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21316)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21316)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +422,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -981,7 +984,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1022,9 +1024,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21316)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21316)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21316)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +468,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1025,7 +1030,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21677)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            lineLength = 0;
+			readPos = 0;
+			eof = true;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +390,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -464,7 +469,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -981,7 +987,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1022,7 +1027,7 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21810)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            int startSrc = 0;
+            eof = true;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +389,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -981,7 +985,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1024,7 +1027,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v22464)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v22464)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v22464)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v22464)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,11 +331,24 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            eof = true;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        switch (modulus) {
+		case 2:
+			x = x << 6;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			break;
+		case 3:
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			break;
+		}
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
@@ -386,6 +399,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -464,7 +478,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1024,8 +1039,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v22464)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v22464)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v22464)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -981,7 +984,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +184,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23217)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +390,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -464,7 +469,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1023,10 +1029,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,12 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            lineLength = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			readPos = 0;
+			eof = true;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -490,7 +495,8 @@
                 if (b < 0) {
                     b += 256;
                 }
-                x = (x << 8) + b;
+                byte[] result = new byte[pos];
+				x = (x << 8) + b;
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -1021,11 +1027,9 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v23344)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,13 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            resizeBuffer();
+			eof = true;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1024,7 +1030,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,7 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return new String(bytes, charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,13 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer = null;
+			readPos = 0;
+			eof = true;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -981,7 +986,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1021,8 +1025,7 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v26917)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            resizeBuffer();
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +390,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1021,10 +1026,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27671)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -417,7 +423,7 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
+        if (containsBase64Byte(lineSeparator)) {
             buffer = out;
             pos = outPos;
             readPos = outPos;
@@ -1021,7 +1027,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +184,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v27784)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,13 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			byte[] result = new byte[pos];
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -981,7 +986,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1021,8 +1025,7 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28015)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            pos = 0;
+			eof = true;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +343,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -464,7 +468,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28425)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28425)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28425)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28425)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            resizeBuffer();
+			resizeBuffer();
+			eof = true;
+			pos = 0;
+			pos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1024,7 +1034,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28425)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28425)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28425)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28436)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28436)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28436)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28436)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,10 +332,27 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			String sep = StringUtils.newStringUtf8(lineSeparator);
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        switch (modulus) {
+		case 2:
+			x = x << 6;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			break;
+		case 3:
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			break;
+		}
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
@@ -418,7 +435,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -1022,7 +1038,7 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28436)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28436)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28436)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,9 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -381,11 +382,15 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            byte b = lineSeparator[lineSeparator.length - 1];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+            resizeBuffer();
+			resizeBuffer();
+			readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -1026,7 +1031,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,7 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return new String(bytes, charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28564)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,13 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            resizeBuffer();
+			resizeBuffer();
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1021,12 +1027,11 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28803)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,19 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            resizeBuffer();
+			eof = true;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1021,7 +1032,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28875)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            eof = true;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -464,7 +471,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -981,7 +989,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v28997)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            reset();
+            eof = true;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -981,7 +987,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1026,7 +1031,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
+        String sep = StringUtils.newStringUtf8(lineSeparator);
     }
 
 }
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29302)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,13 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			pos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +346,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            byte[] buf = new byte[pos - readPos];
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,7 +1029,7 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v29740)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            int readLen = 0;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30007)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30822)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30822)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30822)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30822)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,15 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            readPos = 0;
+			pos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +426,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -981,7 +988,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1022,7 +1028,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30822)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30822)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v30822)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+            resizeBuffer();
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			eof = true;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,10 +1029,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,7 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
+            throw new NullPointerException();
         }
         try {
             return string.getBytes(charsetName);
2023-11-18 18:45:29 [main] [INFO]  PatchLogExporter - patch (v31263)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-18 18:45:29 [main] [INFO]  KGenProgMain - Summary
Reached generation = 80
Generated variants = 31600
Syntax valid variants = 25960
Build succeeded variants = 12897
Time elapsed = 24 hours 8 minutes 3 seconds
Exit status = FAILURE (time limit)
