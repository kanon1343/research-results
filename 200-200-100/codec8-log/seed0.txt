2023-11-13 13:58:58 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-13 13:58:58 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-13 13:58:58 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-13 13:58:58 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/kgenprog-8.toml (set by command line)
rootDir = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8 (set in config file)
productPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/java] (set in config file)
testPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/codec8/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64InputStreamTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 0 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /home/fse-pluto/Desktop/research
version = 1.8.2
================================================================
2023-11-13 13:59:01 [main] [INFO]  KGenProgMain - initial failed tests (1/12)
org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105: null

2023-11-13 13:59:01 [main] [INFO]  KGenProgMain - GA started
2023-11-13 13:59:01 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-13 14:15:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 45 seconds
Variants: generated 200, build-succeeded 20, build-failed 97, syntax-invalid 17, redundant 66
Fitness: max 1(1), min 0.5(1), ave 0.808
Test execution time: sum 1001923 ms, max 900027 ms, min 25 ms
----------------------------------------------------------------

2023-11-13 14:15:47 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-13 14:39:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 42 seconds
Variants: generated 200, build-succeeded 25, build-failed 117, syntax-invalid 20, redundant 38
Fitness: max 0.917(4), min 0.333(1), ave 0.737
Test execution time: sum 1433465 ms, max 1260026 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 14:39:44 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-13 16:45:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 3 seconds
Variants: generated 400, build-succeeded 116, build-failed 111, syntax-invalid 45, redundant 128
Fitness: max 1(2), min 0.333(2), ave 0.733
Test execution time: sum 7514963 ms, max 1440023 ms, min 20 ms
----------------------------------------------------------------

2023-11-13 16:45:05 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-13 16:45:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 13 seconds
Variants: generated 400, build-succeeded 115, build-failed 111, syntax-invalid 35, redundant 139
Fitness: max 0.917(10), min 0.25(1), ave 0.776
Test execution time: sum 3645 ms, max 499 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 16:45:15 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-13 16:57:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 24 seconds
Variants: generated 400, build-succeeded 122, build-failed 105, syntax-invalid 61, redundant 112
Fitness: max 1(1), min 0.667(1), ave 0.805
Test execution time: sum 724602 ms, max 720022 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 16:57:26 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-13 19:09:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 10 minutes 28 seconds
Variants: generated 400, build-succeeded 130, build-failed 108, syntax-invalid 88, redundant 74
Fitness: max 1(1), min 0.333(3), ave 0.801
Test execution time: sum 7915996 ms, max 1440022 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 19:09:30 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-13 19:24:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 25 minutes 40 seconds
Variants: generated 400, build-succeeded 92, build-failed 119, syntax-invalid 104, redundant 85
Fitness: max 1(2), min 0.583(1), ave 0.842
Test execution time: sum 905636 ms, max 900021 ms, min 20 ms
----------------------------------------------------------------

2023-11-13 19:24:42 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-13 19:24:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 25 minutes 53 seconds
Variants: generated 400, build-succeeded 80, build-failed 106, syntax-invalid 134, redundant 80
Fitness: max 1(1), min 0.5(1), ave 0.905
Test execution time: sum 6350 ms, max 144 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 19:24:54 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-13 19:25:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 5 seconds
Variants: generated 400, build-succeeded 75, build-failed 116, syntax-invalid 136, redundant 73
Fitness: max 1(1), min 0.75(2), ave 0.913
Test execution time: sum 6083 ms, max 140 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 19:25:07 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-13 19:25:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 18 seconds
Variants: generated 400, build-succeeded 73, build-failed 123, syntax-invalid 136, redundant 68
Fitness: max 1(1), min 0.75(3), ave 0.91
Test execution time: sum 5783 ms, max 147 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 19:25:20 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-13 19:25:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 34 seconds
Variants: generated 400, build-succeeded 96, build-failed 114, syntax-invalid 129, redundant 61
Fitness: max 0.917(89), min 0.5(1), ave 0.903
Test execution time: sum 7721 ms, max 155 ms, min 20 ms
----------------------------------------------------------------

2023-11-13 19:25:35 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-13 19:25:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 49 seconds
Variants: generated 400, build-succeeded 90, build-failed 115, syntax-invalid 143, redundant 52
Fitness: max 1(1), min 0.75(3), ave 0.91
Test execution time: sum 7327 ms, max 149 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 19:25:51 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-13 19:26:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 27 minutes 4 seconds
Variants: generated 400, build-succeeded 87, build-failed 116, syntax-invalid 135, redundant 62
Fitness: max 1(1), min 0.667(1), ave 0.909
Test execution time: sum 7081 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 19:26:06 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-13 19:26:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 27 minutes 20 seconds
Variants: generated 400, build-succeeded 93, build-failed 113, syntax-invalid 146, redundant 48
Fitness: max 1(1), min 0.5(1), ave 0.906
Test execution time: sum 7284 ms, max 135 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 19:26:22 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-13 19:26:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 27 minutes 37 seconds
Variants: generated 400, build-succeeded 86, build-failed 119, syntax-invalid 161, redundant 34
Fitness: max 1(1), min 0.75(3), ave 0.912
Test execution time: sum 7519 ms, max 552 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 19:26:39 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-13 19:26:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 27 minutes 55 seconds
Variants: generated 400, build-succeeded 112, build-failed 100, syntax-invalid 154, redundant 34
Fitness: max 1(1), min 0.583(1), ave 0.914
Test execution time: sum 9283 ms, max 145 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 19:26:57 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-13 19:27:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 28 minutes 15 seconds
Variants: generated 400, build-succeeded 114, build-failed 104, syntax-invalid 137, redundant 45
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 9620 ms, max 158 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 19:27:17 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-13 19:27:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 28 minutes 35 seconds
Variants: generated 400, build-succeeded 112, build-failed 103, syntax-invalid 152, redundant 33
Fitness: max 1(1), min 0.75(2), ave 0.914
Test execution time: sum 9869 ms, max 594 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 19:27:37 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-13 20:06:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 7 minutes 53 seconds
Variants: generated 400, build-succeeded 101, build-failed 116, syntax-invalid 153, redundant 30
Fitness: max 0.917(96), min 0.333(1), ave 0.903
Test execution time: sum 2347964 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:06:55 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-13 20:08:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 9 minutes 25 seconds
Variants: generated 400, build-succeeded 98, build-failed 108, syntax-invalid 161, redundant 33
Fitness: max 1(2), min 0.5(1), ave 0.901
Test execution time: sum 81936 ms, max 74454 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 20:08:27 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-13 20:08:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 9 minutes 45 seconds
Variants: generated 400, build-succeeded 115, build-failed 112, syntax-invalid 147, redundant 26
Fitness: max 0.917(109), min 0.75(6), ave 0.908
Test execution time: sum 9685 ms, max 123 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:08:47 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-13 20:21:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 4 seconds
Variants: generated 400, build-succeeded 98, build-failed 119, syntax-invalid 161, redundant 22
Fitness: max 0.917(94), min 0.583(1), ave 0.908
Test execution time: sum 728711 ms, max 720021 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:21:06 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-13 20:21:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 20 seconds
Variants: generated 400, build-succeeded 80, build-failed 114, syntax-invalid 167, redundant 39
Fitness: max 1(3), min 0.75(3), ave 0.914
Test execution time: sum 6481 ms, max 143 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:21:22 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-13 20:21:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 38 seconds
Variants: generated 400, build-succeeded 97, build-failed 119, syntax-invalid 160, redundant 24
Fitness: max 0.917(89), min 0.75(8), ave 0.903
Test execution time: sum 7798 ms, max 150 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 20:21:40 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-13 20:22:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 58 seconds
Variants: generated 400, build-succeeded 100, build-failed 124, syntax-invalid 140, redundant 36
Fitness: max 0.917(93), min 0.75(6), ave 0.906
Test execution time: sum 8223 ms, max 148 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:22:00 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-13 20:22:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 23 minutes 19 seconds
Variants: generated 400, build-succeeded 110, build-failed 110, syntax-invalid 145, redundant 35
Fitness: max 1(1), min 0.75(2), ave 0.913
Test execution time: sum 9245 ms, max 141 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:22:21 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-13 20:22:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 23 minutes 41 seconds
Variants: generated 400, build-succeeded 117, build-failed 123, syntax-invalid 137, redundant 23
Fitness: max 1(1), min 0.667(1), ave 0.91
Test execution time: sum 9700 ms, max 143 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:22:43 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-13 20:23:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 minutes 4 seconds
Variants: generated 400, build-succeeded 127, build-failed 124, syntax-invalid 124, redundant 25
Fitness: max 0.917(123), min 0.75(4), ave 0.911
Test execution time: sum 10753 ms, max 149 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:23:06 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-13 20:23:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 minutes 30 seconds
Variants: generated 400, build-succeeded 145, build-failed 106, syntax-invalid 108, redundant 41
Fitness: max 0.917(138), min 0.5(1), ave 0.906
Test execution time: sum 12079 ms, max 144 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:23:32 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-13 20:23:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 minutes 57 seconds
Variants: generated 400, build-succeeded 148, build-failed 117, syntax-invalid 106, redundant 29
Fitness: max 1(2), min 0.75(1), ave 0.917
Test execution time: sum 12686 ms, max 128 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:23:59 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-13 20:24:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 25 minutes 25 seconds
Variants: generated 400, build-succeeded 159, build-failed 107, syntax-invalid 108, redundant 26
Fitness: max 0.917(157), min 0.75(2), ave 0.915
Test execution time: sum 13697 ms, max 150 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:24:27 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-13 20:25:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 25 minutes 58 seconds
Variants: generated 400, build-succeeded 185, build-failed 106, syntax-invalid 83, redundant 26
Fitness: max 1(2), min 0.75(2), ave 0.916
Test execution time: sum 16233 ms, max 148 ms, min 28 ms
----------------------------------------------------------------

2023-11-13 20:25:00 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-13 20:40:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 41 minutes 29 seconds
Variants: generated 400, build-succeeded 177, build-failed 113, syntax-invalid 85, redundant 25
Fitness: max 0.917(174), min 0.583(1), ave 0.912
Test execution time: sum 915151 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 20:40:31 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-13 20:41:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 42 minutes 2 seconds
Variants: generated 400, build-succeeded 177, build-failed 115, syntax-invalid 85, redundant 23
Fitness: max 0.917(176), min 0.75(1), ave 0.916
Test execution time: sum 15464 ms, max 158 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 20:41:04 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-13 20:41:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 42 minutes 33 seconds
Variants: generated 400, build-succeeded 174, build-failed 107, syntax-invalid 93, redundant 26
Fitness: max 1(1), min 0.75(2), ave 0.915
Test execution time: sum 15039 ms, max 158 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 20:41:35 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-13 21:06:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 7 minutes 4 seconds
Variants: generated 400, build-succeeded 164, build-failed 116, syntax-invalid 95, redundant 25
Fitness: max 0.917(159), min 0.333(1), ave 0.909
Test execution time: sum 1454126 ms, max 1440021 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:06:06 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-13 21:06:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 7 minutes 36 seconds
Variants: generated 400, build-succeeded 169, build-failed 121, syntax-invalid 87, redundant 23
Fitness: max 1(1), min 0.75(1), ave 0.915
Test execution time: sum 14696 ms, max 149 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:06:38 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-13 21:07:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 8 minutes 8 seconds
Variants: generated 400, build-succeeded 169, build-failed 117, syntax-invalid 96, redundant 18
Fitness: max 1(1), min 0.917(168), ave 0.917
Test execution time: sum 14866 ms, max 148 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:07:10 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-13 21:07:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 8 minutes 38 seconds
Variants: generated 400, build-succeeded 157, build-failed 126, syntax-invalid 90, redundant 27
Fitness: max 1(1), min 0.75(3), ave 0.914
Test execution time: sum 13825 ms, max 154 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:07:40 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-13 21:08:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 9 minutes 12 seconds
Variants: generated 400, build-succeeded 177, build-failed 117, syntax-invalid 79, redundant 27
Fitness: max 0.917(175), min 0.75(2), ave 0.915
Test execution time: sum 15530 ms, max 149 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:08:14 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-13 21:23:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 24 minutes 45 seconds
Variants: generated 400, build-succeeded 174, build-failed 115, syntax-invalid 94, redundant 17
Fitness: max 0.917(171), min 0.583(1), ave 0.913
Test execution time: sum 915077 ms, max 900023 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:23:47 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-13 21:24:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 25 minutes 19 seconds
Variants: generated 400, build-succeeded 178, build-failed 120, syntax-invalid 82, redundant 20
Fitness: max 1(1), min 0.75(2), ave 0.915
Test execution time: sum 15384 ms, max 135 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:24:21 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-13 21:24:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 25 minutes 53 seconds
Variants: generated 400, build-succeeded 170, build-failed 117, syntax-invalid 96, redundant 17
Fitness: max 1(4), min 0.917(166), ave 0.919
Test execution time: sum 15553 ms, max 162 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:24:55 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-13 21:25:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 26 minutes 27 seconds
Variants: generated 400, build-succeeded 179, build-failed 106, syntax-invalid 100, redundant 15
Fitness: max 1(1), min 0.75(4), ave 0.913
Test execution time: sum 15696 ms, max 153 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:25:29 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-13 21:26:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 27 minutes 4 seconds
Variants: generated 400, build-succeeded 191, build-failed 113, syntax-invalid 71, redundant 25
Fitness: max 1(2), min 0.75(1), ave 0.917
Test execution time: sum 17191 ms, max 160 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 21:26:05 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-13 21:26:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 27 minutes 41 seconds
Variants: generated 400, build-succeeded 191, build-failed 111, syntax-invalid 80, redundant 18
Fitness: max 0.917(189), min 0.667(1), ave 0.914
Test execution time: sum 17110 ms, max 150 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 21:26:43 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-13 21:27:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 28 minutes 20 seconds
Variants: generated 400, build-succeeded 198, build-failed 109, syntax-invalid 70, redundant 23
Fitness: max 0.917(194), min 0.75(4), ave 0.913
Test execution time: sum 18183 ms, max 155 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:27:22 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-13 21:51:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 52 minutes 56 seconds
Variants: generated 400, build-succeeded 177, build-failed 108, syntax-invalid 94, redundant 21
Fitness: max 1(1), min 0.333(1), ave 0.91
Test execution time: sum 1455991 ms, max 1440022 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:51:58 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-13 21:52:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 53 minutes 32 seconds
Variants: generated 400, build-succeeded 183, build-failed 111, syntax-invalid 87, redundant 19
Fitness: max 0.917(180), min 0.667(1), ave 0.913
Test execution time: sum 15871 ms, max 144 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:52:34 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-13 21:53:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 54 minutes 9 seconds
Variants: generated 400, build-succeeded 184, build-failed 108, syntax-invalid 86, redundant 22
Fitness: max 0.917(180), min 0.333(1), ave 0.909
Test execution time: sum 16082 ms, max 145 ms, min 20 ms
----------------------------------------------------------------

2023-11-13 21:53:11 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-13 21:53:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 54 minutes 48 seconds
Variants: generated 400, build-succeeded 187, build-failed 125, syntax-invalid 74, redundant 14
Fitness: max 0.917(183), min 0.333(1), ave 0.91
Test execution time: sum 16549 ms, max 161 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 21:53:50 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-13 21:54:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 55 minutes 24 seconds
Variants: generated 400, build-succeeded 168, build-failed 112, syntax-invalid 91, redundant 29
Fitness: max 1(1), min 0.75(2), ave 0.915
Test execution time: sum 15034 ms, max 152 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:54:26 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-13 21:55:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 56 minutes 2 seconds
Variants: generated 400, build-succeeded 190, build-failed 108, syntax-invalid 83, redundant 19
Fitness: max 1(3), min 0.75(1), ave 0.917
Test execution time: sum 16685 ms, max 201 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:55:03 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-13 21:55:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 56 minutes 42 seconds
Variants: generated 400, build-succeeded 195, build-failed 123, syntax-invalid 60, redundant 22
Fitness: max 0.917(193), min 0.75(2), ave 0.915
Test execution time: sum 17474 ms, max 148 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 21:55:44 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-13 21:56:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 57 minutes 20 seconds
Variants: generated 400, build-succeeded 181, build-failed 122, syntax-invalid 78, redundant 19
Fitness: max 0.917(179), min 0.667(1), ave 0.914
Test execution time: sum 16423 ms, max 155 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 21:56:22 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-13 21:57:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 57 minutes 58 seconds
Variants: generated 400, build-succeeded 181, build-failed 122, syntax-invalid 81, redundant 16
Fitness: max 0.917(179), min 0.75(2), ave 0.915
Test execution time: sum 16369 ms, max 158 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:57:00 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-13 21:57:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 58 minutes 39 seconds
Variants: generated 400, build-succeeded 199, build-failed 120, syntax-invalid 66, redundant 15
Fitness: max 1(1), min 0.917(198), ave 0.917
Test execution time: sum 17397 ms, max 185 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 21:57:41 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-13 21:58:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 59 minutes 19 seconds
Variants: generated 400, build-succeeded 189, build-failed 121, syntax-invalid 67, redundant 23
Fitness: max 1(2), min 0.917(187), ave 0.918
Test execution time: sum 16860 ms, max 155 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:58:21 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-13 21:59:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 0 seconds
Variants: generated 400, build-succeeded 194, build-failed 117, syntax-invalid 69, redundant 20
Fitness: max 1(2), min 0.917(192), ave 0.918
Test execution time: sum 17298 ms, max 152 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 21:59:02 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-13 21:59:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 40 seconds
Variants: generated 400, build-succeeded 188, build-failed 124, syntax-invalid 67, redundant 21
Fitness: max 0.917(185), min 0.75(2), ave 0.914
Test execution time: sum 16999 ms, max 205 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 21:59:42 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-13 22:00:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 1 minutes 21 seconds
Variants: generated 400, build-succeeded 192, build-failed 108, syntax-invalid 74, redundant 26
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 17050 ms, max 150 ms, min 28 ms
----------------------------------------------------------------

2023-11-13 22:00:23 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-13 22:01:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 2 minutes 1 seconds
Variants: generated 400, build-succeeded 177, build-failed 122, syntax-invalid 87, redundant 14
Fitness: max 1(2), min 0.833(1), ave 0.917
Test execution time: sum 16223 ms, max 160 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 22:01:03 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-13 22:01:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 2 minutes 42 seconds
Variants: generated 400, build-succeeded 186, build-failed 123, syntax-invalid 75, redundant 16
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 16622 ms, max 157 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:01:44 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-13 22:02:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 3 minutes 21 seconds
Variants: generated 400, build-succeeded 177, build-failed 120, syntax-invalid 87, redundant 16
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 16146 ms, max 193 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:02:23 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-13 22:03:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 4 minutes 0 seconds
Variants: generated 400, build-succeeded 172, build-failed 123, syntax-invalid 87, redundant 18
Fitness: max 1(1), min 0.75(1), ave 0.915
Test execution time: sum 15323 ms, max 149 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:03:02 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-13 22:03:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 4 minutes 39 seconds
Variants: generated 400, build-succeeded 164, build-failed 129, syntax-invalid 86, redundant 21
Fitness: max 0.917(161), min 0.75(3), ave 0.914
Test execution time: sum 14929 ms, max 152 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 22:03:41 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-13 22:04:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 5 minutes 19 seconds
Variants: generated 400, build-succeeded 176, build-failed 122, syntax-invalid 81, redundant 21
Fitness: max 1(1), min 0.75(2), ave 0.914
Test execution time: sum 16024 ms, max 157 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:04:21 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-13 22:05:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 6 minutes 1 seconds
Variants: generated 400, build-succeeded 191, build-failed 109, syntax-invalid 82, redundant 18
Fitness: max 1(2), min 0.75(2), ave 0.916
Test execution time: sum 17617 ms, max 147 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:05:03 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-13 22:05:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 6 minutes 41 seconds
Variants: generated 400, build-succeeded 168, build-failed 119, syntax-invalid 95, redundant 18
Fitness: max 1(1), min 0.5(1), ave 0.911
Test execution time: sum 15413 ms, max 178 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:05:43 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-13 22:06:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 7 minutes 22 seconds
Variants: generated 400, build-succeeded 179, build-failed 121, syntax-invalid 84, redundant 16
Fitness: max 0.917(179), min 0.917(179), ave 0.917
Test execution time: sum 16836 ms, max 160 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 22:06:24 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-13 22:07:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 8 minutes 6 seconds
Variants: generated 400, build-succeeded 189, build-failed 121, syntax-invalid 71, redundant 19
Fitness: max 0.917(188), min 0.75(1), ave 0.916
Test execution time: sum 17649 ms, max 161 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:07:08 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-13 22:07:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 8 minutes 48 seconds
Variants: generated 400, build-succeeded 180, build-failed 113, syntax-invalid 81, redundant 26
Fitness: max 1(3), min 0.75(2), ave 0.916
Test execution time: sum 16609 ms, max 156 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:07:50 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-13 22:08:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 9 minutes 30 seconds
Variants: generated 400, build-succeeded 183, build-failed 113, syntax-invalid 85, redundant 19
Fitness: max 1(3), min 0.75(1), ave 0.917
Test execution time: sum 16961 ms, max 172 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:08:32 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-13 22:24:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 25 minutes 12 seconds
Variants: generated 400, build-succeeded 175, build-failed 118, syntax-invalid 84, redundant 23
Fitness: max 1(2), min 0.583(1), ave 0.914
Test execution time: sum 915981 ms, max 900024 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:24:14 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-13 22:24:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 25 minutes 55 seconds
Variants: generated 400, build-succeeded 181, build-failed 115, syntax-invalid 90, redundant 14
Fitness: max 0.917(180), min 0.75(1), ave 0.916
Test execution time: sum 17040 ms, max 158 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:24:57 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-13 22:25:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 26 minutes 40 seconds
Variants: generated 400, build-succeeded 191, build-failed 113, syntax-invalid 78, redundant 18
Fitness: max 0.917(190), min 0.5(1), ave 0.914
Test execution time: sum 18132 ms, max 159 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:25:42 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-13 22:26:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 27 minutes 25 seconds
Variants: generated 400, build-succeeded 189, build-failed 109, syntax-invalid 80, redundant 22
Fitness: max 0.917(187), min 0.75(2), ave 0.915
Test execution time: sum 17386 ms, max 171 ms, min 26 ms
----------------------------------------------------------------

2023-11-13 22:26:26 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-13 22:27:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 28 minutes 10 seconds
Variants: generated 400, build-succeeded 188, build-failed 123, syntax-invalid 71, redundant 18
Fitness: max 1(1), min 0.583(1), ave 0.914
Test execution time: sum 17655 ms, max 156 ms, min 21 ms
----------------------------------------------------------------

2023-11-13 22:27:12 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-13 22:27:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 28 minutes 55 seconds
Variants: generated 400, build-succeeded 181, build-failed 130, syntax-invalid 72, redundant 17
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 17337 ms, max 607 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 22:27:57 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-13 22:28:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 29 minutes 39 seconds
Variants: generated 400, build-succeeded 181, build-failed 117, syntax-invalid 85, redundant 17
Fitness: max 0.917(179), min 0.75(2), ave 0.915
Test execution time: sum 16853 ms, max 153 ms, min 24 ms
----------------------------------------------------------------

2023-11-13 22:28:41 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-13 22:29:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 30 minutes 27 seconds
Variants: generated 400, build-succeeded 200, build-failed 114, syntax-invalid 68, redundant 18
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 18876 ms, max 152 ms, min 32 ms
----------------------------------------------------------------

2023-11-13 22:29:29 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-13 22:30:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 31 minutes 13 seconds
Variants: generated 400, build-succeeded 198, build-failed 108, syntax-invalid 74, redundant 20
Fitness: max 1(1), min 0.667(1), ave 0.915
Test execution time: sum 18277 ms, max 152 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:30:15 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-13 22:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 31 minutes 57 seconds
Variants: generated 400, build-succeeded 170, build-failed 130, syntax-invalid 80, redundant 20
Fitness: max 0.917(168), min 0.75(2), ave 0.915
Test execution time: sum 15559 ms, max 149 ms, min 29 ms
----------------------------------------------------------------

2023-11-13 22:30:59 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-13 22:31:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 32 minutes 43 seconds
Variants: generated 400, build-succeeded 191, build-failed 111, syntax-invalid 76, redundant 22
Fitness: max 0.917(186), min 0.333(1), ave 0.91
Test execution time: sum 17767 ms, max 163 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 22:31:45 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-13 22:32:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 33 minutes 29 seconds
Variants: generated 400, build-succeeded 186, build-failed 109, syntax-invalid 87, redundant 18
Fitness: max 0.917(184), min 0.583(1), ave 0.914
Test execution time: sum 17549 ms, max 160 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 22:32:31 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-13 22:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 34 minutes 16 seconds
Variants: generated 400, build-succeeded 193, build-failed 105, syntax-invalid 82, redundant 20
Fitness: max 0.917(191), min 0.75(2), ave 0.915
Test execution time: sum 18293 ms, max 161 ms, min 24 ms
----------------------------------------------------------------

2023-11-13 22:33:18 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-13 22:34:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 35 minutes 4 seconds
Variants: generated 400, build-succeeded 195, build-failed 120, syntax-invalid 67, redundant 18
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 18113 ms, max 153 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 22:34:06 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-13 22:49:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 50 minutes 53 seconds
Variants: generated 400, build-succeeded 202, build-failed 111, syntax-invalid 73, redundant 14
Fitness: max 1(1), min 0.583(1), ave 0.913
Test execution time: sum 918636 ms, max 900024 ms, min 24 ms
----------------------------------------------------------------

2023-11-13 22:49:55 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-13 23:14:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 15 minutes 40 seconds
Variants: generated 400, build-succeeded 189, build-failed 107, syntax-invalid 81, redundant 23
Fitness: max 1(1), min 0.333(1), ave 0.912
Test execution time: sum 1457734 ms, max 1440022 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 23:14:42 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-13 23:15:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 16 minutes 29 seconds
Variants: generated 400, build-succeeded 195, build-failed 111, syntax-invalid 75, redundant 19
Fitness: max 1(1), min 0.75(3), ave 0.915
Test execution time: sum 18149 ms, max 213 ms, min 23 ms
----------------------------------------------------------------

2023-11-13 23:15:31 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-13 23:16:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 17 minutes 15 seconds
Variants: generated 400, build-succeeded 181, build-failed 111, syntax-invalid 86, redundant 22
Fitness: max 1(1), min 0(1), ave 0.91
Test execution time: sum 16610 ms, max 152 ms, min 22 ms
----------------------------------------------------------------

2023-11-13 23:16:17 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-13 23:17:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 4 seconds
Variants: generated 400, build-succeeded 193, build-failed 109, syntax-invalid 82, redundant 16
Fitness: max 0.917(192), min 0.75(1), ave 0.916
Test execution time: sum 18283 ms, max 160 ms, min 35 ms
----------------------------------------------------------------

2023-11-13 23:17:06 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-13 23:17:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 52 seconds
Variants: generated 400, build-succeeded 193, build-failed 107, syntax-invalid 81, redundant 19
Fitness: max 0.917(190), min 0.75(3), ave 0.914
Test execution time: sum 17971 ms, max 153 ms, min 24 ms
----------------------------------------------------------------

2023-11-13 23:17:54 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-13 23:42:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 43 minutes 41 seconds
Variants: generated 400, build-succeeded 190, build-failed 113, syntax-invalid 84, redundant 13
Fitness: max 0.917(189), min 0.333(1), ave 0.914
Test execution time: sum 1457514 ms, max 1440022 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 23:42:43 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-13 23:58:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 59 minutes 27 seconds
Variants: generated 400, build-succeeded 174, build-failed 117, syntax-invalid 98, redundant 11
Fitness: max 1(1), min 0.583(1), ave 0.913
Test execution time: sum 915594 ms, max 900024 ms, min 24 ms
----------------------------------------------------------------

2023-11-13 23:58:29 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-13 23:59:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 17 seconds
Variants: generated 400, build-succeeded 200, build-failed 109, syntax-invalid 79, redundant 12
Fitness: max 1(1), min 0.667(1), ave 0.914
Test execution time: sum 18293 ms, max 157 ms, min 24 ms
----------------------------------------------------------------

2023-11-13 23:59:19 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-14 00:00:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 1 minutes 7 seconds
Variants: generated 400, build-succeeded 187, build-failed 116, syntax-invalid 77, redundant 20
Fitness: max 1(2), min 0.75(1), ave 0.917
Test execution time: sum 17155 ms, max 156 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:00:09 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-14 00:00:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 1 minutes 52 seconds
Variants: generated 400, build-succeeded 160, build-failed 121, syntax-invalid 99, redundant 20
Fitness: max 1(1), min 0.75(2), ave 0.915
Test execution time: sum 14800 ms, max 620 ms, min 23 ms
----------------------------------------------------------------

2023-11-14 00:00:54 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-14 00:01:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 2 minutes 42 seconds
Variants: generated 400, build-succeeded 197, build-failed 114, syntax-invalid 69, redundant 20
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 17766 ms, max 150 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:01:44 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-14 00:02:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 3 minutes 33 seconds
Variants: generated 400, build-succeeded 187, build-failed 116, syntax-invalid 79, redundant 18
Fitness: max 1(1), min 0.75(2), ave 0.915
Test execution time: sum 17603 ms, max 157 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:02:35 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-14 00:18:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 19 minutes 17 seconds
Variants: generated 400, build-succeeded 190, build-failed 111, syntax-invalid 83, redundant 16
Fitness: max 1(1), min 0.333(1), ave 0.911
Test execution time: sum 911857 ms, max 894657 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:18:19 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-14 00:19:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 20 minutes 9 seconds
Variants: generated 400, build-succeeded 192, build-failed 123, syntax-invalid 73, redundant 12
Fitness: max 0.917(192), min 0.917(192), ave 0.917
Test execution time: sum 17910 ms, max 159 ms, min 69 ms
----------------------------------------------------------------

2023-11-14 00:19:11 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-14 00:35:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 36 minutes 3 seconds
Variants: generated 400, build-succeeded 203, build-failed 109, syntax-invalid 68, redundant 20
Fitness: max 1(2), min 0.583(1), ave 0.915
Test execution time: sum 918726 ms, max 900024 ms, min 71 ms
----------------------------------------------------------------

2023-11-14 00:35:05 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-14 00:35:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 36 minutes 57 seconds
Variants: generated 400, build-succeeded 203, build-failed 114, syntax-invalid 66, redundant 17
Fitness: max 1(3), min 0.917(200), ave 0.918
Test execution time: sum 19185 ms, max 155 ms, min 70 ms
----------------------------------------------------------------

2023-11-14 00:35:59 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-14 00:36:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 37 minutes 50 seconds
Variants: generated 400, build-succeeded 200, build-failed 106, syntax-invalid 76, redundant 18
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 18767 ms, max 149 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:36:52 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-14 00:37:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 38 minutes 43 seconds
Variants: generated 400, build-succeeded 202, build-failed 108, syntax-invalid 79, redundant 11
Fitness: max 1(1), min 0.75(2), ave 0.915
Test execution time: sum 18818 ms, max 152 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:37:45 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-14 00:53:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 54 minutes 36 seconds
Variants: generated 400, build-succeeded 191, build-failed 114, syntax-invalid 77, redundant 18
Fitness: max 0.917(188), min 0.583(1), ave 0.913
Test execution time: sum 917419 ms, max 900025 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:53:38 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-14 00:54:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 55 minutes 29 seconds
Variants: generated 400, build-succeeded 194, build-failed 97, syntax-invalid 84, redundant 25
Fitness: max 0.917(192), min 0.75(2), ave 0.915
Test execution time: sum 18101 ms, max 151 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:54:31 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-14 00:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 56 minutes 25 seconds
Variants: generated 400, build-succeeded 201, build-failed 116, syntax-invalid 65, redundant 18
Fitness: max 1(1), min 0.917(200), ave 0.917
Test execution time: sum 19175 ms, max 154 ms, min 67 ms
----------------------------------------------------------------

2023-11-14 00:55:27 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-14 00:56:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 57 minutes 18 seconds
Variants: generated 400, build-succeeded 182, build-failed 126, syntax-invalid 79, redundant 13
Fitness: max 0.917(181), min 0.833(1), ave 0.916
Test execution time: sum 17388 ms, max 156 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 00:56:20 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-14 00:57:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 58 minutes 13 seconds
Variants: generated 400, build-succeeded 197, build-failed 100, syntax-invalid 84, redundant 19
Fitness: max 0.917(194), min 0.75(3), ave 0.914
Test execution time: sum 18463 ms, max 156 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:57:15 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-14 00:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 59 minutes 5 seconds
Variants: generated 400, build-succeeded 176, build-failed 122, syntax-invalid 91, redundant 11
Fitness: max 1(1), min 0.417(1), ave 0.912
Test execution time: sum 16484 ms, max 160 ms, min 23 ms
----------------------------------------------------------------

2023-11-14 00:58:07 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-14 00:59:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 59 minutes 59 seconds
Variants: generated 400, build-succeeded 182, build-failed 123, syntax-invalid 78, redundant 17
Fitness: max 1(1), min 0.75(1), ave 0.916
Test execution time: sum 17117 ms, max 160 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 00:59:01 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-14 00:59:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 54 seconds
Variants: generated 400, build-succeeded 197, build-failed 103, syntax-invalid 77, redundant 23
Fitness: max 0.917(197), min 0.917(197), ave 0.917
Test execution time: sum 18527 ms, max 156 ms, min 70 ms
----------------------------------------------------------------

2023-11-14 00:59:56 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-14 01:00:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 1 minutes 53 seconds
Variants: generated 400, build-succeeded 213, build-failed 100, syntax-invalid 69, redundant 18
Fitness: max 1(2), min 0.75(1), ave 0.916
Test execution time: sum 20168 ms, max 153 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 01:00:55 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-14 01:01:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 2 minutes 50 seconds
Variants: generated 400, build-succeeded 211, build-failed 96, syntax-invalid 79, redundant 14
Fitness: max 1(1), min 0.75(3), ave 0.915
Test execution time: sum 19445 ms, max 153 ms, min 25 ms
----------------------------------------------------------------

2023-11-14 01:01:52 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-14 01:02:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 3 minutes 6 seconds
Variants: generated 102, build-succeeded 41, build-failed 55, syntax-invalid 0, redundant 6
Fitness: max 1(2), min 0.917(39), ave 0.921
Test execution time: sum 3680 ms, max 128 ms, min 71 ms
----------------------------------------------------------------

2023-11-14 01:02:08 [main] [INFO]  KGenProgMain - GA stopped
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -166,7 +166,7 @@
                 if (!base64.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
-                    if (c > 0 && b.length == len) {
+                    if (offset < 0 || len < 0) {
                         base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -418,7 +418,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v440)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v440)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v440)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v440)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +422,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v440)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v440)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v440)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1581)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1581)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1581)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1581)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -418,9 +418,7 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
-            readPos = outPos;
         }
     }
     /**
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1581)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1581)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1581)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1866)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1866)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1866)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1866)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,13 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            eof = true;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1866)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1866)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v1866)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2017)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2017)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2017)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2017)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,16 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2017)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2017)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2017)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -166,7 +166,7 @@
                 if (!base64.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
-                    if (c > 0 && b.length == len) {
+                    if (offset > b.length || offset + len > b.length) {
                         base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2153)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				readPos = 0;
+				String sep = StringUtils.newStringUtf8(lineSeparator);
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2551)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2837)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2837)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2837)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2837)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +421,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2837)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2837)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v2837)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v3326)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v3326)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v3326)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v3326)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +428,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v3326)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v3326)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v3326)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,22 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4078)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4697)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4697)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4697)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4697)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,27 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4697)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4697)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4697)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,16 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+				int bytesCopied = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v4850)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5450)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5450)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5450)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5450)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,31 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+				int bytesCopied = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5450)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5450)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5450)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,35 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				eof = true;
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+				pos = 0;
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6186)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6186)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6186)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6186)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,17 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				readPos = 0;
+				byte[] buf = new byte[pos - readPos];
+				readResults(buf, 0, buf.length);
+				readPos = 0;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -417,7 +427,7 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
+        if (0 == modulus) {
             buffer = out;
             pos = outPos;
             readPos = outPos;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6186)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6186)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6186)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6718)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6718)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6718)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6718)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,42 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				modulus = (++modulus) % 4;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6718)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6718)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v6718)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,23 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+            {
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7392)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v7557)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8465)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8465)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8465)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8465)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,20 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				resizeBuffer();
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
+			byte[] result = new byte[pos];
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8465)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8465)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8465)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,28 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,17 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer = null;
+			lineLength = 0;  // disable chunk-separating
+            {
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v9750)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v10161)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v10161)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v10161)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v10161)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,32 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				int bytesCopied = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				int bytesCopied = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +442,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v10161)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v10161)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v10161)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11213)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11213)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11213)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11213)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,40 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+			}
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11213)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11213)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11213)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,30 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -419,7 +442,8 @@
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
             buffer = out;
-            pos = outPos;
+            buffer = out;
+			pos = outPos;
             readPos = outPos;
         }
     }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v11395)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12141)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12141)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12141)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12141)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,43 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				eof = true;
+				readPos = 0;
+			}
+			{
+				resizeBuffer();
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12141)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12141)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12141)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12159)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12159)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12159)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12159)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,48 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer = null;
+				pos = 0;
+				eof = false;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +459,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12159)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12159)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v12159)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v13213)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v13213)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v13213)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v13213)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,37 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer[pos++] = PAD;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer = null;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1051,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v13213)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v13213)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v13213)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,42 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			eof = true;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14407)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14407)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14407)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14407)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,40 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer = null;
+			lineLength = 0;  // disable chunk-separating
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +372,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            pos += lineSeparator.length;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -484,6 +517,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14407)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14407)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14407)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14864)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14864)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14864)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14864)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,44 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            currentLinePos = 0;
+            {
+				resizeBuffer();
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = false;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14864)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14864)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v14864)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16141)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16141)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16141)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16141)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,47 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16141)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16141)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16141)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16472)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16472)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16472)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16472)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,45 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+				readPos = 0;
+			}
+			{
+				buffer = null;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16472)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16472)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16472)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,56 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				resizeBuffer();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1071,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16505)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,45 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				resizeBuffer();
+			}
+			{
+				pos = 0;
+			}
+			{
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16729)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16729)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16729)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16729)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,46 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				eof = true;
+				currentLinePos = 0;
+				currentLinePos += 4;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer = null;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				{
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16729)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16729)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16729)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,46 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+				reset();
+			}
+			{
+				pos = 0;
+				eof = false;
+			}
+			{
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v16854)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,52 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+				readPos = 0;
+				eof = true;
+				{
+					buffer = new byte[DEFAULT_BUFFER_SIZE];
+					pos = 0;
+					readPos = 0;
+				}
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				resizeBuffer();
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17351)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,57 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				eof = true;
+				buffer = null;
+			}
+			{
+				x = x << 6;
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+				pos = 0;
+				currentLinePos += 4;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v18527)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v18527)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v18527)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v18527)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,71 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v18527)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v18527)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v18527)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,41 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+				int startSrc = 0;
+				readPos = 0;
+			}
+			{
+				x = x << 6;
+				readPos = 0;
+			}
+			{
+				resizeBuffer();
+				resizeBuffer();
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20149)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,56 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +389,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20415)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,72 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				modulus = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1087,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,51 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v20548)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22141)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22141)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22141)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22141)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,58 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1073,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22141)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22141)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22141)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22460)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22460)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22460)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22460)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,64 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +397,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22460)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22460)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22460)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,53 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+				buffer[pos++] = PAD;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +386,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            pos += lineSeparator.length;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -418,7 +465,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22519)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,54 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				byte[] result = new byte[pos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +387,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,6 +1070,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22975)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22987)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22987)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22987)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22987)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,73 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22987)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22987)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v22987)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,51 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+				pos = 0;
+				byte[] result = new byte[pos];
+			}
+			{
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v23710)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -166,7 +166,7 @@
                 if (!base64.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
-                    if (c > 0 && b.length == len) {
+                    if (offset < 0 || len < 0) {
                         base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,61 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = PAD;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24165)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24189)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24189)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24189)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24189)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,85 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineLength = 0;
+			}
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24189)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24189)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24189)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24581)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24581)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24581)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24581)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,69 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24581)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24581)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24581)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,67 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				byte[] result = new byte[pos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1021,7 +1080,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v25362)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v25362)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v25362)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v25362)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,77 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				modulus = 0;
+				reset();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v25362)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v25362)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v25362)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26073)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26073)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26073)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26073)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,75 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				modulus = (++modulus) % 4;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1025,7 +1093,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26073)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26073)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26073)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26557)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26557)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26557)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26557)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,72 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1025,7 +1090,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26557)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26557)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26557)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,65 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+				readPos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26585)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,61 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				eof = true;
+				modulus = (++modulus) % 4;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +394,9 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v26909)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,80 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				currentLinePos = 0;
+				reset();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28119)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,51 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+			}
+			{
+				pos = 0;
+			}
+			{
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1066,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28132)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,56 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				modulus = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				modulus = (++modulus) % 4;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1025,7 +1074,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28187)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28543)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28543)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28543)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28543)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,71 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				currentLinePos = 0;
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28543)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28543)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28543)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28570)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28570)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28570)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28570)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,81 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28570)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28570)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28570)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,62 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				byte[] buf = new byte[pos - readPos];
+				modulus = (++modulus) % 4;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28595)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,76 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				byte[] result = new byte[pos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28811)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,71 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				resizeBuffer();
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+				byte[] result = new byte[pos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +482,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30453)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30453)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30453)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30453)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,67 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				modulus = (++modulus) % 4;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30453)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30453)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30453)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30894)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30894)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30894)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30894)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,78 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +411,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30894)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30894)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v30894)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v31757)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v31757)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v31757)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v31757)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,79 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				lineLength = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				modulus = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v31757)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v31757)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v31757)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,80 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1095,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v32075)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,67 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				reset();
+			}
+			{
+				resizeBuffer();
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +478,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -1022,6 +1081,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34104)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,78 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+				pos = 0;
+			}
+			{
+				pos = 0;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				eof = true;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1093,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34588)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,100 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				eof = true;
+				byte[] buf = new byte[pos - readPos];
+			}
+			{
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				buffer[pos++] = PAD;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v34903)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,79 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+			}
+			{
+				int bytesCopied = 0;
+				pos = 0;
+				byte[] result = new byte[pos];
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				resizeBuffer();
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35218)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.binary.Base64InputStream
+++ org.apache.commons.codec.binary.Base64InputStream
@@ -167,7 +167,6 @@
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
                         base64.encode(buf, 0, c);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,72 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				x = x << 6;
+			}
+			{
+			}
+			{
+				pos = 0;
+				byte[] result = new byte[pos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +405,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,6 +1088,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v35647)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,99 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				pos = 0;
+				x = x << 6;
+				byte[] result = new byte[pos];
+			}
+			{
+				resizeBuffer();
+				pos = 0;
+			}
+			{
+				pos = 0;
+				eof = true;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37229)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37736)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37736)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37736)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37736)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,59 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				modulus = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1074,9 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37736)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37736)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v37736)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38095)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38095)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38095)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38095)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,88 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -418,7 +499,7 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
+            resizeBuffer();
             pos = outPos;
             readPos = outPos;
         }
@@ -1022,11 +1103,11 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38095)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38095)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38095)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,82 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				reset();
+				resizeBuffer();
+			}
+			{
+				resizeBuffer();
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +415,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38175)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38445)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38445)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38445)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38445)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,89 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			{
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +422,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,6 +1105,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38445)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38445)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38445)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,59 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+				byte[] result = new byte[pos];
+			}
+			{
+				byte[] result = new byte[pos];
+			}
+			{
+				int bytesCopied = 0;
+				eof = true;
+			}
+			{
+				pos = 0;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +392,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,6 +1075,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v38887)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39339)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39339)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39339)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39339)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,92 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				lineSeparator = CHUNK_SEPARATOR;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				reset();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +425,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,9 +1108,9 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39339)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39339)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39339)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39737)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39737)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39737)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39737)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,96 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				resizeBuffer();
+				buffer[pos++] = PAD;
+			}
+			{
+				eof = true;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				buffer[pos++] = PAD;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +429,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,6 +1112,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39737)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39737)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v39737)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40533)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40533)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40533)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40533)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,101 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				eof = true;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				resizeBuffer();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +434,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40533)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40533)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40533)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40596)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40596)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40596)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40596)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,72 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				pos = 0;
+			}
+			{
+				pos = 0;
+			}
+			{
+				pos = 0;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+				eof = true;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +405,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,6 +1088,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40596)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40596)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40596)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40866)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40866)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40866)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40866)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,90 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				currentLinePos += 4;
+			}
+			{
+			}
+			{
+				resizeBuffer();
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1105,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40866)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40866)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40866)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40932)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40932)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40932)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40932)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,103 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				lineSeparator = CHUNK_SEPARATOR;
+				lineSeparator = CHUNK_SEPARATOR;
+			}
+			{
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40932)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40932)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40932)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40988)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40988)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40988)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40988)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,82 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1097,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40988)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40988)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v40988)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,84 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				resizeBuffer();
+				reset();
+				eof = true;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1023,7 +1100,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41284)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41739)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41739)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41739)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41739)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,103 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+			}
+			{
+				resizeBuffer();
+			}
+			{
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			{
+				x = x << 6;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				eof = true;
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41739)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41739)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v41739)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v42988)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v42988)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v42988)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v42988)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,96 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				resizeBuffer();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +429,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -418,7 +508,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v42988)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v42988)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v42988)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44192)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44192)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44192)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44192)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,84 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				byte[] result = new byte[pos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				x = x << 6;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +417,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -1022,11 +1100,11 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44192)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44192)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44192)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,95 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -340,7 +428,8 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            readPos = 0;
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v44493)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45265)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45265)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45265)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45265)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,112 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				x = x << 6;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1127,7 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45265)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45265)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45265)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,104 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				reset();
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,11 +1119,11 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45324)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,104 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				{
+					lineLength = 0;
+					lineSeparator = CHUNK_SEPARATOR;
+				}
+				eof = true;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1022,6 +1119,8 @@
      */
     private void reset() {
         buffer = null;
+		buffer = null;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46076)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46076)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46076)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46076)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,113 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+				reset();
+			}
+			{
+				eof = true;
+			}
+			{
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				int startSrc = 0;
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46076)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46076)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46076)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,108 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            {
+			}
+			{
+				pos = 0;
+				byte[] result = new byte[pos];
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				eof = true;
+				pos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -1026,7 +1127,6 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
-        eof = false;
     }
 
 }
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.binary.StringUtils
+++ org.apache.commons.codec.binary.StringUtils
@@ -150,7 +150,6 @@
      */
     public static byte[] getBytesUnchecked(String string, String charsetName) {
         if (string == null) {
-            return null;
         }
         try {
             return string.getBytes(charsetName);
@@ -184,7 +183,6 @@
      */
     public static String newString(byte[] bytes, String charsetName) {
         if (bytes == null) {
-            return null;
         }
         try {
             return new String(bytes, charsetName);
2023-11-14 01:02:08 [main] [INFO]  PatchLogExporter - patch (v46102)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 01:02:08 [main] [INFO]  KGenProgMain - Summary
Reached generation = 117
Generated variants = 46102
Syntax valid variants = 35503
Build succeeded variants = 18955
Time elapsed = 11 hours 3 minutes 6 seconds
Exit status = SUCCESS
