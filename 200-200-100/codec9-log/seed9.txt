2023-11-14 02:59:22 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-14 02:59:22 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-14 02:59:22 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-14 02:59:22 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 9 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-14 02:59:30 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-14 02:59:30 [main] [INFO]  KGenProgMain - GA started
2023-11-14 02:59:30 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-14 02:59:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 200, build-succeeded 19, build-failed 112, syntax-invalid 9, redundant 60
Fitness: max 1(1), min 0.49(1), ave 0.819
Test execution time: sum 2823 ms, max 322 ms, min 87 ms
----------------------------------------------------------------

2023-11-14 02:59:45 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-14 02:59:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 seconds
Variants: generated 200, build-succeeded 47, build-failed 99, syntax-invalid 18, redundant 36
Fitness: max 0.98(4), min 0.49(10), ave 0.72
Test execution time: sum 3865 ms, max 225 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 02:59:55 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-14 03:00:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 seconds
Variants: generated 400, build-succeeded 124, build-failed 112, syntax-invalid 36, redundant 128
Fitness: max 1(2), min 0.157(1), ave 0.718
Test execution time: sum 9226 ms, max 229 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:00:15 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-14 03:00:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 3 seconds
Variants: generated 400, build-succeeded 127, build-failed 103, syntax-invalid 33, redundant 137
Fitness: max 1(3), min 0.216(1), ave 0.789
Test execution time: sum 9641 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:00:33 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-14 03:00:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 26 seconds
Variants: generated 400, build-succeeded 131, build-failed 119, syntax-invalid 32, redundant 118
Fitness: max 1(6), min 0.216(1), ave 0.858
Test execution time: sum 11583 ms, max 1393 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:00:57 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-14 03:01:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 50 seconds
Variants: generated 400, build-succeeded 131, build-failed 116, syntax-invalid 44, redundant 109
Fitness: max 1(2), min 0.51(1), ave 0.922
Test execution time: sum 11952 ms, max 729 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:01:21 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-14 03:01:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 9 seconds
Variants: generated 400, build-succeeded 113, build-failed 122, syntax-invalid 27, redundant 138
Fitness: max 1(7), min 0.49(1), ave 0.934
Test execution time: sum 8673 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:01:39 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-14 03:02:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 30 seconds
Variants: generated 400, build-succeeded 132, build-failed 132, syntax-invalid 29, redundant 107
Fitness: max 1(6), min 0.353(1), ave 0.945
Test execution time: sum 10143 ms, max 178 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:02:01 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-14 03:02:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 51 seconds
Variants: generated 400, build-succeeded 135, build-failed 103, syntax-invalid 43, redundant 119
Fitness: max 1(4), min 0.49(1), ave 0.947
Test execution time: sum 10381 ms, max 172 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:02:22 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-14 03:02:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 12 seconds
Variants: generated 400, build-succeeded 131, build-failed 116, syntax-invalid 26, redundant 127
Fitness: max 1(6), min 0.569(1), ave 0.957
Test execution time: sum 10336 ms, max 210 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:02:43 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-14 03:03:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 36 seconds
Variants: generated 400, build-succeeded 143, build-failed 134, syntax-invalid 30, redundant 93
Fitness: max 1(3), min 0.118(1), ave 0.94
Test execution time: sum 11866 ms, max 883 ms, min 48 ms
----------------------------------------------------------------

2023-11-14 03:03:06 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-14 03:03:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 2 seconds
Variants: generated 400, build-succeeded 156, build-failed 125, syntax-invalid 23, redundant 96
Fitness: max 1(2), min 0.49(2), ave 0.944
Test execution time: sum 12634 ms, max 557 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:03:33 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-14 03:03:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 26 seconds
Variants: generated 400, build-succeeded 164, build-failed 121, syntax-invalid 35, redundant 80
Fitness: max 1(1), min 0.49(2), ave 0.954
Test execution time: sum 12576 ms, max 176 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:03:57 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-14 03:04:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 54 seconds
Variants: generated 400, build-succeeded 176, build-failed 125, syntax-invalid 33, redundant 66
Fitness: max 0.98(147), min 0.49(1), ave 0.959
Test execution time: sum 13771 ms, max 177 ms, min 47 ms
----------------------------------------------------------------

2023-11-14 03:04:25 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-14 03:04:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 21 seconds
Variants: generated 400, build-succeeded 174, build-failed 116, syntax-invalid 48, redundant 62
Fitness: max 0.98(145), min 0.549(1), ave 0.963
Test execution time: sum 13591 ms, max 202 ms, min 62 ms
----------------------------------------------------------------

2023-11-14 03:04:51 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-14 03:05:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 45 seconds
Variants: generated 400, build-succeeded 151, build-failed 137, syntax-invalid 45, redundant 67
Fitness: max 0.98(137), min 0.667(2), ave 0.968
Test execution time: sum 11841 ms, max 201 ms, min 63 ms
----------------------------------------------------------------

2023-11-14 03:05:16 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-14 03:05:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 18 seconds
Variants: generated 400, build-succeeded 178, build-failed 122, syntax-invalid 48, redundant 52
Fitness: max 0.98(153), min 0.314(1), ave 0.951
Test execution time: sum 16248 ms, max 2048 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:05:49 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-14 03:06:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 45 seconds
Variants: generated 400, build-succeeded 169, build-failed 127, syntax-invalid 48, redundant 56
Fitness: max 1(1), min 0.314(1), ave 0.953
Test execution time: sum 13270 ms, max 178 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:06:16 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-14 03:06:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 13 seconds
Variants: generated 400, build-succeeded 177, build-failed 118, syntax-invalid 49, redundant 56
Fitness: max 1(1), min 0.314(1), ave 0.949
Test execution time: sum 13803 ms, max 188 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:06:43 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-14 03:07:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 43 seconds
Variants: generated 400, build-succeeded 188, build-failed 121, syntax-invalid 49, redundant 42
Fitness: max 1(1), min 0.294(1), ave 0.961
Test execution time: sum 14743 ms, max 176 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:07:14 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-14 03:07:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 11 seconds
Variants: generated 400, build-succeeded 171, build-failed 140, syntax-invalid 43, redundant 46
Fitness: max 1(2), min 0.49(1), ave 0.968
Test execution time: sum 13588 ms, max 201 ms, min 49 ms
----------------------------------------------------------------

2023-11-14 03:07:42 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-14 03:08:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 40 seconds
Variants: generated 400, build-succeeded 177, build-failed 125, syntax-invalid 51, redundant 47
Fitness: max 0.98(149), min 0.353(1), ave 0.953
Test execution time: sum 14146 ms, max 176 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:08:10 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-14 03:08:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 10 seconds
Variants: generated 400, build-succeeded 182, build-failed 139, syntax-invalid 49, redundant 30
Fitness: max 0.98(159), min 0.529(1), ave 0.965
Test execution time: sum 14391 ms, max 177 ms, min 61 ms
----------------------------------------------------------------

2023-11-14 03:08:40 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-14 03:09:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 37 seconds
Variants: generated 400, build-succeeded 168, build-failed 137, syntax-invalid 58, redundant 37
Fitness: max 0.98(147), min 0.49(3), ave 0.957
Test execution time: sum 13251 ms, max 166 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:09:08 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-14 03:09:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 7 seconds
Variants: generated 400, build-succeeded 166, build-failed 137, syntax-invalid 60, redundant 37
Fitness: max 1(1), min 0.275(1), ave 0.96
Test execution time: sum 13633 ms, max 674 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:09:37 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-14 03:10:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 34 seconds
Variants: generated 400, build-succeeded 166, build-failed 133, syntax-invalid 66, redundant 35
Fitness: max 0.98(140), min 0.49(1), ave 0.959
Test execution time: sum 13126 ms, max 166 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:10:05 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-14 03:10:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 3 seconds
Variants: generated 400, build-succeeded 157, build-failed 152, syntax-invalid 66, redundant 25
Fitness: max 0.98(133), min 0.49(2), ave 0.96
Test execution time: sum 13232 ms, max 627 ms, min 57 ms
----------------------------------------------------------------

2023-11-14 03:10:34 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-14 03:11:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 32 seconds
Variants: generated 400, build-succeeded 165, build-failed 142, syntax-invalid 69, redundant 24
Fitness: max 0.98(133), min 0.549(2), ave 0.957
Test execution time: sum 13090 ms, max 184 ms, min 58 ms
----------------------------------------------------------------

2023-11-14 03:11:02 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-14 03:11:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 1 seconds
Variants: generated 400, build-succeeded 171, build-failed 142, syntax-invalid 58, redundant 29
Fitness: max 0.98(138), min 0.157(1), ave 0.956
Test execution time: sum 13694 ms, max 194 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:11:32 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-14 03:12:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 29 seconds
Variants: generated 400, build-succeeded 162, build-failed 135, syntax-invalid 78, redundant 25
Fitness: max 1(1), min 0.49(2), ave 0.947
Test execution time: sum 13017 ms, max 172 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:12:00 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-14 03:12:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 58 seconds
Variants: generated 400, build-succeeded 175, build-failed 138, syntax-invalid 74, redundant 13
Fitness: max 0.98(152), min 0.49(2), ave 0.959
Test execution time: sum 13880 ms, max 177 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:12:29 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-14 03:12:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 28 seconds
Variants: generated 400, build-succeeded 175, build-failed 136, syntax-invalid 63, redundant 26
Fitness: max 1(1), min 0.529(1), ave 0.957
Test execution time: sum 14247 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:12:59 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-14 03:13:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 0 seconds
Variants: generated 400, build-succeeded 188, build-failed 129, syntax-invalid 66, redundant 17
Fitness: max 0.98(157), min 0.314(1), ave 0.944
Test execution time: sum 15905 ms, max 179 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:13:31 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-14 03:14:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 31 seconds
Variants: generated 400, build-succeeded 187, build-failed 132, syntax-invalid 55, redundant 26
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 15637 ms, max 210 ms, min 65 ms
----------------------------------------------------------------

2023-11-14 03:14:02 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-14 03:14:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 1 seconds
Variants: generated 400, build-succeeded 183, build-failed 138, syntax-invalid 60, redundant 19
Fitness: max 0.98(156), min 0.667(1), ave 0.965
Test execution time: sum 15318 ms, max 257 ms, min 65 ms
----------------------------------------------------------------

2023-11-14 03:14:32 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-14 03:15:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 31 seconds
Variants: generated 400, build-succeeded 185, build-failed 150, syntax-invalid 45, redundant 20
Fitness: max 0.98(157), min 0.49(1), ave 0.955
Test execution time: sum 15290 ms, max 193 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:15:02 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-14 03:15:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 4 seconds
Variants: generated 400, build-succeeded 206, build-failed 136, syntax-invalid 38, redundant 20
Fitness: max 0.98(180), min 0.49(2), ave 0.962
Test execution time: sum 17020 ms, max 180 ms, min 59 ms
----------------------------------------------------------------

2023-11-14 03:15:34 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-14 03:16:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 42 seconds
Variants: generated 400, build-succeeded 214, build-failed 130, syntax-invalid 42, redundant 14
Fitness: max 0.98(184), min 0.235(1), ave 0.961
Test execution time: sum 19007 ms, max 721 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:16:13 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-14 03:16:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 18 seconds
Variants: generated 400, build-succeeded 209, build-failed 129, syntax-invalid 43, redundant 19
Fitness: max 1(1), min 0.353(1), ave 0.96
Test execution time: sum 17957 ms, max 680 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:16:49 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-14 03:17:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 54 seconds
Variants: generated 400, build-succeeded 208, build-failed 133, syntax-invalid 42, redundant 17
Fitness: max 0.98(172), min 0.49(1), ave 0.952
Test execution time: sum 17359 ms, max 178 ms, min 49 ms
----------------------------------------------------------------

2023-11-14 03:17:24 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-14 03:17:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 28 seconds
Variants: generated 400, build-succeeded 198, build-failed 125, syntax-invalid 49, redundant 28
Fitness: max 1(1), min 0.49(2), ave 0.952
Test execution time: sum 16633 ms, max 189 ms, min 49 ms
----------------------------------------------------------------

2023-11-14 03:17:59 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-14 03:18:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 4 seconds
Variants: generated 400, build-succeeded 199, build-failed 124, syntax-invalid 56, redundant 21
Fitness: max 1(1), min 0.314(1), ave 0.954
Test execution time: sum 16981 ms, max 182 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:18:34 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-14 03:19:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 40 seconds
Variants: generated 400, build-succeeded 197, build-failed 135, syntax-invalid 50, redundant 18
Fitness: max 1(2), min 0.49(1), ave 0.948
Test execution time: sum 16679 ms, max 178 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:19:11 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-14 03:19:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 14 seconds
Variants: generated 400, build-succeeded 213, build-failed 128, syntax-invalid 44, redundant 15
Fitness: max 1(1), min 0.49(2), ave 0.957
Test execution time: sum 18158 ms, max 184 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:19:45 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-14 03:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 51 seconds
Variants: generated 400, build-succeeded 210, build-failed 127, syntax-invalid 37, redundant 26
Fitness: max 0.98(173), min 0.471(1), ave 0.944
Test execution time: sum 18305 ms, max 687 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:20:22 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-14 03:20:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 28 seconds
Variants: generated 400, build-succeeded 206, build-failed 117, syntax-invalid 47, redundant 30
Fitness: max 0.98(175), min 0.255(1), ave 0.954
Test execution time: sum 17699 ms, max 180 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:20:59 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-14 03:21:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 8 seconds
Variants: generated 400, build-succeeded 205, build-failed 126, syntax-invalid 42, redundant 27
Fitness: max 0.98(176), min 0.549(2), ave 0.963
Test execution time: sum 21357 ms, max 3399 ms, min 58 ms
----------------------------------------------------------------

2023-11-14 03:21:39 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-14 03:22:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 45 seconds
Variants: generated 400, build-succeeded 202, build-failed 130, syntax-invalid 43, redundant 25
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 17829 ms, max 206 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:22:16 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-14 03:22:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 26 seconds
Variants: generated 400, build-succeeded 213, build-failed 121, syntax-invalid 40, redundant 26
Fitness: max 0.98(180), min 0.235(1), ave 0.954
Test execution time: sum 19048 ms, max 191 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:22:57 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-14 03:23:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 6 seconds
Variants: generated 400, build-succeeded 211, build-failed 122, syntax-invalid 39, redundant 28
Fitness: max 0.98(178), min 0.49(2), ave 0.958
Test execution time: sum 18815 ms, max 221 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 03:23:36 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-14 03:24:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 44 seconds
Variants: generated 400, build-succeeded 209, build-failed 139, syntax-invalid 32, redundant 20
Fitness: max 1(1), min 0.353(1), ave 0.957
Test execution time: sum 18465 ms, max 174 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:24:15 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-14 03:24:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 24 seconds
Variants: generated 400, build-succeeded 201, build-failed 130, syntax-invalid 54, redundant 15
Fitness: max 0.98(166), min 0.471(1), ave 0.953
Test execution time: sum 19956 ms, max 1655 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:24:55 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-14 03:25:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 5 seconds
Variants: generated 400, build-succeeded 220, build-failed 122, syntax-invalid 41, redundant 17
Fitness: max 0.98(183), min 0.353(1), ave 0.949
Test execution time: sum 19738 ms, max 188 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:25:36 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-14 03:26:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 46 seconds
Variants: generated 400, build-succeeded 210, build-failed 125, syntax-invalid 43, redundant 22
Fitness: max 0.98(174), min 0.373(1), ave 0.948
Test execution time: sum 19417 ms, max 680 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:26:17 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-14 03:26:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 24 seconds
Variants: generated 400, build-succeeded 186, build-failed 137, syntax-invalid 57, redundant 20
Fitness: max 0.98(167), min 0.49(1), ave 0.964
Test execution time: sum 16953 ms, max 189 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:26:55 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-14 03:27:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 4 seconds
Variants: generated 400, build-succeeded 204, build-failed 128, syntax-invalid 49, redundant 19
Fitness: max 1(1), min 0.353(1), ave 0.95
Test execution time: sum 18794 ms, max 203 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:27:35 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-14 03:28:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 44 seconds
Variants: generated 400, build-succeeded 215, build-failed 125, syntax-invalid 43, redundant 17
Fitness: max 1(1), min 0.549(1), ave 0.957
Test execution time: sum 19647 ms, max 195 ms, min 57 ms
----------------------------------------------------------------

2023-11-14 03:28:15 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-14 03:28:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 22 seconds
Variants: generated 400, build-succeeded 200, build-failed 132, syntax-invalid 51, redundant 17
Fitness: max 0.98(176), min 0.49(1), ave 0.96
Test execution time: sum 18248 ms, max 190 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:28:53 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-14 03:29:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 0 seconds
Variants: generated 400, build-succeeded 215, build-failed 128, syntax-invalid 35, redundant 22
Fitness: max 1(2), min 0.49(4), ave 0.953
Test execution time: sum 19197 ms, max 247 ms, min 50 ms
----------------------------------------------------------------

2023-11-14 03:29:31 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-14 03:30:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 41 seconds
Variants: generated 400, build-succeeded 218, build-failed 131, syntax-invalid 26, redundant 25
Fitness: max 1(2), min 0.275(1), ave 0.952
Test execution time: sum 20242 ms, max 211 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:30:12 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-14 03:31:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 32 seconds
Variants: generated 400, build-succeeded 240, build-failed 109, syntax-invalid 29, redundant 22
Fitness: max 1(3), min 0.216(1), ave 0.952
Test execution time: sum 24515 ms, max 1549 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:31:03 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-14 03:31:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 18 seconds
Variants: generated 400, build-succeeded 219, build-failed 114, syntax-invalid 34, redundant 33
Fitness: max 1(1), min 0.451(1), ave 0.95
Test execution time: sum 20473 ms, max 200 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:31:49 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-14 03:32:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 5 seconds
Variants: generated 400, build-succeeded 226, build-failed 108, syntax-invalid 41, redundant 25
Fitness: max 0.98(193), min 0.431(1), ave 0.955
Test execution time: sum 23107 ms, max 1239 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:32:36 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-14 03:33:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 51 seconds
Variants: generated 400, build-succeeded 220, build-failed 120, syntax-invalid 32, redundant 28
Fitness: max 0.98(196), min 0.255(1), ave 0.955
Test execution time: sum 20942 ms, max 203 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:33:22 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-14 03:34:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 41 seconds
Variants: generated 400, build-succeeded 215, build-failed 127, syntax-invalid 32, redundant 26
Fitness: max 0.98(184), min 0.353(1), ave 0.953
Test execution time: sum 23501 ms, max 1897 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:34:12 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-14 03:35:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 30 seconds
Variants: generated 400, build-succeeded 225, build-failed 120, syntax-invalid 30, redundant 25
Fitness: max 0.98(194), min 0.353(1), ave 0.953
Test execution time: sum 22603 ms, max 252 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:35:01 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-14 03:35:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 17 seconds
Variants: generated 400, build-succeeded 217, build-failed 125, syntax-invalid 31, redundant 27
Fitness: max 0.98(184), min 0.353(2), ave 0.959
Test execution time: sum 22113 ms, max 285 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:35:47 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-14 03:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 13 seconds
Variants: generated 400, build-succeeded 220, build-failed 113, syntax-invalid 31, redundant 36
Fitness: max 0.98(191), min 0.235(1), ave 0.957
Test execution time: sum 23839 ms, max 368 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:36:44 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-14 03:37:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 8 seconds
Variants: generated 400, build-succeeded 223, build-failed 126, syntax-invalid 26, redundant 25
Fitness: max 1(1), min 0.49(2), ave 0.96
Test execution time: sum 26980 ms, max 1724 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:37:38 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-14 03:38:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 3 seconds
Variants: generated 400, build-succeeded 224, build-failed 110, syntax-invalid 38, redundant 28
Fitness: max 1(1), min 0.314(1), ave 0.951
Test execution time: sum 24894 ms, max 446 ms, min 49 ms
----------------------------------------------------------------

2023-11-14 03:38:34 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-14 03:39:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 53 seconds
Variants: generated 400, build-succeeded 209, build-failed 128, syntax-invalid 33, redundant 30
Fitness: max 1(1), min 0.216(1), ave 0.965
Test execution time: sum 21363 ms, max 231 ms, min 51 ms
----------------------------------------------------------------

2023-11-14 03:39:24 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-14 03:40:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 42 seconds
Variants: generated 400, build-succeeded 223, build-failed 119, syntax-invalid 37, redundant 21
Fitness: max 0.98(188), min 0.49(1), ave 0.959
Test execution time: sum 22429 ms, max 293 ms, min 64 ms
----------------------------------------------------------------

2023-11-14 03:40:13 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-14 03:41:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 31 seconds
Variants: generated 400, build-succeeded 210, build-failed 127, syntax-invalid 34, redundant 29
Fitness: max 0.98(179), min 0.49(2), ave 0.961
Test execution time: sum 20896 ms, max 301 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:41:02 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-14 03:41:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 17 seconds
Variants: generated 400, build-succeeded 227, build-failed 118, syntax-invalid 31, redundant 24
Fitness: max 0.98(190), min 0.49(2), ave 0.955
Test execution time: sum 22051 ms, max 245 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:41:48 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-14 03:42:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 6 seconds
Variants: generated 400, build-succeeded 219, build-failed 128, syntax-invalid 30, redundant 23
Fitness: max 1(1), min 0.49(3), ave 0.956
Test execution time: sum 22355 ms, max 294 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:42:36 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-14 03:43:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 53 seconds
Variants: generated 400, build-succeeded 221, build-failed 125, syntax-invalid 34, redundant 20
Fitness: max 0.98(182), min 0.333(1), ave 0.952
Test execution time: sum 22040 ms, max 256 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 03:43:24 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-14 03:44:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 42 seconds
Variants: generated 400, build-succeeded 216, build-failed 128, syntax-invalid 32, redundant 24
Fitness: max 0.98(183), min 0.49(2), ave 0.963
Test execution time: sum 22090 ms, max 302 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:44:12 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-14 03:45:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 31 seconds
Variants: generated 400, build-succeeded 216, build-failed 116, syntax-invalid 45, redundant 23
Fitness: max 0.98(187), min 0.314(1), ave 0.953
Test execution time: sum 21476 ms, max 251 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:45:02 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-14 03:45:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 20 seconds
Variants: generated 400, build-succeeded 231, build-failed 102, syntax-invalid 39, redundant 28
Fitness: max 0.98(192), min 0.353(1), ave 0.954
Test execution time: sum 23760 ms, max 336 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:45:51 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-14 03:46:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 10 seconds
Variants: generated 400, build-succeeded 194, build-failed 132, syntax-invalid 56, redundant 18
Fitness: max 0.98(168), min 0.294(1), ave 0.945
Test execution time: sum 20291 ms, max 428 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:46:41 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-14 03:47:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 3 seconds
Variants: generated 400, build-succeeded 223, build-failed 124, syntax-invalid 37, redundant 16
Fitness: max 0.98(193), min 0.255(1), ave 0.958
Test execution time: sum 23807 ms, max 378 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 03:47:34 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-14 03:48:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 48 seconds
Variants: generated 400, build-succeeded 215, build-failed 109, syntax-invalid 49, redundant 27
Fitness: max 0.98(171), min 0.49(3), ave 0.946
Test execution time: sum 20397 ms, max 189 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:48:18 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-14 03:49:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 34 seconds
Variants: generated 400, build-succeeded 201, build-failed 126, syntax-invalid 48, redundant 25
Fitness: max 0.98(178), min 0.353(1), ave 0.964
Test execution time: sum 19767 ms, max 256 ms, min 57 ms
----------------------------------------------------------------

2023-11-14 03:49:04 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-14 03:49:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 13 seconds
Variants: generated 400, build-succeeded 199, build-failed 138, syntax-invalid 46, redundant 17
Fitness: max 0.98(175), min 0.216(1), ave 0.958
Test execution time: sum 18752 ms, max 244 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 03:49:44 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-14 03:50:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 57 seconds
Variants: generated 400, build-succeeded 233, build-failed 108, syntax-invalid 36, redundant 23
Fitness: max 0.98(205), min 0.294(1), ave 0.961
Test execution time: sum 21956 ms, max 202 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 03:50:28 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-14 03:51:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 44 seconds
Variants: generated 400, build-succeeded 229, build-failed 113, syntax-invalid 43, redundant 15
Fitness: max 1(1), min 0.235(2), ave 0.951
Test execution time: sum 22068 ms, max 264 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:51:15 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-14 03:52:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 34 seconds
Variants: generated 400, build-succeeded 225, build-failed 123, syntax-invalid 34, redundant 18
Fitness: max 0.98(192), min 0.49(5), ave 0.948
Test execution time: sum 23436 ms, max 1595 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:52:04 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-14 03:52:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 22 seconds
Variants: generated 400, build-succeeded 224, build-failed 119, syntax-invalid 32, redundant 25
Fitness: max 1(3), min 0.49(1), ave 0.967
Test execution time: sum 21871 ms, max 244 ms, min 69 ms
----------------------------------------------------------------

2023-11-14 03:52:53 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-14 03:53:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 9 seconds
Variants: generated 400, build-succeeded 216, build-failed 124, syntax-invalid 41, redundant 19
Fitness: max 1(2), min 0.235(1), ave 0.953
Test execution time: sum 20651 ms, max 186 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 03:53:40 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-14 03:54:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 52 seconds
Variants: generated 400, build-succeeded 222, build-failed 108, syntax-invalid 40, redundant 30
Fitness: max 0.98(190), min 0.235(1), ave 0.959
Test execution time: sum 20585 ms, max 202 ms, min 52 ms
----------------------------------------------------------------

2023-11-14 03:54:23 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-14 03:55:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 39 seconds
Variants: generated 400, build-succeeded 218, build-failed 121, syntax-invalid 34, redundant 27
Fitness: max 0.98(195), min 0.451(1), ave 0.968
Test execution time: sum 20848 ms, max 299 ms, min 63 ms
----------------------------------------------------------------

2023-11-14 03:55:10 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-14 03:55:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 26 seconds
Variants: generated 400, build-succeeded 208, build-failed 120, syntax-invalid 45, redundant 27
Fitness: max 0.98(179), min 0.49(2), ave 0.964
Test execution time: sum 21460 ms, max 1181 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 03:55:57 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-14 03:56:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 14 seconds
Variants: generated 400, build-succeeded 216, build-failed 117, syntax-invalid 47, redundant 20
Fitness: max 0.98(180), min 0.235(1), ave 0.948
Test execution time: sum 21543 ms, max 676 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 03:56:44 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-14 03:57:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 3 seconds
Variants: generated 400, build-succeeded 227, build-failed 120, syntax-invalid 36, redundant 17
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 22406 ms, max 282 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 03:57:33 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-14 03:58:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 55 seconds
Variants: generated 400, build-succeeded 217, build-failed 122, syntax-invalid 44, redundant 17
Fitness: max 1(1), min 0.353(1), ave 0.962
Test execution time: sum 22994 ms, max 1309 ms, min 59 ms
----------------------------------------------------------------

2023-11-14 03:58:25 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-14 03:59:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 43 seconds
Variants: generated 400, build-succeeded 220, build-failed 122, syntax-invalid 40, redundant 18
Fitness: max 0.98(190), min 0.353(2), ave 0.96
Test execution time: sum 21067 ms, max 257 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 03:59:14 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-14 03:59:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 seconds
Variants: generated 400, build-succeeded 213, build-failed 107, syntax-invalid 64, redundant 16
Fitness: max 0.98(179), min 0.353(1), ave 0.952
Test execution time: sum 19973 ms, max 218 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 03:59:59 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-14 04:00:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 17 seconds
Variants: generated 400, build-succeeded 216, build-failed 112, syntax-invalid 50, redundant 22
Fitness: max 1(1), min 0.549(2), ave 0.963
Test execution time: sum 21989 ms, max 1037 ms, min 64 ms
----------------------------------------------------------------

2023-11-14 04:00:48 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-14 04:01:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 7 seconds
Variants: generated 400, build-succeeded 231, build-failed 116, syntax-invalid 39, redundant 14
Fitness: max 0.98(194), min 0.471(1), ave 0.959
Test execution time: sum 22400 ms, max 644 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 04:01:38 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-14 04:02:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 0 seconds
Variants: generated 400, build-succeeded 233, build-failed 109, syntax-invalid 38, redundant 20
Fitness: max 1(2), min 0.49(2), ave 0.958
Test execution time: sum 23417 ms, max 617 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 04:02:30 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-14 04:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 48 seconds
Variants: generated 400, build-succeeded 227, build-failed 115, syntax-invalid 42, redundant 16
Fitness: max 0.98(198), min 0.235(1), ave 0.956
Test execution time: sum 21504 ms, max 205 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 04:03:19 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-14 04:04:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 38 seconds
Variants: generated 400, build-succeeded 224, build-failed 123, syntax-invalid 35, redundant 18
Fitness: max 0.98(202), min 0.49(1), ave 0.964
Test execution time: sum 21363 ms, max 194 ms, min 54 ms
----------------------------------------------------------------

2023-11-14 04:04:08 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-14 04:04:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 26 seconds
Variants: generated 400, build-succeeded 230, build-failed 118, syntax-invalid 32, redundant 20
Fitness: max 0.98(204), min 0.49(3), ave 0.96
Test execution time: sum 21976 ms, max 235 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 04:04:56 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-14 04:05:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 15 seconds
Variants: generated 400, build-succeeded 222, build-failed 121, syntax-invalid 38, redundant 19
Fitness: max 0.98(197), min 0.353(1), ave 0.965
Test execution time: sum 22924 ms, max 1279 ms, min 55 ms
----------------------------------------------------------------

2023-11-14 04:05:46 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-14 04:06:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 6 seconds
Variants: generated 400, build-succeeded 228, build-failed 128, syntax-invalid 29, redundant 15
Fitness: max 0.98(202), min 0.49(1), ave 0.964
Test execution time: sum 22077 ms, max 422 ms, min 74 ms
----------------------------------------------------------------

2023-11-14 04:06:37 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-14 04:07:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 54 seconds
Variants: generated 400, build-succeeded 226, build-failed 114, syntax-invalid 41, redundant 19
Fitness: max 1(1), min 0.333(2), ave 0.955
Test execution time: sum 21079 ms, max 188 ms, min 57 ms
----------------------------------------------------------------

2023-11-14 04:07:25 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-14 04:08:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 42 seconds
Variants: generated 400, build-succeeded 218, build-failed 122, syntax-invalid 41, redundant 19
Fitness: max 1(1), min 0.49(2), ave 0.959
Test execution time: sum 20998 ms, max 197 ms, min 61 ms
----------------------------------------------------------------

2023-11-14 04:08:13 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-14 04:09:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 35 seconds
Variants: generated 400, build-succeeded 237, build-failed 111, syntax-invalid 37, redundant 15
Fitness: max 0.98(202), min 0.549(4), ave 0.957
Test execution time: sum 24289 ms, max 1387 ms, min 59 ms
----------------------------------------------------------------

2023-11-14 04:09:06 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-14 04:09:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 27 seconds
Variants: generated 400, build-succeeded 230, build-failed 114, syntax-invalid 34, redundant 22
Fitness: max 0.98(190), min 0.059(1), ave 0.947
Test execution time: sum 23724 ms, max 1313 ms, min 24 ms
----------------------------------------------------------------

2023-11-14 04:09:58 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-14 04:10:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 21 seconds
Variants: generated 400, build-succeeded 234, build-failed 123, syntax-invalid 26, redundant 17
Fitness: max 0.98(216), min 0.49(1), ave 0.963
Test execution time: sum 23683 ms, max 284 ms, min 67 ms
----------------------------------------------------------------

2023-11-14 04:10:52 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-14 04:11:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 16 seconds
Variants: generated 400, build-succeeded 233, build-failed 109, syntax-invalid 40, redundant 18
Fitness: max 1(1), min 0.294(1), ave 0.958
Test execution time: sum 25326 ms, max 1279 ms, min 59 ms
----------------------------------------------------------------

2023-11-14 04:11:47 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-14 04:12:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 18 seconds
Variants: generated 400, build-succeeded 244, build-failed 108, syntax-invalid 39, redundant 9
Fitness: max 1(1), min 0.471(1), ave 0.957
Test execution time: sum 27616 ms, max 1492 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 04:12:48 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-14 04:13:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 18 seconds
Variants: generated 400, build-succeeded 213, build-failed 124, syntax-invalid 49, redundant 14
Fitness: max 0.98(183), min 0.137(1), ave 0.959
Test execution time: sum 24172 ms, max 259 ms, min 75 ms
----------------------------------------------------------------

2023-11-14 04:13:48 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-14 04:14:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 16 seconds
Variants: generated 400, build-succeeded 209, build-failed 130, syntax-invalid 45, redundant 16
Fitness: max 1(1), min 0.235(1), ave 0.958
Test execution time: sum 24787 ms, max 927 ms, min 64 ms
----------------------------------------------------------------

2023-11-14 04:14:47 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-14 04:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 17 seconds
Variants: generated 400, build-succeeded 236, build-failed 103, syntax-invalid 32, redundant 29
Fitness: max 1(1), min 0.49(3), ave 0.956
Test execution time: sum 27938 ms, max 1609 ms, min 60 ms
----------------------------------------------------------------

2023-11-14 04:15:48 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-14 04:16:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 17 seconds
Variants: generated 400, build-succeeded 224, build-failed 130, syntax-invalid 28, redundant 18
Fitness: max 1(1), min 0.549(1), ave 0.966
Test execution time: sum 25024 ms, max 257 ms, min 73 ms
----------------------------------------------------------------

2023-11-14 04:16:48 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-14 04:17:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 20 seconds
Variants: generated 400, build-succeeded 223, build-failed 119, syntax-invalid 39, redundant 19
Fitness: max 0.98(190), min 0.49(1), ave 0.961
Test execution time: sum 26851 ms, max 1346 ms, min 58 ms
----------------------------------------------------------------

2023-11-14 04:17:51 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-14 04:18:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 24 seconds
Variants: generated 400, build-succeeded 238, build-failed 111, syntax-invalid 33, redundant 18
Fitness: max 0.98(204), min 0.49(4), ave 0.956
Test execution time: sum 26608 ms, max 393 ms, min 59 ms
----------------------------------------------------------------

2023-11-14 04:18:55 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-14 04:19:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 28 seconds
Variants: generated 400, build-succeeded 228, build-failed 114, syntax-invalid 34, redundant 24
Fitness: max 0.98(203), min 0.49(3), ave 0.961
Test execution time: sum 28140 ms, max 1410 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 04:19:59 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-14 04:20:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 28 seconds
Variants: generated 400, build-succeeded 237, build-failed 113, syntax-invalid 33, redundant 17
Fitness: max 0.98(205), min 0.255(1), ave 0.957
Test execution time: sum 26519 ms, max 430 ms, min 56 ms
----------------------------------------------------------------

2023-11-14 04:20:58 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-14 04:21:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 23 seconds
Variants: generated 400, build-succeeded 222, build-failed 118, syntax-invalid 39, redundant 21
Fitness: max 0.98(200), min 0.235(1), ave 0.964
Test execution time: sum 25332 ms, max 1576 ms, min 61 ms
----------------------------------------------------------------

2023-11-14 04:21:54 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-14 04:22:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 18 seconds
Variants: generated 400, build-succeeded 221, build-failed 122, syntax-invalid 41, redundant 16
Fitness: max 0.98(194), min 0.137(1), ave 0.959
Test execution time: sum 24204 ms, max 1189 ms, min 53 ms
----------------------------------------------------------------

2023-11-14 04:22:48 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-14 04:23:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 12 seconds
Variants: generated 400, build-succeeded 215, build-failed 112, syntax-invalid 53, redundant 20
Fitness: max 1(2), min 0.49(2), ave 0.962
Test execution time: sum 22452 ms, max 374 ms, min 64 ms
----------------------------------------------------------------

2023-11-14 04:23:43 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-14 04:24:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 13 seconds
Variants: generated 400, build-succeeded 222, build-failed 120, syntax-invalid 36, redundant 22
Fitness: max 0.98(199), min 0.353(2), ave 0.959
Test execution time: sum 24949 ms, max 1551 ms, min 59 ms
----------------------------------------------------------------

2023-11-14 04:24:43 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-14 04:25:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 12 seconds
Variants: generated 400, build-succeeded 214, build-failed 122, syntax-invalid 42, redundant 22
Fitness: max 0.98(190), min 0.549(1), ave 0.967
Test execution time: sum 23692 ms, max 448 ms, min 64 ms
----------------------------------------------------------------

2023-11-14 04:25:43 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-14 04:26:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 8 seconds
Variants: generated 400, build-succeeded 228, build-failed 111, syntax-invalid 38, redundant 23
Fitness: max 1(1), min 0.157(1), ave 0.952
Test execution time: sum 23580 ms, max 276 ms, min 61 ms
----------------------------------------------------------------

2023-11-14 04:26:39 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-14 04:27:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 9 seconds
Variants: generated 400, build-succeeded 229, build-failed 107, syntax-invalid 48, redundant 16
Fitness: max 0.98(195), min 0.49(3), ave 0.954
Test execution time: sum 26582 ms, max 1569 ms, min 58 ms
----------------------------------------------------------------

2023-11-14 04:27:40 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-14 04:28:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 0 seconds
Variants: generated 400, build-succeeded 208, build-failed 123, syntax-invalid 44, redundant 25
Fitness: max 1(1), min 0.549(2), ave 0.96
Test execution time: sum 21343 ms, max 286 ms, min 68 ms
----------------------------------------------------------------

2023-11-14 04:28:31 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-14 04:29:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 57 seconds
Variants: generated 400, build-succeeded 213, build-failed 117, syntax-invalid 49, redundant 21
Fitness: max 0.98(187), min 0.549(1), ave 0.968
Test execution time: sum 25522 ms, max 1677 ms, min 62 ms
----------------------------------------------------------------

2023-11-14 04:29:28 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-14 04:30:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 56 seconds
Variants: generated 400, build-succeeded 217, build-failed 107, syntax-invalid 57, redundant 19
Fitness: max 0.98(185), min 0.49(2), ave 0.96
Test execution time: sum 25218 ms, max 1540 ms, min 57 ms
----------------------------------------------------------------

2023-11-14 04:30:27 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-14 04:31:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 55 seconds
Variants: generated 400, build-succeeded 214, build-failed 119, syntax-invalid 47, redundant 20
Fitness: max 1(1), min 0.49(4), ave 0.959
Test execution time: sum 23547 ms, max 244 ms, min 60 ms
----------------------------------------------------------------

2023-11-14 04:31:26 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-14 04:32:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 0 seconds
Variants: generated 400, build-succeeded 236, build-failed 108, syntax-invalid 31, redundant 25
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 28067 ms, max 1625 ms, min 69 ms
----------------------------------------------------------------

2023-11-14 04:32:31 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-14 04:32:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 24 seconds
Variants: generated 179, build-succeeded 69, build-failed 87, syntax-invalid 7, redundant 16
Fitness: max 1(2), min 0.353(1), ave 0.909
Test execution time: sum 8909 ms, max 1476 ms, min 59 ms
----------------------------------------------------------------

2023-11-14 04:32:55 [main] [INFO]  KGenProgMain - GA stopped
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v117)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v117)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v117)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v117)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v117)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v117)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v117)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v644)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v644)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v644)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1052,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v644)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v644)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v644)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v644)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1030)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1030)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1030)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -967,9 +967,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +976,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1030)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1030)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1030)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1030)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1038)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1038)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1038)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -978,7 +978,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1038)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1038)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1038)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1038)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1144)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1144)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1144)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1144)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1144)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1144)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1144)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1344)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1344)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1344)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1344)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1344)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1344)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1344)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -951,7 +951,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1419)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1419)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1419)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -978,8 +978,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (pArray == null || pArray.length == 0) {
             }
         }
         return len;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1419)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1419)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1419)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1419)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1453)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1453)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1453)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -826,7 +827,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1453)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1453)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1453)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1453)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1511)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1511)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1511)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -978,7 +979,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1511)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1511)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1511)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1511)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1516)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1516)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1516)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1516)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1516)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1516)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1516)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -952,6 +952,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1987)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1987)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1987)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1987)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1987)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1987)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v1987)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2235)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2235)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2235)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1052,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2235)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2235)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2235)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2235)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2243)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2243)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2243)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2243)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2243)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2243)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2243)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2275)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2275)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2275)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -951,7 +951,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2275)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2275)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2275)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:55 [main] [INFO]  PatchLogExporter - patch (v2275)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,11 +407,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,7 +971,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2355)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2355)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2355)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -436,7 +436,11 @@
      */
     void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
-            return;
+            {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+				currentLinePos = 0;
+			}
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2355)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2355)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2355)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2355)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2370)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2370)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2370)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2370)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2370)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2370)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2370)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2381)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2381)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2381)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,9 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2381)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2381)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2381)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2381)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2608)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2647)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2647)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2647)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -951,7 +952,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2647)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2647)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2647)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2647)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -826,7 +825,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2685)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2685)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2685)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2685)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2685)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2685)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2685)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2732)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2732)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2732)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +492,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2732)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2732)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2732)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2732)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2749)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2749)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2749)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -442,7 +443,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2749)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2749)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2749)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v2749)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3042)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3042)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3042)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3042)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3042)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3042)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3042)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3057)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3057)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3057)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3057)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3057)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3057)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3057)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3097)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3097)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3097)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -952,6 +953,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3097)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3097)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3097)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3097)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3172)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3172)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3172)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -951,7 +952,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3172)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3172)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3172)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3172)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3267)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3267)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3267)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -951,7 +952,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3267)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3267)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3267)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3267)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3311)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3311)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3311)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -951,7 +952,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3311)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3311)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3311)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3311)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3415)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3415)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3415)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3415)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3415)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3415)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3415)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3518)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3518)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3518)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -826,7 +825,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3518)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3518)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3518)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3518)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3579)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3579)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3579)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3579)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3579)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3579)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3579)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3585)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3585)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3585)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            len--;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -951,7 +952,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3585)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3585)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3585)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3585)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -491,7 +490,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3878)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3953)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3953)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3953)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -951,7 +950,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3953)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3953)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3953)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3953)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3976)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3976)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3976)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3976)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3976)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3976)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v3976)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4224)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4224)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4224)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -951,7 +952,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4224)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4224)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4224)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4224)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4293)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4293)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4293)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4293)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4293)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4293)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4293)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4616)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4616)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4616)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -471,7 +471,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1056,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4616)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4616)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4616)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v4616)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6512)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6512)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6512)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -471,7 +470,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +496,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,9 +971,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6512)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6512)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6512)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6512)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6929)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6929)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6929)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,9 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            long mod = len % 4;
+			int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -967,13 +969,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1051,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6929)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6929)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6929)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v6929)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7294)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7294)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7294)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -493,7 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -826,7 +828,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            long mod = len % 4;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -951,7 +954,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7294)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7294)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7294)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7294)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7671)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7671)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7671)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -442,6 +441,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7671)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7671)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7671)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7671)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7694)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7694)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7694)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -472,6 +471,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				eof = false;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +953,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7694)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7694)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7694)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v7694)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v9214)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v9214)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v9214)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +453,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -471,7 +473,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +499,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v9214)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v9214)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v9214)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v9214)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v11324)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v11324)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v11324)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +469,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -826,7 +828,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -967,21 +970,13 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
-            boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
-            }
-        }
+        if (chunkSize > 0)
+			return len;
         return len;
     }
 
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v11324)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v11324)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v11324)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v11324)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12095)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12095)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12095)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +451,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -491,7 +491,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -529,6 +530,7 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -826,7 +828,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12095)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12095)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12095)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12095)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12862)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12862)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12862)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -451,8 +453,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        byte[] buf = new byte[pos - readPos];
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -491,9 +494,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -951,7 +956,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -975,7 +981,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if (pArray == null || pArray.length == 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12862)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12862)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12862)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v12862)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v14942)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v14942)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v14942)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -442,6 +441,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +472,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +498,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +958,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1059,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v14942)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v14942)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v14942)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v14942)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v15736)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v15736)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v15736)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,7 +443,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+			resizeBuffer();
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -951,7 +953,9 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1056,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v15736)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v15736)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v15736)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v15736)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16167)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16167)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16167)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,11 +407,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,7 +440,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+			resizeBuffer();
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -951,7 +950,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16167)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16167)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16167)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16167)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16430)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16430)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16430)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +496,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -826,7 +830,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -952,6 +957,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16430)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16430)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16430)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16430)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16559)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16559)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16559)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +454,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -471,7 +474,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +500,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16559)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16559)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16559)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16559)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +473,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -967,9 +973,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v18554)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v18554)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v18554)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -411,7 +410,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,6 +440,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +492,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -952,6 +954,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -972,7 +975,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v18554)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v18554)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v18554)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v18554)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v19653)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v19653)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v19653)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +456,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -979,7 +984,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v19653)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v19653)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v19653)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v19653)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v21696)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v21696)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v21696)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,10 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +456,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -491,9 +496,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,7 +959,9 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
-        return buf;
+		resizeBuffer();
+        readResults(buf, 0, buf.length);
+		return buf;
     }
 
     /**
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v21696)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v21696)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v21696)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v21696)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22016)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22016)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22016)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -442,7 +441,10 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -967,9 +969,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +978,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return len;
             }
         }
         return len;
@@ -1053,7 +1052,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22016)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22016)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22016)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22016)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22968)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22968)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22968)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -442,6 +441,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -951,7 +951,11 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
+		resizeBuffer();
+		resizeBuffer();
+		resizeBuffer();
         return buf;
     }
 
@@ -967,13 +971,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22968)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22968)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22968)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22968)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22998)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22998)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22998)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -491,9 +491,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +954,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22998)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22998)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22998)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v22998)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23317)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23317)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23317)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +494,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +957,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1039,6 +1045,7 @@
         if ((bigInt.bitLength() % 8) == 0) {
             startSrc = 1;
             len--;
+			long mod = len % 4;
         }
         int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec
         byte[] resizedBytes = new byte[bitlen / 8];
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23317)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23317)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23317)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23317)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23349)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23349)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23349)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -442,6 +441,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +454,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int startSrc = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -470,8 +473,11 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -951,7 +957,9 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +987,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return -1;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23349)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23349)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23349)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23349)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23620)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23620)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23620)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +494,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -952,6 +956,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,11 +978,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1053,7 +1056,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23620)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23620)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23620)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23620)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +494,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -952,6 +956,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -967,9 +972,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23673)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +490,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -529,6 +530,8 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,8 +1054,8 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
-        currentLinePos = 0;
+        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v23675)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v24030)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v24030)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v24030)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -442,6 +441,11 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +475,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +501,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v24030)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v24030)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v24030)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v24030)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,6 +441,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +493,9 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -967,9 +971,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1053,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27247)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27247)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27247)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -442,6 +441,11 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -952,6 +956,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
+		resizeBuffer();
         return buf;
     }
 
@@ -977,9 +983,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27247)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27247)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27247)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27247)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +473,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -491,9 +497,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +960,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -967,13 +976,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +494,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +957,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1039,6 +1044,7 @@
         if ((bigInt.bitLength() % 8) == 0) {
             startSrc = 1;
             len--;
+			long mod = len % 4;
         }
         int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec
         byte[] resizedBytes = new byte[bitlen / 8];
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v29262)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v33647)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v33647)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v33647)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,7 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +472,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -491,9 +496,43 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -529,6 +568,7 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -952,6 +992,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -967,9 +1008,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +1017,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v33647)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v33647)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v33647)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v33647)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,10 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +495,41 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +1017,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1089,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34444)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +490,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -529,6 +536,7 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,7 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +492,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +970,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1039,6 +1038,7 @@
         if ((bigInt.bitLength() % 8) == 0) {
             startSrc = 1;
             len--;
+			long mod = len % 4;
         }
         int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec
         byte[] resizedBytes = new byte[bitlen / 8];
@@ -1052,8 +1052,8 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
-        currentLinePos = 0;
+        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        eof = true;
         modulus = 0;
         eof = false;
     }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34577)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34870)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34870)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34870)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +443,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +492,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -529,6 +535,8 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34870)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34870)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34870)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34870)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34915)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34915)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34915)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +444,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -492,8 +496,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +960,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +988,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1039,6 +1047,7 @@
         if ((bigInt.bitLength() % 8) == 0) {
             startSrc = 1;
             len--;
+			long mod = len % 4;
         }
         int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec
         byte[] resizedBytes = new byte[bitlen / 8];
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34915)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34915)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34915)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v34915)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v36924)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v36924)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v36924)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +444,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +496,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +960,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v36924)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v36924)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v36924)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v36924)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v37363)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v37363)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v37363)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,9 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,8 +494,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -529,6 +536,7 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v37363)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v37363)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v37363)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v37363)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v38482)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v38482)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v38482)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +471,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -491,9 +495,31 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+                        b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1005,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v38482)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v38482)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v38482)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v38482)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39309)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39309)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39309)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,6 +442,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +493,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39309)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39309)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39309)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39309)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39389)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39389)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39389)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +494,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +982,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39389)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39389)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39389)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v39389)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +493,29 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+                        b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -529,6 +551,8 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -952,6 +976,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +1004,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v41609)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +495,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v42116)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v43732)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v43732)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v43732)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +443,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +472,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -491,9 +496,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -529,6 +539,8 @@
         }
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v43732)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v43732)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v43732)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v43732)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,11 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +457,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						String sep = StringUtils.newStringUtf8(lineSeparator);
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -491,9 +497,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +964,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +986,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44034)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44999)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44999)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44999)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,6 +442,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +494,16 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44999)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44999)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44999)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v44999)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45217)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45217)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45217)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -452,6 +453,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						String sep = StringUtils.newStringUtf8(lineSeparator);
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -491,9 +493,53 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						x = x >> 1;
+						readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+                        b += 256;
+						b += 256;
+						b += 256;
+						b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1019,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45217)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45217)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45217)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45217)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45622)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45622)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45622)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +411,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -442,6 +443,10 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +496,45 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -978,7 +1019,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45622)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45622)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45622)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v45622)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48464)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48464)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48464)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,6 +442,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +454,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						String sep = StringUtils.newStringUtf8(lineSeparator);
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -491,7 +494,25 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +994,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48464)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48464)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48464)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48464)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48623)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48623)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48623)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -442,6 +442,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -492,8 +495,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +981,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            return len;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48623)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48623)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48623)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v48623)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -452,6 +456,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						String sep = StringUtils.newStringUtf8(lineSeparator);
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -491,9 +496,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			{
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v49781)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v50587)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v50587)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v50587)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,10 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +496,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +962,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v50587)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v50587)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v50587)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v50587)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +411,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -442,6 +443,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -492,8 +494,16 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +962,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v51765)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52040)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52040)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52040)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,6 +443,12 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -492,8 +499,14 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +965,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -973,7 +987,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52040)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52040)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52040)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52040)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -442,6 +441,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,11 +473,15 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
-                if (buffer == null || buffer.length - pos < encodeSize) {
+                if (readPos >= pos) {
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
@@ -491,9 +497,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						b += 256;
+						pos += lineSeparator.length;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +993,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,14 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52402)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,6 +442,9 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,11 +474,15 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
-                if (buffer == null || buffer.length - pos < encodeSize) {
+                if (readPos >= pos) {
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
@@ -491,9 +498,16 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        readPos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +987,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,21 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            {
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			{
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) (x & MASK_8BITS);
+			}
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-14 04:32:56 [main] [INFO]  PatchLogExporter - patch (v52579)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-14 04:32:56 [main] [INFO]  KGenProgMain - Summary
Reached generation = 133
Generated variants = 52579
Syntax valid variants = 47073
Build succeeded variants = 26563
Time elapsed = 1 hours 33 minutes 25 seconds
Exit status = SUCCESS
